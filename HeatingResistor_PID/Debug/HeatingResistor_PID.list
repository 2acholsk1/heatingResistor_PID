
HeatingResistor_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c248  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  0800c448  0800c448  0001c448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c914  0800c914  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c914  0800c914  0001c914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c91c  0800c91c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c91c  0800c91c  0001c91c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c920  0800c920  0001c920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800c924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000728  200001e8  0800cb0c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000910  0800cb0c  00020910  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000195b3  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f99  00000000  00000000  000397c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  0003c768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c8  00000000  00000000  0003dc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029efa  00000000  00000000  0003f030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019808  00000000  00000000  00068f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101603  00000000  00000000  00082732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00183d35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e28  00000000  00000000  00183d88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e8 	.word	0x200001e8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c430 	.word	0x0800c430

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001ec 	.word	0x200001ec
 800023c:	0800c430 	.word	0x0800c430

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_ldivmod>:
 8000668:	b97b      	cbnz	r3, 800068a <__aeabi_ldivmod+0x22>
 800066a:	b972      	cbnz	r2, 800068a <__aeabi_ldivmod+0x22>
 800066c:	2900      	cmp	r1, #0
 800066e:	bfbe      	ittt	lt
 8000670:	2000      	movlt	r0, #0
 8000672:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000676:	e006      	blt.n	8000686 <__aeabi_ldivmod+0x1e>
 8000678:	bf08      	it	eq
 800067a:	2800      	cmpeq	r0, #0
 800067c:	bf1c      	itt	ne
 800067e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000682:	f04f 30ff 	movne.w	r0, #4294967295
 8000686:	f000 b9f7 	b.w	8000a78 <__aeabi_idiv0>
 800068a:	f1ad 0c08 	sub.w	ip, sp, #8
 800068e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000692:	2900      	cmp	r1, #0
 8000694:	db09      	blt.n	80006aa <__aeabi_ldivmod+0x42>
 8000696:	2b00      	cmp	r3, #0
 8000698:	db1a      	blt.n	80006d0 <__aeabi_ldivmod+0x68>
 800069a:	f000 f885 	bl	80007a8 <__udivmoddi4>
 800069e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006a6:	b004      	add	sp, #16
 80006a8:	4770      	bx	lr
 80006aa:	4240      	negs	r0, r0
 80006ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db1b      	blt.n	80006ec <__aeabi_ldivmod+0x84>
 80006b4:	f000 f878 	bl	80007a8 <__udivmoddi4>
 80006b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c0:	b004      	add	sp, #16
 80006c2:	4240      	negs	r0, r0
 80006c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c8:	4252      	negs	r2, r2
 80006ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006ce:	4770      	bx	lr
 80006d0:	4252      	negs	r2, r2
 80006d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006d6:	f000 f867 	bl	80007a8 <__udivmoddi4>
 80006da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e2:	b004      	add	sp, #16
 80006e4:	4240      	negs	r0, r0
 80006e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ea:	4770      	bx	lr
 80006ec:	4252      	negs	r2, r2
 80006ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006f2:	f000 f859 	bl	80007a8 <__udivmoddi4>
 80006f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006fe:	b004      	add	sp, #16
 8000700:	4252      	negs	r2, r2
 8000702:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000706:	4770      	bx	lr

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af04      	add	r7, sp, #16
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <BMP280_Read8+0x38>)
 8000a8c:	6818      	ldr	r0, [r3, #0]
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	230a      	movs	r3, #10
 8000a94:	9302      	str	r3, [sp, #8]
 8000a96:	2301      	movs	r3, #1
 8000a98:	9301      	str	r3, [sp, #4]
 8000a9a:	f107 030f 	add.w	r3, r7, #15
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	21ec      	movs	r1, #236	; 0xec
 8000aa4:	f002 fa4a 	bl	8002f3c <HAL_I2C_Mem_Read>
  return tmp;
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000204 	.word	0x20000204

08000ab8 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af04      	add	r7, sp, #16
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <BMP280_Read16+0x40>)
 8000ac4:	6818      	ldr	r0, [r3, #0]
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	b29a      	uxth	r2, r3
 8000aca:	230a      	movs	r3, #10
 8000acc:	9302      	str	r3, [sp, #8]
 8000ace:	2302      	movs	r3, #2
 8000ad0:	9301      	str	r3, [sp, #4]
 8000ad2:	f107 030c 	add.w	r3, r7, #12
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	2301      	movs	r3, #1
 8000ada:	21ec      	movs	r1, #236	; 0xec
 8000adc:	f002 fa2e 	bl	8002f3c <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8000ae0:	7b3b      	ldrb	r3, [r7, #12]
 8000ae2:	021b      	lsls	r3, r3, #8
 8000ae4:	b21a      	sxth	r2, r3
 8000ae6:	7b7b      	ldrb	r3, [r7, #13]
 8000ae8:	b21b      	sxth	r3, r3
 8000aea:	4313      	orrs	r3, r2
 8000aec:	b21b      	sxth	r3, r3
 8000aee:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000204 	.word	0x20000204

08000afc <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ffd5 	bl	8000ab8 <BMP280_Read16>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8000b12:	89fb      	ldrh	r3, [r7, #14]
 8000b14:	0a1b      	lsrs	r3, r3, #8
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	b21a      	sxth	r2, r3
 8000b1a:	89fb      	ldrh	r3, [r7, #14]
 8000b1c:	021b      	lsls	r3, r3, #8
 8000b1e:	b21b      	sxth	r3, r3
 8000b20:	4313      	orrs	r3, r2
 8000b22:	b21b      	sxth	r3, r3
 8000b24:	b29b      	uxth	r3, r3
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af04      	add	r7, sp, #16
 8000b36:	4603      	mov	r3, r0
 8000b38:	460a      	mov	r2, r1
 8000b3a:	71fb      	strb	r3, [r7, #7]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <BMP280_Write8+0x34>)
 8000b42:	6818      	ldr	r0, [r3, #0]
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	230a      	movs	r3, #10
 8000b4a:	9302      	str	r3, [sp, #8]
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	9301      	str	r3, [sp, #4]
 8000b50:	1dbb      	adds	r3, r7, #6
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	2301      	movs	r3, #1
 8000b56:	21ec      	movs	r1, #236	; 0xec
 8000b58:	f002 f8dc 	bl	8002d14 <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000204 	.word	0x20000204

08000b68 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af04      	add	r7, sp, #16
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <BMP280_Read24+0x40>)
 8000b74:	6818      	ldr	r0, [r3, #0]
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	230a      	movs	r3, #10
 8000b7c:	9302      	str	r3, [sp, #8]
 8000b7e:	2303      	movs	r3, #3
 8000b80:	9301      	str	r3, [sp, #4]
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	2301      	movs	r3, #1
 8000b8a:	21ec      	movs	r1, #236	; 0xec
 8000b8c:	f002 f9d6 	bl	8002f3c <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8000b90:	7b3b      	ldrb	r3, [r7, #12]
 8000b92:	041a      	lsls	r2, r3, #16
 8000b94:	7b7b      	ldrb	r3, [r7, #13]
 8000b96:	021b      	lsls	r3, r3, #8
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	7bba      	ldrb	r2, [r7, #14]
 8000b9c:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000204 	.word	0x20000204

08000bac <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	4608      	mov	r0, r1
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4603      	mov	r3, r0
 8000bbc:	70fb      	strb	r3, [r7, #3]
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	70bb      	strb	r3, [r7, #2]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 8000bc6:	4a48      	ldr	r2, [pc, #288]	; (8000ce8 <BMP280_Init+0x13c>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 8000bcc:	787b      	ldrb	r3, [r7, #1]
 8000bce:	2b03      	cmp	r3, #3
 8000bd0:	d901      	bls.n	8000bd6 <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 8000bd6:	4a45      	ldr	r2, [pc, #276]	; (8000cec <BMP280_Init+0x140>)
 8000bd8:	787b      	ldrb	r3, [r7, #1]
 8000bda:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 8000bdc:	787b      	ldrb	r3, [r7, #1]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d101      	bne.n	8000be6 <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 8000be6:	78fb      	ldrb	r3, [r7, #3]
 8000be8:	2b05      	cmp	r3, #5
 8000bea:	d901      	bls.n	8000bf0 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 8000bec:	2305      	movs	r3, #5
 8000bee:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 8000bf0:	4a3f      	ldr	r2, [pc, #252]	; (8000cf0 <BMP280_Init+0x144>)
 8000bf2:	78fb      	ldrb	r3, [r7, #3]
 8000bf4:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 8000bf6:	78bb      	ldrb	r3, [r7, #2]
 8000bf8:	2b05      	cmp	r3, #5
 8000bfa:	d901      	bls.n	8000c00 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 8000bfc:	2305      	movs	r3, #5
 8000bfe:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 8000c00:	4a3c      	ldr	r2, [pc, #240]	; (8000cf4 <BMP280_Init+0x148>)
 8000c02:	78bb      	ldrb	r3, [r7, #2]
 8000c04:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 8000c06:	bf00      	nop
 8000c08:	20d0      	movs	r0, #208	; 0xd0
 8000c0a:	f7ff ff37 	bl	8000a7c <BMP280_Read8>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b58      	cmp	r3, #88	; 0x58
 8000c12:	d1f9      	bne.n	8000c08 <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 8000c14:	2088      	movs	r0, #136	; 0x88
 8000c16:	f7ff ff71 	bl	8000afc <BMP280_Read16LE>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b36      	ldr	r3, [pc, #216]	; (8000cf8 <BMP280_Init+0x14c>)
 8000c20:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8000c22:	208a      	movs	r0, #138	; 0x8a
 8000c24:	f7ff ff6a 	bl	8000afc <BMP280_Read16LE>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	b21a      	sxth	r2, r3
 8000c2c:	4b33      	ldr	r3, [pc, #204]	; (8000cfc <BMP280_Init+0x150>)
 8000c2e:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8000c30:	208c      	movs	r0, #140	; 0x8c
 8000c32:	f7ff ff63 	bl	8000afc <BMP280_Read16LE>
 8000c36:	4603      	mov	r3, r0
 8000c38:	b21a      	sxth	r2, r3
 8000c3a:	4b31      	ldr	r3, [pc, #196]	; (8000d00 <BMP280_Init+0x154>)
 8000c3c:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 8000c3e:	208e      	movs	r0, #142	; 0x8e
 8000c40:	f7ff ff5c 	bl	8000afc <BMP280_Read16LE>
 8000c44:	4603      	mov	r3, r0
 8000c46:	461a      	mov	r2, r3
 8000c48:	4b2e      	ldr	r3, [pc, #184]	; (8000d04 <BMP280_Init+0x158>)
 8000c4a:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 8000c4c:	2090      	movs	r0, #144	; 0x90
 8000c4e:	f7ff ff55 	bl	8000afc <BMP280_Read16LE>
 8000c52:	4603      	mov	r3, r0
 8000c54:	b21a      	sxth	r2, r3
 8000c56:	4b2c      	ldr	r3, [pc, #176]	; (8000d08 <BMP280_Init+0x15c>)
 8000c58:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 8000c5a:	2092      	movs	r0, #146	; 0x92
 8000c5c:	f7ff ff4e 	bl	8000afc <BMP280_Read16LE>
 8000c60:	4603      	mov	r3, r0
 8000c62:	b21a      	sxth	r2, r3
 8000c64:	4b29      	ldr	r3, [pc, #164]	; (8000d0c <BMP280_Init+0x160>)
 8000c66:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 8000c68:	2094      	movs	r0, #148	; 0x94
 8000c6a:	f7ff ff47 	bl	8000afc <BMP280_Read16LE>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	b21a      	sxth	r2, r3
 8000c72:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <BMP280_Init+0x164>)
 8000c74:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 8000c76:	2096      	movs	r0, #150	; 0x96
 8000c78:	f7ff ff40 	bl	8000afc <BMP280_Read16LE>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	b21a      	sxth	r2, r3
 8000c80:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <BMP280_Init+0x168>)
 8000c82:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8000c84:	2098      	movs	r0, #152	; 0x98
 8000c86:	f7ff ff39 	bl	8000afc <BMP280_Read16LE>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	b21a      	sxth	r2, r3
 8000c8e:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <BMP280_Init+0x16c>)
 8000c90:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8000c92:	209a      	movs	r0, #154	; 0x9a
 8000c94:	f7ff ff32 	bl	8000afc <BMP280_Read16LE>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	b21a      	sxth	r2, r3
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <BMP280_Init+0x170>)
 8000c9e:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 8000ca0:	209c      	movs	r0, #156	; 0x9c
 8000ca2:	f7ff ff2b 	bl	8000afc <BMP280_Read16LE>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	b21a      	sxth	r2, r3
 8000caa:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <BMP280_Init+0x174>)
 8000cac:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 8000cae:	209e      	movs	r0, #158	; 0x9e
 8000cb0:	f7ff ff24 	bl	8000afc <BMP280_Read16LE>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	b21a      	sxth	r2, r3
 8000cb8:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <BMP280_Init+0x178>)
 8000cba:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 8000cbc:	78fb      	ldrb	r3, [r7, #3]
 8000cbe:	015b      	lsls	r3, r3, #5
 8000cc0:	b25a      	sxtb	r2, r3
 8000cc2:	78bb      	ldrb	r3, [r7, #2]
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	b25b      	sxtb	r3, r3
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	b25a      	sxtb	r2, r3
 8000ccc:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	b25b      	sxtb	r3, r3
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	20f4      	movs	r0, #244	; 0xf4
 8000cda:	f7ff ff29 	bl	8000b30 <BMP280_Write8>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000204 	.word	0x20000204
 8000cec:	2000020a 	.word	0x2000020a
 8000cf0:	20000208 	.word	0x20000208
 8000cf4:	20000209 	.word	0x20000209
 8000cf8:	20000220 	.word	0x20000220
 8000cfc:	2000020c 	.word	0x2000020c
 8000d00:	2000020e 	.word	0x2000020e
 8000d04:	20000222 	.word	0x20000222
 8000d08:	20000210 	.word	0x20000210
 8000d0c:	20000212 	.word	0x20000212
 8000d10:	20000214 	.word	0x20000214
 8000d14:	20000216 	.word	0x20000216
 8000d18:	20000218 	.word	0x20000218
 8000d1c:	2000021a 	.word	0x2000021a
 8000d20:	2000021c 	.word	0x2000021c
 8000d24:	2000021e 	.word	0x2000021e

08000d28 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 8000d2e:	4b3d      	ldr	r3, [pc, #244]	; (8000e24 <BMP280_ReadTemperature+0xfc>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d16d      	bne.n	8000e12 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 8000d36:	20f4      	movs	r0, #244	; 0xf4
 8000d38:	f7ff fea0 	bl	8000a7c <BMP280_Read8>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8000d40:	7dfb      	ldrb	r3, [r7, #23]
 8000d42:	f023 0303 	bic.w	r3, r3, #3
 8000d46:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 8000d48:	7dfb      	ldrb	r3, [r7, #23]
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8000d50:	7dfb      	ldrb	r3, [r7, #23]
 8000d52:	4619      	mov	r1, r3
 8000d54:	20f4      	movs	r0, #244	; 0xf4
 8000d56:	f7ff feeb 	bl	8000b30 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 8000d5a:	20f4      	movs	r0, #244	; 0xf4
 8000d5c:	f7ff fe8e 	bl	8000a7c <BMP280_Read8>
 8000d60:	4603      	mov	r3, r0
 8000d62:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8000d64:	7dbb      	ldrb	r3, [r7, #22]
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8000d6c:	7dbb      	ldrb	r3, [r7, #22]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d14f      	bne.n	8000e12 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8000d72:	20f4      	movs	r0, #244	; 0xf4
 8000d74:	f7ff fe82 	bl	8000a7c <BMP280_Read8>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8000d7c:	7dbb      	ldrb	r3, [r7, #22]
 8000d7e:	f003 0303 	and.w	r3, r3, #3
 8000d82:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8000d84:	7dbb      	ldrb	r3, [r7, #22]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d000      	beq.n	8000d8c <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 8000d8a:	e7f2      	b.n	8000d72 <BMP280_ReadTemperature+0x4a>
				  break;
 8000d8c:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 8000d8e:	20fa      	movs	r0, #250	; 0xfa
 8000d90:	f7ff feea 	bl	8000b68 <BMP280_Read24>
 8000d94:	4603      	mov	r3, r0
 8000d96:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	111b      	asrs	r3, r3, #4
 8000d9c:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	10da      	asrs	r2, r3, #3
 8000da2:	4b21      	ldr	r3, [pc, #132]	; (8000e28 <BMP280_ReadTemperature+0x100>)
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 8000daa:	4a20      	ldr	r2, [pc, #128]	; (8000e2c <BMP280_ReadTemperature+0x104>)
 8000dac:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8000db0:	fb02 f303 	mul.w	r3, r2, r3
 8000db4:	12db      	asrs	r3, r3, #11
 8000db6:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	111b      	asrs	r3, r3, #4
 8000dbc:	4a1a      	ldr	r2, [pc, #104]	; (8000e28 <BMP280_ReadTemperature+0x100>)
 8000dbe:	8812      	ldrh	r2, [r2, #0]
 8000dc0:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	1112      	asrs	r2, r2, #4
 8000dc6:	4918      	ldr	r1, [pc, #96]	; (8000e28 <BMP280_ReadTemperature+0x100>)
 8000dc8:	8809      	ldrh	r1, [r1, #0]
 8000dca:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8000dcc:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8000dd0:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 8000dd2:	4a17      	ldr	r2, [pc, #92]	; (8000e30 <BMP280_ReadTemperature+0x108>)
 8000dd4:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8000dd8:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8000ddc:	139b      	asrs	r3, r3, #14
 8000dde:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 8000de0:	68fa      	ldr	r2, [r7, #12]
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	4413      	add	r3, r2
 8000de6:	4a13      	ldr	r2, [pc, #76]	; (8000e34 <BMP280_ReadTemperature+0x10c>)
 8000de8:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 8000dea:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <BMP280_ReadTemperature+0x10c>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	4613      	mov	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	3380      	adds	r3, #128	; 0x80
 8000df6:	121b      	asrs	r3, r3, #8
 8000df8:	ee07 3a90 	vmov	s15, r3
 8000dfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e00:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 8000e04:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e08:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000e38 <BMP280_ReadTemperature+0x110>
 8000e0c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000e10:	e001      	b.n	8000e16 <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 8000e12:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000e3c <BMP280_ReadTemperature+0x114>
}
 8000e16:	eef0 7a47 	vmov.f32	s15, s14
 8000e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	2000020a 	.word	0x2000020a
 8000e28:	20000220 	.word	0x20000220
 8000e2c:	2000020c 	.word	0x2000020c
 8000e30:	2000020e 	.word	0x2000020e
 8000e34:	20000224 	.word	0x20000224
 8000e38:	42c80000 	.word	0x42c80000
 8000e3c:	c2c60000 	.word	0xc2c60000

08000e40 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 8000e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e44:	b0cc      	sub	sp, #304	; 0x130
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8000e4c:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 8000e50:	f7ff ff6a 	bl	8000d28 <BMP280_ReadTemperature>
 8000e54:	eef0 7a40 	vmov.f32	s15, s0
 8000e58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000e5c:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 8000e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000e64:	edd3 7a00 	vldr	s15, [r3]
 8000e68:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8001138 <BMP280_ReadTemperatureAndPressure+0x2f8>
 8000e6c:	eef4 7a47 	vcmp.f32	s15, s14
 8000e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e74:	d101      	bne.n	8000e7a <BMP280_ReadTemperatureAndPressure+0x3a>
		  return -1;
 8000e76:	23ff      	movs	r3, #255	; 0xff
 8000e78:	e2bf      	b.n	80013fa <BMP280_ReadTemperatureAndPressure+0x5ba>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 8000e7a:	20f7      	movs	r0, #247	; 0xf7
 8000e7c:	f7ff fe74 	bl	8000b68 <BMP280_Read24>
 8000e80:	4603      	mov	r3, r0
 8000e82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  adc_P >>= 4;
 8000e86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e8a:	111b      	asrs	r3, r3, #4
 8000e8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 8000e90:	4baa      	ldr	r3, [pc, #680]	; (800113c <BMP280_ReadTemperatureAndPressure+0x2fc>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	17da      	asrs	r2, r3, #31
 8000e96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000e9a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8000e9e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8000ea8:	64bb      	str	r3, [r7, #72]	; 0x48
 8000eaa:	4613      	mov	r3, r2
 8000eac:	f143 33ff 	adc.w	r3, r3, #4294967295
 8000eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000eb2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000eb6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 8000eba:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000ebe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ec2:	fb03 f102 	mul.w	r1, r3, r2
 8000ec6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000eca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ece:	fb02 f303 	mul.w	r3, r2, r3
 8000ed2:	18ca      	adds	r2, r1, r3
 8000ed4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ed8:	fba3 4503 	umull	r4, r5, r3, r3
 8000edc:	1953      	adds	r3, r2, r5
 8000ede:	461d      	mov	r5, r3
 8000ee0:	4b97      	ldr	r3, [pc, #604]	; (8001140 <BMP280_ReadTemperatureAndPressure+0x300>)
 8000ee2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ee6:	b21b      	sxth	r3, r3
 8000ee8:	17da      	asrs	r2, r3, #31
 8000eea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000eee:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8000ef2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	fb03 f205 	mul.w	r2, r3, r5
 8000efc:	460b      	mov	r3, r1
 8000efe:	fb04 f303 	mul.w	r3, r4, r3
 8000f02:	4413      	add	r3, r2
 8000f04:	4602      	mov	r2, r0
 8000f06:	fba4 8902 	umull	r8, r9, r4, r2
 8000f0a:	444b      	add	r3, r9
 8000f0c:	4699      	mov	r9, r3
 8000f0e:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
 8000f12:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 8000f16:	4b8b      	ldr	r3, [pc, #556]	; (8001144 <BMP280_ReadTemperatureAndPressure+0x304>)
 8000f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f1c:	b21b      	sxth	r3, r3
 8000f1e:	17da      	asrs	r2, r3, #31
 8000f20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000f24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000f28:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000f2c:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8000f30:	462a      	mov	r2, r5
 8000f32:	fb02 f203 	mul.w	r2, r2, r3
 8000f36:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000f3a:	4621      	mov	r1, r4
 8000f3c:	fb01 f303 	mul.w	r3, r1, r3
 8000f40:	441a      	add	r2, r3
 8000f42:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000f46:	4621      	mov	r1, r4
 8000f48:	fba3 ab01 	umull	sl, fp, r3, r1
 8000f4c:	eb02 030b 	add.w	r3, r2, fp
 8000f50:	469b      	mov	fp, r3
 8000f52:	f04f 0000 	mov.w	r0, #0
 8000f56:	f04f 0100 	mov.w	r1, #0
 8000f5a:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8000f5e:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8000f62:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8000f66:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000f6a:	1814      	adds	r4, r2, r0
 8000f6c:	643c      	str	r4, [r7, #64]	; 0x40
 8000f6e:	414b      	adcs	r3, r1
 8000f70:	647b      	str	r3, [r7, #68]	; 0x44
 8000f72:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8000f76:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 8000f7a:	4b73      	ldr	r3, [pc, #460]	; (8001148 <BMP280_ReadTemperatureAndPressure+0x308>)
 8000f7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	17da      	asrs	r2, r3, #31
 8000f84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000f88:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8000f8c:	f04f 0000 	mov.w	r0, #0
 8000f90:	f04f 0100 	mov.w	r1, #0
 8000f94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000f98:	00d9      	lsls	r1, r3, #3
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000fa0:	1814      	adds	r4, r2, r0
 8000fa2:	63bc      	str	r4, [r7, #56]	; 0x38
 8000fa4:	414b      	adcs	r3, r1
 8000fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000fa8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8000fac:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8000fb0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000fb4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000fb8:	fb03 f102 	mul.w	r1, r3, r2
 8000fbc:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000fc0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000fc4:	fb02 f303 	mul.w	r3, r2, r3
 8000fc8:	18ca      	adds	r2, r1, r3
 8000fca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000fce:	fba3 1303 	umull	r1, r3, r3, r3
 8000fd2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000fe0:	18d3      	adds	r3, r2, r3
 8000fe2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000fe6:	4b59      	ldr	r3, [pc, #356]	; (800114c <BMP280_ReadTemperatureAndPressure+0x30c>)
 8000fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	17da      	asrs	r2, r3, #31
 8000ff0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000ff4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8000ff8:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8000ffc:	462b      	mov	r3, r5
 8000ffe:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8001002:	4642      	mov	r2, r8
 8001004:	fb02 f203 	mul.w	r2, r2, r3
 8001008:	464b      	mov	r3, r9
 800100a:	4621      	mov	r1, r4
 800100c:	fb01 f303 	mul.w	r3, r1, r3
 8001010:	4413      	add	r3, r2
 8001012:	4622      	mov	r2, r4
 8001014:	4641      	mov	r1, r8
 8001016:	fba2 1201 	umull	r1, r2, r2, r1
 800101a:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800101e:	460a      	mov	r2, r1
 8001020:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8001024:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001028:	4413      	add	r3, r2
 800102a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800102e:	f04f 0000 	mov.w	r0, #0
 8001032:	f04f 0100 	mov.w	r1, #0
 8001036:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800103a:	4623      	mov	r3, r4
 800103c:	0a18      	lsrs	r0, r3, #8
 800103e:	462b      	mov	r3, r5
 8001040:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001044:	462b      	mov	r3, r5
 8001046:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 8001048:	4b41      	ldr	r3, [pc, #260]	; (8001150 <BMP280_ReadTemperatureAndPressure+0x310>)
 800104a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800104e:	b21b      	sxth	r3, r3
 8001050:	17da      	asrs	r2, r3, #31
 8001052:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001056:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800105a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800105e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001062:	464a      	mov	r2, r9
 8001064:	fb02 f203 	mul.w	r2, r2, r3
 8001068:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800106c:	4644      	mov	r4, r8
 800106e:	fb04 f303 	mul.w	r3, r4, r3
 8001072:	441a      	add	r2, r3
 8001074:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001078:	4644      	mov	r4, r8
 800107a:	fba3 4304 	umull	r4, r3, r3, r4
 800107e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001082:	4623      	mov	r3, r4
 8001084:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800108c:	18d3      	adds	r3, r2, r3
 800108e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	f04f 0300 	mov.w	r3, #0
 800109a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800109e:	464c      	mov	r4, r9
 80010a0:	0323      	lsls	r3, r4, #12
 80010a2:	4644      	mov	r4, r8
 80010a4:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80010a8:	4644      	mov	r4, r8
 80010aa:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80010ac:	1884      	adds	r4, r0, r2
 80010ae:	633c      	str	r4, [r7, #48]	; 0x30
 80010b0:	eb41 0303 	adc.w	r3, r1, r3
 80010b4:	637b      	str	r3, [r7, #52]	; 0x34
 80010b6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80010ba:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 80010be:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80010c2:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80010c6:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 80010ca:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <BMP280_ReadTemperatureAndPressure+0x314>)
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	2200      	movs	r2, #0
 80010d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80010da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80010de:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80010e2:	462b      	mov	r3, r5
 80010e4:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80010e8:	4642      	mov	r2, r8
 80010ea:	fb02 f203 	mul.w	r2, r2, r3
 80010ee:	464b      	mov	r3, r9
 80010f0:	4621      	mov	r1, r4
 80010f2:	fb01 f303 	mul.w	r3, r1, r3
 80010f6:	4413      	add	r3, r2
 80010f8:	4622      	mov	r2, r4
 80010fa:	4641      	mov	r1, r8
 80010fc:	fba2 1201 	umull	r1, r2, r2, r1
 8001100:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001104:	460a      	mov	r2, r1
 8001106:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800110a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800110e:	4413      	add	r3, r2
 8001110:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001120:	4629      	mov	r1, r5
 8001122:	104a      	asrs	r2, r1, #1
 8001124:	4629      	mov	r1, r5
 8001126:	17cb      	asrs	r3, r1, #31
 8001128:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	  if (var1 == 0) {
 800112c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001130:	4313      	orrs	r3, r2
 8001132:	d111      	bne.n	8001158 <BMP280_ReadTemperatureAndPressure+0x318>
	    return 0;  // avoid exception caused by division by zero
 8001134:	2300      	movs	r3, #0
 8001136:	e160      	b.n	80013fa <BMP280_ReadTemperatureAndPressure+0x5ba>
 8001138:	c2c60000 	.word	0xc2c60000
 800113c:	20000224 	.word	0x20000224
 8001140:	20000218 	.word	0x20000218
 8001144:	20000216 	.word	0x20000216
 8001148:	20000214 	.word	0x20000214
 800114c:	20000212 	.word	0x20000212
 8001150:	20000210 	.word	0x20000210
 8001154:	20000222 	.word	0x20000222
	  }
	  p = 1048576 - adc_P;
 8001158:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800115c:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001160:	17da      	asrs	r2, r3, #31
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
 8001164:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001166:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800116a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 800116e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001172:	105b      	asrs	r3, r3, #1
 8001174:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001178:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800117c:	07db      	lsls	r3, r3, #31
 800117e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001182:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001186:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800118a:	4621      	mov	r1, r4
 800118c:	1a89      	subs	r1, r1, r2
 800118e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8001192:	4629      	mov	r1, r5
 8001194:	eb61 0303 	sbc.w	r3, r1, r3
 8001198:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800119c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80011a0:	4622      	mov	r2, r4
 80011a2:	462b      	mov	r3, r5
 80011a4:	1891      	adds	r1, r2, r2
 80011a6:	6239      	str	r1, [r7, #32]
 80011a8:	415b      	adcs	r3, r3
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
 80011ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011b0:	4621      	mov	r1, r4
 80011b2:	1851      	adds	r1, r2, r1
 80011b4:	61b9      	str	r1, [r7, #24]
 80011b6:	4629      	mov	r1, r5
 80011b8:	414b      	adcs	r3, r1
 80011ba:	61fb      	str	r3, [r7, #28]
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	f04f 0300 	mov.w	r3, #0
 80011c4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80011c8:	4649      	mov	r1, r9
 80011ca:	018b      	lsls	r3, r1, #6
 80011cc:	4641      	mov	r1, r8
 80011ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80011d2:	4641      	mov	r1, r8
 80011d4:	018a      	lsls	r2, r1, #6
 80011d6:	4641      	mov	r1, r8
 80011d8:	1889      	adds	r1, r1, r2
 80011da:	6139      	str	r1, [r7, #16]
 80011dc:	4649      	mov	r1, r9
 80011de:	eb43 0101 	adc.w	r1, r3, r1
 80011e2:	6179      	str	r1, [r7, #20]
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80011f0:	4649      	mov	r1, r9
 80011f2:	008b      	lsls	r3, r1, #2
 80011f4:	4641      	mov	r1, r8
 80011f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80011fa:	4641      	mov	r1, r8
 80011fc:	008a      	lsls	r2, r1, #2
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	4603      	mov	r3, r0
 8001204:	4622      	mov	r2, r4
 8001206:	189b      	adds	r3, r3, r2
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	460b      	mov	r3, r1
 800120c:	462a      	mov	r2, r5
 800120e:	eb42 0303 	adc.w	r3, r2, r3
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	f04f 0300 	mov.w	r3, #0
 800121c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001220:	4649      	mov	r1, r9
 8001222:	008b      	lsls	r3, r1, #2
 8001224:	4641      	mov	r1, r8
 8001226:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800122a:	4641      	mov	r1, r8
 800122c:	008a      	lsls	r2, r1, #2
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	4603      	mov	r3, r0
 8001234:	4622      	mov	r2, r4
 8001236:	189b      	adds	r3, r3, r2
 8001238:	67bb      	str	r3, [r7, #120]	; 0x78
 800123a:	462b      	mov	r3, r5
 800123c:	460a      	mov	r2, r1
 800123e:	eb42 0303 	adc.w	r3, r2, r3
 8001242:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001244:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001248:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800124c:	f7ff fa0c 	bl	8000668 <__aeabi_ldivmod>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8001258:	4b6b      	ldr	r3, [pc, #428]	; (8001408 <BMP280_ReadTemperatureAndPressure+0x5c8>)
 800125a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800125e:	b21b      	sxth	r3, r3
 8001260:	17da      	asrs	r2, r3, #31
 8001262:	673b      	str	r3, [r7, #112]	; 0x70
 8001264:	677a      	str	r2, [r7, #116]	; 0x74
 8001266:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800126a:	f04f 0000 	mov.w	r0, #0
 800126e:	f04f 0100 	mov.w	r1, #0
 8001272:	0b50      	lsrs	r0, r2, #13
 8001274:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001278:	1359      	asrs	r1, r3, #13
 800127a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800127e:	462b      	mov	r3, r5
 8001280:	fb00 f203 	mul.w	r2, r0, r3
 8001284:	4623      	mov	r3, r4
 8001286:	fb03 f301 	mul.w	r3, r3, r1
 800128a:	4413      	add	r3, r2
 800128c:	4622      	mov	r2, r4
 800128e:	fba2 1200 	umull	r1, r2, r2, r0
 8001292:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001296:	460a      	mov	r2, r1
 8001298:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800129c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80012a0:	4413      	add	r3, r2
 80012a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80012a6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80012aa:	f04f 0000 	mov.w	r0, #0
 80012ae:	f04f 0100 	mov.w	r1, #0
 80012b2:	0b50      	lsrs	r0, r2, #13
 80012b4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80012b8:	1359      	asrs	r1, r3, #13
 80012ba:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80012be:	462b      	mov	r3, r5
 80012c0:	fb00 f203 	mul.w	r2, r0, r3
 80012c4:	4623      	mov	r3, r4
 80012c6:	fb03 f301 	mul.w	r3, r3, r1
 80012ca:	4413      	add	r3, r2
 80012cc:	4622      	mov	r2, r4
 80012ce:	fba2 1200 	umull	r1, r2, r2, r0
 80012d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80012d6:	460a      	mov	r2, r1
 80012d8:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80012dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80012e0:	4413      	add	r3, r2
 80012e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	f04f 0300 	mov.w	r3, #0
 80012ee:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80012f2:	4621      	mov	r1, r4
 80012f4:	0e4a      	lsrs	r2, r1, #25
 80012f6:	4629      	mov	r1, r5
 80012f8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80012fc:	4629      	mov	r1, r5
 80012fe:	164b      	asrs	r3, r1, #25
 8001300:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 8001304:	4b41      	ldr	r3, [pc, #260]	; (800140c <BMP280_ReadTemperatureAndPressure+0x5cc>)
 8001306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130a:	b21b      	sxth	r3, r3
 800130c:	17da      	asrs	r2, r3, #31
 800130e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001310:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001312:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001316:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800131a:	462a      	mov	r2, r5
 800131c:	fb02 f203 	mul.w	r2, r2, r3
 8001320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001324:	4621      	mov	r1, r4
 8001326:	fb01 f303 	mul.w	r3, r1, r3
 800132a:	4413      	add	r3, r2
 800132c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001330:	4621      	mov	r1, r4
 8001332:	fba2 1201 	umull	r1, r2, r2, r1
 8001336:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800133a:	460a      	mov	r2, r1
 800133c:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001340:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001344:	4413      	add	r3, r2
 8001346:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001356:	4621      	mov	r1, r4
 8001358:	0cca      	lsrs	r2, r1, #19
 800135a:	4629      	mov	r1, r5
 800135c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001360:	4629      	mov	r1, r5
 8001362:	14cb      	asrs	r3, r1, #19
 8001364:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001368:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800136c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001370:	1884      	adds	r4, r0, r2
 8001372:	663c      	str	r4, [r7, #96]	; 0x60
 8001374:	eb41 0303 	adc.w	r3, r1, r3
 8001378:	667b      	str	r3, [r7, #100]	; 0x64
 800137a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800137e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001382:	4621      	mov	r1, r4
 8001384:	1889      	adds	r1, r1, r2
 8001386:	65b9      	str	r1, [r7, #88]	; 0x58
 8001388:	4629      	mov	r1, r5
 800138a:	eb43 0101 	adc.w	r1, r3, r1
 800138e:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001390:	f04f 0000 	mov.w	r0, #0
 8001394:	f04f 0100 	mov.w	r1, #0
 8001398:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800139c:	4623      	mov	r3, r4
 800139e:	0a18      	lsrs	r0, r3, #8
 80013a0:	462b      	mov	r3, r5
 80013a2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80013a6:	462b      	mov	r3, r5
 80013a8:	1219      	asrs	r1, r3, #8
 80013aa:	4b19      	ldr	r3, [pc, #100]	; (8001410 <BMP280_ReadTemperatureAndPressure+0x5d0>)
 80013ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	17da      	asrs	r2, r3, #31
 80013b4:	653b      	str	r3, [r7, #80]	; 0x50
 80013b6:	657a      	str	r2, [r7, #84]	; 0x54
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	f04f 0300 	mov.w	r3, #0
 80013c0:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80013c4:	464c      	mov	r4, r9
 80013c6:	0123      	lsls	r3, r4, #4
 80013c8:	4644      	mov	r4, r8
 80013ca:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80013ce:	4644      	mov	r4, r8
 80013d0:	0122      	lsls	r2, r4, #4
 80013d2:	1884      	adds	r4, r0, r2
 80013d4:	603c      	str	r4, [r7, #0]
 80013d6:	eb41 0303 	adc.w	r3, r1, r3
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80013e0:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  *pressure = (int32_t)p/256;
 80013e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	da00      	bge.n	80013ee <BMP280_ReadTemperatureAndPressure+0x5ae>
 80013ec:	33ff      	adds	r3, #255	; 0xff
 80013ee:	121b      	asrs	r3, r3, #8
 80013f0:	461a      	mov	r2, r3
 80013f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80013f6:	601a      	str	r2, [r3, #0]

	  return 0;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001400:	46bd      	mov	sp, r7
 8001402:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001406:	bf00      	nop
 8001408:	2000021e 	.word	0x2000021e
 800140c:	2000021c 	.word	0x2000021c
 8001410:	2000021a 	.word	0x2000021a

08001414 <calcPID>:




void calcPID(float desiredTemperature, float currentTemperature, struct PID *PID)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	ed87 0a03 	vstr	s0, [r7, #12]
 800141e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001422:	6078      	str	r0, [r7, #4]

	PID->error = desiredTemperature - currentTemperature;
 8001424:	ed97 7a03 	vldr	s14, [r7, #12]
 8001428:	edd7 7a02 	vldr	s15, [r7, #8]
 800142c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	edc3 7a04 	vstr	s15, [r3, #16]

	PID->UP = PID->Kp * PID->error;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	ed93 7a01 	vldr	s14, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	edc3 7a07 	vstr	s15, [r3, #28]
	PID->UI = PID->Ki * PID->Tp / 2.0 * (PID->error + PID->previousError) + PID->previousIn;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001460:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001464:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	ed93 7a04 	vldr	s14, [r3, #16]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	edd3 7a05 	vldr	s15, [r3, #20]
 8001474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001478:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800147c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	edd3 7a06 	vldr	s15, [r3, #24]
 8001486:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800148a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800148e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	PID->UD = PID-> Kd *(PID->error - PID->previousError) / PID->Tp;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	ed93 7a03 	vldr	s14, [r3, #12]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	edd3 6a04 	vldr	s13, [r3, #16]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	edd3 7a05 	vldr	s15, [r3, #20]
 80014aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014ae:	ee67 6a27 	vmul.f32	s13, s14, s15
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80014b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	edc3 7a08 	vstr	s15, [r3, #32]

	PID->previousError = PID->error;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691a      	ldr	r2, [r3, #16]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	615a      	str	r2, [r3, #20]
	PID->previousIn = PID->UI;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	619a      	str	r2, [r3, #24]

	PID->U = PID->UP + PID->UI + PID->UD;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	ed93 7a07 	vldr	s14, [r3, #28]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80014de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	edd3 7a08 	vldr	s15, [r3, #32]
 80014e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	edc3 7a00 	vstr	s15, [r3]

}
 80014f2:	bf00      	nop
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001504:	f000 ff71 	bl	80023ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001508:	f000 f85e 	bl	80015c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800150c:	f000 fa62 	bl	80019d4 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001510:	f000 fa32 	bl	8001978 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001514:	f000 f8c2 	bl	800169c <MX_I2C1_Init>
  MX_TIM3_Init();
 8001518:	f000 f9ae 	bl	8001878 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 800151c:	f000 f9fc 	bl	8001918 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001520:	f000 f8fc 	bl	800171c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8001524:	2301      	movs	r3, #1
 8001526:	2203      	movs	r2, #3
 8001528:	2101      	movs	r1, #1
 800152a:	481e      	ldr	r0, [pc, #120]	; (80015a4 <main+0xa4>)
 800152c:	f7ff fb3e 	bl	8000bac <BMP280_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001530:	2100      	movs	r1, #0
 8001532:	481d      	ldr	r0, [pc, #116]	; (80015a8 <main+0xa8>)
 8001534:	f003 fcd4 	bl	8004ee0 <HAL_TIM_PWM_Start>

   pid.U = 0;
 8001538:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <main+0xac>)
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
   pid.Kp = 0.6674522;
 8001540:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <main+0xac>)
 8001542:	4a1b      	ldr	r2, [pc, #108]	; (80015b0 <main+0xb0>)
 8001544:	605a      	str	r2, [r3, #4]
   pid.Ki = 0.0087592;
 8001546:	4b19      	ldr	r3, [pc, #100]	; (80015ac <main+0xac>)
 8001548:	4a1a      	ldr	r2, [pc, #104]	; (80015b4 <main+0xb4>)
 800154a:	609a      	str	r2, [r3, #8]
   pid.Kd = -0.120727;
 800154c:	4b17      	ldr	r3, [pc, #92]	; (80015ac <main+0xac>)
 800154e:	4a1a      	ldr	r2, [pc, #104]	; (80015b8 <main+0xb8>)
 8001550:	60da      	str	r2, [r3, #12]
   pid.error = 0;
 8001552:	4b16      	ldr	r3, [pc, #88]	; (80015ac <main+0xac>)
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
   pid.previousError = 0;
 800155a:	4b14      	ldr	r3, [pc, #80]	; (80015ac <main+0xac>)
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	615a      	str	r2, [r3, #20]
   pid.previousIn = 0;
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <main+0xac>)
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	619a      	str	r2, [r3, #24]
   pid.UP = 0;
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <main+0xac>)
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	61da      	str	r2, [r3, #28]
   pid.UD = 0;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <main+0xac>)
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	621a      	str	r2, [r3, #32]
   pid.UI = 0;
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <main+0xac>)
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	625a      	str	r2, [r3, #36]	; 0x24
   pid.Tp = 1.f;
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <main+0xac>)
 8001584:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001588:	629a      	str	r2, [r3, #40]	; 0x28


  HAL_TIM_Base_Start_IT(&htim3);
 800158a:	480c      	ldr	r0, [pc, #48]	; (80015bc <main+0xbc>)
 800158c:	f003 fbce 	bl	8004d2c <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(&huart3, get_RX, 1);
 8001590:	2201      	movs	r2, #1
 8001592:	490b      	ldr	r1, [pc, #44]	; (80015c0 <main+0xc0>)
 8001594:	480b      	ldr	r0, [pc, #44]	; (80015c4 <main+0xc4>)
 8001596:	f004 fe7c 	bl	8006292 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 HAL_Delay(1);
 800159a:	2001      	movs	r0, #1
 800159c:	f000 ff82 	bl	80024a4 <HAL_Delay>
 80015a0:	e7fb      	b.n	800159a <main+0x9a>
 80015a2:	bf00      	nop
 80015a4:	20000228 	.word	0x20000228
 80015a8:	2000027c 	.word	0x2000027c
 80015ac:	200008cc 	.word	0x200008cc
 80015b0:	3f2ade26 	.word	0x3f2ade26
 80015b4:	3c0f82bf 	.word	0x3c0f82bf
 80015b8:	bdf73fb8 	.word	0xbdf73fb8
 80015bc:	200002c8 	.word	0x200002c8
 80015c0:	200008c8 	.word	0x200008c8
 80015c4:	20000314 	.word	0x20000314

080015c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b094      	sub	sp, #80	; 0x50
 80015cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ce:	f107 031c 	add.w	r3, r7, #28
 80015d2:	2234      	movs	r2, #52	; 0x34
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f006 fbba 	bl	8007d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015dc:	f107 0308 	add.w	r3, r7, #8
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015ec:	f002 fa3a 	bl	8003a64 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f0:	4b28      	ldr	r3, [pc, #160]	; (8001694 <SystemClock_Config+0xcc>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	4a27      	ldr	r2, [pc, #156]	; (8001694 <SystemClock_Config+0xcc>)
 80015f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fa:	6413      	str	r3, [r2, #64]	; 0x40
 80015fc:	4b25      	ldr	r3, [pc, #148]	; (8001694 <SystemClock_Config+0xcc>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001608:	4b23      	ldr	r3, [pc, #140]	; (8001698 <SystemClock_Config+0xd0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001610:	4a21      	ldr	r2, [pc, #132]	; (8001698 <SystemClock_Config+0xd0>)
 8001612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <SystemClock_Config+0xd0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001620:	603b      	str	r3, [r7, #0]
 8001622:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001624:	2301      	movs	r3, #1
 8001626:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001628:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800162c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800162e:	2302      	movs	r3, #2
 8001630:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001632:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001636:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001638:	2304      	movs	r3, #4
 800163a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 800163c:	2390      	movs	r3, #144	; 0x90
 800163e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001640:	2302      	movs	r3, #2
 8001642:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001644:	2306      	movs	r3, #6
 8001646:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001648:	2302      	movs	r3, #2
 800164a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4618      	mov	r0, r3
 8001652:	f002 fa17 	bl	8003a84 <HAL_RCC_OscConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800165c:	f000 fba8 	bl	8001db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001660:	230f      	movs	r3, #15
 8001662:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001664:	2302      	movs	r3, #2
 8001666:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800166c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001670:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001676:	f107 0308 	add.w	r3, r7, #8
 800167a:	2102      	movs	r1, #2
 800167c:	4618      	mov	r0, r3
 800167e:	f002 fcaf 	bl	8003fe0 <HAL_RCC_ClockConfig>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001688:	f000 fb92 	bl	8001db0 <Error_Handler>
  }
}
 800168c:	bf00      	nop
 800168e:	3750      	adds	r7, #80	; 0x50
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40023800 	.word	0x40023800
 8001698:	40007000 	.word	0x40007000

0800169c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016a0:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <MX_I2C1_Init+0x74>)
 80016a2:	4a1c      	ldr	r2, [pc, #112]	; (8001714 <MX_I2C1_Init+0x78>)
 80016a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80016a6:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <MX_I2C1_Init+0x74>)
 80016a8:	4a1b      	ldr	r2, [pc, #108]	; (8001718 <MX_I2C1_Init+0x7c>)
 80016aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016ac:	4b18      	ldr	r3, [pc, #96]	; (8001710 <MX_I2C1_Init+0x74>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <MX_I2C1_Init+0x74>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b8:	4b15      	ldr	r3, [pc, #84]	; (8001710 <MX_I2C1_Init+0x74>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016be:	4b14      	ldr	r3, [pc, #80]	; (8001710 <MX_I2C1_Init+0x74>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <MX_I2C1_Init+0x74>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_I2C1_Init+0x74>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <MX_I2C1_Init+0x74>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016d6:	480e      	ldr	r0, [pc, #56]	; (8001710 <MX_I2C1_Init+0x74>)
 80016d8:	f001 fa8c 	bl	8002bf4 <HAL_I2C_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016e2:	f000 fb65 	bl	8001db0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016e6:	2100      	movs	r1, #0
 80016e8:	4809      	ldr	r0, [pc, #36]	; (8001710 <MX_I2C1_Init+0x74>)
 80016ea:	f001 ffdb 	bl	80036a4 <HAL_I2CEx_ConfigAnalogFilter>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016f4:	f000 fb5c 	bl	8001db0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016f8:	2100      	movs	r1, #0
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_I2C1_Init+0x74>)
 80016fc:	f002 f81d 	bl	800373a <HAL_I2CEx_ConfigDigitalFilter>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001706:	f000 fb53 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000228 	.word	0x20000228
 8001714:	40005400 	.word	0x40005400
 8001718:	00808cd2 	.word	0x00808cd2

0800171c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b09a      	sub	sp, #104	; 0x68
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001722:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001730:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800173c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
 800174c:	615a      	str	r2, [r3, #20]
 800174e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	222c      	movs	r2, #44	; 0x2c
 8001754:	2100      	movs	r1, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f006 fafa 	bl	8007d50 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800175c:	4b44      	ldr	r3, [pc, #272]	; (8001870 <MX_TIM1_Init+0x154>)
 800175e:	4a45      	ldr	r2, [pc, #276]	; (8001874 <MX_TIM1_Init+0x158>)
 8001760:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001762:	4b43      	ldr	r3, [pc, #268]	; (8001870 <MX_TIM1_Init+0x154>)
 8001764:	2247      	movs	r2, #71	; 0x47
 8001766:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001768:	4b41      	ldr	r3, [pc, #260]	; (8001870 <MX_TIM1_Init+0x154>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800176e:	4b40      	ldr	r3, [pc, #256]	; (8001870 <MX_TIM1_Init+0x154>)
 8001770:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001774:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001776:	4b3e      	ldr	r3, [pc, #248]	; (8001870 <MX_TIM1_Init+0x154>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800177c:	4b3c      	ldr	r3, [pc, #240]	; (8001870 <MX_TIM1_Init+0x154>)
 800177e:	2200      	movs	r2, #0
 8001780:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001782:	4b3b      	ldr	r3, [pc, #236]	; (8001870 <MX_TIM1_Init+0x154>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001788:	4839      	ldr	r0, [pc, #228]	; (8001870 <MX_TIM1_Init+0x154>)
 800178a:	f003 fa77 	bl	8004c7c <HAL_TIM_Base_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001794:	f000 fb0c 	bl	8001db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800179c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800179e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017a2:	4619      	mov	r1, r3
 80017a4:	4832      	ldr	r0, [pc, #200]	; (8001870 <MX_TIM1_Init+0x154>)
 80017a6:	f003 fec9 	bl	800553c <HAL_TIM_ConfigClockSource>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80017b0:	f000 fafe 	bl	8001db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017b4:	482e      	ldr	r0, [pc, #184]	; (8001870 <MX_TIM1_Init+0x154>)
 80017b6:	f003 fb31 	bl	8004e1c <HAL_TIM_PWM_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80017c0:	f000 faf6 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017c4:	2320      	movs	r3, #32
 80017c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017c8:	2300      	movs	r3, #0
 80017ca:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017d4:	4619      	mov	r1, r3
 80017d6:	4826      	ldr	r0, [pc, #152]	; (8001870 <MX_TIM1_Init+0x154>)
 80017d8:	f004 fb60 	bl	8005e9c <HAL_TIMEx_MasterConfigSynchronization>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80017e2:	f000 fae5 	bl	8001db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017e6:	2360      	movs	r3, #96	; 0x60
 80017e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 80017ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017f0:	2300      	movs	r3, #0
 80017f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017f4:	2300      	movs	r3, #0
 80017f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017fc:	2300      	movs	r3, #0
 80017fe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001800:	2300      	movs	r3, #0
 8001802:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001804:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001808:	2200      	movs	r2, #0
 800180a:	4619      	mov	r1, r3
 800180c:	4818      	ldr	r0, [pc, #96]	; (8001870 <MX_TIM1_Init+0x154>)
 800180e:	f003 fd81 	bl	8005314 <HAL_TIM_PWM_ConfigChannel>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001818:	f000 faca 	bl	8001db0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800181c:	2300      	movs	r3, #0
 800181e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001820:	2300      	movs	r3, #0
 8001822:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001830:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001834:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800183e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001848:	2300      	movs	r3, #0
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	4619      	mov	r1, r3
 8001850:	4807      	ldr	r0, [pc, #28]	; (8001870 <MX_TIM1_Init+0x154>)
 8001852:	f004 fbb1 	bl	8005fb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800185c:	f000 faa8 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001860:	4803      	ldr	r0, [pc, #12]	; (8001870 <MX_TIM1_Init+0x154>)
 8001862:	f000 fb69 	bl	8001f38 <HAL_TIM_MspPostInit>

}
 8001866:	bf00      	nop
 8001868:	3768      	adds	r7, #104	; 0x68
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	2000027c 	.word	0x2000027c
 8001874:	40010000 	.word	0x40010000

08001878 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800187e:	f107 0310 	add.w	r3, r7, #16
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001896:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <MX_TIM3_Init+0x98>)
 8001898:	4a1e      	ldr	r2, [pc, #120]	; (8001914 <MX_TIM3_Init+0x9c>)
 800189a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 800189c:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <MX_TIM3_Init+0x98>)
 800189e:	f242 7210 	movw	r2, #10000	; 0x2710
 80018a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a4:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <MX_TIM3_Init+0x98>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 80018aa:	4b19      	ldr	r3, [pc, #100]	; (8001910 <MX_TIM3_Init+0x98>)
 80018ac:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80018b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b2:	4b17      	ldr	r3, [pc, #92]	; (8001910 <MX_TIM3_Init+0x98>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <MX_TIM3_Init+0x98>)
 80018ba:	2280      	movs	r2, #128	; 0x80
 80018bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018be:	4814      	ldr	r0, [pc, #80]	; (8001910 <MX_TIM3_Init+0x98>)
 80018c0:	f003 f9dc 	bl	8004c7c <HAL_TIM_Base_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80018ca:	f000 fa71 	bl	8001db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018d4:	f107 0310 	add.w	r3, r7, #16
 80018d8:	4619      	mov	r1, r3
 80018da:	480d      	ldr	r0, [pc, #52]	; (8001910 <MX_TIM3_Init+0x98>)
 80018dc:	f003 fe2e 	bl	800553c <HAL_TIM_ConfigClockSource>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80018e6:	f000 fa63 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018ea:	2320      	movs	r3, #32
 80018ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	4619      	mov	r1, r3
 80018f6:	4806      	ldr	r0, [pc, #24]	; (8001910 <MX_TIM3_Init+0x98>)
 80018f8:	f004 fad0 	bl	8005e9c <HAL_TIMEx_MasterConfigSynchronization>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001902:	f000 fa55 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	3720      	adds	r7, #32
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200002c8 	.word	0x200002c8
 8001914:	40000400 	.word	0x40000400

08001918 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800191c:	4b14      	ldr	r3, [pc, #80]	; (8001970 <MX_USART3_UART_Init+0x58>)
 800191e:	4a15      	ldr	r2, [pc, #84]	; (8001974 <MX_USART3_UART_Init+0x5c>)
 8001920:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001922:	4b13      	ldr	r3, [pc, #76]	; (8001970 <MX_USART3_UART_Init+0x58>)
 8001924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001928:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800192a:	4b11      	ldr	r3, [pc, #68]	; (8001970 <MX_USART3_UART_Init+0x58>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001930:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <MX_USART3_UART_Init+0x58>)
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <MX_USART3_UART_Init+0x58>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <MX_USART3_UART_Init+0x58>)
 800193e:	220c      	movs	r2, #12
 8001940:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <MX_USART3_UART_Init+0x58>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <MX_USART3_UART_Init+0x58>)
 800194a:	2200      	movs	r2, #0
 800194c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800194e:	4b08      	ldr	r3, [pc, #32]	; (8001970 <MX_USART3_UART_Init+0x58>)
 8001950:	2200      	movs	r2, #0
 8001952:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <MX_USART3_UART_Init+0x58>)
 8001956:	2200      	movs	r2, #0
 8001958:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800195a:	4805      	ldr	r0, [pc, #20]	; (8001970 <MX_USART3_UART_Init+0x58>)
 800195c:	f004 fbc8 	bl	80060f0 <HAL_UART_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001966:	f000 fa23 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000314 	.word	0x20000314
 8001974:	40004800 	.word	0x40004800

08001978 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800197c:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800197e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001982:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001986:	2206      	movs	r2, #6
 8001988:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800198c:	2202      	movs	r2, #2
 800198e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001998:	2202      	movs	r2, #2
 800199a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800199e:	2201      	movs	r2, #1
 80019a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019bc:	f001 ff09 	bl	80037d2 <HAL_PCD_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80019c6:	f000 f9f3 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000039c 	.word	0x2000039c

080019d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08c      	sub	sp, #48	; 0x30
 80019d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019da:	f107 031c 	add.w	r3, r7, #28
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
 80019e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ea:	4b6e      	ldr	r3, [pc, #440]	; (8001ba4 <MX_GPIO_Init+0x1d0>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a6d      	ldr	r2, [pc, #436]	; (8001ba4 <MX_GPIO_Init+0x1d0>)
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b6b      	ldr	r3, [pc, #428]	; (8001ba4 <MX_GPIO_Init+0x1d0>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	61bb      	str	r3, [r7, #24]
 8001a00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a02:	4b68      	ldr	r3, [pc, #416]	; (8001ba4 <MX_GPIO_Init+0x1d0>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a67      	ldr	r2, [pc, #412]	; (8001ba4 <MX_GPIO_Init+0x1d0>)
 8001a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b65      	ldr	r3, [pc, #404]	; (8001ba4 <MX_GPIO_Init+0x1d0>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	4b62      	ldr	r3, [pc, #392]	; (8001ba4 <MX_GPIO_Init+0x1d0>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a61      	ldr	r2, [pc, #388]	; (8001ba4 <MX_GPIO_Init+0x1d0>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b5f      	ldr	r3, [pc, #380]	; (8001ba4 <MX_GPIO_Init+0x1d0>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a32:	4b5c      	ldr	r3, [pc, #368]	; (8001ba4 <MX_GPIO_Init+0x1d0>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a5b      	ldr	r2, [pc, #364]	; (8001ba4 <MX_GPIO_Init+0x1d0>)
 8001a38:	f043 0302 	orr.w	r3, r3, #2
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b59      	ldr	r3, [pc, #356]	; (8001ba4 <MX_GPIO_Init+0x1d0>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a4a:	4b56      	ldr	r3, [pc, #344]	; (8001ba4 <MX_GPIO_Init+0x1d0>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a55      	ldr	r2, [pc, #340]	; (8001ba4 <MX_GPIO_Init+0x1d0>)
 8001a50:	f043 0310 	orr.w	r3, r3, #16
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b53      	ldr	r3, [pc, #332]	; (8001ba4 <MX_GPIO_Init+0x1d0>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0310 	and.w	r3, r3, #16
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a62:	4b50      	ldr	r3, [pc, #320]	; (8001ba4 <MX_GPIO_Init+0x1d0>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a4f      	ldr	r2, [pc, #316]	; (8001ba4 <MX_GPIO_Init+0x1d0>)
 8001a68:	f043 0308 	orr.w	r3, r3, #8
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b4d      	ldr	r3, [pc, #308]	; (8001ba4 <MX_GPIO_Init+0x1d0>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a7a:	4b4a      	ldr	r3, [pc, #296]	; (8001ba4 <MX_GPIO_Init+0x1d0>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a49      	ldr	r2, [pc, #292]	; (8001ba4 <MX_GPIO_Init+0x1d0>)
 8001a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b47      	ldr	r3, [pc, #284]	; (8001ba4 <MX_GPIO_Init+0x1d0>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a8e:	603b      	str	r3, [r7, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LD3_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8001a92:	2200      	movs	r2, #0
 8001a94:	f244 0181 	movw	r1, #16513	; 0x4081
 8001a98:	4843      	ldr	r0, [pc, #268]	; (8001ba8 <MX_GPIO_Init+0x1d4>)
 8001a9a:	f001 f877 	bl	8002b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2140      	movs	r1, #64	; 0x40
 8001aa2:	4842      	ldr	r0, [pc, #264]	; (8001bac <MX_GPIO_Init+0x1d8>)
 8001aa4:	f001 f872 	bl	8002b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001aa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001ab8:	f107 031c 	add.w	r3, r7, #28
 8001abc:	4619      	mov	r1, r3
 8001abe:	483c      	ldr	r0, [pc, #240]	; (8001bb0 <MX_GPIO_Init+0x1dc>)
 8001ac0:	f000 feb8 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001ac4:	2332      	movs	r3, #50	; 0x32
 8001ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ad4:	230b      	movs	r3, #11
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad8:	f107 031c 	add.w	r3, r7, #28
 8001adc:	4619      	mov	r1, r3
 8001ade:	4834      	ldr	r0, [pc, #208]	; (8001bb0 <MX_GPIO_Init+0x1dc>)
 8001ae0:	f000 fea8 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001ae4:	2386      	movs	r3, #134	; 0x86
 8001ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001af4:	230b      	movs	r3, #11
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af8:	f107 031c 	add.w	r3, r7, #28
 8001afc:	4619      	mov	r1, r3
 8001afe:	482d      	ldr	r0, [pc, #180]	; (8001bb4 <MX_GPIO_Init+0x1e0>)
 8001b00:	f000 fe98 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LD3_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LD3_Pin|LED_BLUE_Pin;
 8001b04:	f244 0381 	movw	r3, #16513	; 0x4081
 8001b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4822      	ldr	r0, [pc, #136]	; (8001ba8 <MX_GPIO_Init+0x1d4>)
 8001b1e:	f000 fe89 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001b22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b30:	2303      	movs	r3, #3
 8001b32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b34:	230b      	movs	r3, #11
 8001b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001b38:	f107 031c 	add.w	r3, r7, #28
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	481a      	ldr	r0, [pc, #104]	; (8001ba8 <MX_GPIO_Init+0x1d4>)
 8001b40:	f000 fe78 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001b44:	2340      	movs	r3, #64	; 0x40
 8001b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b50:	2300      	movs	r3, #0
 8001b52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001b54:	f107 031c 	add.w	r3, r7, #28
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4814      	ldr	r0, [pc, #80]	; (8001bac <MX_GPIO_Init+0x1d8>)
 8001b5c:	f000 fe6a 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001b60:	2380      	movs	r3, #128	; 0x80
 8001b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b64:	2300      	movs	r3, #0
 8001b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b6c:	f107 031c 	add.w	r3, r7, #28
 8001b70:	4619      	mov	r1, r3
 8001b72:	480e      	ldr	r0, [pc, #56]	; (8001bac <MX_GPIO_Init+0x1d8>)
 8001b74:	f000 fe5e 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001b78:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b86:	2303      	movs	r3, #3
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b8a:	230b      	movs	r3, #11
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b8e:	f107 031c 	add.w	r3, r7, #28
 8001b92:	4619      	mov	r1, r3
 8001b94:	4805      	ldr	r0, [pc, #20]	; (8001bac <MX_GPIO_Init+0x1d8>)
 8001b96:	f000 fe4d 	bl	8002834 <HAL_GPIO_Init>

}
 8001b9a:	bf00      	nop
 8001b9c:	3730      	adds	r7, #48	; 0x30
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40020400 	.word	0x40020400
 8001bac:	40021800 	.word	0x40021800
 8001bb0:	40020800 	.word	0x40020800
 8001bb4:	40020000 	.word	0x40020000

08001bb8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a1c      	ldr	r2, [pc, #112]	; (8001c38 <HAL_UART_RxCpltCallback+0x80>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d12c      	bne.n	8001c24 <HAL_UART_RxCpltCallback+0x6c>
	{
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001bca:	2101      	movs	r1, #1
 8001bcc:	481b      	ldr	r0, [pc, #108]	; (8001c3c <HAL_UART_RxCpltCallback+0x84>)
 8001bce:	f000 fff6 	bl	8002bbe <HAL_GPIO_TogglePin>


			switch(get_RX[0])
 8001bd2:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <HAL_UART_RxCpltCallback+0x88>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b64      	cmp	r3, #100	; 0x64
 8001bd8:	d010      	beq.n	8001bfc <HAL_UART_RxCpltCallback+0x44>
 8001bda:	2b75      	cmp	r3, #117	; 0x75
 8001bdc:	d11d      	bne.n	8001c1a <HAL_UART_RxCpltCallback+0x62>
			{
				case 'u':
				{
					refTemp += 0.1;
 8001bde:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <HAL_UART_RxCpltCallback+0x8c>)
 8001be0:	edd3 7a00 	vldr	s15, [r3]
 8001be4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001be8:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8001c30 <HAL_UART_RxCpltCallback+0x78>
 8001bec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001bf0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001bf4:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <HAL_UART_RxCpltCallback+0x8c>)
 8001bf6:	edc3 7a00 	vstr	s15, [r3]
					break;
 8001bfa:	e00e      	b.n	8001c1a <HAL_UART_RxCpltCallback+0x62>
				}
				case 'd':
				{
					refTemp -= 0.1;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <HAL_UART_RxCpltCallback+0x8c>)
 8001bfe:	edd3 7a00 	vldr	s15, [r3]
 8001c02:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c06:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8001c30 <HAL_UART_RxCpltCallback+0x78>
 8001c0a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c0e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c12:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <HAL_UART_RxCpltCallback+0x8c>)
 8001c14:	edc3 7a00 	vstr	s15, [r3]
					break;
 8001c18:	bf00      	nop
				}
			}
		HAL_UART_Receive_IT(&huart3, get_RX, 1);
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	4908      	ldr	r1, [pc, #32]	; (8001c40 <HAL_UART_RxCpltCallback+0x88>)
 8001c1e:	480a      	ldr	r0, [pc, #40]	; (8001c48 <HAL_UART_RxCpltCallback+0x90>)
 8001c20:	f004 fb37 	bl	8006292 <HAL_UART_Receive_IT>

	}
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	f3af 8000 	nop.w
 8001c30:	9999999a 	.word	0x9999999a
 8001c34:	3fb99999 	.word	0x3fb99999
 8001c38:	40004800 	.word	0x40004800
 8001c3c:	40020400 	.word	0x40020400
 8001c40:	200008c8 	.word	0x200008c8
 8001c44:	20000000 	.word	0x20000000
 8001c48:	20000314 	.word	0x20000314

08001c4c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af02      	add	r7, sp, #8
 8001c52:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a46      	ldr	r2, [pc, #280]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	f040 8086 	bne.w	8001d6c <HAL_TIM_PeriodElapsedCallback+0x120>
	{
		BMP280_ReadTemperatureAndPressure(&temperature_f, &pressure);
 8001c60:	4945      	ldr	r1, [pc, #276]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001c62:	4846      	ldr	r0, [pc, #280]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001c64:	f7ff f8ec 	bl	8000e40 <BMP280_ReadTemperatureAndPressure>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulseOut);
 8001c68:	4b45      	ldr	r3, [pc, #276]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001c6a:	881a      	ldrh	r2, [r3, #0]
 8001c6c:	4b45      	ldr	r3, [pc, #276]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	635a      	str	r2, [r3, #52]	; 0x34


		if(refTemp < 20.0)
 8001c72:	4b45      	ldr	r3, [pc, #276]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001c74:	edd3 7a00 	vldr	s15, [r3]
 8001c78:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001c7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c84:	d503      	bpl.n	8001c8e <HAL_TIM_PeriodElapsedCallback+0x42>
			{
			refTemp = 20.0;
 8001c86:	4b40      	ldr	r3, [pc, #256]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001c88:	4a40      	ldr	r2, [pc, #256]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	e00c      	b.n	8001ca8 <HAL_TIM_PeriodElapsedCallback+0x5c>
			}
		else if(refTemp > 40.0)
 8001c8e:	4b3e      	ldr	r3, [pc, #248]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001c90:	edd3 7a00 	vldr	s15, [r3]
 8001c94:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001d90 <HAL_TIM_PeriodElapsedCallback+0x144>
 8001c98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca0:	dd02      	ble.n	8001ca8 <HAL_TIM_PeriodElapsedCallback+0x5c>
			{
			refTemp = 40.0;
 8001ca2:	4b39      	ldr	r3, [pc, #228]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001ca4:	4a3b      	ldr	r2, [pc, #236]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001ca6:	601a      	str	r2, [r3, #0]
			}

		calcPID(refTemp, temperature_f, &pid);
 8001ca8:	4b37      	ldr	r3, [pc, #220]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001caa:	edd3 7a00 	vldr	s15, [r3]
 8001cae:	4b33      	ldr	r3, [pc, #204]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001cb0:	ed93 7a00 	vldr	s14, [r3]
 8001cb4:	4838      	ldr	r0, [pc, #224]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001cb6:	eef0 0a47 	vmov.f32	s1, s14
 8001cba:	eeb0 0a67 	vmov.f32	s0, s15
 8001cbe:	f7ff fba9 	bl	8001414 <calcPID>

		pulse = htim1.Init.Period * pid.U;
 8001cc2:	4b30      	ldr	r3, [pc, #192]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	ee07 3a90 	vmov	s15, r3
 8001cca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cce:	4b32      	ldr	r3, [pc, #200]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cd8:	4b30      	ldr	r3, [pc, #192]	; (8001d9c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001cda:	edc3 7a00 	vstr	s15, [r3]

		if(pulse < 0.0)
 8001cde:	4b2f      	ldr	r3, [pc, #188]	; (8001d9c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001ce0:	edd3 7a00 	vldr	s15, [r3]
 8001ce4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cec:	d503      	bpl.n	8001cf6 <HAL_TIM_PeriodElapsedCallback+0xaa>
			{
			pulseOut = 0;
 8001cee:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	801a      	strh	r2, [r3, #0]
 8001cf4:	e01d      	b.n	8001d32 <HAL_TIM_PeriodElapsedCallback+0xe6>
			}
		else if(pulse > htim1.Init.Period)
 8001cf6:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	ee07 3a90 	vmov	s15, r3
 8001cfe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d02:	4b26      	ldr	r3, [pc, #152]	; (8001d9c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001d04:	edd3 7a00 	vldr	s15, [r3]
 8001d08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d10:	d505      	bpl.n	8001d1e <HAL_TIM_PeriodElapsedCallback+0xd2>
			{
			pulseOut = htim1.Init.Period;
 8001d12:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001d1a:	801a      	strh	r2, [r3, #0]
 8001d1c:	e009      	b.n	8001d32 <HAL_TIM_PeriodElapsedCallback+0xe6>
			}
		else
			{
			pulseOut = (uint16_t) pulse;
 8001d1e:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001d20:	edd3 7a00 	vldr	s15, [r3]
 8001d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d28:	ee17 3a90 	vmov	r3, s15
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001d30:	801a      	strh	r2, [r3, #0]
			}

		sprintf(currentTemperature_ch, "%f : %f \n\r", temperature_f, refTemp);
 8001d32:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001d34:	edd3 7a00 	vldr	s15, [r3]
 8001d38:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001d3e:	edd3 7a00 	vldr	s15, [r3]
 8001d42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d46:	ed8d 7b00 	vstr	d7, [sp]
 8001d4a:	ec53 2b16 	vmov	r2, r3, d6
 8001d4e:	4914      	ldr	r1, [pc, #80]	; (8001da0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001d50:	4814      	ldr	r0, [pc, #80]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001d52:	f006 fe53 	bl	80089fc <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t *)currentTemperature_ch,
 8001d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d5a:	2217      	movs	r2, #23
 8001d5c:	4911      	ldr	r1, [pc, #68]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001d5e:	4812      	ldr	r0, [pc, #72]	; (8001da8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001d60:	f004 fa14 	bl	800618c <HAL_UART_Transmit>
										sizeof(currentTemperature_ch)-1, 1000);

		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8001d64:	2180      	movs	r1, #128	; 0x80
 8001d66:	4811      	ldr	r0, [pc, #68]	; (8001dac <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001d68:	f000 ff29 	bl	8002bbe <HAL_GPIO_TogglePin>
	}
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40000400 	.word	0x40000400
 8001d78:	200008c0 	.word	0x200008c0
 8001d7c:	200008a4 	.word	0x200008a4
 8001d80:	200008c4 	.word	0x200008c4
 8001d84:	2000027c 	.word	0x2000027c
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	41a00000 	.word	0x41a00000
 8001d90:	42200000 	.word	0x42200000
 8001d94:	42200000 	.word	0x42200000
 8001d98:	200008cc 	.word	0x200008cc
 8001d9c:	20000004 	.word	0x20000004
 8001da0:	0800c448 	.word	0x0800c448
 8001da4:	200008a8 	.word	0x200008a8
 8001da8:	20000314 	.word	0x20000314
 8001dac:	40020400 	.word	0x40020400

08001db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001db4:	b672      	cpsid	i
}
 8001db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001db8:	e7fe      	b.n	8001db8 <Error_Handler+0x8>
	...

08001dbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <HAL_MspInit+0x44>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	4a0e      	ldr	r2, [pc, #56]	; (8001e00 <HAL_MspInit+0x44>)
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dce:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <HAL_MspInit+0x44>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	607b      	str	r3, [r7, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_MspInit+0x44>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	4a08      	ldr	r2, [pc, #32]	; (8001e00 <HAL_MspInit+0x44>)
 8001de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de4:	6453      	str	r3, [r2, #68]	; 0x44
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_MspInit+0x44>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800

08001e04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b0ae      	sub	sp, #184	; 0xb8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	2290      	movs	r2, #144	; 0x90
 8001e22:	2100      	movs	r1, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f005 ff93 	bl	8007d50 <memset>
  if(hi2c->Instance==I2C1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a22      	ldr	r2, [pc, #136]	; (8001eb8 <HAL_I2C_MspInit+0xb4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d13c      	bne.n	8001eae <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e38:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	4618      	mov	r0, r3
 8001e44:	f002 faf2 	bl	800442c <HAL_RCCEx_PeriphCLKConfig>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e4e:	f7ff ffaf 	bl	8001db0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e52:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <HAL_I2C_MspInit+0xb8>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a19      	ldr	r2, [pc, #100]	; (8001ebc <HAL_I2C_MspInit+0xb8>)
 8001e58:	f043 0302 	orr.w	r3, r3, #2
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <HAL_I2C_MspInit+0xb8>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001e6a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001e6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e72:	2312      	movs	r3, #18
 8001e74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e84:	2304      	movs	r3, #4
 8001e86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e8e:	4619      	mov	r1, r3
 8001e90:	480b      	ldr	r0, [pc, #44]	; (8001ec0 <HAL_I2C_MspInit+0xbc>)
 8001e92:	f000 fccf 	bl	8002834 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <HAL_I2C_MspInit+0xb8>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	4a08      	ldr	r2, [pc, #32]	; (8001ebc <HAL_I2C_MspInit+0xb8>)
 8001e9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <HAL_I2C_MspInit+0xb8>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001eae:	bf00      	nop
 8001eb0:	37b8      	adds	r7, #184	; 0xb8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40005400 	.word	0x40005400
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40020400 	.word	0x40020400

08001ec4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a16      	ldr	r2, [pc, #88]	; (8001f2c <HAL_TIM_Base_MspInit+0x68>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ed6:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <HAL_TIM_Base_MspInit+0x6c>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	4a15      	ldr	r2, [pc, #84]	; (8001f30 <HAL_TIM_Base_MspInit+0x6c>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee2:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <HAL_TIM_Base_MspInit+0x6c>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001eee:	e018      	b.n	8001f22 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0f      	ldr	r2, [pc, #60]	; (8001f34 <HAL_TIM_Base_MspInit+0x70>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d113      	bne.n	8001f22 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <HAL_TIM_Base_MspInit+0x6c>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <HAL_TIM_Base_MspInit+0x6c>)
 8001f00:	f043 0302 	orr.w	r3, r3, #2
 8001f04:	6413      	str	r3, [r2, #64]	; 0x40
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_TIM_Base_MspInit+0x6c>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2100      	movs	r1, #0
 8001f16:	201d      	movs	r0, #29
 8001f18:	f000 fbc3 	bl	80026a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f1c:	201d      	movs	r0, #29
 8001f1e:	f000 fbdc 	bl	80026da <HAL_NVIC_EnableIRQ>
}
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40010000 	.word	0x40010000
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40000400 	.word	0x40000400

08001f38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 030c 	add.w	r3, r7, #12
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a11      	ldr	r2, [pc, #68]	; (8001f9c <HAL_TIM_MspPostInit+0x64>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d11c      	bne.n	8001f94 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f5a:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <HAL_TIM_MspPostInit+0x68>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a10      	ldr	r2, [pc, #64]	; (8001fa0 <HAL_TIM_MspPostInit+0x68>)
 8001f60:	f043 0310 	orr.w	r3, r3, #16
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <HAL_TIM_MspPostInit+0x68>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f84:	2301      	movs	r3, #1
 8001f86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f88:	f107 030c 	add.w	r3, r7, #12
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4805      	ldr	r0, [pc, #20]	; (8001fa4 <HAL_TIM_MspPostInit+0x6c>)
 8001f90:	f000 fc50 	bl	8002834 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f94:	bf00      	nop
 8001f96:	3720      	adds	r7, #32
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40010000 	.word	0x40010000
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40021000 	.word	0x40021000

08001fa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b0ae      	sub	sp, #184	; 0xb8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	2290      	movs	r2, #144	; 0x90
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f005 fec1 	bl	8007d50 <memset>
  if(huart->Instance==USART3)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a26      	ldr	r2, [pc, #152]	; (800206c <HAL_UART_MspInit+0xc4>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d144      	bne.n	8002062 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001fd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fdc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fe2:	f107 0314 	add.w	r3, r7, #20
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f002 fa20 	bl	800442c <HAL_RCCEx_PeriphCLKConfig>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ff2:	f7ff fedd 	bl	8001db0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ff6:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <HAL_UART_MspInit+0xc8>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	4a1d      	ldr	r2, [pc, #116]	; (8002070 <HAL_UART_MspInit+0xc8>)
 8001ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002000:	6413      	str	r3, [r2, #64]	; 0x40
 8002002:	4b1b      	ldr	r3, [pc, #108]	; (8002070 <HAL_UART_MspInit+0xc8>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800200e:	4b18      	ldr	r3, [pc, #96]	; (8002070 <HAL_UART_MspInit+0xc8>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a17      	ldr	r2, [pc, #92]	; (8002070 <HAL_UART_MspInit+0xc8>)
 8002014:	f043 0308 	orr.w	r3, r3, #8
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b15      	ldr	r3, [pc, #84]	; (8002070 <HAL_UART_MspInit+0xc8>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002026:	f44f 7340 	mov.w	r3, #768	; 0x300
 800202a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202e:	2302      	movs	r3, #2
 8002030:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203a:	2303      	movs	r3, #3
 800203c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002040:	2307      	movs	r3, #7
 8002042:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002046:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800204a:	4619      	mov	r1, r3
 800204c:	4809      	ldr	r0, [pc, #36]	; (8002074 <HAL_UART_MspInit+0xcc>)
 800204e:	f000 fbf1 	bl	8002834 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002052:	2200      	movs	r2, #0
 8002054:	2100      	movs	r1, #0
 8002056:	2027      	movs	r0, #39	; 0x27
 8002058:	f000 fb23 	bl	80026a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800205c:	2027      	movs	r0, #39	; 0x27
 800205e:	f000 fb3c 	bl	80026da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002062:	bf00      	nop
 8002064:	37b8      	adds	r7, #184	; 0xb8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40004800 	.word	0x40004800
 8002070:	40023800 	.word	0x40023800
 8002074:	40020c00 	.word	0x40020c00

08002078 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b0ae      	sub	sp, #184	; 0xb8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	2290      	movs	r2, #144	; 0x90
 8002096:	2100      	movs	r1, #0
 8002098:	4618      	mov	r0, r3
 800209a:	f005 fe59 	bl	8007d50 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020a6:	d159      	bne.n	800215c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80020a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020ac:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	4618      	mov	r0, r3
 80020ba:	f002 f9b7 	bl	800442c <HAL_RCCEx_PeriphCLKConfig>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80020c4:	f7ff fe74 	bl	8001db0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c8:	4b26      	ldr	r3, [pc, #152]	; (8002164 <HAL_PCD_MspInit+0xec>)
 80020ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020cc:	4a25      	ldr	r2, [pc, #148]	; (8002164 <HAL_PCD_MspInit+0xec>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	6313      	str	r3, [r2, #48]	; 0x30
 80020d4:	4b23      	ldr	r3, [pc, #140]	; (8002164 <HAL_PCD_MspInit+0xec>)
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80020e0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80020e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f4:	2303      	movs	r3, #3
 80020f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80020fa:	230a      	movs	r3, #10
 80020fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002100:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002104:	4619      	mov	r1, r3
 8002106:	4818      	ldr	r0, [pc, #96]	; (8002168 <HAL_PCD_MspInit+0xf0>)
 8002108:	f000 fb94 	bl	8002834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800210c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002110:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002114:	2300      	movs	r3, #0
 8002116:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002120:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002124:	4619      	mov	r1, r3
 8002126:	4810      	ldr	r0, [pc, #64]	; (8002168 <HAL_PCD_MspInit+0xf0>)
 8002128:	f000 fb84 	bl	8002834 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800212c:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <HAL_PCD_MspInit+0xec>)
 800212e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002130:	4a0c      	ldr	r2, [pc, #48]	; (8002164 <HAL_PCD_MspInit+0xec>)
 8002132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002136:	6353      	str	r3, [r2, #52]	; 0x34
 8002138:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <HAL_PCD_MspInit+0xec>)
 800213a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800213c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4b07      	ldr	r3, [pc, #28]	; (8002164 <HAL_PCD_MspInit+0xec>)
 8002146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002148:	4a06      	ldr	r2, [pc, #24]	; (8002164 <HAL_PCD_MspInit+0xec>)
 800214a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800214e:	6453      	str	r3, [r2, #68]	; 0x44
 8002150:	4b04      	ldr	r3, [pc, #16]	; (8002164 <HAL_PCD_MspInit+0xec>)
 8002152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800215c:	bf00      	nop
 800215e:	37b8      	adds	r7, #184	; 0xb8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40023800 	.word	0x40023800
 8002168:	40020000 	.word	0x40020000

0800216c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002170:	e7fe      	b.n	8002170 <NMI_Handler+0x4>

08002172 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002176:	e7fe      	b.n	8002176 <HardFault_Handler+0x4>

08002178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800217c:	e7fe      	b.n	800217c <MemManage_Handler+0x4>

0800217e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002182:	e7fe      	b.n	8002182 <BusFault_Handler+0x4>

08002184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002188:	e7fe      	b.n	8002188 <UsageFault_Handler+0x4>

0800218a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021b8:	f000 f954 	bl	8002464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}

080021c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021c4:	4802      	ldr	r0, [pc, #8]	; (80021d0 <TIM3_IRQHandler+0x10>)
 80021c6:	f002 ff85 	bl	80050d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200002c8 	.word	0x200002c8

080021d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80021d8:	4802      	ldr	r0, [pc, #8]	; (80021e4 <USART3_IRQHandler+0x10>)
 80021da:	f004 f89f 	bl	800631c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000314 	.word	0x20000314

080021e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return 1;
 80021ec:	2301      	movs	r3, #1
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <_kill>:

int _kill(int pid, int sig)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002202:	f005 fd7b 	bl	8007cfc <__errno>
 8002206:	4603      	mov	r3, r0
 8002208:	2216      	movs	r2, #22
 800220a:	601a      	str	r2, [r3, #0]
  return -1;
 800220c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <_exit>:

void _exit (int status)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002220:	f04f 31ff 	mov.w	r1, #4294967295
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff ffe7 	bl	80021f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800222a:	e7fe      	b.n	800222a <_exit+0x12>

0800222c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	e00a      	b.n	8002254 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800223e:	f3af 8000 	nop.w
 8002242:	4601      	mov	r1, r0
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	60ba      	str	r2, [r7, #8]
 800224a:	b2ca      	uxtb	r2, r1
 800224c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	3301      	adds	r3, #1
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	429a      	cmp	r2, r3
 800225a:	dbf0      	blt.n	800223e <_read+0x12>
  }

  return len;
 800225c:	687b      	ldr	r3, [r7, #4]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b086      	sub	sp, #24
 800226a:	af00      	add	r7, sp, #0
 800226c:	60f8      	str	r0, [r7, #12]
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	e009      	b.n	800228c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	60ba      	str	r2, [r7, #8]
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	3301      	adds	r3, #1
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	429a      	cmp	r2, r3
 8002292:	dbf1      	blt.n	8002278 <_write+0x12>
  }
  return len;
 8002294:	687b      	ldr	r3, [r7, #4]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <_close>:

int _close(int file)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022c6:	605a      	str	r2, [r3, #4]
  return 0;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <_isatty>:

int _isatty(int file)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022de:	2301      	movs	r3, #1
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002310:	4a14      	ldr	r2, [pc, #80]	; (8002364 <_sbrk+0x5c>)
 8002312:	4b15      	ldr	r3, [pc, #84]	; (8002368 <_sbrk+0x60>)
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800231c:	4b13      	ldr	r3, [pc, #76]	; (800236c <_sbrk+0x64>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d102      	bne.n	800232a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <_sbrk+0x64>)
 8002326:	4a12      	ldr	r2, [pc, #72]	; (8002370 <_sbrk+0x68>)
 8002328:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <_sbrk+0x64>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4413      	add	r3, r2
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	429a      	cmp	r2, r3
 8002336:	d207      	bcs.n	8002348 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002338:	f005 fce0 	bl	8007cfc <__errno>
 800233c:	4603      	mov	r3, r0
 800233e:	220c      	movs	r2, #12
 8002340:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002342:	f04f 33ff 	mov.w	r3, #4294967295
 8002346:	e009      	b.n	800235c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002348:	4b08      	ldr	r3, [pc, #32]	; (800236c <_sbrk+0x64>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800234e:	4b07      	ldr	r3, [pc, #28]	; (800236c <_sbrk+0x64>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	4a05      	ldr	r2, [pc, #20]	; (800236c <_sbrk+0x64>)
 8002358:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800235a:	68fb      	ldr	r3, [r7, #12]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20080000 	.word	0x20080000
 8002368:	00000400 	.word	0x00000400
 800236c:	200008f8 	.word	0x200008f8
 8002370:	20000910 	.word	0x20000910

08002374 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <SystemInit+0x20>)
 800237a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237e:	4a05      	ldr	r2, [pc, #20]	; (8002394 <SystemInit+0x20>)
 8002380:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002384:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002398:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800239c:	480d      	ldr	r0, [pc, #52]	; (80023d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800239e:	490e      	ldr	r1, [pc, #56]	; (80023d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023a0:	4a0e      	ldr	r2, [pc, #56]	; (80023dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023a4:	e002      	b.n	80023ac <LoopCopyDataInit>

080023a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023aa:	3304      	adds	r3, #4

080023ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023b0:	d3f9      	bcc.n	80023a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023b2:	4a0b      	ldr	r2, [pc, #44]	; (80023e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023b4:	4c0b      	ldr	r4, [pc, #44]	; (80023e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023b8:	e001      	b.n	80023be <LoopFillZerobss>

080023ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023bc:	3204      	adds	r2, #4

080023be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023c0:	d3fb      	bcc.n	80023ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023c2:	f7ff ffd7 	bl	8002374 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023c6:	f005 fc9f 	bl	8007d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ca:	f7ff f899 	bl	8001500 <main>
  bx  lr    
 80023ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023d0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80023d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023d8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80023dc:	0800c924 	.word	0x0800c924
  ldr r2, =_sbss
 80023e0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80023e4:	20000910 	.word	0x20000910

080023e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023e8:	e7fe      	b.n	80023e8 <ADC_IRQHandler>

080023ea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023ee:	2003      	movs	r0, #3
 80023f0:	f000 f94c 	bl	800268c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023f4:	2000      	movs	r0, #0
 80023f6:	f000 f805 	bl	8002404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023fa:	f7ff fcdf 	bl	8001dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800240c:	4b12      	ldr	r3, [pc, #72]	; (8002458 <HAL_InitTick+0x54>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b12      	ldr	r3, [pc, #72]	; (800245c <HAL_InitTick+0x58>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	4619      	mov	r1, r3
 8002416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800241a:	fbb3 f3f1 	udiv	r3, r3, r1
 800241e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002422:	4618      	mov	r0, r3
 8002424:	f000 f967 	bl	80026f6 <HAL_SYSTICK_Config>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e00e      	b.n	8002450 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b0f      	cmp	r3, #15
 8002436:	d80a      	bhi.n	800244e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002438:	2200      	movs	r2, #0
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	f04f 30ff 	mov.w	r0, #4294967295
 8002440:	f000 f92f 	bl	80026a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002444:	4a06      	ldr	r2, [pc, #24]	; (8002460 <HAL_InitTick+0x5c>)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	e000      	b.n	8002450 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
}
 8002450:	4618      	mov	r0, r3
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20000008 	.word	0x20000008
 800245c:	20000010 	.word	0x20000010
 8002460:	2000000c 	.word	0x2000000c

08002464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_IncTick+0x20>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_IncTick+0x24>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4413      	add	r3, r2
 8002474:	4a04      	ldr	r2, [pc, #16]	; (8002488 <HAL_IncTick+0x24>)
 8002476:	6013      	str	r3, [r2, #0]
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	20000010 	.word	0x20000010
 8002488:	200008fc 	.word	0x200008fc

0800248c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return uwTick;
 8002490:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <HAL_GetTick+0x14>)
 8002492:	681b      	ldr	r3, [r3, #0]
}
 8002494:	4618      	mov	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	200008fc 	.word	0x200008fc

080024a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024ac:	f7ff ffee 	bl	800248c <HAL_GetTick>
 80024b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024bc:	d005      	beq.n	80024ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024be:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <HAL_Delay+0x44>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4413      	add	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024ca:	bf00      	nop
 80024cc:	f7ff ffde 	bl	800248c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d8f7      	bhi.n	80024cc <HAL_Delay+0x28>
  {
  }
}
 80024dc:	bf00      	nop
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000010 	.word	0x20000010

080024ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <__NVIC_SetPriorityGrouping+0x40>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002508:	4013      	ands	r3, r2
 800250a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002514:	4b06      	ldr	r3, [pc, #24]	; (8002530 <__NVIC_SetPriorityGrouping+0x44>)
 8002516:	4313      	orrs	r3, r2
 8002518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800251a:	4a04      	ldr	r2, [pc, #16]	; (800252c <__NVIC_SetPriorityGrouping+0x40>)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	60d3      	str	r3, [r2, #12]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000ed00 	.word	0xe000ed00
 8002530:	05fa0000 	.word	0x05fa0000

08002534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002538:	4b04      	ldr	r3, [pc, #16]	; (800254c <__NVIC_GetPriorityGrouping+0x18>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	0a1b      	lsrs	r3, r3, #8
 800253e:	f003 0307 	and.w	r3, r3, #7
}
 8002542:	4618      	mov	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800255a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255e:	2b00      	cmp	r3, #0
 8002560:	db0b      	blt.n	800257a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	f003 021f 	and.w	r2, r3, #31
 8002568:	4907      	ldr	r1, [pc, #28]	; (8002588 <__NVIC_EnableIRQ+0x38>)
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	095b      	lsrs	r3, r3, #5
 8002570:	2001      	movs	r0, #1
 8002572:	fa00 f202 	lsl.w	r2, r0, r2
 8002576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	e000e100 	.word	0xe000e100

0800258c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	6039      	str	r1, [r7, #0]
 8002596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259c:	2b00      	cmp	r3, #0
 800259e:	db0a      	blt.n	80025b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	490c      	ldr	r1, [pc, #48]	; (80025d8 <__NVIC_SetPriority+0x4c>)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	0112      	lsls	r2, r2, #4
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	440b      	add	r3, r1
 80025b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025b4:	e00a      	b.n	80025cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	4908      	ldr	r1, [pc, #32]	; (80025dc <__NVIC_SetPriority+0x50>)
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	3b04      	subs	r3, #4
 80025c4:	0112      	lsls	r2, r2, #4
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	440b      	add	r3, r1
 80025ca:	761a      	strb	r2, [r3, #24]
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	e000e100 	.word	0xe000e100
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b089      	sub	sp, #36	; 0x24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f1c3 0307 	rsb	r3, r3, #7
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	bf28      	it	cs
 80025fe:	2304      	movcs	r3, #4
 8002600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3304      	adds	r3, #4
 8002606:	2b06      	cmp	r3, #6
 8002608:	d902      	bls.n	8002610 <NVIC_EncodePriority+0x30>
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	3b03      	subs	r3, #3
 800260e:	e000      	b.n	8002612 <NVIC_EncodePriority+0x32>
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002614:	f04f 32ff 	mov.w	r2, #4294967295
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43da      	mvns	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	401a      	ands	r2, r3
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002628:	f04f 31ff 	mov.w	r1, #4294967295
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	fa01 f303 	lsl.w	r3, r1, r3
 8002632:	43d9      	mvns	r1, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002638:	4313      	orrs	r3, r2
         );
}
 800263a:	4618      	mov	r0, r3
 800263c:	3724      	adds	r7, #36	; 0x24
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
	...

08002648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3b01      	subs	r3, #1
 8002654:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002658:	d301      	bcc.n	800265e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800265a:	2301      	movs	r3, #1
 800265c:	e00f      	b.n	800267e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800265e:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <SysTick_Config+0x40>)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3b01      	subs	r3, #1
 8002664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002666:	210f      	movs	r1, #15
 8002668:	f04f 30ff 	mov.w	r0, #4294967295
 800266c:	f7ff ff8e 	bl	800258c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <SysTick_Config+0x40>)
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002676:	4b04      	ldr	r3, [pc, #16]	; (8002688 <SysTick_Config+0x40>)
 8002678:	2207      	movs	r2, #7
 800267a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	e000e010 	.word	0xe000e010

0800268c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7ff ff29 	bl	80024ec <__NVIC_SetPriorityGrouping>
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b086      	sub	sp, #24
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	4603      	mov	r3, r0
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
 80026ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026b4:	f7ff ff3e 	bl	8002534 <__NVIC_GetPriorityGrouping>
 80026b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68b9      	ldr	r1, [r7, #8]
 80026be:	6978      	ldr	r0, [r7, #20]
 80026c0:	f7ff ff8e 	bl	80025e0 <NVIC_EncodePriority>
 80026c4:	4602      	mov	r2, r0
 80026c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ca:	4611      	mov	r1, r2
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff ff5d 	bl	800258c <__NVIC_SetPriority>
}
 80026d2:	bf00      	nop
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	4603      	mov	r3, r0
 80026e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff ff31 	bl	8002550 <__NVIC_EnableIRQ>
}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7ff ffa2 	bl	8002648 <SysTick_Config>
 8002704:	4603      	mov	r3, r0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800271c:	f7ff feb6 	bl	800248c <HAL_GetTick>
 8002720:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d008      	beq.n	8002740 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2280      	movs	r2, #128	; 0x80
 8002732:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e052      	b.n	80027e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0216 	bic.w	r2, r2, #22
 800274e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695a      	ldr	r2, [r3, #20]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800275e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	2b00      	cmp	r3, #0
 8002766:	d103      	bne.n	8002770 <HAL_DMA_Abort+0x62>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800276c:	2b00      	cmp	r3, #0
 800276e:	d007      	beq.n	8002780 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0208 	bic.w	r2, r2, #8
 800277e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0201 	bic.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002790:	e013      	b.n	80027ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002792:	f7ff fe7b 	bl	800248c <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b05      	cmp	r3, #5
 800279e:	d90c      	bls.n	80027ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2220      	movs	r2, #32
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2203      	movs	r2, #3
 80027aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e015      	b.n	80027e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1e4      	bne.n	8002792 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027cc:	223f      	movs	r2, #63	; 0x3f
 80027ce:	409a      	lsls	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d004      	beq.n	800280c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2280      	movs	r2, #128	; 0x80
 8002806:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e00c      	b.n	8002826 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2205      	movs	r2, #5
 8002810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0201 	bic.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
	...

08002834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002834:	b480      	push	{r7}
 8002836:	b089      	sub	sp, #36	; 0x24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	e175      	b.n	8002b40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002854:	2201      	movs	r2, #1
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4013      	ands	r3, r2
 8002866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	429a      	cmp	r2, r3
 800286e:	f040 8164 	bne.w	8002b3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b01      	cmp	r3, #1
 800287c:	d005      	beq.n	800288a <HAL_GPIO_Init+0x56>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d130      	bne.n	80028ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	2203      	movs	r2, #3
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028c0:	2201      	movs	r2, #1
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 0201 	and.w	r2, r3, #1
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d017      	beq.n	8002928 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	2203      	movs	r2, #3
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d123      	bne.n	800297c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	08da      	lsrs	r2, r3, #3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3208      	adds	r2, #8
 800293c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	220f      	movs	r2, #15
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	08da      	lsrs	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3208      	adds	r2, #8
 8002976:	69b9      	ldr	r1, [r7, #24]
 8002978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	2203      	movs	r2, #3
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0203 	and.w	r2, r3, #3
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80be 	beq.w	8002b3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029be:	4b66      	ldr	r3, [pc, #408]	; (8002b58 <HAL_GPIO_Init+0x324>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	4a65      	ldr	r2, [pc, #404]	; (8002b58 <HAL_GPIO_Init+0x324>)
 80029c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ca:	4b63      	ldr	r3, [pc, #396]	; (8002b58 <HAL_GPIO_Init+0x324>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80029d6:	4a61      	ldr	r2, [pc, #388]	; (8002b5c <HAL_GPIO_Init+0x328>)
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	089b      	lsrs	r3, r3, #2
 80029dc:	3302      	adds	r3, #2
 80029de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	220f      	movs	r2, #15
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a58      	ldr	r2, [pc, #352]	; (8002b60 <HAL_GPIO_Init+0x32c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d037      	beq.n	8002a72 <HAL_GPIO_Init+0x23e>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a57      	ldr	r2, [pc, #348]	; (8002b64 <HAL_GPIO_Init+0x330>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d031      	beq.n	8002a6e <HAL_GPIO_Init+0x23a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a56      	ldr	r2, [pc, #344]	; (8002b68 <HAL_GPIO_Init+0x334>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d02b      	beq.n	8002a6a <HAL_GPIO_Init+0x236>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a55      	ldr	r2, [pc, #340]	; (8002b6c <HAL_GPIO_Init+0x338>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d025      	beq.n	8002a66 <HAL_GPIO_Init+0x232>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a54      	ldr	r2, [pc, #336]	; (8002b70 <HAL_GPIO_Init+0x33c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d01f      	beq.n	8002a62 <HAL_GPIO_Init+0x22e>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a53      	ldr	r2, [pc, #332]	; (8002b74 <HAL_GPIO_Init+0x340>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d019      	beq.n	8002a5e <HAL_GPIO_Init+0x22a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a52      	ldr	r2, [pc, #328]	; (8002b78 <HAL_GPIO_Init+0x344>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d013      	beq.n	8002a5a <HAL_GPIO_Init+0x226>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a51      	ldr	r2, [pc, #324]	; (8002b7c <HAL_GPIO_Init+0x348>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d00d      	beq.n	8002a56 <HAL_GPIO_Init+0x222>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a50      	ldr	r2, [pc, #320]	; (8002b80 <HAL_GPIO_Init+0x34c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d007      	beq.n	8002a52 <HAL_GPIO_Init+0x21e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a4f      	ldr	r2, [pc, #316]	; (8002b84 <HAL_GPIO_Init+0x350>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d101      	bne.n	8002a4e <HAL_GPIO_Init+0x21a>
 8002a4a:	2309      	movs	r3, #9
 8002a4c:	e012      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a4e:	230a      	movs	r3, #10
 8002a50:	e010      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a52:	2308      	movs	r3, #8
 8002a54:	e00e      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a56:	2307      	movs	r3, #7
 8002a58:	e00c      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a5a:	2306      	movs	r3, #6
 8002a5c:	e00a      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a5e:	2305      	movs	r3, #5
 8002a60:	e008      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a62:	2304      	movs	r3, #4
 8002a64:	e006      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a66:	2303      	movs	r3, #3
 8002a68:	e004      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e002      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a72:	2300      	movs	r3, #0
 8002a74:	69fa      	ldr	r2, [r7, #28]
 8002a76:	f002 0203 	and.w	r2, r2, #3
 8002a7a:	0092      	lsls	r2, r2, #2
 8002a7c:	4093      	lsls	r3, r2
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a84:	4935      	ldr	r1, [pc, #212]	; (8002b5c <HAL_GPIO_Init+0x328>)
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	089b      	lsrs	r3, r3, #2
 8002a8a:	3302      	adds	r3, #2
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a92:	4b3d      	ldr	r3, [pc, #244]	; (8002b88 <HAL_GPIO_Init+0x354>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ab6:	4a34      	ldr	r2, [pc, #208]	; (8002b88 <HAL_GPIO_Init+0x354>)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002abc:	4b32      	ldr	r3, [pc, #200]	; (8002b88 <HAL_GPIO_Init+0x354>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ae0:	4a29      	ldr	r2, [pc, #164]	; (8002b88 <HAL_GPIO_Init+0x354>)
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ae6:	4b28      	ldr	r3, [pc, #160]	; (8002b88 <HAL_GPIO_Init+0x354>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	43db      	mvns	r3, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4013      	ands	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b0a:	4a1f      	ldr	r2, [pc, #124]	; (8002b88 <HAL_GPIO_Init+0x354>)
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b10:	4b1d      	ldr	r3, [pc, #116]	; (8002b88 <HAL_GPIO_Init+0x354>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b34:	4a14      	ldr	r2, [pc, #80]	; (8002b88 <HAL_GPIO_Init+0x354>)
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	61fb      	str	r3, [r7, #28]
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	2b0f      	cmp	r3, #15
 8002b44:	f67f ae86 	bls.w	8002854 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
 8002b4c:	3724      	adds	r7, #36	; 0x24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40013800 	.word	0x40013800
 8002b60:	40020000 	.word	0x40020000
 8002b64:	40020400 	.word	0x40020400
 8002b68:	40020800 	.word	0x40020800
 8002b6c:	40020c00 	.word	0x40020c00
 8002b70:	40021000 	.word	0x40021000
 8002b74:	40021400 	.word	0x40021400
 8002b78:	40021800 	.word	0x40021800
 8002b7c:	40021c00 	.word	0x40021c00
 8002b80:	40022000 	.word	0x40022000
 8002b84:	40022400 	.word	0x40022400
 8002b88:	40013c00 	.word	0x40013c00

08002b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	807b      	strh	r3, [r7, #2]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b9c:	787b      	ldrb	r3, [r7, #1]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ba2:	887a      	ldrh	r2, [r7, #2]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ba8:	e003      	b.n	8002bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002baa:	887b      	ldrh	r3, [r7, #2]
 8002bac:	041a      	lsls	r2, r3, #16
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	619a      	str	r2, [r3, #24]
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b085      	sub	sp, #20
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bd0:	887a      	ldrh	r2, [r7, #2]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	041a      	lsls	r2, r3, #16
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	43d9      	mvns	r1, r3
 8002bdc:	887b      	ldrh	r3, [r7, #2]
 8002bde:	400b      	ands	r3, r1
 8002be0:	431a      	orrs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	619a      	str	r2, [r3, #24]
}
 8002be6:	bf00      	nop
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
	...

08002bf4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e07f      	b.n	8002d06 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff f8f2 	bl	8001e04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2224      	movs	r2, #36	; 0x24
 8002c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0201 	bic.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d107      	bne.n	8002c6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	e006      	b.n	8002c7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d104      	bne.n	8002c8e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6859      	ldr	r1, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <HAL_I2C_Init+0x11c>)
 8002c9a:	430b      	orrs	r3, r1
 8002c9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	691a      	ldr	r2, [r3, #16]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	69d9      	ldr	r1, [r3, #28]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a1a      	ldr	r2, [r3, #32]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	02008000 	.word	0x02008000

08002d14 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	4608      	mov	r0, r1
 8002d1e:	4611      	mov	r1, r2
 8002d20:	461a      	mov	r2, r3
 8002d22:	4603      	mov	r3, r0
 8002d24:	817b      	strh	r3, [r7, #10]
 8002d26:	460b      	mov	r3, r1
 8002d28:	813b      	strh	r3, [r7, #8]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b20      	cmp	r3, #32
 8002d38:	f040 80f9 	bne.w	8002f2e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <HAL_I2C_Mem_Write+0x34>
 8002d42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d105      	bne.n	8002d54 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d4e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0ed      	b.n	8002f30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_I2C_Mem_Write+0x4e>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e0e6      	b.n	8002f30 <HAL_I2C_Mem_Write+0x21c>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d6a:	f7ff fb8f 	bl	800248c <HAL_GetTick>
 8002d6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	2319      	movs	r3, #25
 8002d76:	2201      	movs	r2, #1
 8002d78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 fac3 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e0d1      	b.n	8002f30 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2221      	movs	r2, #33	; 0x21
 8002d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2240      	movs	r2, #64	; 0x40
 8002d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a3a      	ldr	r2, [r7, #32]
 8002da6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002dac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002db4:	88f8      	ldrh	r0, [r7, #6]
 8002db6:	893a      	ldrh	r2, [r7, #8]
 8002db8:	8979      	ldrh	r1, [r7, #10]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	9301      	str	r3, [sp, #4]
 8002dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 f9d3 	bl	8003170 <I2C_RequestMemoryWrite>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0a9      	b.n	8002f30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2bff      	cmp	r3, #255	; 0xff
 8002de4:	d90e      	bls.n	8002e04 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	22ff      	movs	r2, #255	; 0xff
 8002dea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	8979      	ldrh	r1, [r7, #10]
 8002df4:	2300      	movs	r3, #0
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 fc1f 	bl	8003640 <I2C_TransferConfig>
 8002e02:	e00f      	b.n	8002e24 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	8979      	ldrh	r1, [r7, #10]
 8002e16:	2300      	movs	r3, #0
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 fc0e 	bl	8003640 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 faad 	bl	8003388 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e07b      	b.n	8002f30 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	781a      	ldrb	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d034      	beq.n	8002edc <HAL_I2C_Mem_Write+0x1c8>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d130      	bne.n	8002edc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e80:	2200      	movs	r2, #0
 8002e82:	2180      	movs	r1, #128	; 0x80
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 fa3f 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e04d      	b.n	8002f30 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2bff      	cmp	r3, #255	; 0xff
 8002e9c:	d90e      	bls.n	8002ebc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	22ff      	movs	r2, #255	; 0xff
 8002ea2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	8979      	ldrh	r1, [r7, #10]
 8002eac:	2300      	movs	r3, #0
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 fbc3 	bl	8003640 <I2C_TransferConfig>
 8002eba:	e00f      	b.n	8002edc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	8979      	ldrh	r1, [r7, #10]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 fbb2 	bl	8003640 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d19e      	bne.n	8002e24 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 fa8c 	bl	8003408 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e01a      	b.n	8002f30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2220      	movs	r2, #32
 8002f00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6859      	ldr	r1, [r3, #4]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <HAL_I2C_Mem_Write+0x224>)
 8002f0e:	400b      	ands	r3, r1
 8002f10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	e000      	b.n	8002f30 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002f2e:	2302      	movs	r3, #2
  }
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	fe00e800 	.word	0xfe00e800

08002f3c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af02      	add	r7, sp, #8
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	4608      	mov	r0, r1
 8002f46:	4611      	mov	r1, r2
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	817b      	strh	r3, [r7, #10]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	813b      	strh	r3, [r7, #8]
 8002f52:	4613      	mov	r3, r2
 8002f54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b20      	cmp	r3, #32
 8002f60:	f040 80fd 	bne.w	800315e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <HAL_I2C_Mem_Read+0x34>
 8002f6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d105      	bne.n	8002f7c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f76:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0f1      	b.n	8003160 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d101      	bne.n	8002f8a <HAL_I2C_Mem_Read+0x4e>
 8002f86:	2302      	movs	r3, #2
 8002f88:	e0ea      	b.n	8003160 <HAL_I2C_Mem_Read+0x224>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f92:	f7ff fa7b 	bl	800248c <HAL_GetTick>
 8002f96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	2319      	movs	r3, #25
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 f9af 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e0d5      	b.n	8003160 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2222      	movs	r2, #34	; 0x22
 8002fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2240      	movs	r2, #64	; 0x40
 8002fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a3a      	ldr	r2, [r7, #32]
 8002fce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fdc:	88f8      	ldrh	r0, [r7, #6]
 8002fde:	893a      	ldrh	r2, [r7, #8]
 8002fe0:	8979      	ldrh	r1, [r7, #10]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	9301      	str	r3, [sp, #4]
 8002fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	4603      	mov	r3, r0
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 f913 	bl	8003218 <I2C_RequestMemoryRead>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0ad      	b.n	8003160 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003008:	b29b      	uxth	r3, r3
 800300a:	2bff      	cmp	r3, #255	; 0xff
 800300c:	d90e      	bls.n	800302c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	22ff      	movs	r2, #255	; 0xff
 8003012:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003018:	b2da      	uxtb	r2, r3
 800301a:	8979      	ldrh	r1, [r7, #10]
 800301c:	4b52      	ldr	r3, [pc, #328]	; (8003168 <HAL_I2C_Mem_Read+0x22c>)
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 fb0b 	bl	8003640 <I2C_TransferConfig>
 800302a:	e00f      	b.n	800304c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303a:	b2da      	uxtb	r2, r3
 800303c:	8979      	ldrh	r1, [r7, #10]
 800303e:	4b4a      	ldr	r3, [pc, #296]	; (8003168 <HAL_I2C_Mem_Read+0x22c>)
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 fafa 	bl	8003640 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003052:	2200      	movs	r2, #0
 8003054:	2104      	movs	r1, #4
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f956 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e07c      	b.n	8003160 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003082:	3b01      	subs	r3, #1
 8003084:	b29a      	uxth	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308e:	b29b      	uxth	r3, r3
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d034      	beq.n	800310c <HAL_I2C_Mem_Read+0x1d0>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d130      	bne.n	800310c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b0:	2200      	movs	r2, #0
 80030b2:	2180      	movs	r1, #128	; 0x80
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 f927 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e04d      	b.n	8003160 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	2bff      	cmp	r3, #255	; 0xff
 80030cc:	d90e      	bls.n	80030ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	22ff      	movs	r2, #255	; 0xff
 80030d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	8979      	ldrh	r1, [r7, #10]
 80030dc:	2300      	movs	r3, #0
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 faab 	bl	8003640 <I2C_TransferConfig>
 80030ea:	e00f      	b.n	800310c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	8979      	ldrh	r1, [r7, #10]
 80030fe:	2300      	movs	r3, #0
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 fa9a 	bl	8003640 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003110:	b29b      	uxth	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d19a      	bne.n	800304c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 f974 	bl	8003408 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e01a      	b.n	8003160 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2220      	movs	r2, #32
 8003130:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6859      	ldr	r1, [r3, #4]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_I2C_Mem_Read+0x230>)
 800313e:	400b      	ands	r3, r1
 8003140:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	e000      	b.n	8003160 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800315e:	2302      	movs	r3, #2
  }
}
 8003160:	4618      	mov	r0, r3
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	80002400 	.word	0x80002400
 800316c:	fe00e800 	.word	0xfe00e800

08003170 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af02      	add	r7, sp, #8
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	4608      	mov	r0, r1
 800317a:	4611      	mov	r1, r2
 800317c:	461a      	mov	r2, r3
 800317e:	4603      	mov	r3, r0
 8003180:	817b      	strh	r3, [r7, #10]
 8003182:	460b      	mov	r3, r1
 8003184:	813b      	strh	r3, [r7, #8]
 8003186:	4613      	mov	r3, r2
 8003188:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800318a:	88fb      	ldrh	r3, [r7, #6]
 800318c:	b2da      	uxtb	r2, r3
 800318e:	8979      	ldrh	r1, [r7, #10]
 8003190:	4b20      	ldr	r3, [pc, #128]	; (8003214 <I2C_RequestMemoryWrite+0xa4>)
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 fa51 	bl	8003640 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800319e:	69fa      	ldr	r2, [r7, #28]
 80031a0:	69b9      	ldr	r1, [r7, #24]
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 f8f0 	bl	8003388 <I2C_WaitOnTXISFlagUntilTimeout>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e02c      	b.n	800320c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d105      	bne.n	80031c4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031b8:	893b      	ldrh	r3, [r7, #8]
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	629a      	str	r2, [r3, #40]	; 0x28
 80031c2:	e015      	b.n	80031f0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031c4:	893b      	ldrh	r3, [r7, #8]
 80031c6:	0a1b      	lsrs	r3, r3, #8
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031d2:	69fa      	ldr	r2, [r7, #28]
 80031d4:	69b9      	ldr	r1, [r7, #24]
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 f8d6 	bl	8003388 <I2C_WaitOnTXISFlagUntilTimeout>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e012      	b.n	800320c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031e6:	893b      	ldrh	r3, [r7, #8]
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2200      	movs	r2, #0
 80031f8:	2180      	movs	r1, #128	; 0x80
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 f884 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	80002000 	.word	0x80002000

08003218 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af02      	add	r7, sp, #8
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	4608      	mov	r0, r1
 8003222:	4611      	mov	r1, r2
 8003224:	461a      	mov	r2, r3
 8003226:	4603      	mov	r3, r0
 8003228:	817b      	strh	r3, [r7, #10]
 800322a:	460b      	mov	r3, r1
 800322c:	813b      	strh	r3, [r7, #8]
 800322e:	4613      	mov	r3, r2
 8003230:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	b2da      	uxtb	r2, r3
 8003236:	8979      	ldrh	r1, [r7, #10]
 8003238:	4b20      	ldr	r3, [pc, #128]	; (80032bc <I2C_RequestMemoryRead+0xa4>)
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	2300      	movs	r3, #0
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 f9fe 	bl	8003640 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003244:	69fa      	ldr	r2, [r7, #28]
 8003246:	69b9      	ldr	r1, [r7, #24]
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 f89d 	bl	8003388 <I2C_WaitOnTXISFlagUntilTimeout>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e02c      	b.n	80032b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003258:	88fb      	ldrh	r3, [r7, #6]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d105      	bne.n	800326a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800325e:	893b      	ldrh	r3, [r7, #8]
 8003260:	b2da      	uxtb	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	629a      	str	r2, [r3, #40]	; 0x28
 8003268:	e015      	b.n	8003296 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800326a:	893b      	ldrh	r3, [r7, #8]
 800326c:	0a1b      	lsrs	r3, r3, #8
 800326e:	b29b      	uxth	r3, r3
 8003270:	b2da      	uxtb	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003278:	69fa      	ldr	r2, [r7, #28]
 800327a:	69b9      	ldr	r1, [r7, #24]
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 f883 	bl	8003388 <I2C_WaitOnTXISFlagUntilTimeout>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e012      	b.n	80032b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800328c:	893b      	ldrh	r3, [r7, #8]
 800328e:	b2da      	uxtb	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	2200      	movs	r2, #0
 800329e:	2140      	movs	r1, #64	; 0x40
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f831 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e000      	b.n	80032b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	80002000 	.word	0x80002000

080032c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d103      	bne.n	80032de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2200      	movs	r2, #0
 80032dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d007      	beq.n	80032fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699a      	ldr	r2, [r3, #24]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	619a      	str	r2, [r3, #24]
  }
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	4613      	mov	r3, r2
 8003316:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003318:	e022      	b.n	8003360 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003320:	d01e      	beq.n	8003360 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003322:	f7ff f8b3 	bl	800248c <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d302      	bcc.n	8003338 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d113      	bne.n	8003360 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333c:	f043 0220 	orr.w	r2, r3, #32
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e00f      	b.n	8003380 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699a      	ldr	r2, [r3, #24]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	4013      	ands	r3, r2
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	429a      	cmp	r2, r3
 800336e:	bf0c      	ite	eq
 8003370:	2301      	moveq	r3, #1
 8003372:	2300      	movne	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	461a      	mov	r2, r3
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	429a      	cmp	r2, r3
 800337c:	d0cd      	beq.n	800331a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003394:	e02c      	b.n	80033f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	68b9      	ldr	r1, [r7, #8]
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 f870 	bl	8003480 <I2C_IsErrorOccurred>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e02a      	b.n	8003400 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b0:	d01e      	beq.n	80033f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b2:	f7ff f86b 	bl	800248c <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d302      	bcc.n	80033c8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d113      	bne.n	80033f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033cc:	f043 0220 	orr.w	r2, r3, #32
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2220      	movs	r2, #32
 80033d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e007      	b.n	8003400 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d1cb      	bne.n	8003396 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003414:	e028      	b.n	8003468 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	68b9      	ldr	r1, [r7, #8]
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 f830 	bl	8003480 <I2C_IsErrorOccurred>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e026      	b.n	8003478 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342a:	f7ff f82f 	bl	800248c <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	429a      	cmp	r2, r3
 8003438:	d302      	bcc.n	8003440 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d113      	bne.n	8003468 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003444:	f043 0220 	orr.w	r2, r3, #32
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e007      	b.n	8003478 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	f003 0320 	and.w	r3, r3, #32
 8003472:	2b20      	cmp	r3, #32
 8003474:	d1cf      	bne.n	8003416 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08a      	sub	sp, #40	; 0x28
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800349a:	2300      	movs	r3, #0
 800349c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	f003 0310 	and.w	r3, r3, #16
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d068      	beq.n	800357e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2210      	movs	r2, #16
 80034b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034b4:	e049      	b.n	800354a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034bc:	d045      	beq.n	800354a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034be:	f7fe ffe5 	bl	800248c <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d302      	bcc.n	80034d4 <I2C_IsErrorOccurred+0x54>
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d13a      	bne.n	800354a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034f6:	d121      	bne.n	800353c <I2C_IsErrorOccurred+0xbc>
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034fe:	d01d      	beq.n	800353c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003500:	7cfb      	ldrb	r3, [r7, #19]
 8003502:	2b20      	cmp	r3, #32
 8003504:	d01a      	beq.n	800353c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003514:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003516:	f7fe ffb9 	bl	800248c <HAL_GetTick>
 800351a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800351c:	e00e      	b.n	800353c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800351e:	f7fe ffb5 	bl	800248c <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b19      	cmp	r3, #25
 800352a:	d907      	bls.n	800353c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	f043 0320 	orr.w	r3, r3, #32
 8003532:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800353a:	e006      	b.n	800354a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	f003 0320 	and.w	r3, r3, #32
 8003546:	2b20      	cmp	r3, #32
 8003548:	d1e9      	bne.n	800351e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	f003 0320 	and.w	r3, r3, #32
 8003554:	2b20      	cmp	r3, #32
 8003556:	d003      	beq.n	8003560 <I2C_IsErrorOccurred+0xe0>
 8003558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0aa      	beq.n	80034b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003564:	2b00      	cmp	r3, #0
 8003566:	d103      	bne.n	8003570 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2220      	movs	r2, #32
 800356e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	f043 0304 	orr.w	r3, r3, #4
 8003576:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00b      	beq.n	80035a8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00b      	beq.n	80035ca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	f043 0308 	orr.w	r3, r3, #8
 80035b8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00b      	beq.n	80035ec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	f043 0302 	orr.w	r3, r3, #2
 80035da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80035ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d01c      	beq.n	800362e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f7ff fe63 	bl	80032c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6859      	ldr	r1, [r3, #4]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	4b0d      	ldr	r3, [pc, #52]	; (800363c <I2C_IsErrorOccurred+0x1bc>)
 8003606:	400b      	ands	r3, r1
 8003608:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	431a      	orrs	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2220      	movs	r2, #32
 800361a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800362e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003632:	4618      	mov	r0, r3
 8003634:	3728      	adds	r7, #40	; 0x28
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	fe00e800 	.word	0xfe00e800

08003640 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	607b      	str	r3, [r7, #4]
 800364a:	460b      	mov	r3, r1
 800364c:	817b      	strh	r3, [r7, #10]
 800364e:	4613      	mov	r3, r2
 8003650:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003652:	897b      	ldrh	r3, [r7, #10]
 8003654:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003658:	7a7b      	ldrb	r3, [r7, #9]
 800365a:	041b      	lsls	r3, r3, #16
 800365c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003660:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	4313      	orrs	r3, r2
 800366a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800366e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	0d5b      	lsrs	r3, r3, #21
 800367a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800367e:	4b08      	ldr	r3, [pc, #32]	; (80036a0 <I2C_TransferConfig+0x60>)
 8003680:	430b      	orrs	r3, r1
 8003682:	43db      	mvns	r3, r3
 8003684:	ea02 0103 	and.w	r1, r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	430a      	orrs	r2, r1
 8003690:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003692:	bf00      	nop
 8003694:	371c      	adds	r7, #28
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	03ff63ff 	.word	0x03ff63ff

080036a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b20      	cmp	r3, #32
 80036b8:	d138      	bne.n	800372c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d101      	bne.n	80036c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036c4:	2302      	movs	r3, #2
 80036c6:	e032      	b.n	800372e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2224      	movs	r2, #36	; 0x24
 80036d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0201 	bic.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6819      	ldr	r1, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	e000      	b.n	800372e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800372c:	2302      	movs	r3, #2
  }
}
 800372e:	4618      	mov	r0, r3
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800373a:	b480      	push	{r7}
 800373c:	b085      	sub	sp, #20
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b20      	cmp	r3, #32
 800374e:	d139      	bne.n	80037c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003756:	2b01      	cmp	r3, #1
 8003758:	d101      	bne.n	800375e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800375a:	2302      	movs	r3, #2
 800375c:	e033      	b.n	80037c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2224      	movs	r2, #36	; 0x24
 800376a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0201 	bic.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800378c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	021b      	lsls	r3, r3, #8
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4313      	orrs	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037c0:	2300      	movs	r3, #0
 80037c2:	e000      	b.n	80037c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037c4:	2302      	movs	r3, #2
  }
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037d4:	b08f      	sub	sp, #60	; 0x3c
 80037d6:	af0a      	add	r7, sp, #40	; 0x28
 80037d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e116      	b.n	8003a12 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fe fc3a 	bl	8002078 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2203      	movs	r2, #3
 8003808:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d102      	bne.n	800381e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f003 ffce 	bl	80077c4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	603b      	str	r3, [r7, #0]
 800382e:	687e      	ldr	r6, [r7, #4]
 8003830:	466d      	mov	r5, sp
 8003832:	f106 0410 	add.w	r4, r6, #16
 8003836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003838:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800383a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800383c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800383e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003842:	e885 0003 	stmia.w	r5, {r0, r1}
 8003846:	1d33      	adds	r3, r6, #4
 8003848:	cb0e      	ldmia	r3, {r1, r2, r3}
 800384a:	6838      	ldr	r0, [r7, #0]
 800384c:	f003 ff62 	bl	8007714 <USB_CoreInit>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d005      	beq.n	8003862 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e0d7      	b.n	8003a12 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2100      	movs	r1, #0
 8003868:	4618      	mov	r0, r3
 800386a:	f003 ffbc 	bl	80077e6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800386e:	2300      	movs	r3, #0
 8003870:	73fb      	strb	r3, [r7, #15]
 8003872:	e04a      	b.n	800390a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003874:	7bfa      	ldrb	r2, [r7, #15]
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	4613      	mov	r3, r2
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	4413      	add	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	333d      	adds	r3, #61	; 0x3d
 8003884:	2201      	movs	r2, #1
 8003886:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003888:	7bfa      	ldrb	r2, [r7, #15]
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	4613      	mov	r3, r2
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	333c      	adds	r3, #60	; 0x3c
 8003898:	7bfa      	ldrb	r2, [r7, #15]
 800389a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800389c:	7bfa      	ldrb	r2, [r7, #15]
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	b298      	uxth	r0, r3
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4413      	add	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	3344      	adds	r3, #68	; 0x44
 80038b0:	4602      	mov	r2, r0
 80038b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038b4:	7bfa      	ldrb	r2, [r7, #15]
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	3340      	adds	r3, #64	; 0x40
 80038c4:	2200      	movs	r2, #0
 80038c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038c8:	7bfa      	ldrb	r2, [r7, #15]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	3348      	adds	r3, #72	; 0x48
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038dc:	7bfa      	ldrb	r2, [r7, #15]
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	4613      	mov	r3, r2
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	4413      	add	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	334c      	adds	r3, #76	; 0x4c
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038f0:	7bfa      	ldrb	r2, [r7, #15]
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	3354      	adds	r3, #84	; 0x54
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	3301      	adds	r3, #1
 8003908:	73fb      	strb	r3, [r7, #15]
 800390a:	7bfa      	ldrb	r2, [r7, #15]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	429a      	cmp	r2, r3
 8003912:	d3af      	bcc.n	8003874 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003914:	2300      	movs	r3, #0
 8003916:	73fb      	strb	r3, [r7, #15]
 8003918:	e044      	b.n	80039a4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800391a:	7bfa      	ldrb	r2, [r7, #15]
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	4413      	add	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800392c:	2200      	movs	r2, #0
 800392e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003930:	7bfa      	ldrb	r2, [r7, #15]
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4413      	add	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003942:	7bfa      	ldrb	r2, [r7, #15]
 8003944:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003946:	7bfa      	ldrb	r2, [r7, #15]
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	4413      	add	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003958:	2200      	movs	r2, #0
 800395a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800395c:	7bfa      	ldrb	r2, [r7, #15]
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	4613      	mov	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003972:	7bfa      	ldrb	r2, [r7, #15]
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	4613      	mov	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003988:	7bfa      	ldrb	r2, [r7, #15]
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	4613      	mov	r3, r2
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	4413      	add	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800399e:	7bfb      	ldrb	r3, [r7, #15]
 80039a0:	3301      	adds	r3, #1
 80039a2:	73fb      	strb	r3, [r7, #15]
 80039a4:	7bfa      	ldrb	r2, [r7, #15]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d3b5      	bcc.n	800391a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	603b      	str	r3, [r7, #0]
 80039b4:	687e      	ldr	r6, [r7, #4]
 80039b6:	466d      	mov	r5, sp
 80039b8:	f106 0410 	add.w	r4, r6, #16
 80039bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80039cc:	1d33      	adds	r3, r6, #4
 80039ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039d0:	6838      	ldr	r0, [r7, #0]
 80039d2:	f003 ff55 	bl	8007880 <USB_DevInit>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e014      	b.n	8003a12 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d102      	bne.n	8003a06 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f80b 	bl	8003a1c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f004 f913 	bl	8007c36 <USB_DevDisconnect>

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003a1c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a4a:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <HAL_PCDEx_ActivateLPM+0x44>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	10000003 	.word	0x10000003

08003a64 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a68:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a04      	ldr	r2, [pc, #16]	; (8003a80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a72:	6013      	str	r3, [r2, #0]
}
 8003a74:	bf00      	nop
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40007000 	.word	0x40007000

08003a84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e29b      	b.n	8003fd2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 8087 	beq.w	8003bb6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003aa8:	4b96      	ldr	r3, [pc, #600]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 030c 	and.w	r3, r3, #12
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d00c      	beq.n	8003ace <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ab4:	4b93      	ldr	r3, [pc, #588]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 030c 	and.w	r3, r3, #12
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d112      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x62>
 8003ac0:	4b90      	ldr	r3, [pc, #576]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003acc:	d10b      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ace:	4b8d      	ldr	r3, [pc, #564]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d06c      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x130>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d168      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e275      	b.n	8003fd2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aee:	d106      	bne.n	8003afe <HAL_RCC_OscConfig+0x7a>
 8003af0:	4b84      	ldr	r3, [pc, #528]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a83      	ldr	r2, [pc, #524]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003afa:	6013      	str	r3, [r2, #0]
 8003afc:	e02e      	b.n	8003b5c <HAL_RCC_OscConfig+0xd8>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10c      	bne.n	8003b20 <HAL_RCC_OscConfig+0x9c>
 8003b06:	4b7f      	ldr	r3, [pc, #508]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a7e      	ldr	r2, [pc, #504]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	4b7c      	ldr	r3, [pc, #496]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a7b      	ldr	r2, [pc, #492]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003b18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	e01d      	b.n	8003b5c <HAL_RCC_OscConfig+0xd8>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b28:	d10c      	bne.n	8003b44 <HAL_RCC_OscConfig+0xc0>
 8003b2a:	4b76      	ldr	r3, [pc, #472]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a75      	ldr	r2, [pc, #468]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	4b73      	ldr	r3, [pc, #460]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a72      	ldr	r2, [pc, #456]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	e00b      	b.n	8003b5c <HAL_RCC_OscConfig+0xd8>
 8003b44:	4b6f      	ldr	r3, [pc, #444]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a6e      	ldr	r2, [pc, #440]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b4e:	6013      	str	r3, [r2, #0]
 8003b50:	4b6c      	ldr	r3, [pc, #432]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a6b      	ldr	r2, [pc, #428]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d013      	beq.n	8003b8c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b64:	f7fe fc92 	bl	800248c <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b6c:	f7fe fc8e 	bl	800248c <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b64      	cmp	r3, #100	; 0x64
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e229      	b.n	8003fd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7e:	4b61      	ldr	r3, [pc, #388]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0f0      	beq.n	8003b6c <HAL_RCC_OscConfig+0xe8>
 8003b8a:	e014      	b.n	8003bb6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8c:	f7fe fc7e 	bl	800248c <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b94:	f7fe fc7a 	bl	800248c <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b64      	cmp	r3, #100	; 0x64
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e215      	b.n	8003fd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ba6:	4b57      	ldr	r3, [pc, #348]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f0      	bne.n	8003b94 <HAL_RCC_OscConfig+0x110>
 8003bb2:	e000      	b.n	8003bb6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d069      	beq.n	8003c96 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bc2:	4b50      	ldr	r3, [pc, #320]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 030c 	and.w	r3, r3, #12
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00b      	beq.n	8003be6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bce:	4b4d      	ldr	r3, [pc, #308]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
 8003bd6:	2b08      	cmp	r3, #8
 8003bd8:	d11c      	bne.n	8003c14 <HAL_RCC_OscConfig+0x190>
 8003bda:	4b4a      	ldr	r3, [pc, #296]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d116      	bne.n	8003c14 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003be6:	4b47      	ldr	r3, [pc, #284]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d005      	beq.n	8003bfe <HAL_RCC_OscConfig+0x17a>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d001      	beq.n	8003bfe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e1e9      	b.n	8003fd2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bfe:	4b41      	ldr	r3, [pc, #260]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	493d      	ldr	r1, [pc, #244]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c12:	e040      	b.n	8003c96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d023      	beq.n	8003c64 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c1c:	4b39      	ldr	r3, [pc, #228]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a38      	ldr	r2, [pc, #224]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003c22:	f043 0301 	orr.w	r3, r3, #1
 8003c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c28:	f7fe fc30 	bl	800248c <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c30:	f7fe fc2c 	bl	800248c <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e1c7      	b.n	8003fd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c42:	4b30      	ldr	r3, [pc, #192]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0f0      	beq.n	8003c30 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4e:	4b2d      	ldr	r3, [pc, #180]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	4929      	ldr	r1, [pc, #164]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	600b      	str	r3, [r1, #0]
 8003c62:	e018      	b.n	8003c96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c64:	4b27      	ldr	r3, [pc, #156]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a26      	ldr	r2, [pc, #152]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003c6a:	f023 0301 	bic.w	r3, r3, #1
 8003c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c70:	f7fe fc0c 	bl	800248c <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c78:	f7fe fc08 	bl	800248c <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e1a3      	b.n	8003fd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c8a:	4b1e      	ldr	r3, [pc, #120]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f0      	bne.n	8003c78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0308 	and.w	r3, r3, #8
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d038      	beq.n	8003d14 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d019      	beq.n	8003cde <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003caa:	4b16      	ldr	r3, [pc, #88]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cae:	4a15      	ldr	r2, [pc, #84]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003cb0:	f043 0301 	orr.w	r3, r3, #1
 8003cb4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb6:	f7fe fbe9 	bl	800248c <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cbe:	f7fe fbe5 	bl	800248c <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e180      	b.n	8003fd2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd0:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0f0      	beq.n	8003cbe <HAL_RCC_OscConfig+0x23a>
 8003cdc:	e01a      	b.n	8003d14 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cde:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce2:	4a08      	ldr	r2, [pc, #32]	; (8003d04 <HAL_RCC_OscConfig+0x280>)
 8003ce4:	f023 0301 	bic.w	r3, r3, #1
 8003ce8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cea:	f7fe fbcf 	bl	800248c <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf0:	e00a      	b.n	8003d08 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf2:	f7fe fbcb 	bl	800248c <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d903      	bls.n	8003d08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e166      	b.n	8003fd2 <HAL_RCC_OscConfig+0x54e>
 8003d04:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d08:	4b92      	ldr	r3, [pc, #584]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1ee      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 80a4 	beq.w	8003e6a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d22:	4b8c      	ldr	r3, [pc, #560]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10d      	bne.n	8003d4a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d2e:	4b89      	ldr	r3, [pc, #548]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	4a88      	ldr	r2, [pc, #544]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d38:	6413      	str	r3, [r2, #64]	; 0x40
 8003d3a:	4b86      	ldr	r3, [pc, #536]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d42:	60bb      	str	r3, [r7, #8]
 8003d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d46:	2301      	movs	r3, #1
 8003d48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d4a:	4b83      	ldr	r3, [pc, #524]	; (8003f58 <HAL_RCC_OscConfig+0x4d4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d118      	bne.n	8003d88 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d56:	4b80      	ldr	r3, [pc, #512]	; (8003f58 <HAL_RCC_OscConfig+0x4d4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a7f      	ldr	r2, [pc, #508]	; (8003f58 <HAL_RCC_OscConfig+0x4d4>)
 8003d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d62:	f7fe fb93 	bl	800248c <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6a:	f7fe fb8f 	bl	800248c <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b64      	cmp	r3, #100	; 0x64
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e12a      	b.n	8003fd2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d7c:	4b76      	ldr	r3, [pc, #472]	; (8003f58 <HAL_RCC_OscConfig+0x4d4>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0f0      	beq.n	8003d6a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d106      	bne.n	8003d9e <HAL_RCC_OscConfig+0x31a>
 8003d90:	4b70      	ldr	r3, [pc, #448]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d94:	4a6f      	ldr	r2, [pc, #444]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d9c:	e02d      	b.n	8003dfa <HAL_RCC_OscConfig+0x376>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10c      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x33c>
 8003da6:	4b6b      	ldr	r3, [pc, #428]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003daa:	4a6a      	ldr	r2, [pc, #424]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003dac:	f023 0301 	bic.w	r3, r3, #1
 8003db0:	6713      	str	r3, [r2, #112]	; 0x70
 8003db2:	4b68      	ldr	r3, [pc, #416]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db6:	4a67      	ldr	r2, [pc, #412]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003db8:	f023 0304 	bic.w	r3, r3, #4
 8003dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dbe:	e01c      	b.n	8003dfa <HAL_RCC_OscConfig+0x376>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	2b05      	cmp	r3, #5
 8003dc6:	d10c      	bne.n	8003de2 <HAL_RCC_OscConfig+0x35e>
 8003dc8:	4b62      	ldr	r3, [pc, #392]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dcc:	4a61      	ldr	r2, [pc, #388]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003dce:	f043 0304 	orr.w	r3, r3, #4
 8003dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd4:	4b5f      	ldr	r3, [pc, #380]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd8:	4a5e      	ldr	r2, [pc, #376]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003dda:	f043 0301 	orr.w	r3, r3, #1
 8003dde:	6713      	str	r3, [r2, #112]	; 0x70
 8003de0:	e00b      	b.n	8003dfa <HAL_RCC_OscConfig+0x376>
 8003de2:	4b5c      	ldr	r3, [pc, #368]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de6:	4a5b      	ldr	r2, [pc, #364]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003de8:	f023 0301 	bic.w	r3, r3, #1
 8003dec:	6713      	str	r3, [r2, #112]	; 0x70
 8003dee:	4b59      	ldr	r3, [pc, #356]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df2:	4a58      	ldr	r2, [pc, #352]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003df4:	f023 0304 	bic.w	r3, r3, #4
 8003df8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d015      	beq.n	8003e2e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e02:	f7fe fb43 	bl	800248c <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e08:	e00a      	b.n	8003e20 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e0a:	f7fe fb3f 	bl	800248c <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e0d8      	b.n	8003fd2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e20:	4b4c      	ldr	r3, [pc, #304]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0ee      	beq.n	8003e0a <HAL_RCC_OscConfig+0x386>
 8003e2c:	e014      	b.n	8003e58 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e2e:	f7fe fb2d 	bl	800248c <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e34:	e00a      	b.n	8003e4c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e36:	f7fe fb29 	bl	800248c <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e0c2      	b.n	8003fd2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e4c:	4b41      	ldr	r3, [pc, #260]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1ee      	bne.n	8003e36 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e58:	7dfb      	ldrb	r3, [r7, #23]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d105      	bne.n	8003e6a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e5e:	4b3d      	ldr	r3, [pc, #244]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	4a3c      	ldr	r2, [pc, #240]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003e64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 80ae 	beq.w	8003fd0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e74:	4b37      	ldr	r3, [pc, #220]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 030c 	and.w	r3, r3, #12
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d06d      	beq.n	8003f5c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d14b      	bne.n	8003f20 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e88:	4b32      	ldr	r3, [pc, #200]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a31      	ldr	r2, [pc, #196]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e94:	f7fe fafa 	bl	800248c <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e9c:	f7fe faf6 	bl	800248c <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e091      	b.n	8003fd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eae:	4b29      	ldr	r3, [pc, #164]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f0      	bne.n	8003e9c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69da      	ldr	r2, [r3, #28]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	019b      	lsls	r3, r3, #6
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed0:	085b      	lsrs	r3, r3, #1
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	041b      	lsls	r3, r3, #16
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	061b      	lsls	r3, r3, #24
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee4:	071b      	lsls	r3, r3, #28
 8003ee6:	491b      	ldr	r1, [pc, #108]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eec:	4b19      	ldr	r3, [pc, #100]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a18      	ldr	r2, [pc, #96]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003ef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7fe fac8 	bl	800248c <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f00:	f7fe fac4 	bl	800248c <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e05f      	b.n	8003fd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f12:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0f0      	beq.n	8003f00 <HAL_RCC_OscConfig+0x47c>
 8003f1e:	e057      	b.n	8003fd0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f20:	4b0c      	ldr	r3, [pc, #48]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a0b      	ldr	r2, [pc, #44]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003f26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2c:	f7fe faae 	bl	800248c <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f34:	f7fe faaa 	bl	800248c <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e045      	b.n	8003fd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f46:	4b03      	ldr	r3, [pc, #12]	; (8003f54 <HAL_RCC_OscConfig+0x4d0>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f0      	bne.n	8003f34 <HAL_RCC_OscConfig+0x4b0>
 8003f52:	e03d      	b.n	8003fd0 <HAL_RCC_OscConfig+0x54c>
 8003f54:	40023800 	.word	0x40023800
 8003f58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f5c:	4b1f      	ldr	r3, [pc, #124]	; (8003fdc <HAL_RCC_OscConfig+0x558>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d030      	beq.n	8003fcc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d129      	bne.n	8003fcc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d122      	bne.n	8003fcc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f92:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d119      	bne.n	8003fcc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa2:	085b      	lsrs	r3, r3, #1
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d10f      	bne.n	8003fcc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d107      	bne.n	8003fcc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d001      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e000      	b.n	8003fd2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	40023800 	.word	0x40023800

08003fe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003fea:	2300      	movs	r3, #0
 8003fec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e0d0      	b.n	800419a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ff8:	4b6a      	ldr	r3, [pc, #424]	; (80041a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 030f 	and.w	r3, r3, #15
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	429a      	cmp	r2, r3
 8004004:	d910      	bls.n	8004028 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004006:	4b67      	ldr	r3, [pc, #412]	; (80041a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f023 020f 	bic.w	r2, r3, #15
 800400e:	4965      	ldr	r1, [pc, #404]	; (80041a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	4313      	orrs	r3, r2
 8004014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004016:	4b63      	ldr	r3, [pc, #396]	; (80041a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	429a      	cmp	r2, r3
 8004022:	d001      	beq.n	8004028 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e0b8      	b.n	800419a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d020      	beq.n	8004076 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004040:	4b59      	ldr	r3, [pc, #356]	; (80041a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	4a58      	ldr	r2, [pc, #352]	; (80041a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004046:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800404a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0308 	and.w	r3, r3, #8
 8004054:	2b00      	cmp	r3, #0
 8004056:	d005      	beq.n	8004064 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004058:	4b53      	ldr	r3, [pc, #332]	; (80041a8 <HAL_RCC_ClockConfig+0x1c8>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	4a52      	ldr	r2, [pc, #328]	; (80041a8 <HAL_RCC_ClockConfig+0x1c8>)
 800405e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004062:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004064:	4b50      	ldr	r3, [pc, #320]	; (80041a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	494d      	ldr	r1, [pc, #308]	; (80041a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004072:	4313      	orrs	r3, r2
 8004074:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d040      	beq.n	8004104 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d107      	bne.n	800409a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408a:	4b47      	ldr	r3, [pc, #284]	; (80041a8 <HAL_RCC_ClockConfig+0x1c8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d115      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e07f      	b.n	800419a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d107      	bne.n	80040b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a2:	4b41      	ldr	r3, [pc, #260]	; (80041a8 <HAL_RCC_ClockConfig+0x1c8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d109      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e073      	b.n	800419a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b2:	4b3d      	ldr	r3, [pc, #244]	; (80041a8 <HAL_RCC_ClockConfig+0x1c8>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e06b      	b.n	800419a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040c2:	4b39      	ldr	r3, [pc, #228]	; (80041a8 <HAL_RCC_ClockConfig+0x1c8>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f023 0203 	bic.w	r2, r3, #3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	4936      	ldr	r1, [pc, #216]	; (80041a8 <HAL_RCC_ClockConfig+0x1c8>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040d4:	f7fe f9da 	bl	800248c <HAL_GetTick>
 80040d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040da:	e00a      	b.n	80040f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040dc:	f7fe f9d6 	bl	800248c <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e053      	b.n	800419a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f2:	4b2d      	ldr	r3, [pc, #180]	; (80041a8 <HAL_RCC_ClockConfig+0x1c8>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 020c 	and.w	r2, r3, #12
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	429a      	cmp	r2, r3
 8004102:	d1eb      	bne.n	80040dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004104:	4b27      	ldr	r3, [pc, #156]	; (80041a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 030f 	and.w	r3, r3, #15
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	429a      	cmp	r2, r3
 8004110:	d210      	bcs.n	8004134 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004112:	4b24      	ldr	r3, [pc, #144]	; (80041a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f023 020f 	bic.w	r2, r3, #15
 800411a:	4922      	ldr	r1, [pc, #136]	; (80041a4 <HAL_RCC_ClockConfig+0x1c4>)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	4313      	orrs	r3, r2
 8004120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004122:	4b20      	ldr	r3, [pc, #128]	; (80041a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	429a      	cmp	r2, r3
 800412e:	d001      	beq.n	8004134 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e032      	b.n	800419a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d008      	beq.n	8004152 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004140:	4b19      	ldr	r3, [pc, #100]	; (80041a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	4916      	ldr	r1, [pc, #88]	; (80041a8 <HAL_RCC_ClockConfig+0x1c8>)
 800414e:	4313      	orrs	r3, r2
 8004150:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d009      	beq.n	8004172 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800415e:	4b12      	ldr	r3, [pc, #72]	; (80041a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	490e      	ldr	r1, [pc, #56]	; (80041a8 <HAL_RCC_ClockConfig+0x1c8>)
 800416e:	4313      	orrs	r3, r2
 8004170:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004172:	f000 f821 	bl	80041b8 <HAL_RCC_GetSysClockFreq>
 8004176:	4602      	mov	r2, r0
 8004178:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <HAL_RCC_ClockConfig+0x1c8>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	091b      	lsrs	r3, r3, #4
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	490a      	ldr	r1, [pc, #40]	; (80041ac <HAL_RCC_ClockConfig+0x1cc>)
 8004184:	5ccb      	ldrb	r3, [r1, r3]
 8004186:	fa22 f303 	lsr.w	r3, r2, r3
 800418a:	4a09      	ldr	r2, [pc, #36]	; (80041b0 <HAL_RCC_ClockConfig+0x1d0>)
 800418c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800418e:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <HAL_RCC_ClockConfig+0x1d4>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f7fe f936 	bl	8002404 <HAL_InitTick>

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40023c00 	.word	0x40023c00
 80041a8:	40023800 	.word	0x40023800
 80041ac:	0800c454 	.word	0x0800c454
 80041b0:	20000008 	.word	0x20000008
 80041b4:	2000000c 	.word	0x2000000c

080041b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041bc:	b094      	sub	sp, #80	; 0x50
 80041be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	647b      	str	r3, [r7, #68]	; 0x44
 80041c4:	2300      	movs	r3, #0
 80041c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041c8:	2300      	movs	r3, #0
 80041ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80041cc:	2300      	movs	r3, #0
 80041ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041d0:	4b79      	ldr	r3, [pc, #484]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f003 030c 	and.w	r3, r3, #12
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d00d      	beq.n	80041f8 <HAL_RCC_GetSysClockFreq+0x40>
 80041dc:	2b08      	cmp	r3, #8
 80041de:	f200 80e1 	bhi.w	80043a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <HAL_RCC_GetSysClockFreq+0x34>
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d003      	beq.n	80041f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80041ea:	e0db      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041ec:	4b73      	ldr	r3, [pc, #460]	; (80043bc <HAL_RCC_GetSysClockFreq+0x204>)
 80041ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041f0:	e0db      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041f2:	4b73      	ldr	r3, [pc, #460]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80041f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041f6:	e0d8      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041f8:	4b6f      	ldr	r3, [pc, #444]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004200:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004202:	4b6d      	ldr	r3, [pc, #436]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d063      	beq.n	80042d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800420e:	4b6a      	ldr	r3, [pc, #424]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	099b      	lsrs	r3, r3, #6
 8004214:	2200      	movs	r2, #0
 8004216:	63bb      	str	r3, [r7, #56]	; 0x38
 8004218:	63fa      	str	r2, [r7, #60]	; 0x3c
 800421a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004220:	633b      	str	r3, [r7, #48]	; 0x30
 8004222:	2300      	movs	r3, #0
 8004224:	637b      	str	r3, [r7, #52]	; 0x34
 8004226:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800422a:	4622      	mov	r2, r4
 800422c:	462b      	mov	r3, r5
 800422e:	f04f 0000 	mov.w	r0, #0
 8004232:	f04f 0100 	mov.w	r1, #0
 8004236:	0159      	lsls	r1, r3, #5
 8004238:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800423c:	0150      	lsls	r0, r2, #5
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4621      	mov	r1, r4
 8004244:	1a51      	subs	r1, r2, r1
 8004246:	6139      	str	r1, [r7, #16]
 8004248:	4629      	mov	r1, r5
 800424a:	eb63 0301 	sbc.w	r3, r3, r1
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	f04f 0300 	mov.w	r3, #0
 8004258:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800425c:	4659      	mov	r1, fp
 800425e:	018b      	lsls	r3, r1, #6
 8004260:	4651      	mov	r1, sl
 8004262:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004266:	4651      	mov	r1, sl
 8004268:	018a      	lsls	r2, r1, #6
 800426a:	4651      	mov	r1, sl
 800426c:	ebb2 0801 	subs.w	r8, r2, r1
 8004270:	4659      	mov	r1, fp
 8004272:	eb63 0901 	sbc.w	r9, r3, r1
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	f04f 0300 	mov.w	r3, #0
 800427e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004282:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004286:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800428a:	4690      	mov	r8, r2
 800428c:	4699      	mov	r9, r3
 800428e:	4623      	mov	r3, r4
 8004290:	eb18 0303 	adds.w	r3, r8, r3
 8004294:	60bb      	str	r3, [r7, #8]
 8004296:	462b      	mov	r3, r5
 8004298:	eb49 0303 	adc.w	r3, r9, r3
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042aa:	4629      	mov	r1, r5
 80042ac:	024b      	lsls	r3, r1, #9
 80042ae:	4621      	mov	r1, r4
 80042b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042b4:	4621      	mov	r1, r4
 80042b6:	024a      	lsls	r2, r1, #9
 80042b8:	4610      	mov	r0, r2
 80042ba:	4619      	mov	r1, r3
 80042bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042be:	2200      	movs	r2, #0
 80042c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042c8:	f7fc fa1e 	bl	8000708 <__aeabi_uldivmod>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4613      	mov	r3, r2
 80042d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042d4:	e058      	b.n	8004388 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042d6:	4b38      	ldr	r3, [pc, #224]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	099b      	lsrs	r3, r3, #6
 80042dc:	2200      	movs	r2, #0
 80042de:	4618      	mov	r0, r3
 80042e0:	4611      	mov	r1, r2
 80042e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042e6:	623b      	str	r3, [r7, #32]
 80042e8:	2300      	movs	r3, #0
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
 80042ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042f0:	4642      	mov	r2, r8
 80042f2:	464b      	mov	r3, r9
 80042f4:	f04f 0000 	mov.w	r0, #0
 80042f8:	f04f 0100 	mov.w	r1, #0
 80042fc:	0159      	lsls	r1, r3, #5
 80042fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004302:	0150      	lsls	r0, r2, #5
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4641      	mov	r1, r8
 800430a:	ebb2 0a01 	subs.w	sl, r2, r1
 800430e:	4649      	mov	r1, r9
 8004310:	eb63 0b01 	sbc.w	fp, r3, r1
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004320:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004324:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004328:	ebb2 040a 	subs.w	r4, r2, sl
 800432c:	eb63 050b 	sbc.w	r5, r3, fp
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	00eb      	lsls	r3, r5, #3
 800433a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800433e:	00e2      	lsls	r2, r4, #3
 8004340:	4614      	mov	r4, r2
 8004342:	461d      	mov	r5, r3
 8004344:	4643      	mov	r3, r8
 8004346:	18e3      	adds	r3, r4, r3
 8004348:	603b      	str	r3, [r7, #0]
 800434a:	464b      	mov	r3, r9
 800434c:	eb45 0303 	adc.w	r3, r5, r3
 8004350:	607b      	str	r3, [r7, #4]
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800435e:	4629      	mov	r1, r5
 8004360:	028b      	lsls	r3, r1, #10
 8004362:	4621      	mov	r1, r4
 8004364:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004368:	4621      	mov	r1, r4
 800436a:	028a      	lsls	r2, r1, #10
 800436c:	4610      	mov	r0, r2
 800436e:	4619      	mov	r1, r3
 8004370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004372:	2200      	movs	r2, #0
 8004374:	61bb      	str	r3, [r7, #24]
 8004376:	61fa      	str	r2, [r7, #28]
 8004378:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800437c:	f7fc f9c4 	bl	8000708 <__aeabi_uldivmod>
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	4613      	mov	r3, r2
 8004386:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004388:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	0c1b      	lsrs	r3, r3, #16
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	3301      	adds	r3, #1
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004398:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800439a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800439c:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043a2:	e002      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043a4:	4b05      	ldr	r3, [pc, #20]	; (80043bc <HAL_RCC_GetSysClockFreq+0x204>)
 80043a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3750      	adds	r7, #80	; 0x50
 80043b0:	46bd      	mov	sp, r7
 80043b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043b6:	bf00      	nop
 80043b8:	40023800 	.word	0x40023800
 80043bc:	00f42400 	.word	0x00f42400
 80043c0:	007a1200 	.word	0x007a1200

080043c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c8:	4b03      	ldr	r3, [pc, #12]	; (80043d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043ca:	681b      	ldr	r3, [r3, #0]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	20000008 	.word	0x20000008

080043dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043e0:	f7ff fff0 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 80043e4:	4602      	mov	r2, r0
 80043e6:	4b05      	ldr	r3, [pc, #20]	; (80043fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	0a9b      	lsrs	r3, r3, #10
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	4903      	ldr	r1, [pc, #12]	; (8004400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043f2:	5ccb      	ldrb	r3, [r1, r3]
 80043f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40023800 	.word	0x40023800
 8004400:	0800c464 	.word	0x0800c464

08004404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004408:	f7ff ffdc 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 800440c:	4602      	mov	r2, r0
 800440e:	4b05      	ldr	r3, [pc, #20]	; (8004424 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	0b5b      	lsrs	r3, r3, #13
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	4903      	ldr	r1, [pc, #12]	; (8004428 <HAL_RCC_GetPCLK2Freq+0x24>)
 800441a:	5ccb      	ldrb	r3, [r1, r3]
 800441c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004420:	4618      	mov	r0, r3
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40023800 	.word	0x40023800
 8004428:	0800c464 	.word	0x0800c464

0800442c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b088      	sub	sp, #32
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004434:	2300      	movs	r3, #0
 8004436:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004438:	2300      	movs	r3, #0
 800443a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800443c:	2300      	movs	r3, #0
 800443e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004444:	2300      	movs	r3, #0
 8004446:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b00      	cmp	r3, #0
 8004452:	d012      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004454:	4b69      	ldr	r3, [pc, #420]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	4a68      	ldr	r2, [pc, #416]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800445a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800445e:	6093      	str	r3, [r2, #8]
 8004460:	4b66      	ldr	r3, [pc, #408]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004468:	4964      	ldr	r1, [pc, #400]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800446a:	4313      	orrs	r3, r2
 800446c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004476:	2301      	movs	r3, #1
 8004478:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d017      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004486:	4b5d      	ldr	r3, [pc, #372]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800448c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004494:	4959      	ldr	r1, [pc, #356]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044a4:	d101      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80044a6:	2301      	movs	r3, #1
 80044a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80044b2:	2301      	movs	r3, #1
 80044b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d017      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044c2:	4b4e      	ldr	r3, [pc, #312]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	494a      	ldr	r1, [pc, #296]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044e0:	d101      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80044e2:	2301      	movs	r3, #1
 80044e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80044ee:	2301      	movs	r3, #1
 80044f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80044fe:	2301      	movs	r3, #1
 8004500:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 808b 	beq.w	8004626 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004510:	4b3a      	ldr	r3, [pc, #232]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004514:	4a39      	ldr	r2, [pc, #228]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800451a:	6413      	str	r3, [r2, #64]	; 0x40
 800451c:	4b37      	ldr	r3, [pc, #220]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004524:	60bb      	str	r3, [r7, #8]
 8004526:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004528:	4b35      	ldr	r3, [pc, #212]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a34      	ldr	r2, [pc, #208]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800452e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004532:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004534:	f7fd ffaa 	bl	800248c <HAL_GetTick>
 8004538:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800453a:	e008      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800453c:	f7fd ffa6 	bl	800248c <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b64      	cmp	r3, #100	; 0x64
 8004548:	d901      	bls.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e38f      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800454e:	4b2c      	ldr	r3, [pc, #176]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f0      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800455a:	4b28      	ldr	r3, [pc, #160]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800455c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004562:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d035      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	429a      	cmp	r2, r3
 8004576:	d02e      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004578:	4b20      	ldr	r3, [pc, #128]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004580:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004582:	4b1e      	ldr	r3, [pc, #120]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004586:	4a1d      	ldr	r2, [pc, #116]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800458c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800458e:	4b1b      	ldr	r3, [pc, #108]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004592:	4a1a      	ldr	r2, [pc, #104]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004598:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800459a:	4a18      	ldr	r2, [pc, #96]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045a0:	4b16      	ldr	r3, [pc, #88]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d114      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ac:	f7fd ff6e 	bl	800248c <HAL_GetTick>
 80045b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b2:	e00a      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045b4:	f7fd ff6a 	bl	800248c <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d901      	bls.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e351      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ca:	4b0c      	ldr	r3, [pc, #48]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0ee      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045e2:	d111      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80045e4:	4b05      	ldr	r3, [pc, #20]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045f0:	4b04      	ldr	r3, [pc, #16]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80045f2:	400b      	ands	r3, r1
 80045f4:	4901      	ldr	r1, [pc, #4]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	608b      	str	r3, [r1, #8]
 80045fa:	e00b      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80045fc:	40023800 	.word	0x40023800
 8004600:	40007000 	.word	0x40007000
 8004604:	0ffffcff 	.word	0x0ffffcff
 8004608:	4bac      	ldr	r3, [pc, #688]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	4aab      	ldr	r2, [pc, #684]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800460e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004612:	6093      	str	r3, [r2, #8]
 8004614:	4ba9      	ldr	r3, [pc, #676]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004616:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004620:	49a6      	ldr	r1, [pc, #664]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004622:	4313      	orrs	r3, r2
 8004624:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0310 	and.w	r3, r3, #16
 800462e:	2b00      	cmp	r3, #0
 8004630:	d010      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004632:	4ba2      	ldr	r3, [pc, #648]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004638:	4aa0      	ldr	r2, [pc, #640]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800463a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800463e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004642:	4b9e      	ldr	r3, [pc, #632]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004644:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464c:	499b      	ldr	r1, [pc, #620]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004660:	4b96      	ldr	r3, [pc, #600]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004666:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800466e:	4993      	ldr	r1, [pc, #588]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004682:	4b8e      	ldr	r3, [pc, #568]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004688:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004690:	498a      	ldr	r1, [pc, #552]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046a4:	4b85      	ldr	r3, [pc, #532]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046b2:	4982      	ldr	r1, [pc, #520]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046c6:	4b7d      	ldr	r3, [pc, #500]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d4:	4979      	ldr	r1, [pc, #484]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046e8:	4b74      	ldr	r3, [pc, #464]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ee:	f023 0203 	bic.w	r2, r3, #3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f6:	4971      	ldr	r1, [pc, #452]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800470a:	4b6c      	ldr	r3, [pc, #432]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800470c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004710:	f023 020c 	bic.w	r2, r3, #12
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004718:	4968      	ldr	r1, [pc, #416]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800472c:	4b63      	ldr	r3, [pc, #396]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800472e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004732:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800473a:	4960      	ldr	r1, [pc, #384]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00a      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800474e:	4b5b      	ldr	r3, [pc, #364]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004754:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800475c:	4957      	ldr	r1, [pc, #348]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00a      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004770:	4b52      	ldr	r3, [pc, #328]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004776:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477e:	494f      	ldr	r1, [pc, #316]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004792:	4b4a      	ldr	r3, [pc, #296]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004798:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a0:	4946      	ldr	r1, [pc, #280]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00a      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80047b4:	4b41      	ldr	r3, [pc, #260]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c2:	493e      	ldr	r1, [pc, #248]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80047d6:	4b39      	ldr	r3, [pc, #228]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e4:	4935      	ldr	r1, [pc, #212]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00a      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047f8:	4b30      	ldr	r3, [pc, #192]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004806:	492d      	ldr	r1, [pc, #180]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004808:	4313      	orrs	r3, r2
 800480a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d011      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800481a:	4b28      	ldr	r3, [pc, #160]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800481c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004820:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004828:	4924      	ldr	r1, [pc, #144]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800482a:	4313      	orrs	r3, r2
 800482c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004838:	d101      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800483a:	2301      	movs	r3, #1
 800483c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0308 	and.w	r3, r3, #8
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800484a:	2301      	movs	r3, #1
 800484c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800485a:	4b18      	ldr	r3, [pc, #96]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800485c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004860:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004868:	4914      	ldr	r1, [pc, #80]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800486a:	4313      	orrs	r3, r2
 800486c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00b      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800487c:	4b0f      	ldr	r3, [pc, #60]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004882:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800488c:	490b      	ldr	r1, [pc, #44]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00f      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80048a0:	4b06      	ldr	r3, [pc, #24]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048b0:	4902      	ldr	r1, [pc, #8]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048b8:	e002      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80048ba:	bf00      	nop
 80048bc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00b      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048cc:	4b8a      	ldr	r3, [pc, #552]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048dc:	4986      	ldr	r1, [pc, #536]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00b      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80048f0:	4b81      	ldr	r3, [pc, #516]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004900:	497d      	ldr	r1, [pc, #500]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004902:	4313      	orrs	r3, r2
 8004904:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d006      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 80d6 	beq.w	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800491c:	4b76      	ldr	r3, [pc, #472]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a75      	ldr	r2, [pc, #468]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004922:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004926:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004928:	f7fd fdb0 	bl	800248c <HAL_GetTick>
 800492c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800492e:	e008      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004930:	f7fd fdac 	bl	800248c <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b64      	cmp	r3, #100	; 0x64
 800493c:	d901      	bls.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e195      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004942:	4b6d      	ldr	r3, [pc, #436]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1f0      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d021      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495e:	2b00      	cmp	r3, #0
 8004960:	d11d      	bne.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004962:	4b65      	ldr	r3, [pc, #404]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004968:	0c1b      	lsrs	r3, r3, #16
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004970:	4b61      	ldr	r3, [pc, #388]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004976:	0e1b      	lsrs	r3, r3, #24
 8004978:	f003 030f 	and.w	r3, r3, #15
 800497c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	019a      	lsls	r2, r3, #6
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	041b      	lsls	r3, r3, #16
 8004988:	431a      	orrs	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	061b      	lsls	r3, r3, #24
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	071b      	lsls	r3, r3, #28
 8004996:	4958      	ldr	r1, [pc, #352]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d004      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049b2:	d00a      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d02e      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049c8:	d129      	bne.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049ca:	4b4b      	ldr	r3, [pc, #300]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049d0:	0c1b      	lsrs	r3, r3, #16
 80049d2:	f003 0303 	and.w	r3, r3, #3
 80049d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049d8:	4b47      	ldr	r3, [pc, #284]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049de:	0f1b      	lsrs	r3, r3, #28
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	019a      	lsls	r2, r3, #6
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	041b      	lsls	r3, r3, #16
 80049f0:	431a      	orrs	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	061b      	lsls	r3, r3, #24
 80049f8:	431a      	orrs	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	071b      	lsls	r3, r3, #28
 80049fe:	493e      	ldr	r1, [pc, #248]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a06:	4b3c      	ldr	r3, [pc, #240]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a0c:	f023 021f 	bic.w	r2, r3, #31
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	3b01      	subs	r3, #1
 8004a16:	4938      	ldr	r1, [pc, #224]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d01d      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a2a:	4b33      	ldr	r3, [pc, #204]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a30:	0e1b      	lsrs	r3, r3, #24
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a38:	4b2f      	ldr	r3, [pc, #188]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a3e:	0f1b      	lsrs	r3, r3, #28
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	019a      	lsls	r2, r3, #6
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	041b      	lsls	r3, r3, #16
 8004a52:	431a      	orrs	r2, r3
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	061b      	lsls	r3, r3, #24
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	071b      	lsls	r3, r3, #28
 8004a5e:	4926      	ldr	r1, [pc, #152]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d011      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	019a      	lsls	r2, r3, #6
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	041b      	lsls	r3, r3, #16
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	061b      	lsls	r3, r3, #24
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	071b      	lsls	r3, r3, #28
 8004a8e:	491a      	ldr	r1, [pc, #104]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a96:	4b18      	ldr	r3, [pc, #96]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a17      	ldr	r2, [pc, #92]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004aa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aa2:	f7fd fcf3 	bl	800248c <HAL_GetTick>
 8004aa6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004aa8:	e008      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004aaa:	f7fd fcef 	bl	800248c <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b64      	cmp	r3, #100	; 0x64
 8004ab6:	d901      	bls.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e0d8      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004abc:	4b0e      	ldr	r3, [pc, #56]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0f0      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	f040 80ce 	bne.w	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ad0:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a08      	ldr	r2, [pc, #32]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ad6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ada:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004adc:	f7fd fcd6 	bl	800248c <HAL_GetTick>
 8004ae0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ae2:	e00b      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ae4:	f7fd fcd2 	bl	800248c <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b64      	cmp	r3, #100	; 0x64
 8004af0:	d904      	bls.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e0bb      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004af6:	bf00      	nop
 8004af8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004afc:	4b5e      	ldr	r3, [pc, #376]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b08:	d0ec      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d009      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d02e      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d12a      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b32:	4b51      	ldr	r3, [pc, #324]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b38:	0c1b      	lsrs	r3, r3, #16
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b40:	4b4d      	ldr	r3, [pc, #308]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b46:	0f1b      	lsrs	r3, r3, #28
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	019a      	lsls	r2, r3, #6
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	041b      	lsls	r3, r3, #16
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	061b      	lsls	r3, r3, #24
 8004b60:	431a      	orrs	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	071b      	lsls	r3, r3, #28
 8004b66:	4944      	ldr	r1, [pc, #272]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b6e:	4b42      	ldr	r3, [pc, #264]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b74:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	021b      	lsls	r3, r3, #8
 8004b80:	493d      	ldr	r1, [pc, #244]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d022      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b9c:	d11d      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b9e:	4b36      	ldr	r3, [pc, #216]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba4:	0e1b      	lsrs	r3, r3, #24
 8004ba6:	f003 030f 	and.w	r3, r3, #15
 8004baa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bac:	4b32      	ldr	r3, [pc, #200]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb2:	0f1b      	lsrs	r3, r3, #28
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	019a      	lsls	r2, r3, #6
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	041b      	lsls	r3, r3, #16
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	061b      	lsls	r3, r3, #24
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	071b      	lsls	r3, r3, #28
 8004bd2:	4929      	ldr	r1, [pc, #164]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0308 	and.w	r3, r3, #8
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d028      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004be6:	4b24      	ldr	r3, [pc, #144]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bec:	0e1b      	lsrs	r3, r3, #24
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004bf4:	4b20      	ldr	r3, [pc, #128]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfa:	0c1b      	lsrs	r3, r3, #16
 8004bfc:	f003 0303 	and.w	r3, r3, #3
 8004c00:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	019a      	lsls	r2, r3, #6
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	041b      	lsls	r3, r3, #16
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	061b      	lsls	r3, r3, #24
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	071b      	lsls	r3, r3, #28
 8004c1a:	4917      	ldr	r1, [pc, #92]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c22:	4b15      	ldr	r3, [pc, #84]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c30:	4911      	ldr	r1, [pc, #68]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c38:	4b0f      	ldr	r3, [pc, #60]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a0e      	ldr	r2, [pc, #56]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c44:	f7fd fc22 	bl	800248c <HAL_GetTick>
 8004c48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c4c:	f7fd fc1e 	bl	800248c <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b64      	cmp	r3, #100	; 0x64
 8004c58:	d901      	bls.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e007      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c5e:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c6a:	d1ef      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3720      	adds	r7, #32
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40023800 	.word	0x40023800

08004c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e049      	b.n	8004d22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fd f90e 	bl	8001ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4610      	mov	r0, r2
 8004cbc:	f000 fd30 	bl	8005720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d001      	beq.n	8004d44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e054      	b.n	8004dee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2202      	movs	r2, #2
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0201 	orr.w	r2, r2, #1
 8004d5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a26      	ldr	r2, [pc, #152]	; (8004dfc <HAL_TIM_Base_Start_IT+0xd0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d022      	beq.n	8004dac <HAL_TIM_Base_Start_IT+0x80>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d6e:	d01d      	beq.n	8004dac <HAL_TIM_Base_Start_IT+0x80>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a22      	ldr	r2, [pc, #136]	; (8004e00 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d018      	beq.n	8004dac <HAL_TIM_Base_Start_IT+0x80>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a21      	ldr	r2, [pc, #132]	; (8004e04 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d013      	beq.n	8004dac <HAL_TIM_Base_Start_IT+0x80>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a1f      	ldr	r2, [pc, #124]	; (8004e08 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00e      	beq.n	8004dac <HAL_TIM_Base_Start_IT+0x80>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a1e      	ldr	r2, [pc, #120]	; (8004e0c <HAL_TIM_Base_Start_IT+0xe0>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d009      	beq.n	8004dac <HAL_TIM_Base_Start_IT+0x80>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a1c      	ldr	r2, [pc, #112]	; (8004e10 <HAL_TIM_Base_Start_IT+0xe4>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d004      	beq.n	8004dac <HAL_TIM_Base_Start_IT+0x80>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a1b      	ldr	r2, [pc, #108]	; (8004e14 <HAL_TIM_Base_Start_IT+0xe8>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d115      	bne.n	8004dd8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689a      	ldr	r2, [r3, #8]
 8004db2:	4b19      	ldr	r3, [pc, #100]	; (8004e18 <HAL_TIM_Base_Start_IT+0xec>)
 8004db4:	4013      	ands	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b06      	cmp	r3, #6
 8004dbc:	d015      	beq.n	8004dea <HAL_TIM_Base_Start_IT+0xbe>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc4:	d011      	beq.n	8004dea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f042 0201 	orr.w	r2, r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd6:	e008      	b.n	8004dea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0201 	orr.w	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	e000      	b.n	8004dec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	40010000 	.word	0x40010000
 8004e00:	40000400 	.word	0x40000400
 8004e04:	40000800 	.word	0x40000800
 8004e08:	40000c00 	.word	0x40000c00
 8004e0c:	40010400 	.word	0x40010400
 8004e10:	40014000 	.word	0x40014000
 8004e14:	40001800 	.word	0x40001800
 8004e18:	00010007 	.word	0x00010007

08004e1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e049      	b.n	8004ec2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d106      	bne.n	8004e48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f841 	bl	8004eca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	3304      	adds	r3, #4
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	f000 fc60 	bl	8005720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
	...

08004ee0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d109      	bne.n	8004f04 <HAL_TIM_PWM_Start+0x24>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	bf14      	ite	ne
 8004efc:	2301      	movne	r3, #1
 8004efe:	2300      	moveq	r3, #0
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	e03c      	b.n	8004f7e <HAL_TIM_PWM_Start+0x9e>
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d109      	bne.n	8004f1e <HAL_TIM_PWM_Start+0x3e>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	bf14      	ite	ne
 8004f16:	2301      	movne	r3, #1
 8004f18:	2300      	moveq	r3, #0
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	e02f      	b.n	8004f7e <HAL_TIM_PWM_Start+0x9e>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d109      	bne.n	8004f38 <HAL_TIM_PWM_Start+0x58>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	bf14      	ite	ne
 8004f30:	2301      	movne	r3, #1
 8004f32:	2300      	moveq	r3, #0
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	e022      	b.n	8004f7e <HAL_TIM_PWM_Start+0x9e>
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	2b0c      	cmp	r3, #12
 8004f3c:	d109      	bne.n	8004f52 <HAL_TIM_PWM_Start+0x72>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	bf14      	ite	ne
 8004f4a:	2301      	movne	r3, #1
 8004f4c:	2300      	moveq	r3, #0
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	e015      	b.n	8004f7e <HAL_TIM_PWM_Start+0x9e>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b10      	cmp	r3, #16
 8004f56:	d109      	bne.n	8004f6c <HAL_TIM_PWM_Start+0x8c>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	bf14      	ite	ne
 8004f64:	2301      	movne	r3, #1
 8004f66:	2300      	moveq	r3, #0
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	e008      	b.n	8004f7e <HAL_TIM_PWM_Start+0x9e>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	bf14      	ite	ne
 8004f78:	2301      	movne	r3, #1
 8004f7a:	2300      	moveq	r3, #0
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e092      	b.n	80050ac <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d104      	bne.n	8004f96 <HAL_TIM_PWM_Start+0xb6>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f94:	e023      	b.n	8004fde <HAL_TIM_PWM_Start+0xfe>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d104      	bne.n	8004fa6 <HAL_TIM_PWM_Start+0xc6>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fa4:	e01b      	b.n	8004fde <HAL_TIM_PWM_Start+0xfe>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d104      	bne.n	8004fb6 <HAL_TIM_PWM_Start+0xd6>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fb4:	e013      	b.n	8004fde <HAL_TIM_PWM_Start+0xfe>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b0c      	cmp	r3, #12
 8004fba:	d104      	bne.n	8004fc6 <HAL_TIM_PWM_Start+0xe6>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fc4:	e00b      	b.n	8004fde <HAL_TIM_PWM_Start+0xfe>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b10      	cmp	r3, #16
 8004fca:	d104      	bne.n	8004fd6 <HAL_TIM_PWM_Start+0xf6>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fd4:	e003      	b.n	8004fde <HAL_TIM_PWM_Start+0xfe>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2202      	movs	r2, #2
 8004fda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	6839      	ldr	r1, [r7, #0]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 ff32 	bl	8005e50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a30      	ldr	r2, [pc, #192]	; (80050b4 <HAL_TIM_PWM_Start+0x1d4>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d004      	beq.n	8005000 <HAL_TIM_PWM_Start+0x120>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a2f      	ldr	r2, [pc, #188]	; (80050b8 <HAL_TIM_PWM_Start+0x1d8>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d101      	bne.n	8005004 <HAL_TIM_PWM_Start+0x124>
 8005000:	2301      	movs	r3, #1
 8005002:	e000      	b.n	8005006 <HAL_TIM_PWM_Start+0x126>
 8005004:	2300      	movs	r3, #0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d007      	beq.n	800501a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005018:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a25      	ldr	r2, [pc, #148]	; (80050b4 <HAL_TIM_PWM_Start+0x1d4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d022      	beq.n	800506a <HAL_TIM_PWM_Start+0x18a>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800502c:	d01d      	beq.n	800506a <HAL_TIM_PWM_Start+0x18a>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a22      	ldr	r2, [pc, #136]	; (80050bc <HAL_TIM_PWM_Start+0x1dc>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d018      	beq.n	800506a <HAL_TIM_PWM_Start+0x18a>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a20      	ldr	r2, [pc, #128]	; (80050c0 <HAL_TIM_PWM_Start+0x1e0>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d013      	beq.n	800506a <HAL_TIM_PWM_Start+0x18a>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a1f      	ldr	r2, [pc, #124]	; (80050c4 <HAL_TIM_PWM_Start+0x1e4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00e      	beq.n	800506a <HAL_TIM_PWM_Start+0x18a>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a19      	ldr	r2, [pc, #100]	; (80050b8 <HAL_TIM_PWM_Start+0x1d8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d009      	beq.n	800506a <HAL_TIM_PWM_Start+0x18a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a1b      	ldr	r2, [pc, #108]	; (80050c8 <HAL_TIM_PWM_Start+0x1e8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d004      	beq.n	800506a <HAL_TIM_PWM_Start+0x18a>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a19      	ldr	r2, [pc, #100]	; (80050cc <HAL_TIM_PWM_Start+0x1ec>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d115      	bne.n	8005096 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	4b17      	ldr	r3, [pc, #92]	; (80050d0 <HAL_TIM_PWM_Start+0x1f0>)
 8005072:	4013      	ands	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b06      	cmp	r3, #6
 800507a:	d015      	beq.n	80050a8 <HAL_TIM_PWM_Start+0x1c8>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005082:	d011      	beq.n	80050a8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0201 	orr.w	r2, r2, #1
 8005092:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005094:	e008      	b.n	80050a8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f042 0201 	orr.w	r2, r2, #1
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	e000      	b.n	80050aa <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	40010000 	.word	0x40010000
 80050b8:	40010400 	.word	0x40010400
 80050bc:	40000400 	.word	0x40000400
 80050c0:	40000800 	.word	0x40000800
 80050c4:	40000c00 	.word	0x40000c00
 80050c8:	40014000 	.word	0x40014000
 80050cc:	40001800 	.word	0x40001800
 80050d0:	00010007 	.word	0x00010007

080050d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d122      	bne.n	8005130 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d11b      	bne.n	8005130 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f06f 0202 	mvn.w	r2, #2
 8005100:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	f003 0303 	and.w	r3, r3, #3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 fae4 	bl	80056e4 <HAL_TIM_IC_CaptureCallback>
 800511c:	e005      	b.n	800512a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 fad6 	bl	80056d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 fae7 	bl	80056f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	f003 0304 	and.w	r3, r3, #4
 800513a:	2b04      	cmp	r3, #4
 800513c:	d122      	bne.n	8005184 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b04      	cmp	r3, #4
 800514a:	d11b      	bne.n	8005184 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f06f 0204 	mvn.w	r2, #4
 8005154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2202      	movs	r2, #2
 800515a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 faba 	bl	80056e4 <HAL_TIM_IC_CaptureCallback>
 8005170:	e005      	b.n	800517e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 faac 	bl	80056d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 fabd 	bl	80056f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f003 0308 	and.w	r3, r3, #8
 800518e:	2b08      	cmp	r3, #8
 8005190:	d122      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b08      	cmp	r3, #8
 800519e:	d11b      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f06f 0208 	mvn.w	r2, #8
 80051a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2204      	movs	r2, #4
 80051ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fa90 	bl	80056e4 <HAL_TIM_IC_CaptureCallback>
 80051c4:	e005      	b.n	80051d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 fa82 	bl	80056d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 fa93 	bl	80056f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	f003 0310 	and.w	r3, r3, #16
 80051e2:	2b10      	cmp	r3, #16
 80051e4:	d122      	bne.n	800522c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f003 0310 	and.w	r3, r3, #16
 80051f0:	2b10      	cmp	r3, #16
 80051f2:	d11b      	bne.n	800522c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f06f 0210 	mvn.w	r2, #16
 80051fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2208      	movs	r2, #8
 8005202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 fa66 	bl	80056e4 <HAL_TIM_IC_CaptureCallback>
 8005218:	e005      	b.n	8005226 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fa58 	bl	80056d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 fa69 	bl	80056f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b01      	cmp	r3, #1
 8005238:	d10e      	bne.n	8005258 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b01      	cmp	r3, #1
 8005246:	d107      	bne.n	8005258 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f06f 0201 	mvn.w	r2, #1
 8005250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fc fcfa 	bl	8001c4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005262:	2b80      	cmp	r3, #128	; 0x80
 8005264:	d10e      	bne.n	8005284 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005270:	2b80      	cmp	r3, #128	; 0x80
 8005272:	d107      	bne.n	8005284 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800527c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 ff22 	bl	80060c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005292:	d10e      	bne.n	80052b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529e:	2b80      	cmp	r3, #128	; 0x80
 80052a0:	d107      	bne.n	80052b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80052aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 ff15 	bl	80060dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052bc:	2b40      	cmp	r3, #64	; 0x40
 80052be:	d10e      	bne.n	80052de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ca:	2b40      	cmp	r3, #64	; 0x40
 80052cc:	d107      	bne.n	80052de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 fa17 	bl	800570c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	f003 0320 	and.w	r3, r3, #32
 80052e8:	2b20      	cmp	r3, #32
 80052ea:	d10e      	bne.n	800530a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f003 0320 	and.w	r3, r3, #32
 80052f6:	2b20      	cmp	r3, #32
 80052f8:	d107      	bne.n	800530a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f06f 0220 	mvn.w	r2, #32
 8005302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 fed5 	bl	80060b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800530a:	bf00      	nop
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
	...

08005314 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005320:	2300      	movs	r3, #0
 8005322:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800532a:	2b01      	cmp	r3, #1
 800532c:	d101      	bne.n	8005332 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800532e:	2302      	movs	r3, #2
 8005330:	e0ff      	b.n	8005532 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b14      	cmp	r3, #20
 800533e:	f200 80f0 	bhi.w	8005522 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005342:	a201      	add	r2, pc, #4	; (adr r2, 8005348 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005348:	0800539d 	.word	0x0800539d
 800534c:	08005523 	.word	0x08005523
 8005350:	08005523 	.word	0x08005523
 8005354:	08005523 	.word	0x08005523
 8005358:	080053dd 	.word	0x080053dd
 800535c:	08005523 	.word	0x08005523
 8005360:	08005523 	.word	0x08005523
 8005364:	08005523 	.word	0x08005523
 8005368:	0800541f 	.word	0x0800541f
 800536c:	08005523 	.word	0x08005523
 8005370:	08005523 	.word	0x08005523
 8005374:	08005523 	.word	0x08005523
 8005378:	0800545f 	.word	0x0800545f
 800537c:	08005523 	.word	0x08005523
 8005380:	08005523 	.word	0x08005523
 8005384:	08005523 	.word	0x08005523
 8005388:	080054a1 	.word	0x080054a1
 800538c:	08005523 	.word	0x08005523
 8005390:	08005523 	.word	0x08005523
 8005394:	08005523 	.word	0x08005523
 8005398:	080054e1 	.word	0x080054e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68b9      	ldr	r1, [r7, #8]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 fa5c 	bl	8005860 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699a      	ldr	r2, [r3, #24]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0208 	orr.w	r2, r2, #8
 80053b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699a      	ldr	r2, [r3, #24]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0204 	bic.w	r2, r2, #4
 80053c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6999      	ldr	r1, [r3, #24]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	691a      	ldr	r2, [r3, #16]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	619a      	str	r2, [r3, #24]
      break;
 80053da:	e0a5      	b.n	8005528 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68b9      	ldr	r1, [r7, #8]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 faae 	bl	8005944 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699a      	ldr	r2, [r3, #24]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699a      	ldr	r2, [r3, #24]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6999      	ldr	r1, [r3, #24]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	021a      	lsls	r2, r3, #8
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	619a      	str	r2, [r3, #24]
      break;
 800541c:	e084      	b.n	8005528 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68b9      	ldr	r1, [r7, #8]
 8005424:	4618      	mov	r0, r3
 8005426:	f000 fb05 	bl	8005a34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	69da      	ldr	r2, [r3, #28]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f042 0208 	orr.w	r2, r2, #8
 8005438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	69da      	ldr	r2, [r3, #28]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 0204 	bic.w	r2, r2, #4
 8005448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69d9      	ldr	r1, [r3, #28]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	691a      	ldr	r2, [r3, #16]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	61da      	str	r2, [r3, #28]
      break;
 800545c:	e064      	b.n	8005528 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68b9      	ldr	r1, [r7, #8]
 8005464:	4618      	mov	r0, r3
 8005466:	f000 fb5b 	bl	8005b20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	69da      	ldr	r2, [r3, #28]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69da      	ldr	r2, [r3, #28]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69d9      	ldr	r1, [r3, #28]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	021a      	lsls	r2, r3, #8
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	61da      	str	r2, [r3, #28]
      break;
 800549e:	e043      	b.n	8005528 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68b9      	ldr	r1, [r7, #8]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 fb92 	bl	8005bd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0208 	orr.w	r2, r2, #8
 80054ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 0204 	bic.w	r2, r2, #4
 80054ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	691a      	ldr	r2, [r3, #16]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80054de:	e023      	b.n	8005528 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68b9      	ldr	r1, [r7, #8]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fbc4 	bl	8005c74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800550a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	021a      	lsls	r2, r3, #8
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005520:	e002      	b.n	8005528 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	75fb      	strb	r3, [r7, #23]
      break;
 8005526:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005530:	7dfb      	ldrb	r3, [r7, #23]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop

0800553c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005550:	2b01      	cmp	r3, #1
 8005552:	d101      	bne.n	8005558 <HAL_TIM_ConfigClockSource+0x1c>
 8005554:	2302      	movs	r3, #2
 8005556:	e0b4      	b.n	80056c2 <HAL_TIM_ConfigClockSource+0x186>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	4b56      	ldr	r3, [pc, #344]	; (80056cc <HAL_TIM_ConfigClockSource+0x190>)
 8005574:	4013      	ands	r3, r2
 8005576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800557e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005590:	d03e      	beq.n	8005610 <HAL_TIM_ConfigClockSource+0xd4>
 8005592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005596:	f200 8087 	bhi.w	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 800559a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800559e:	f000 8086 	beq.w	80056ae <HAL_TIM_ConfigClockSource+0x172>
 80055a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055a6:	d87f      	bhi.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 80055a8:	2b70      	cmp	r3, #112	; 0x70
 80055aa:	d01a      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0xa6>
 80055ac:	2b70      	cmp	r3, #112	; 0x70
 80055ae:	d87b      	bhi.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 80055b0:	2b60      	cmp	r3, #96	; 0x60
 80055b2:	d050      	beq.n	8005656 <HAL_TIM_ConfigClockSource+0x11a>
 80055b4:	2b60      	cmp	r3, #96	; 0x60
 80055b6:	d877      	bhi.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 80055b8:	2b50      	cmp	r3, #80	; 0x50
 80055ba:	d03c      	beq.n	8005636 <HAL_TIM_ConfigClockSource+0xfa>
 80055bc:	2b50      	cmp	r3, #80	; 0x50
 80055be:	d873      	bhi.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 80055c0:	2b40      	cmp	r3, #64	; 0x40
 80055c2:	d058      	beq.n	8005676 <HAL_TIM_ConfigClockSource+0x13a>
 80055c4:	2b40      	cmp	r3, #64	; 0x40
 80055c6:	d86f      	bhi.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 80055c8:	2b30      	cmp	r3, #48	; 0x30
 80055ca:	d064      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x15a>
 80055cc:	2b30      	cmp	r3, #48	; 0x30
 80055ce:	d86b      	bhi.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 80055d0:	2b20      	cmp	r3, #32
 80055d2:	d060      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x15a>
 80055d4:	2b20      	cmp	r3, #32
 80055d6:	d867      	bhi.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d05c      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x15a>
 80055dc:	2b10      	cmp	r3, #16
 80055de:	d05a      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x15a>
 80055e0:	e062      	b.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6818      	ldr	r0, [r3, #0]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	6899      	ldr	r1, [r3, #8]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f000 fc0d 	bl	8005e10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005604:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	609a      	str	r2, [r3, #8]
      break;
 800560e:	e04f      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6818      	ldr	r0, [r3, #0]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	6899      	ldr	r1, [r3, #8]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f000 fbf6 	bl	8005e10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689a      	ldr	r2, [r3, #8]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005632:	609a      	str	r2, [r3, #8]
      break;
 8005634:	e03c      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6818      	ldr	r0, [r3, #0]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	6859      	ldr	r1, [r3, #4]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	461a      	mov	r2, r3
 8005644:	f000 fb6a 	bl	8005d1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2150      	movs	r1, #80	; 0x50
 800564e:	4618      	mov	r0, r3
 8005650:	f000 fbc3 	bl	8005dda <TIM_ITRx_SetConfig>
      break;
 8005654:	e02c      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6818      	ldr	r0, [r3, #0]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	6859      	ldr	r1, [r3, #4]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	461a      	mov	r2, r3
 8005664:	f000 fb89 	bl	8005d7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2160      	movs	r1, #96	; 0x60
 800566e:	4618      	mov	r0, r3
 8005670:	f000 fbb3 	bl	8005dda <TIM_ITRx_SetConfig>
      break;
 8005674:	e01c      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6818      	ldr	r0, [r3, #0]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	6859      	ldr	r1, [r3, #4]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	461a      	mov	r2, r3
 8005684:	f000 fb4a 	bl	8005d1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2140      	movs	r1, #64	; 0x40
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fba3 	bl	8005dda <TIM_ITRx_SetConfig>
      break;
 8005694:	e00c      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4619      	mov	r1, r3
 80056a0:	4610      	mov	r0, r2
 80056a2:	f000 fb9a 	bl	8005dda <TIM_ITRx_SetConfig>
      break;
 80056a6:	e003      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	73fb      	strb	r3, [r7, #15]
      break;
 80056ac:	e000      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	fffeff88 	.word	0xfffeff88

080056d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a40      	ldr	r2, [pc, #256]	; (8005834 <TIM_Base_SetConfig+0x114>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d013      	beq.n	8005760 <TIM_Base_SetConfig+0x40>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800573e:	d00f      	beq.n	8005760 <TIM_Base_SetConfig+0x40>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a3d      	ldr	r2, [pc, #244]	; (8005838 <TIM_Base_SetConfig+0x118>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d00b      	beq.n	8005760 <TIM_Base_SetConfig+0x40>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a3c      	ldr	r2, [pc, #240]	; (800583c <TIM_Base_SetConfig+0x11c>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d007      	beq.n	8005760 <TIM_Base_SetConfig+0x40>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a3b      	ldr	r2, [pc, #236]	; (8005840 <TIM_Base_SetConfig+0x120>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d003      	beq.n	8005760 <TIM_Base_SetConfig+0x40>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a3a      	ldr	r2, [pc, #232]	; (8005844 <TIM_Base_SetConfig+0x124>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d108      	bne.n	8005772 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005766:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	4313      	orrs	r3, r2
 8005770:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a2f      	ldr	r2, [pc, #188]	; (8005834 <TIM_Base_SetConfig+0x114>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d02b      	beq.n	80057d2 <TIM_Base_SetConfig+0xb2>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005780:	d027      	beq.n	80057d2 <TIM_Base_SetConfig+0xb2>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a2c      	ldr	r2, [pc, #176]	; (8005838 <TIM_Base_SetConfig+0x118>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d023      	beq.n	80057d2 <TIM_Base_SetConfig+0xb2>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a2b      	ldr	r2, [pc, #172]	; (800583c <TIM_Base_SetConfig+0x11c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d01f      	beq.n	80057d2 <TIM_Base_SetConfig+0xb2>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a2a      	ldr	r2, [pc, #168]	; (8005840 <TIM_Base_SetConfig+0x120>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d01b      	beq.n	80057d2 <TIM_Base_SetConfig+0xb2>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a29      	ldr	r2, [pc, #164]	; (8005844 <TIM_Base_SetConfig+0x124>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d017      	beq.n	80057d2 <TIM_Base_SetConfig+0xb2>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a28      	ldr	r2, [pc, #160]	; (8005848 <TIM_Base_SetConfig+0x128>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d013      	beq.n	80057d2 <TIM_Base_SetConfig+0xb2>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a27      	ldr	r2, [pc, #156]	; (800584c <TIM_Base_SetConfig+0x12c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00f      	beq.n	80057d2 <TIM_Base_SetConfig+0xb2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a26      	ldr	r2, [pc, #152]	; (8005850 <TIM_Base_SetConfig+0x130>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00b      	beq.n	80057d2 <TIM_Base_SetConfig+0xb2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a25      	ldr	r2, [pc, #148]	; (8005854 <TIM_Base_SetConfig+0x134>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d007      	beq.n	80057d2 <TIM_Base_SetConfig+0xb2>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a24      	ldr	r2, [pc, #144]	; (8005858 <TIM_Base_SetConfig+0x138>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d003      	beq.n	80057d2 <TIM_Base_SetConfig+0xb2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a23      	ldr	r2, [pc, #140]	; (800585c <TIM_Base_SetConfig+0x13c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d108      	bne.n	80057e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	689a      	ldr	r2, [r3, #8]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a0a      	ldr	r2, [pc, #40]	; (8005834 <TIM_Base_SetConfig+0x114>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d003      	beq.n	8005818 <TIM_Base_SetConfig+0xf8>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a0c      	ldr	r2, [pc, #48]	; (8005844 <TIM_Base_SetConfig+0x124>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d103      	bne.n	8005820 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	691a      	ldr	r2, [r3, #16]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	615a      	str	r2, [r3, #20]
}
 8005826:	bf00      	nop
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	40010000 	.word	0x40010000
 8005838:	40000400 	.word	0x40000400
 800583c:	40000800 	.word	0x40000800
 8005840:	40000c00 	.word	0x40000c00
 8005844:	40010400 	.word	0x40010400
 8005848:	40014000 	.word	0x40014000
 800584c:	40014400 	.word	0x40014400
 8005850:	40014800 	.word	0x40014800
 8005854:	40001800 	.word	0x40001800
 8005858:	40001c00 	.word	0x40001c00
 800585c:	40002000 	.word	0x40002000

08005860 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005860:	b480      	push	{r7}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	f023 0201 	bic.w	r2, r3, #1
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	4b2b      	ldr	r3, [pc, #172]	; (8005938 <TIM_OC1_SetConfig+0xd8>)
 800588c:	4013      	ands	r3, r2
 800588e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f023 0303 	bic.w	r3, r3, #3
 8005896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	4313      	orrs	r3, r2
 80058a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f023 0302 	bic.w	r3, r3, #2
 80058a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a21      	ldr	r2, [pc, #132]	; (800593c <TIM_OC1_SetConfig+0xdc>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d003      	beq.n	80058c4 <TIM_OC1_SetConfig+0x64>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a20      	ldr	r2, [pc, #128]	; (8005940 <TIM_OC1_SetConfig+0xe0>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d10c      	bne.n	80058de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f023 0308 	bic.w	r3, r3, #8
 80058ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f023 0304 	bic.w	r3, r3, #4
 80058dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a16      	ldr	r2, [pc, #88]	; (800593c <TIM_OC1_SetConfig+0xdc>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d003      	beq.n	80058ee <TIM_OC1_SetConfig+0x8e>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a15      	ldr	r2, [pc, #84]	; (8005940 <TIM_OC1_SetConfig+0xe0>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d111      	bne.n	8005912 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	4313      	orrs	r3, r2
 8005906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	4313      	orrs	r3, r2
 8005910:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	621a      	str	r2, [r3, #32]
}
 800592c:	bf00      	nop
 800592e:	371c      	adds	r7, #28
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	fffeff8f 	.word	0xfffeff8f
 800593c:	40010000 	.word	0x40010000
 8005940:	40010400 	.word	0x40010400

08005944 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005944:	b480      	push	{r7}
 8005946:	b087      	sub	sp, #28
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	f023 0210 	bic.w	r2, r3, #16
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	4b2e      	ldr	r3, [pc, #184]	; (8005a28 <TIM_OC2_SetConfig+0xe4>)
 8005970:	4013      	ands	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800597a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	021b      	lsls	r3, r3, #8
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	4313      	orrs	r3, r2
 8005986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	f023 0320 	bic.w	r3, r3, #32
 800598e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	011b      	lsls	r3, r3, #4
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	4313      	orrs	r3, r2
 800599a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a23      	ldr	r2, [pc, #140]	; (8005a2c <TIM_OC2_SetConfig+0xe8>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d003      	beq.n	80059ac <TIM_OC2_SetConfig+0x68>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a22      	ldr	r2, [pc, #136]	; (8005a30 <TIM_OC2_SetConfig+0xec>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d10d      	bne.n	80059c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	011b      	lsls	r3, r3, #4
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	4313      	orrs	r3, r2
 80059be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a18      	ldr	r2, [pc, #96]	; (8005a2c <TIM_OC2_SetConfig+0xe8>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d003      	beq.n	80059d8 <TIM_OC2_SetConfig+0x94>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a17      	ldr	r2, [pc, #92]	; (8005a30 <TIM_OC2_SetConfig+0xec>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d113      	bne.n	8005a00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	621a      	str	r2, [r3, #32]
}
 8005a1a:	bf00      	nop
 8005a1c:	371c      	adds	r7, #28
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	feff8fff 	.word	0xfeff8fff
 8005a2c:	40010000 	.word	0x40010000
 8005a30:	40010400 	.word	0x40010400

08005a34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b087      	sub	sp, #28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	4b2d      	ldr	r3, [pc, #180]	; (8005b14 <TIM_OC3_SetConfig+0xe0>)
 8005a60:	4013      	ands	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 0303 	bic.w	r3, r3, #3
 8005a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	021b      	lsls	r3, r3, #8
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a22      	ldr	r2, [pc, #136]	; (8005b18 <TIM_OC3_SetConfig+0xe4>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d003      	beq.n	8005a9a <TIM_OC3_SetConfig+0x66>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a21      	ldr	r2, [pc, #132]	; (8005b1c <TIM_OC3_SetConfig+0xe8>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d10d      	bne.n	8005ab6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	021b      	lsls	r3, r3, #8
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a17      	ldr	r2, [pc, #92]	; (8005b18 <TIM_OC3_SetConfig+0xe4>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d003      	beq.n	8005ac6 <TIM_OC3_SetConfig+0x92>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a16      	ldr	r2, [pc, #88]	; (8005b1c <TIM_OC3_SetConfig+0xe8>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d113      	bne.n	8005aee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005acc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	011b      	lsls	r3, r3, #4
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	011b      	lsls	r3, r3, #4
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	621a      	str	r2, [r3, #32]
}
 8005b08:	bf00      	nop
 8005b0a:	371c      	adds	r7, #28
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr
 8005b14:	fffeff8f 	.word	0xfffeff8f
 8005b18:	40010000 	.word	0x40010000
 8005b1c:	40010400 	.word	0x40010400

08005b20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b087      	sub	sp, #28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	4b1e      	ldr	r3, [pc, #120]	; (8005bc4 <TIM_OC4_SetConfig+0xa4>)
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	021b      	lsls	r3, r3, #8
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	031b      	lsls	r3, r3, #12
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a13      	ldr	r2, [pc, #76]	; (8005bc8 <TIM_OC4_SetConfig+0xa8>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d003      	beq.n	8005b88 <TIM_OC4_SetConfig+0x68>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a12      	ldr	r2, [pc, #72]	; (8005bcc <TIM_OC4_SetConfig+0xac>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d109      	bne.n	8005b9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	019b      	lsls	r3, r3, #6
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	621a      	str	r2, [r3, #32]
}
 8005bb6:	bf00      	nop
 8005bb8:	371c      	adds	r7, #28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	feff8fff 	.word	0xfeff8fff
 8005bc8:	40010000 	.word	0x40010000
 8005bcc:	40010400 	.word	0x40010400

08005bd0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	4b1b      	ldr	r3, [pc, #108]	; (8005c68 <TIM_OC5_SetConfig+0x98>)
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	041b      	lsls	r3, r3, #16
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a12      	ldr	r2, [pc, #72]	; (8005c6c <TIM_OC5_SetConfig+0x9c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d003      	beq.n	8005c2e <TIM_OC5_SetConfig+0x5e>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a11      	ldr	r2, [pc, #68]	; (8005c70 <TIM_OC5_SetConfig+0xa0>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d109      	bne.n	8005c42 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	021b      	lsls	r3, r3, #8
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	621a      	str	r2, [r3, #32]
}
 8005c5c:	bf00      	nop
 8005c5e:	371c      	adds	r7, #28
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	fffeff8f 	.word	0xfffeff8f
 8005c6c:	40010000 	.word	0x40010000
 8005c70:	40010400 	.word	0x40010400

08005c74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	4b1c      	ldr	r3, [pc, #112]	; (8005d10 <TIM_OC6_SetConfig+0x9c>)
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	021b      	lsls	r3, r3, #8
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	051b      	lsls	r3, r3, #20
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a13      	ldr	r2, [pc, #76]	; (8005d14 <TIM_OC6_SetConfig+0xa0>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d003      	beq.n	8005cd4 <TIM_OC6_SetConfig+0x60>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a12      	ldr	r2, [pc, #72]	; (8005d18 <TIM_OC6_SetConfig+0xa4>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d109      	bne.n	8005ce8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	029b      	lsls	r3, r3, #10
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	621a      	str	r2, [r3, #32]
}
 8005d02:	bf00      	nop
 8005d04:	371c      	adds	r7, #28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	feff8fff 	.word	0xfeff8fff
 8005d14:	40010000 	.word	0x40010000
 8005d18:	40010400 	.word	0x40010400

08005d1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	f023 0201 	bic.w	r2, r3, #1
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	011b      	lsls	r3, r3, #4
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f023 030a 	bic.w	r3, r3, #10
 8005d58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	621a      	str	r2, [r3, #32]
}
 8005d6e:	bf00      	nop
 8005d70:	371c      	adds	r7, #28
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b087      	sub	sp, #28
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	60f8      	str	r0, [r7, #12]
 8005d82:	60b9      	str	r1, [r7, #8]
 8005d84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	f023 0210 	bic.w	r2, r3, #16
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005da4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	031b      	lsls	r3, r3, #12
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005db6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	011b      	lsls	r3, r3, #4
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	621a      	str	r2, [r3, #32]
}
 8005dce:	bf00      	nop
 8005dd0:	371c      	adds	r7, #28
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b085      	sub	sp, #20
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005df2:	683a      	ldr	r2, [r7, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	f043 0307 	orr.w	r3, r3, #7
 8005dfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	609a      	str	r2, [r3, #8]
}
 8005e04:	bf00      	nop
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
 8005e1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	021a      	lsls	r2, r3, #8
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	431a      	orrs	r2, r3
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	609a      	str	r2, [r3, #8]
}
 8005e44:	bf00      	nop
 8005e46:	371c      	adds	r7, #28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f003 031f 	and.w	r3, r3, #31
 8005e62:	2201      	movs	r2, #1
 8005e64:	fa02 f303 	lsl.w	r3, r2, r3
 8005e68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6a1a      	ldr	r2, [r3, #32]
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	43db      	mvns	r3, r3
 8005e72:	401a      	ands	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6a1a      	ldr	r2, [r3, #32]
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	f003 031f 	and.w	r3, r3, #31
 8005e82:	6879      	ldr	r1, [r7, #4]
 8005e84:	fa01 f303 	lsl.w	r3, r1, r3
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	621a      	str	r2, [r3, #32]
}
 8005e8e:	bf00      	nop
 8005e90:	371c      	adds	r7, #28
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
	...

08005e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d101      	bne.n	8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	e06d      	b.n	8005f90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a30      	ldr	r2, [pc, #192]	; (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d004      	beq.n	8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a2f      	ldr	r2, [pc, #188]	; (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d108      	bne.n	8005efa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005eee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a20      	ldr	r2, [pc, #128]	; (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d022      	beq.n	8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f26:	d01d      	beq.n	8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a1d      	ldr	r2, [pc, #116]	; (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d018      	beq.n	8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a1c      	ldr	r2, [pc, #112]	; (8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d013      	beq.n	8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a1a      	ldr	r2, [pc, #104]	; (8005fac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d00e      	beq.n	8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a15      	ldr	r2, [pc, #84]	; (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d009      	beq.n	8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a16      	ldr	r2, [pc, #88]	; (8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d004      	beq.n	8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a15      	ldr	r2, [pc, #84]	; (8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d10c      	bne.n	8005f7e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	40010000 	.word	0x40010000
 8005fa0:	40010400 	.word	0x40010400
 8005fa4:	40000400 	.word	0x40000400
 8005fa8:	40000800 	.word	0x40000800
 8005fac:	40000c00 	.word	0x40000c00
 8005fb0:	40014000 	.word	0x40014000
 8005fb4:	40001800 	.word	0x40001800

08005fb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d101      	bne.n	8005fd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	e065      	b.n	80060a0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	4313      	orrs	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4313      	orrs	r3, r2
 8006012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	4313      	orrs	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603a:	4313      	orrs	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	041b      	lsls	r3, r3, #16
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a16      	ldr	r2, [pc, #88]	; (80060ac <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d004      	beq.n	8006062 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a14      	ldr	r2, [pc, #80]	; (80060b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d115      	bne.n	800608e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606c:	051b      	lsls	r3, r3, #20
 800606e:	4313      	orrs	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	4313      	orrs	r3, r2
 800607e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	4313      	orrs	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr
 80060ac:	40010000 	.word	0x40010000
 80060b0:	40010400 	.word	0x40010400

080060b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e040      	b.n	8006184 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006106:	2b00      	cmp	r3, #0
 8006108:	d106      	bne.n	8006118 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7fb ff48 	bl	8001fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2224      	movs	r2, #36	; 0x24
 800611c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f022 0201 	bic.w	r2, r2, #1
 800612c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 fc06 	bl	8006940 <UART_SetConfig>
 8006134:	4603      	mov	r3, r0
 8006136:	2b01      	cmp	r3, #1
 8006138:	d101      	bne.n	800613e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e022      	b.n	8006184 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006142:	2b00      	cmp	r3, #0
 8006144:	d002      	beq.n	800614c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 fe5e 	bl	8006e08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800615a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	689a      	ldr	r2, [r3, #8]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800616a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f042 0201 	orr.w	r2, r2, #1
 800617a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 fee5 	bl	8006f4c <UART_CheckIdleState>
 8006182:	4603      	mov	r3, r0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b08a      	sub	sp, #40	; 0x28
 8006190:	af02      	add	r7, sp, #8
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	603b      	str	r3, [r7, #0]
 8006198:	4613      	mov	r3, r2
 800619a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061a0:	2b20      	cmp	r3, #32
 80061a2:	d171      	bne.n	8006288 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d002      	beq.n	80061b0 <HAL_UART_Transmit+0x24>
 80061aa:	88fb      	ldrh	r3, [r7, #6]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e06a      	b.n	800628a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2221      	movs	r2, #33	; 0x21
 80061c0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061c2:	f7fc f963 	bl	800248c <HAL_GetTick>
 80061c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	88fa      	ldrh	r2, [r7, #6]
 80061cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	88fa      	ldrh	r2, [r7, #6]
 80061d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e0:	d108      	bne.n	80061f4 <HAL_UART_Transmit+0x68>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d104      	bne.n	80061f4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80061ea:	2300      	movs	r3, #0
 80061ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	61bb      	str	r3, [r7, #24]
 80061f2:	e003      	b.n	80061fc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061f8:	2300      	movs	r3, #0
 80061fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061fc:	e02c      	b.n	8006258 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	2200      	movs	r2, #0
 8006206:	2180      	movs	r1, #128	; 0x80
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 feec 	bl	8006fe6 <UART_WaitOnFlagUntilTimeout>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e038      	b.n	800628a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10b      	bne.n	8006236 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	461a      	mov	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800622c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	3302      	adds	r3, #2
 8006232:	61bb      	str	r3, [r7, #24]
 8006234:	e007      	b.n	8006246 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	781a      	ldrb	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	3301      	adds	r3, #1
 8006244:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800624c:	b29b      	uxth	r3, r3
 800624e:	3b01      	subs	r3, #1
 8006250:	b29a      	uxth	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800625e:	b29b      	uxth	r3, r3
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1cc      	bne.n	80061fe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	2200      	movs	r2, #0
 800626c:	2140      	movs	r1, #64	; 0x40
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f000 feb9 	bl	8006fe6 <UART_WaitOnFlagUntilTimeout>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d001      	beq.n	800627e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e005      	b.n	800628a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2220      	movs	r2, #32
 8006282:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006284:	2300      	movs	r3, #0
 8006286:	e000      	b.n	800628a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006288:	2302      	movs	r3, #2
  }
}
 800628a:	4618      	mov	r0, r3
 800628c:	3720      	adds	r7, #32
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b08a      	sub	sp, #40	; 0x28
 8006296:	af00      	add	r7, sp, #0
 8006298:	60f8      	str	r0, [r7, #12]
 800629a:	60b9      	str	r1, [r7, #8]
 800629c:	4613      	mov	r3, r2
 800629e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062a6:	2b20      	cmp	r3, #32
 80062a8:	d132      	bne.n	8006310 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <HAL_UART_Receive_IT+0x24>
 80062b0:	88fb      	ldrh	r3, [r7, #6]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e02b      	b.n	8006312 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d018      	beq.n	8006300 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	e853 3f00 	ldrex	r3, [r3]
 80062da:	613b      	str	r3, [r7, #16]
   return(result);
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062e2:	627b      	str	r3, [r7, #36]	; 0x24
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	461a      	mov	r2, r3
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	623b      	str	r3, [r7, #32]
 80062ee:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f0:	69f9      	ldr	r1, [r7, #28]
 80062f2:	6a3a      	ldr	r2, [r7, #32]
 80062f4:	e841 2300 	strex	r3, r2, [r1]
 80062f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1e6      	bne.n	80062ce <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006300:	88fb      	ldrh	r3, [r7, #6]
 8006302:	461a      	mov	r2, r3
 8006304:	68b9      	ldr	r1, [r7, #8]
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 ff34 	bl	8007174 <UART_Start_Receive_IT>
 800630c:	4603      	mov	r3, r0
 800630e:	e000      	b.n	8006312 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006310:	2302      	movs	r3, #2
  }
}
 8006312:	4618      	mov	r0, r3
 8006314:	3728      	adds	r7, #40	; 0x28
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b0ba      	sub	sp, #232	; 0xe8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006342:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006346:	f640 030f 	movw	r3, #2063	; 0x80f
 800634a:	4013      	ands	r3, r2
 800634c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006350:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006354:	2b00      	cmp	r3, #0
 8006356:	d115      	bne.n	8006384 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800635c:	f003 0320 	and.w	r3, r3, #32
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00f      	beq.n	8006384 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006368:	f003 0320 	and.w	r3, r3, #32
 800636c:	2b00      	cmp	r3, #0
 800636e:	d009      	beq.n	8006384 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 82ac 	beq.w	80068d2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	4798      	blx	r3
      }
      return;
 8006382:	e2a6      	b.n	80068d2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006384:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 8117 	beq.w	80065bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800638e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b00      	cmp	r3, #0
 8006398:	d106      	bne.n	80063a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800639a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800639e:	4b85      	ldr	r3, [pc, #532]	; (80065b4 <HAL_UART_IRQHandler+0x298>)
 80063a0:	4013      	ands	r3, r2
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f000 810a 	beq.w	80065bc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d011      	beq.n	80063d8 <HAL_UART_IRQHandler+0xbc>
 80063b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00b      	beq.n	80063d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2201      	movs	r2, #1
 80063c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063ce:	f043 0201 	orr.w	r2, r3, #1
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d011      	beq.n	8006408 <HAL_UART_IRQHandler+0xec>
 80063e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00b      	beq.n	8006408 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2202      	movs	r2, #2
 80063f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063fe:	f043 0204 	orr.w	r2, r3, #4
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800640c:	f003 0304 	and.w	r3, r3, #4
 8006410:	2b00      	cmp	r3, #0
 8006412:	d011      	beq.n	8006438 <HAL_UART_IRQHandler+0x11c>
 8006414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00b      	beq.n	8006438 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2204      	movs	r2, #4
 8006426:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800642e:	f043 0202 	orr.w	r2, r3, #2
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800643c:	f003 0308 	and.w	r3, r3, #8
 8006440:	2b00      	cmp	r3, #0
 8006442:	d017      	beq.n	8006474 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006448:	f003 0320 	and.w	r3, r3, #32
 800644c:	2b00      	cmp	r3, #0
 800644e:	d105      	bne.n	800645c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006454:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00b      	beq.n	8006474 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2208      	movs	r2, #8
 8006462:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800646a:	f043 0208 	orr.w	r2, r3, #8
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800647c:	2b00      	cmp	r3, #0
 800647e:	d012      	beq.n	80064a6 <HAL_UART_IRQHandler+0x18a>
 8006480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006484:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00c      	beq.n	80064a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006494:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800649c:	f043 0220 	orr.w	r2, r3, #32
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 8212 	beq.w	80068d6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80064b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b6:	f003 0320 	and.w	r3, r3, #32
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00d      	beq.n	80064da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064c2:	f003 0320 	and.w	r3, r3, #32
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d007      	beq.n	80064da <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ee:	2b40      	cmp	r3, #64	; 0x40
 80064f0:	d005      	beq.n	80064fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80064f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d04f      	beq.n	800659e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fefe 	bl	8007300 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650e:	2b40      	cmp	r3, #64	; 0x40
 8006510:	d141      	bne.n	8006596 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	3308      	adds	r3, #8
 8006518:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006520:	e853 3f00 	ldrex	r3, [r3]
 8006524:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006528:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800652c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006530:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	3308      	adds	r3, #8
 800653a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800653e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006542:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006546:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800654a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800654e:	e841 2300 	strex	r3, r2, [r1]
 8006552:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006556:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1d9      	bne.n	8006512 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006562:	2b00      	cmp	r3, #0
 8006564:	d013      	beq.n	800658e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800656a:	4a13      	ldr	r2, [pc, #76]	; (80065b8 <HAL_UART_IRQHandler+0x29c>)
 800656c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006572:	4618      	mov	r0, r3
 8006574:	f7fc f93b 	bl	80027ee <HAL_DMA_Abort_IT>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d017      	beq.n	80065ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006588:	4610      	mov	r0, r2
 800658a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800658c:	e00f      	b.n	80065ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f9b6 	bl	8006900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006594:	e00b      	b.n	80065ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f9b2 	bl	8006900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800659c:	e007      	b.n	80065ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f9ae 	bl	8006900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80065ac:	e193      	b.n	80068d6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ae:	bf00      	nop
    return;
 80065b0:	e191      	b.n	80068d6 <HAL_UART_IRQHandler+0x5ba>
 80065b2:	bf00      	nop
 80065b4:	04000120 	.word	0x04000120
 80065b8:	080073c9 	.word	0x080073c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	f040 814c 	bne.w	800685e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80065c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ca:	f003 0310 	and.w	r3, r3, #16
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 8145 	beq.w	800685e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80065d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065d8:	f003 0310 	and.w	r3, r3, #16
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f000 813e 	beq.w	800685e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2210      	movs	r2, #16
 80065e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f4:	2b40      	cmp	r3, #64	; 0x40
 80065f6:	f040 80b6 	bne.w	8006766 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006606:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800660a:	2b00      	cmp	r3, #0
 800660c:	f000 8165 	beq.w	80068da <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006616:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800661a:	429a      	cmp	r2, r3
 800661c:	f080 815d 	bcs.w	80068da <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006626:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006634:	f000 8086 	beq.w	8006744 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006640:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006644:	e853 3f00 	ldrex	r3, [r3]
 8006648:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800664c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006654:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	461a      	mov	r2, r3
 800665e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006662:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006666:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800666e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006672:	e841 2300 	strex	r3, r2, [r1]
 8006676:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800667a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1da      	bne.n	8006638 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3308      	adds	r3, #8
 8006688:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800668c:	e853 3f00 	ldrex	r3, [r3]
 8006690:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006692:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006694:	f023 0301 	bic.w	r3, r3, #1
 8006698:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3308      	adds	r3, #8
 80066a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80066a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80066aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80066ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80066b2:	e841 2300 	strex	r3, r2, [r1]
 80066b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80066b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1e1      	bne.n	8006682 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3308      	adds	r3, #8
 80066c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066c8:	e853 3f00 	ldrex	r3, [r3]
 80066cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80066ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3308      	adds	r3, #8
 80066de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80066e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80066e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80066e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80066ea:	e841 2300 	strex	r3, r2, [r1]
 80066ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80066f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1e3      	bne.n	80066be <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2220      	movs	r2, #32
 80066fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800670c:	e853 3f00 	ldrex	r3, [r3]
 8006710:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006714:	f023 0310 	bic.w	r3, r3, #16
 8006718:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	461a      	mov	r2, r3
 8006722:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006726:	65bb      	str	r3, [r7, #88]	; 0x58
 8006728:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800672c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800672e:	e841 2300 	strex	r3, r2, [r1]
 8006732:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1e4      	bne.n	8006704 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800673e:	4618      	mov	r0, r3
 8006740:	f7fb ffe5 	bl	800270e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2202      	movs	r2, #2
 8006748:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006756:	b29b      	uxth	r3, r3
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	b29b      	uxth	r3, r3
 800675c:	4619      	mov	r1, r3
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f8d8 	bl	8006914 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006764:	e0b9      	b.n	80068da <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006772:	b29b      	uxth	r3, r3
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006780:	b29b      	uxth	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	f000 80ab 	beq.w	80068de <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006788:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800678c:	2b00      	cmp	r3, #0
 800678e:	f000 80a6 	beq.w	80068de <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679a:	e853 3f00 	ldrex	r3, [r3]
 800679e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	461a      	mov	r2, r3
 80067b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067b4:	647b      	str	r3, [r7, #68]	; 0x44
 80067b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067bc:	e841 2300 	strex	r3, r2, [r1]
 80067c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1e4      	bne.n	8006792 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	3308      	adds	r3, #8
 80067ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	e853 3f00 	ldrex	r3, [r3]
 80067d6:	623b      	str	r3, [r7, #32]
   return(result);
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	f023 0301 	bic.w	r3, r3, #1
 80067de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	3308      	adds	r3, #8
 80067e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80067ec:	633a      	str	r2, [r7, #48]	; 0x30
 80067ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067f4:	e841 2300 	strex	r3, r2, [r1]
 80067f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1e3      	bne.n	80067c8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2220      	movs	r2, #32
 8006804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	e853 3f00 	ldrex	r3, [r3]
 8006820:	60fb      	str	r3, [r7, #12]
   return(result);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f023 0310 	bic.w	r3, r3, #16
 8006828:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	461a      	mov	r2, r3
 8006832:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006836:	61fb      	str	r3, [r7, #28]
 8006838:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683a:	69b9      	ldr	r1, [r7, #24]
 800683c:	69fa      	ldr	r2, [r7, #28]
 800683e:	e841 2300 	strex	r3, r2, [r1]
 8006842:	617b      	str	r3, [r7, #20]
   return(result);
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1e4      	bne.n	8006814 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2202      	movs	r2, #2
 800684e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006850:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006854:	4619      	mov	r1, r3
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f85c 	bl	8006914 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800685c:	e03f      	b.n	80068de <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800685e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00e      	beq.n	8006888 <HAL_UART_IRQHandler+0x56c>
 800686a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800686e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d008      	beq.n	8006888 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800687e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f853 	bl	800692c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006886:	e02d      	b.n	80068e4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800688c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00e      	beq.n	80068b2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800689c:	2b00      	cmp	r3, #0
 800689e:	d008      	beq.n	80068b2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d01c      	beq.n	80068e2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	4798      	blx	r3
    }
    return;
 80068b0:	e017      	b.n	80068e2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d012      	beq.n	80068e4 <HAL_UART_IRQHandler+0x5c8>
 80068be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00c      	beq.n	80068e4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fd92 	bl	80073f4 <UART_EndTransmit_IT>
    return;
 80068d0:	e008      	b.n	80068e4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80068d2:	bf00      	nop
 80068d4:	e006      	b.n	80068e4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80068d6:	bf00      	nop
 80068d8:	e004      	b.n	80068e4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80068da:	bf00      	nop
 80068dc:	e002      	b.n	80068e4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80068de:	bf00      	nop
 80068e0:	e000      	b.n	80068e4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80068e2:	bf00      	nop
  }

}
 80068e4:	37e8      	adds	r7, #232	; 0xe8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop

080068ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	460b      	mov	r3, r1
 800691e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b088      	sub	sp, #32
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006948:	2300      	movs	r3, #0
 800694a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	431a      	orrs	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	431a      	orrs	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	69db      	ldr	r3, [r3, #28]
 8006960:	4313      	orrs	r3, r2
 8006962:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	4ba6      	ldr	r3, [pc, #664]	; (8006c04 <UART_SetConfig+0x2c4>)
 800696c:	4013      	ands	r3, r2
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	6812      	ldr	r2, [r2, #0]
 8006972:	6979      	ldr	r1, [r7, #20]
 8006974:	430b      	orrs	r3, r1
 8006976:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	68da      	ldr	r2, [r3, #12]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	430a      	orrs	r2, r1
 800698c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a1b      	ldr	r3, [r3, #32]
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	4313      	orrs	r3, r2
 800699c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	697a      	ldr	r2, [r7, #20]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a94      	ldr	r2, [pc, #592]	; (8006c08 <UART_SetConfig+0x2c8>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d120      	bne.n	80069fe <UART_SetConfig+0xbe>
 80069bc:	4b93      	ldr	r3, [pc, #588]	; (8006c0c <UART_SetConfig+0x2cc>)
 80069be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069c2:	f003 0303 	and.w	r3, r3, #3
 80069c6:	2b03      	cmp	r3, #3
 80069c8:	d816      	bhi.n	80069f8 <UART_SetConfig+0xb8>
 80069ca:	a201      	add	r2, pc, #4	; (adr r2, 80069d0 <UART_SetConfig+0x90>)
 80069cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d0:	080069e1 	.word	0x080069e1
 80069d4:	080069ed 	.word	0x080069ed
 80069d8:	080069e7 	.word	0x080069e7
 80069dc:	080069f3 	.word	0x080069f3
 80069e0:	2301      	movs	r3, #1
 80069e2:	77fb      	strb	r3, [r7, #31]
 80069e4:	e150      	b.n	8006c88 <UART_SetConfig+0x348>
 80069e6:	2302      	movs	r3, #2
 80069e8:	77fb      	strb	r3, [r7, #31]
 80069ea:	e14d      	b.n	8006c88 <UART_SetConfig+0x348>
 80069ec:	2304      	movs	r3, #4
 80069ee:	77fb      	strb	r3, [r7, #31]
 80069f0:	e14a      	b.n	8006c88 <UART_SetConfig+0x348>
 80069f2:	2308      	movs	r3, #8
 80069f4:	77fb      	strb	r3, [r7, #31]
 80069f6:	e147      	b.n	8006c88 <UART_SetConfig+0x348>
 80069f8:	2310      	movs	r3, #16
 80069fa:	77fb      	strb	r3, [r7, #31]
 80069fc:	e144      	b.n	8006c88 <UART_SetConfig+0x348>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a83      	ldr	r2, [pc, #524]	; (8006c10 <UART_SetConfig+0x2d0>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d132      	bne.n	8006a6e <UART_SetConfig+0x12e>
 8006a08:	4b80      	ldr	r3, [pc, #512]	; (8006c0c <UART_SetConfig+0x2cc>)
 8006a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a0e:	f003 030c 	and.w	r3, r3, #12
 8006a12:	2b0c      	cmp	r3, #12
 8006a14:	d828      	bhi.n	8006a68 <UART_SetConfig+0x128>
 8006a16:	a201      	add	r2, pc, #4	; (adr r2, 8006a1c <UART_SetConfig+0xdc>)
 8006a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1c:	08006a51 	.word	0x08006a51
 8006a20:	08006a69 	.word	0x08006a69
 8006a24:	08006a69 	.word	0x08006a69
 8006a28:	08006a69 	.word	0x08006a69
 8006a2c:	08006a5d 	.word	0x08006a5d
 8006a30:	08006a69 	.word	0x08006a69
 8006a34:	08006a69 	.word	0x08006a69
 8006a38:	08006a69 	.word	0x08006a69
 8006a3c:	08006a57 	.word	0x08006a57
 8006a40:	08006a69 	.word	0x08006a69
 8006a44:	08006a69 	.word	0x08006a69
 8006a48:	08006a69 	.word	0x08006a69
 8006a4c:	08006a63 	.word	0x08006a63
 8006a50:	2300      	movs	r3, #0
 8006a52:	77fb      	strb	r3, [r7, #31]
 8006a54:	e118      	b.n	8006c88 <UART_SetConfig+0x348>
 8006a56:	2302      	movs	r3, #2
 8006a58:	77fb      	strb	r3, [r7, #31]
 8006a5a:	e115      	b.n	8006c88 <UART_SetConfig+0x348>
 8006a5c:	2304      	movs	r3, #4
 8006a5e:	77fb      	strb	r3, [r7, #31]
 8006a60:	e112      	b.n	8006c88 <UART_SetConfig+0x348>
 8006a62:	2308      	movs	r3, #8
 8006a64:	77fb      	strb	r3, [r7, #31]
 8006a66:	e10f      	b.n	8006c88 <UART_SetConfig+0x348>
 8006a68:	2310      	movs	r3, #16
 8006a6a:	77fb      	strb	r3, [r7, #31]
 8006a6c:	e10c      	b.n	8006c88 <UART_SetConfig+0x348>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a68      	ldr	r2, [pc, #416]	; (8006c14 <UART_SetConfig+0x2d4>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d120      	bne.n	8006aba <UART_SetConfig+0x17a>
 8006a78:	4b64      	ldr	r3, [pc, #400]	; (8006c0c <UART_SetConfig+0x2cc>)
 8006a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a82:	2b30      	cmp	r3, #48	; 0x30
 8006a84:	d013      	beq.n	8006aae <UART_SetConfig+0x16e>
 8006a86:	2b30      	cmp	r3, #48	; 0x30
 8006a88:	d814      	bhi.n	8006ab4 <UART_SetConfig+0x174>
 8006a8a:	2b20      	cmp	r3, #32
 8006a8c:	d009      	beq.n	8006aa2 <UART_SetConfig+0x162>
 8006a8e:	2b20      	cmp	r3, #32
 8006a90:	d810      	bhi.n	8006ab4 <UART_SetConfig+0x174>
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d002      	beq.n	8006a9c <UART_SetConfig+0x15c>
 8006a96:	2b10      	cmp	r3, #16
 8006a98:	d006      	beq.n	8006aa8 <UART_SetConfig+0x168>
 8006a9a:	e00b      	b.n	8006ab4 <UART_SetConfig+0x174>
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	77fb      	strb	r3, [r7, #31]
 8006aa0:	e0f2      	b.n	8006c88 <UART_SetConfig+0x348>
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	77fb      	strb	r3, [r7, #31]
 8006aa6:	e0ef      	b.n	8006c88 <UART_SetConfig+0x348>
 8006aa8:	2304      	movs	r3, #4
 8006aaa:	77fb      	strb	r3, [r7, #31]
 8006aac:	e0ec      	b.n	8006c88 <UART_SetConfig+0x348>
 8006aae:	2308      	movs	r3, #8
 8006ab0:	77fb      	strb	r3, [r7, #31]
 8006ab2:	e0e9      	b.n	8006c88 <UART_SetConfig+0x348>
 8006ab4:	2310      	movs	r3, #16
 8006ab6:	77fb      	strb	r3, [r7, #31]
 8006ab8:	e0e6      	b.n	8006c88 <UART_SetConfig+0x348>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a56      	ldr	r2, [pc, #344]	; (8006c18 <UART_SetConfig+0x2d8>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d120      	bne.n	8006b06 <UART_SetConfig+0x1c6>
 8006ac4:	4b51      	ldr	r3, [pc, #324]	; (8006c0c <UART_SetConfig+0x2cc>)
 8006ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ace:	2bc0      	cmp	r3, #192	; 0xc0
 8006ad0:	d013      	beq.n	8006afa <UART_SetConfig+0x1ba>
 8006ad2:	2bc0      	cmp	r3, #192	; 0xc0
 8006ad4:	d814      	bhi.n	8006b00 <UART_SetConfig+0x1c0>
 8006ad6:	2b80      	cmp	r3, #128	; 0x80
 8006ad8:	d009      	beq.n	8006aee <UART_SetConfig+0x1ae>
 8006ada:	2b80      	cmp	r3, #128	; 0x80
 8006adc:	d810      	bhi.n	8006b00 <UART_SetConfig+0x1c0>
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d002      	beq.n	8006ae8 <UART_SetConfig+0x1a8>
 8006ae2:	2b40      	cmp	r3, #64	; 0x40
 8006ae4:	d006      	beq.n	8006af4 <UART_SetConfig+0x1b4>
 8006ae6:	e00b      	b.n	8006b00 <UART_SetConfig+0x1c0>
 8006ae8:	2300      	movs	r3, #0
 8006aea:	77fb      	strb	r3, [r7, #31]
 8006aec:	e0cc      	b.n	8006c88 <UART_SetConfig+0x348>
 8006aee:	2302      	movs	r3, #2
 8006af0:	77fb      	strb	r3, [r7, #31]
 8006af2:	e0c9      	b.n	8006c88 <UART_SetConfig+0x348>
 8006af4:	2304      	movs	r3, #4
 8006af6:	77fb      	strb	r3, [r7, #31]
 8006af8:	e0c6      	b.n	8006c88 <UART_SetConfig+0x348>
 8006afa:	2308      	movs	r3, #8
 8006afc:	77fb      	strb	r3, [r7, #31]
 8006afe:	e0c3      	b.n	8006c88 <UART_SetConfig+0x348>
 8006b00:	2310      	movs	r3, #16
 8006b02:	77fb      	strb	r3, [r7, #31]
 8006b04:	e0c0      	b.n	8006c88 <UART_SetConfig+0x348>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a44      	ldr	r2, [pc, #272]	; (8006c1c <UART_SetConfig+0x2dc>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d125      	bne.n	8006b5c <UART_SetConfig+0x21c>
 8006b10:	4b3e      	ldr	r3, [pc, #248]	; (8006c0c <UART_SetConfig+0x2cc>)
 8006b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b1e:	d017      	beq.n	8006b50 <UART_SetConfig+0x210>
 8006b20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b24:	d817      	bhi.n	8006b56 <UART_SetConfig+0x216>
 8006b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b2a:	d00b      	beq.n	8006b44 <UART_SetConfig+0x204>
 8006b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b30:	d811      	bhi.n	8006b56 <UART_SetConfig+0x216>
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <UART_SetConfig+0x1fe>
 8006b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b3a:	d006      	beq.n	8006b4a <UART_SetConfig+0x20a>
 8006b3c:	e00b      	b.n	8006b56 <UART_SetConfig+0x216>
 8006b3e:	2300      	movs	r3, #0
 8006b40:	77fb      	strb	r3, [r7, #31]
 8006b42:	e0a1      	b.n	8006c88 <UART_SetConfig+0x348>
 8006b44:	2302      	movs	r3, #2
 8006b46:	77fb      	strb	r3, [r7, #31]
 8006b48:	e09e      	b.n	8006c88 <UART_SetConfig+0x348>
 8006b4a:	2304      	movs	r3, #4
 8006b4c:	77fb      	strb	r3, [r7, #31]
 8006b4e:	e09b      	b.n	8006c88 <UART_SetConfig+0x348>
 8006b50:	2308      	movs	r3, #8
 8006b52:	77fb      	strb	r3, [r7, #31]
 8006b54:	e098      	b.n	8006c88 <UART_SetConfig+0x348>
 8006b56:	2310      	movs	r3, #16
 8006b58:	77fb      	strb	r3, [r7, #31]
 8006b5a:	e095      	b.n	8006c88 <UART_SetConfig+0x348>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a2f      	ldr	r2, [pc, #188]	; (8006c20 <UART_SetConfig+0x2e0>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d125      	bne.n	8006bb2 <UART_SetConfig+0x272>
 8006b66:	4b29      	ldr	r3, [pc, #164]	; (8006c0c <UART_SetConfig+0x2cc>)
 8006b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b74:	d017      	beq.n	8006ba6 <UART_SetConfig+0x266>
 8006b76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b7a:	d817      	bhi.n	8006bac <UART_SetConfig+0x26c>
 8006b7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b80:	d00b      	beq.n	8006b9a <UART_SetConfig+0x25a>
 8006b82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b86:	d811      	bhi.n	8006bac <UART_SetConfig+0x26c>
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d003      	beq.n	8006b94 <UART_SetConfig+0x254>
 8006b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b90:	d006      	beq.n	8006ba0 <UART_SetConfig+0x260>
 8006b92:	e00b      	b.n	8006bac <UART_SetConfig+0x26c>
 8006b94:	2301      	movs	r3, #1
 8006b96:	77fb      	strb	r3, [r7, #31]
 8006b98:	e076      	b.n	8006c88 <UART_SetConfig+0x348>
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	77fb      	strb	r3, [r7, #31]
 8006b9e:	e073      	b.n	8006c88 <UART_SetConfig+0x348>
 8006ba0:	2304      	movs	r3, #4
 8006ba2:	77fb      	strb	r3, [r7, #31]
 8006ba4:	e070      	b.n	8006c88 <UART_SetConfig+0x348>
 8006ba6:	2308      	movs	r3, #8
 8006ba8:	77fb      	strb	r3, [r7, #31]
 8006baa:	e06d      	b.n	8006c88 <UART_SetConfig+0x348>
 8006bac:	2310      	movs	r3, #16
 8006bae:	77fb      	strb	r3, [r7, #31]
 8006bb0:	e06a      	b.n	8006c88 <UART_SetConfig+0x348>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a1b      	ldr	r2, [pc, #108]	; (8006c24 <UART_SetConfig+0x2e4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d138      	bne.n	8006c2e <UART_SetConfig+0x2ee>
 8006bbc:	4b13      	ldr	r3, [pc, #76]	; (8006c0c <UART_SetConfig+0x2cc>)
 8006bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006bc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bca:	d017      	beq.n	8006bfc <UART_SetConfig+0x2bc>
 8006bcc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bd0:	d82a      	bhi.n	8006c28 <UART_SetConfig+0x2e8>
 8006bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bd6:	d00b      	beq.n	8006bf0 <UART_SetConfig+0x2b0>
 8006bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bdc:	d824      	bhi.n	8006c28 <UART_SetConfig+0x2e8>
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d003      	beq.n	8006bea <UART_SetConfig+0x2aa>
 8006be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006be6:	d006      	beq.n	8006bf6 <UART_SetConfig+0x2b6>
 8006be8:	e01e      	b.n	8006c28 <UART_SetConfig+0x2e8>
 8006bea:	2300      	movs	r3, #0
 8006bec:	77fb      	strb	r3, [r7, #31]
 8006bee:	e04b      	b.n	8006c88 <UART_SetConfig+0x348>
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	77fb      	strb	r3, [r7, #31]
 8006bf4:	e048      	b.n	8006c88 <UART_SetConfig+0x348>
 8006bf6:	2304      	movs	r3, #4
 8006bf8:	77fb      	strb	r3, [r7, #31]
 8006bfa:	e045      	b.n	8006c88 <UART_SetConfig+0x348>
 8006bfc:	2308      	movs	r3, #8
 8006bfe:	77fb      	strb	r3, [r7, #31]
 8006c00:	e042      	b.n	8006c88 <UART_SetConfig+0x348>
 8006c02:	bf00      	nop
 8006c04:	efff69f3 	.word	0xefff69f3
 8006c08:	40011000 	.word	0x40011000
 8006c0c:	40023800 	.word	0x40023800
 8006c10:	40004400 	.word	0x40004400
 8006c14:	40004800 	.word	0x40004800
 8006c18:	40004c00 	.word	0x40004c00
 8006c1c:	40005000 	.word	0x40005000
 8006c20:	40011400 	.word	0x40011400
 8006c24:	40007800 	.word	0x40007800
 8006c28:	2310      	movs	r3, #16
 8006c2a:	77fb      	strb	r3, [r7, #31]
 8006c2c:	e02c      	b.n	8006c88 <UART_SetConfig+0x348>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a72      	ldr	r2, [pc, #456]	; (8006dfc <UART_SetConfig+0x4bc>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d125      	bne.n	8006c84 <UART_SetConfig+0x344>
 8006c38:	4b71      	ldr	r3, [pc, #452]	; (8006e00 <UART_SetConfig+0x4c0>)
 8006c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c3e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006c42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c46:	d017      	beq.n	8006c78 <UART_SetConfig+0x338>
 8006c48:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c4c:	d817      	bhi.n	8006c7e <UART_SetConfig+0x33e>
 8006c4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c52:	d00b      	beq.n	8006c6c <UART_SetConfig+0x32c>
 8006c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c58:	d811      	bhi.n	8006c7e <UART_SetConfig+0x33e>
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <UART_SetConfig+0x326>
 8006c5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c62:	d006      	beq.n	8006c72 <UART_SetConfig+0x332>
 8006c64:	e00b      	b.n	8006c7e <UART_SetConfig+0x33e>
 8006c66:	2300      	movs	r3, #0
 8006c68:	77fb      	strb	r3, [r7, #31]
 8006c6a:	e00d      	b.n	8006c88 <UART_SetConfig+0x348>
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	77fb      	strb	r3, [r7, #31]
 8006c70:	e00a      	b.n	8006c88 <UART_SetConfig+0x348>
 8006c72:	2304      	movs	r3, #4
 8006c74:	77fb      	strb	r3, [r7, #31]
 8006c76:	e007      	b.n	8006c88 <UART_SetConfig+0x348>
 8006c78:	2308      	movs	r3, #8
 8006c7a:	77fb      	strb	r3, [r7, #31]
 8006c7c:	e004      	b.n	8006c88 <UART_SetConfig+0x348>
 8006c7e:	2310      	movs	r3, #16
 8006c80:	77fb      	strb	r3, [r7, #31]
 8006c82:	e001      	b.n	8006c88 <UART_SetConfig+0x348>
 8006c84:	2310      	movs	r3, #16
 8006c86:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	69db      	ldr	r3, [r3, #28]
 8006c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c90:	d15b      	bne.n	8006d4a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006c92:	7ffb      	ldrb	r3, [r7, #31]
 8006c94:	2b08      	cmp	r3, #8
 8006c96:	d828      	bhi.n	8006cea <UART_SetConfig+0x3aa>
 8006c98:	a201      	add	r2, pc, #4	; (adr r2, 8006ca0 <UART_SetConfig+0x360>)
 8006c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9e:	bf00      	nop
 8006ca0:	08006cc5 	.word	0x08006cc5
 8006ca4:	08006ccd 	.word	0x08006ccd
 8006ca8:	08006cd5 	.word	0x08006cd5
 8006cac:	08006ceb 	.word	0x08006ceb
 8006cb0:	08006cdb 	.word	0x08006cdb
 8006cb4:	08006ceb 	.word	0x08006ceb
 8006cb8:	08006ceb 	.word	0x08006ceb
 8006cbc:	08006ceb 	.word	0x08006ceb
 8006cc0:	08006ce3 	.word	0x08006ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cc4:	f7fd fb8a 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 8006cc8:	61b8      	str	r0, [r7, #24]
        break;
 8006cca:	e013      	b.n	8006cf4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ccc:	f7fd fb9a 	bl	8004404 <HAL_RCC_GetPCLK2Freq>
 8006cd0:	61b8      	str	r0, [r7, #24]
        break;
 8006cd2:	e00f      	b.n	8006cf4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cd4:	4b4b      	ldr	r3, [pc, #300]	; (8006e04 <UART_SetConfig+0x4c4>)
 8006cd6:	61bb      	str	r3, [r7, #24]
        break;
 8006cd8:	e00c      	b.n	8006cf4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cda:	f7fd fa6d 	bl	80041b8 <HAL_RCC_GetSysClockFreq>
 8006cde:	61b8      	str	r0, [r7, #24]
        break;
 8006ce0:	e008      	b.n	8006cf4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ce6:	61bb      	str	r3, [r7, #24]
        break;
 8006ce8:	e004      	b.n	8006cf4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006cea:	2300      	movs	r3, #0
 8006cec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	77bb      	strb	r3, [r7, #30]
        break;
 8006cf2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d074      	beq.n	8006de4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	005a      	lsls	r2, r3, #1
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	085b      	lsrs	r3, r3, #1
 8006d04:	441a      	add	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	2b0f      	cmp	r3, #15
 8006d14:	d916      	bls.n	8006d44 <UART_SetConfig+0x404>
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d1c:	d212      	bcs.n	8006d44 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	f023 030f 	bic.w	r3, r3, #15
 8006d26:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	085b      	lsrs	r3, r3, #1
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	89fb      	ldrh	r3, [r7, #14]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	89fa      	ldrh	r2, [r7, #14]
 8006d40:	60da      	str	r2, [r3, #12]
 8006d42:	e04f      	b.n	8006de4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	77bb      	strb	r3, [r7, #30]
 8006d48:	e04c      	b.n	8006de4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d4a:	7ffb      	ldrb	r3, [r7, #31]
 8006d4c:	2b08      	cmp	r3, #8
 8006d4e:	d828      	bhi.n	8006da2 <UART_SetConfig+0x462>
 8006d50:	a201      	add	r2, pc, #4	; (adr r2, 8006d58 <UART_SetConfig+0x418>)
 8006d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d56:	bf00      	nop
 8006d58:	08006d7d 	.word	0x08006d7d
 8006d5c:	08006d85 	.word	0x08006d85
 8006d60:	08006d8d 	.word	0x08006d8d
 8006d64:	08006da3 	.word	0x08006da3
 8006d68:	08006d93 	.word	0x08006d93
 8006d6c:	08006da3 	.word	0x08006da3
 8006d70:	08006da3 	.word	0x08006da3
 8006d74:	08006da3 	.word	0x08006da3
 8006d78:	08006d9b 	.word	0x08006d9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d7c:	f7fd fb2e 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 8006d80:	61b8      	str	r0, [r7, #24]
        break;
 8006d82:	e013      	b.n	8006dac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d84:	f7fd fb3e 	bl	8004404 <HAL_RCC_GetPCLK2Freq>
 8006d88:	61b8      	str	r0, [r7, #24]
        break;
 8006d8a:	e00f      	b.n	8006dac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d8c:	4b1d      	ldr	r3, [pc, #116]	; (8006e04 <UART_SetConfig+0x4c4>)
 8006d8e:	61bb      	str	r3, [r7, #24]
        break;
 8006d90:	e00c      	b.n	8006dac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d92:	f7fd fa11 	bl	80041b8 <HAL_RCC_GetSysClockFreq>
 8006d96:	61b8      	str	r0, [r7, #24]
        break;
 8006d98:	e008      	b.n	8006dac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d9e:	61bb      	str	r3, [r7, #24]
        break;
 8006da0:	e004      	b.n	8006dac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006da2:	2300      	movs	r3, #0
 8006da4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	77bb      	strb	r3, [r7, #30]
        break;
 8006daa:	bf00      	nop
    }

    if (pclk != 0U)
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d018      	beq.n	8006de4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	085a      	lsrs	r2, r3, #1
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	441a      	add	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	2b0f      	cmp	r3, #15
 8006dca:	d909      	bls.n	8006de0 <UART_SetConfig+0x4a0>
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dd2:	d205      	bcs.n	8006de0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	60da      	str	r2, [r3, #12]
 8006dde:	e001      	b.n	8006de4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006df0:	7fbb      	ldrb	r3, [r7, #30]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3720      	adds	r7, #32
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	40007c00 	.word	0x40007c00
 8006e00:	40023800 	.word	0x40023800
 8006e04:	00f42400 	.word	0x00f42400

08006e08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00a      	beq.n	8006e32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e36:	f003 0302 	and.w	r3, r3, #2
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00a      	beq.n	8006e54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	430a      	orrs	r2, r1
 8006e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e58:	f003 0304 	and.w	r3, r3, #4
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00a      	beq.n	8006e76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7a:	f003 0308 	and.w	r3, r3, #8
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00a      	beq.n	8006e98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	430a      	orrs	r2, r1
 8006e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9c:	f003 0310 	and.w	r3, r3, #16
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00a      	beq.n	8006eba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	430a      	orrs	r2, r1
 8006eb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebe:	f003 0320 	and.w	r3, r3, #32
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00a      	beq.n	8006edc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	430a      	orrs	r2, r1
 8006eda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d01a      	beq.n	8006f1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	430a      	orrs	r2, r1
 8006efc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f06:	d10a      	bne.n	8006f1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00a      	beq.n	8006f40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	605a      	str	r2, [r3, #4]
  }
}
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b086      	sub	sp, #24
 8006f50:	af02      	add	r7, sp, #8
 8006f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f5c:	f7fb fa96 	bl	800248c <HAL_GetTick>
 8006f60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0308 	and.w	r3, r3, #8
 8006f6c:	2b08      	cmp	r3, #8
 8006f6e:	d10e      	bne.n	8006f8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f831 	bl	8006fe6 <UART_WaitOnFlagUntilTimeout>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e027      	b.n	8006fde <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0304 	and.w	r3, r3, #4
 8006f98:	2b04      	cmp	r3, #4
 8006f9a:	d10e      	bne.n	8006fba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f81b 	bl	8006fe6 <UART_WaitOnFlagUntilTimeout>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d001      	beq.n	8006fba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e011      	b.n	8006fde <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2220      	movs	r2, #32
 8006fc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b09c      	sub	sp, #112	; 0x70
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	60f8      	str	r0, [r7, #12]
 8006fee:	60b9      	str	r1, [r7, #8]
 8006ff0:	603b      	str	r3, [r7, #0]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ff6:	e0a7      	b.n	8007148 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffe:	f000 80a3 	beq.w	8007148 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007002:	f7fb fa43 	bl	800248c <HAL_GetTick>
 8007006:	4602      	mov	r2, r0
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800700e:	429a      	cmp	r2, r3
 8007010:	d302      	bcc.n	8007018 <UART_WaitOnFlagUntilTimeout+0x32>
 8007012:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007014:	2b00      	cmp	r3, #0
 8007016:	d13f      	bne.n	8007098 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007020:	e853 3f00 	ldrex	r3, [r3]
 8007024:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007028:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800702c:	667b      	str	r3, [r7, #100]	; 0x64
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007036:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007038:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800703c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800703e:	e841 2300 	strex	r3, r2, [r1]
 8007042:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1e6      	bne.n	8007018 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3308      	adds	r3, #8
 8007050:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007054:	e853 3f00 	ldrex	r3, [r3]
 8007058:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800705a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705c:	f023 0301 	bic.w	r3, r3, #1
 8007060:	663b      	str	r3, [r7, #96]	; 0x60
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	3308      	adds	r3, #8
 8007068:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800706a:	64ba      	str	r2, [r7, #72]	; 0x48
 800706c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007070:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007072:	e841 2300 	strex	r3, r2, [r1]
 8007076:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1e5      	bne.n	800704a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2220      	movs	r2, #32
 8007082:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2220      	movs	r2, #32
 8007088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e068      	b.n	800716a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0304 	and.w	r3, r3, #4
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d050      	beq.n	8007148 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	69db      	ldr	r3, [r3, #28]
 80070ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070b4:	d148      	bne.n	8007148 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070be:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c8:	e853 3f00 	ldrex	r3, [r3]
 80070cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	461a      	mov	r2, r3
 80070dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070de:	637b      	str	r3, [r7, #52]	; 0x34
 80070e0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070e6:	e841 2300 	strex	r3, r2, [r1]
 80070ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1e6      	bne.n	80070c0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	3308      	adds	r3, #8
 80070f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	e853 3f00 	ldrex	r3, [r3]
 8007100:	613b      	str	r3, [r7, #16]
   return(result);
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	f023 0301 	bic.w	r3, r3, #1
 8007108:	66bb      	str	r3, [r7, #104]	; 0x68
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	3308      	adds	r3, #8
 8007110:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007112:	623a      	str	r2, [r7, #32]
 8007114:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007116:	69f9      	ldr	r1, [r7, #28]
 8007118:	6a3a      	ldr	r2, [r7, #32]
 800711a:	e841 2300 	strex	r3, r2, [r1]
 800711e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1e5      	bne.n	80070f2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2220      	movs	r2, #32
 800712a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2220      	movs	r2, #32
 8007130:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2220      	movs	r2, #32
 8007138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e010      	b.n	800716a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	69da      	ldr	r2, [r3, #28]
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	4013      	ands	r3, r2
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	429a      	cmp	r2, r3
 8007156:	bf0c      	ite	eq
 8007158:	2301      	moveq	r3, #1
 800715a:	2300      	movne	r3, #0
 800715c:	b2db      	uxtb	r3, r3
 800715e:	461a      	mov	r2, r3
 8007160:	79fb      	ldrb	r3, [r7, #7]
 8007162:	429a      	cmp	r2, r3
 8007164:	f43f af48 	beq.w	8006ff8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3770      	adds	r7, #112	; 0x70
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
	...

08007174 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007174:	b480      	push	{r7}
 8007176:	b097      	sub	sp, #92	; 0x5c
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	4613      	mov	r3, r2
 8007180:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	88fa      	ldrh	r2, [r7, #6]
 800718c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	88fa      	ldrh	r2, [r7, #6]
 8007194:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071a6:	d10e      	bne.n	80071c6 <UART_Start_Receive_IT+0x52>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d105      	bne.n	80071bc <UART_Start_Receive_IT+0x48>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80071b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071ba:	e02d      	b.n	8007218 <UART_Start_Receive_IT+0xa4>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	22ff      	movs	r2, #255	; 0xff
 80071c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071c4:	e028      	b.n	8007218 <UART_Start_Receive_IT+0xa4>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10d      	bne.n	80071ea <UART_Start_Receive_IT+0x76>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d104      	bne.n	80071e0 <UART_Start_Receive_IT+0x6c>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	22ff      	movs	r2, #255	; 0xff
 80071da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071de:	e01b      	b.n	8007218 <UART_Start_Receive_IT+0xa4>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	227f      	movs	r2, #127	; 0x7f
 80071e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071e8:	e016      	b.n	8007218 <UART_Start_Receive_IT+0xa4>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071f2:	d10d      	bne.n	8007210 <UART_Start_Receive_IT+0x9c>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d104      	bne.n	8007206 <UART_Start_Receive_IT+0x92>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	227f      	movs	r2, #127	; 0x7f
 8007200:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007204:	e008      	b.n	8007218 <UART_Start_Receive_IT+0xa4>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	223f      	movs	r2, #63	; 0x3f
 800720a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800720e:	e003      	b.n	8007218 <UART_Start_Receive_IT+0xa4>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2200      	movs	r2, #0
 8007214:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2222      	movs	r2, #34	; 0x22
 8007224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	3308      	adds	r3, #8
 800722e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007232:	e853 3f00 	ldrex	r3, [r3]
 8007236:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723a:	f043 0301 	orr.w	r3, r3, #1
 800723e:	657b      	str	r3, [r7, #84]	; 0x54
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	3308      	adds	r3, #8
 8007246:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007248:	64ba      	str	r2, [r7, #72]	; 0x48
 800724a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800724e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007250:	e841 2300 	strex	r3, r2, [r1]
 8007254:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1e5      	bne.n	8007228 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007264:	d107      	bne.n	8007276 <UART_Start_Receive_IT+0x102>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d103      	bne.n	8007276 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	4a21      	ldr	r2, [pc, #132]	; (80072f8 <UART_Start_Receive_IT+0x184>)
 8007272:	669a      	str	r2, [r3, #104]	; 0x68
 8007274:	e002      	b.n	800727c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	4a20      	ldr	r2, [pc, #128]	; (80072fc <UART_Start_Receive_IT+0x188>)
 800727a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d019      	beq.n	80072b8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728c:	e853 3f00 	ldrex	r3, [r3]
 8007290:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007294:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007298:	64fb      	str	r3, [r7, #76]	; 0x4c
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	461a      	mov	r2, r3
 80072a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072a2:	637b      	str	r3, [r7, #52]	; 0x34
 80072a4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072aa:	e841 2300 	strex	r3, r2, [r1]
 80072ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1e6      	bne.n	8007284 <UART_Start_Receive_IT+0x110>
 80072b6:	e018      	b.n	80072ea <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	e853 3f00 	ldrex	r3, [r3]
 80072c4:	613b      	str	r3, [r7, #16]
   return(result);
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	f043 0320 	orr.w	r3, r3, #32
 80072cc:	653b      	str	r3, [r7, #80]	; 0x50
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	461a      	mov	r2, r3
 80072d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072d6:	623b      	str	r3, [r7, #32]
 80072d8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072da:	69f9      	ldr	r1, [r7, #28]
 80072dc:	6a3a      	ldr	r2, [r7, #32]
 80072de:	e841 2300 	strex	r3, r2, [r1]
 80072e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1e6      	bne.n	80072b8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	375c      	adds	r7, #92	; 0x5c
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	080075af 	.word	0x080075af
 80072fc:	08007449 	.word	0x08007449

08007300 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007300:	b480      	push	{r7}
 8007302:	b095      	sub	sp, #84	; 0x54
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007310:	e853 3f00 	ldrex	r3, [r3]
 8007314:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007318:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800731c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	461a      	mov	r2, r3
 8007324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007326:	643b      	str	r3, [r7, #64]	; 0x40
 8007328:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800732c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800732e:	e841 2300 	strex	r3, r2, [r1]
 8007332:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1e6      	bne.n	8007308 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3308      	adds	r3, #8
 8007340:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	e853 3f00 	ldrex	r3, [r3]
 8007348:	61fb      	str	r3, [r7, #28]
   return(result);
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	f023 0301 	bic.w	r3, r3, #1
 8007350:	64bb      	str	r3, [r7, #72]	; 0x48
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	3308      	adds	r3, #8
 8007358:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800735a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800735c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007362:	e841 2300 	strex	r3, r2, [r1]
 8007366:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1e5      	bne.n	800733a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007372:	2b01      	cmp	r3, #1
 8007374:	d118      	bne.n	80073a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	e853 3f00 	ldrex	r3, [r3]
 8007382:	60bb      	str	r3, [r7, #8]
   return(result);
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	f023 0310 	bic.w	r3, r3, #16
 800738a:	647b      	str	r3, [r7, #68]	; 0x44
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	461a      	mov	r2, r3
 8007392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007394:	61bb      	str	r3, [r7, #24]
 8007396:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007398:	6979      	ldr	r1, [r7, #20]
 800739a:	69ba      	ldr	r2, [r7, #24]
 800739c:	e841 2300 	strex	r3, r2, [r1]
 80073a0:	613b      	str	r3, [r7, #16]
   return(result);
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1e6      	bne.n	8007376 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2220      	movs	r2, #32
 80073ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	669a      	str	r2, [r3, #104]	; 0x68
}
 80073bc:	bf00      	nop
 80073be:	3754      	adds	r7, #84	; 0x54
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f7ff fa8a 	bl	8006900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073ec:	bf00      	nop
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b088      	sub	sp, #32
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	e853 3f00 	ldrex	r3, [r3]
 8007408:	60bb      	str	r3, [r7, #8]
   return(result);
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007410:	61fb      	str	r3, [r7, #28]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	461a      	mov	r2, r3
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	61bb      	str	r3, [r7, #24]
 800741c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741e:	6979      	ldr	r1, [r7, #20]
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	e841 2300 	strex	r3, r2, [r1]
 8007426:	613b      	str	r3, [r7, #16]
   return(result);
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1e6      	bne.n	80073fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2220      	movs	r2, #32
 8007432:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7ff fa56 	bl	80068ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007440:	bf00      	nop
 8007442:	3720      	adds	r7, #32
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b096      	sub	sp, #88	; 0x58
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007456:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007460:	2b22      	cmp	r3, #34	; 0x22
 8007462:	f040 8098 	bne.w	8007596 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007470:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007474:	b2d9      	uxtb	r1, r3
 8007476:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800747a:	b2da      	uxtb	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007480:	400a      	ands	r2, r1
 8007482:	b2d2      	uxtb	r2, r2
 8007484:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800748a:	1c5a      	adds	r2, r3, #1
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007496:	b29b      	uxth	r3, r3
 8007498:	3b01      	subs	r3, #1
 800749a:	b29a      	uxth	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d17b      	bne.n	80075a6 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b6:	e853 3f00 	ldrex	r3, [r3]
 80074ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074c2:	653b      	str	r3, [r7, #80]	; 0x50
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	461a      	mov	r2, r3
 80074ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074cc:	647b      	str	r3, [r7, #68]	; 0x44
 80074ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074d4:	e841 2300 	strex	r3, r2, [r1]
 80074d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1e6      	bne.n	80074ae <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3308      	adds	r3, #8
 80074e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ea:	e853 3f00 	ldrex	r3, [r3]
 80074ee:	623b      	str	r3, [r7, #32]
   return(result);
 80074f0:	6a3b      	ldr	r3, [r7, #32]
 80074f2:	f023 0301 	bic.w	r3, r3, #1
 80074f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	3308      	adds	r3, #8
 80074fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007500:	633a      	str	r2, [r7, #48]	; 0x30
 8007502:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007504:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007508:	e841 2300 	strex	r3, r2, [r1]
 800750c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800750e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1e5      	bne.n	80074e0 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2220      	movs	r2, #32
 8007518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800752c:	2b01      	cmp	r3, #1
 800752e:	d12e      	bne.n	800758e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	e853 3f00 	ldrex	r3, [r3]
 8007542:	60fb      	str	r3, [r7, #12]
   return(result);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f023 0310 	bic.w	r3, r3, #16
 800754a:	64bb      	str	r3, [r7, #72]	; 0x48
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	461a      	mov	r2, r3
 8007552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007554:	61fb      	str	r3, [r7, #28]
 8007556:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007558:	69b9      	ldr	r1, [r7, #24]
 800755a:	69fa      	ldr	r2, [r7, #28]
 800755c:	e841 2300 	strex	r3, r2, [r1]
 8007560:	617b      	str	r3, [r7, #20]
   return(result);
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1e6      	bne.n	8007536 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	f003 0310 	and.w	r3, r3, #16
 8007572:	2b10      	cmp	r3, #16
 8007574:	d103      	bne.n	800757e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2210      	movs	r2, #16
 800757c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007584:	4619      	mov	r1, r3
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7ff f9c4 	bl	8006914 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800758c:	e00b      	b.n	80075a6 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7fa fb12 	bl	8001bb8 <HAL_UART_RxCpltCallback>
}
 8007594:	e007      	b.n	80075a6 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	699a      	ldr	r2, [r3, #24]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f042 0208 	orr.w	r2, r2, #8
 80075a4:	619a      	str	r2, [r3, #24]
}
 80075a6:	bf00      	nop
 80075a8:	3758      	adds	r7, #88	; 0x58
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b096      	sub	sp, #88	; 0x58
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80075bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075c6:	2b22      	cmp	r3, #34	; 0x22
 80075c8:	f040 8098 	bne.w	80076fc <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075da:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80075dc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80075e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80075e4:	4013      	ands	r3, r2
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075ea:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f0:	1c9a      	adds	r2, r3, #2
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	3b01      	subs	r3, #1
 8007600:	b29a      	uxth	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800760e:	b29b      	uxth	r3, r3
 8007610:	2b00      	cmp	r3, #0
 8007612:	d17b      	bne.n	800770c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800761c:	e853 3f00 	ldrex	r3, [r3]
 8007620:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007624:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007628:	64fb      	str	r3, [r7, #76]	; 0x4c
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	461a      	mov	r2, r3
 8007630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007632:	643b      	str	r3, [r7, #64]	; 0x40
 8007634:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007636:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007638:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800763a:	e841 2300 	strex	r3, r2, [r1]
 800763e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1e6      	bne.n	8007614 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3308      	adds	r3, #8
 800764c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764e:	6a3b      	ldr	r3, [r7, #32]
 8007650:	e853 3f00 	ldrex	r3, [r3]
 8007654:	61fb      	str	r3, [r7, #28]
   return(result);
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	f023 0301 	bic.w	r3, r3, #1
 800765c:	64bb      	str	r3, [r7, #72]	; 0x48
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	3308      	adds	r3, #8
 8007664:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007666:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007668:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800766c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800766e:	e841 2300 	strex	r3, r2, [r1]
 8007672:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1e5      	bne.n	8007646 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2220      	movs	r2, #32
 800767e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007692:	2b01      	cmp	r3, #1
 8007694:	d12e      	bne.n	80076f4 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	e853 3f00 	ldrex	r3, [r3]
 80076a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	f023 0310 	bic.w	r3, r3, #16
 80076b0:	647b      	str	r3, [r7, #68]	; 0x44
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	461a      	mov	r2, r3
 80076b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076ba:	61bb      	str	r3, [r7, #24]
 80076bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076be:	6979      	ldr	r1, [r7, #20]
 80076c0:	69ba      	ldr	r2, [r7, #24]
 80076c2:	e841 2300 	strex	r3, r2, [r1]
 80076c6:	613b      	str	r3, [r7, #16]
   return(result);
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1e6      	bne.n	800769c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	69db      	ldr	r3, [r3, #28]
 80076d4:	f003 0310 	and.w	r3, r3, #16
 80076d8:	2b10      	cmp	r3, #16
 80076da:	d103      	bne.n	80076e4 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2210      	movs	r2, #16
 80076e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80076ea:	4619      	mov	r1, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f7ff f911 	bl	8006914 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076f2:	e00b      	b.n	800770c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f7fa fa5f 	bl	8001bb8 <HAL_UART_RxCpltCallback>
}
 80076fa:	e007      	b.n	800770c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	699a      	ldr	r2, [r3, #24]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f042 0208 	orr.w	r2, r2, #8
 800770a:	619a      	str	r2, [r3, #24]
}
 800770c:	bf00      	nop
 800770e:	3758      	adds	r7, #88	; 0x58
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007714:	b084      	sub	sp, #16
 8007716:	b580      	push	{r7, lr}
 8007718:	b084      	sub	sp, #16
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	f107 001c 	add.w	r0, r7, #28
 8007722:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007728:	2b01      	cmp	r3, #1
 800772a:	d120      	bne.n	800776e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007730:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	68da      	ldr	r2, [r3, #12]
 800773c:	4b20      	ldr	r3, [pc, #128]	; (80077c0 <USB_CoreInit+0xac>)
 800773e:	4013      	ands	r3, r2
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007752:	2b01      	cmp	r3, #1
 8007754:	d105      	bne.n	8007762 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fa96 	bl	8007c94 <USB_CoreReset>
 8007768:	4603      	mov	r3, r0
 800776a:	73fb      	strb	r3, [r7, #15]
 800776c:	e010      	b.n	8007790 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fa8a 	bl	8007c94 <USB_CoreReset>
 8007780:	4603      	mov	r3, r0
 8007782:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007788:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007792:	2b01      	cmp	r3, #1
 8007794:	d10b      	bne.n	80077ae <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f043 0206 	orr.w	r2, r3, #6
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f043 0220 	orr.w	r2, r3, #32
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80077ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077ba:	b004      	add	sp, #16
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	ffbdffbf 	.word	0xffbdffbf

080077c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f023 0201 	bic.w	r2, r3, #1
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b084      	sub	sp, #16
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	460b      	mov	r3, r1
 80077f0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80077f2:	2300      	movs	r3, #0
 80077f4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007802:	78fb      	ldrb	r3, [r7, #3]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d115      	bne.n	8007834 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007814:	2001      	movs	r0, #1
 8007816:	f7fa fe45 	bl	80024a4 <HAL_Delay>
      ms++;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	3301      	adds	r3, #1
 800781e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fa29 	bl	8007c78 <USB_GetMode>
 8007826:	4603      	mov	r3, r0
 8007828:	2b01      	cmp	r3, #1
 800782a:	d01e      	beq.n	800786a <USB_SetCurrentMode+0x84>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2b31      	cmp	r3, #49	; 0x31
 8007830:	d9f0      	bls.n	8007814 <USB_SetCurrentMode+0x2e>
 8007832:	e01a      	b.n	800786a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007834:	78fb      	ldrb	r3, [r7, #3]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d115      	bne.n	8007866 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007846:	2001      	movs	r0, #1
 8007848:	f7fa fe2c 	bl	80024a4 <HAL_Delay>
      ms++;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	3301      	adds	r3, #1
 8007850:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fa10 	bl	8007c78 <USB_GetMode>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d005      	beq.n	800786a <USB_SetCurrentMode+0x84>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2b31      	cmp	r3, #49	; 0x31
 8007862:	d9f0      	bls.n	8007846 <USB_SetCurrentMode+0x60>
 8007864:	e001      	b.n	800786a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e005      	b.n	8007876 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2b32      	cmp	r3, #50	; 0x32
 800786e:	d101      	bne.n	8007874 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e000      	b.n	8007876 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
	...

08007880 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007880:	b084      	sub	sp, #16
 8007882:	b580      	push	{r7, lr}
 8007884:	b086      	sub	sp, #24
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800788e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800789a:	2300      	movs	r3, #0
 800789c:	613b      	str	r3, [r7, #16]
 800789e:	e009      	b.n	80078b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	3340      	adds	r3, #64	; 0x40
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	4413      	add	r3, r2
 80078aa:	2200      	movs	r2, #0
 80078ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	3301      	adds	r3, #1
 80078b2:	613b      	str	r3, [r7, #16]
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	2b0e      	cmp	r3, #14
 80078b8:	d9f2      	bls.n	80078a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80078ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d11c      	bne.n	80078fa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078ce:	f043 0302 	orr.w	r3, r3, #2
 80078d2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	601a      	str	r2, [r3, #0]
 80078f8:	e005      	b.n	8007906 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800790c:	461a      	mov	r2, r3
 800790e:	2300      	movs	r3, #0
 8007910:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007918:	4619      	mov	r1, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007920:	461a      	mov	r2, r3
 8007922:	680b      	ldr	r3, [r1, #0]
 8007924:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007928:	2b01      	cmp	r3, #1
 800792a:	d10c      	bne.n	8007946 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800792c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792e:	2b00      	cmp	r3, #0
 8007930:	d104      	bne.n	800793c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007932:	2100      	movs	r1, #0
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f965 	bl	8007c04 <USB_SetDevSpeed>
 800793a:	e008      	b.n	800794e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800793c:	2101      	movs	r1, #1
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f960 	bl	8007c04 <USB_SetDevSpeed>
 8007944:	e003      	b.n	800794e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007946:	2103      	movs	r1, #3
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f95b 	bl	8007c04 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800794e:	2110      	movs	r1, #16
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 f8f3 	bl	8007b3c <USB_FlushTxFifo>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d001      	beq.n	8007960 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f91f 	bl	8007ba4 <USB_FlushRxFifo>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d001      	beq.n	8007970 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007976:	461a      	mov	r2, r3
 8007978:	2300      	movs	r3, #0
 800797a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007982:	461a      	mov	r2, r3
 8007984:	2300      	movs	r3, #0
 8007986:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800798e:	461a      	mov	r2, r3
 8007990:	2300      	movs	r3, #0
 8007992:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007994:	2300      	movs	r3, #0
 8007996:	613b      	str	r3, [r7, #16]
 8007998:	e043      	b.n	8007a22 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	015a      	lsls	r2, r3, #5
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	4413      	add	r3, r2
 80079a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079b0:	d118      	bne.n	80079e4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10a      	bne.n	80079ce <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	015a      	lsls	r2, r3, #5
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	4413      	add	r3, r2
 80079c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c4:	461a      	mov	r2, r3
 80079c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80079ca:	6013      	str	r3, [r2, #0]
 80079cc:	e013      	b.n	80079f6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	015a      	lsls	r2, r3, #5
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	4413      	add	r3, r2
 80079d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079da:	461a      	mov	r2, r3
 80079dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80079e0:	6013      	str	r3, [r2, #0]
 80079e2:	e008      	b.n	80079f6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	015a      	lsls	r2, r3, #5
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	4413      	add	r3, r2
 80079ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f0:	461a      	mov	r2, r3
 80079f2:	2300      	movs	r3, #0
 80079f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	015a      	lsls	r2, r3, #5
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a02:	461a      	mov	r2, r3
 8007a04:	2300      	movs	r3, #0
 8007a06:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	015a      	lsls	r2, r3, #5
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	4413      	add	r3, r2
 8007a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a14:	461a      	mov	r2, r3
 8007a16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	613b      	str	r3, [r7, #16]
 8007a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a24:	693a      	ldr	r2, [r7, #16]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d3b7      	bcc.n	800799a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	613b      	str	r3, [r7, #16]
 8007a2e:	e043      	b.n	8007ab8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a46:	d118      	bne.n	8007a7a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10a      	bne.n	8007a64 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	015a      	lsls	r2, r3, #5
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	4413      	add	r3, r2
 8007a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a60:	6013      	str	r3, [r2, #0]
 8007a62:	e013      	b.n	8007a8c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a70:	461a      	mov	r2, r3
 8007a72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a76:	6013      	str	r3, [r2, #0]
 8007a78:	e008      	b.n	8007a8c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	015a      	lsls	r2, r3, #5
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	4413      	add	r3, r2
 8007a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a86:	461a      	mov	r2, r3
 8007a88:	2300      	movs	r3, #0
 8007a8a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	015a      	lsls	r2, r3, #5
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4413      	add	r3, r2
 8007a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a98:	461a      	mov	r2, r3
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	015a      	lsls	r2, r3, #5
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aaa:	461a      	mov	r2, r3
 8007aac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ab0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	613b      	str	r3, [r7, #16]
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d3b7      	bcc.n	8007a30 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ace:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ad2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007ae0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d105      	bne.n	8007af4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	699b      	ldr	r3, [r3, #24]
 8007aec:	f043 0210 	orr.w	r2, r3, #16
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	699a      	ldr	r2, [r3, #24]
 8007af8:	4b0e      	ldr	r3, [pc, #56]	; (8007b34 <USB_DevInit+0x2b4>)
 8007afa:	4313      	orrs	r3, r2
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d005      	beq.n	8007b12 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	f043 0208 	orr.w	r2, r3, #8
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d105      	bne.n	8007b24 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	699a      	ldr	r2, [r3, #24]
 8007b1c:	4b06      	ldr	r3, [pc, #24]	; (8007b38 <USB_DevInit+0x2b8>)
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3718      	adds	r7, #24
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b30:	b004      	add	sp, #16
 8007b32:	4770      	bx	lr
 8007b34:	803c3800 	.word	0x803c3800
 8007b38:	40000004 	.word	0x40000004

08007b3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	4a13      	ldr	r2, [pc, #76]	; (8007ba0 <USB_FlushTxFifo+0x64>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d901      	bls.n	8007b5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e01b      	b.n	8007b94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	daf2      	bge.n	8007b4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007b64:	2300      	movs	r3, #0
 8007b66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	019b      	lsls	r3, r3, #6
 8007b6c:	f043 0220 	orr.w	r2, r3, #32
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	3301      	adds	r3, #1
 8007b78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	4a08      	ldr	r2, [pc, #32]	; (8007ba0 <USB_FlushTxFifo+0x64>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d901      	bls.n	8007b86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e006      	b.n	8007b94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	f003 0320 	and.w	r3, r3, #32
 8007b8e:	2b20      	cmp	r3, #32
 8007b90:	d0f0      	beq.n	8007b74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	00030d40 	.word	0x00030d40

08007ba4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bac:	2300      	movs	r3, #0
 8007bae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	4a11      	ldr	r2, [pc, #68]	; (8007c00 <USB_FlushRxFifo+0x5c>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d901      	bls.n	8007bc2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e018      	b.n	8007bf4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	daf2      	bge.n	8007bb0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2210      	movs	r2, #16
 8007bd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	4a08      	ldr	r2, [pc, #32]	; (8007c00 <USB_FlushRxFifo+0x5c>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d901      	bls.n	8007be6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e006      	b.n	8007bf4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	f003 0310 	and.w	r3, r3, #16
 8007bee:	2b10      	cmp	r3, #16
 8007bf0:	d0f0      	beq.n	8007bd4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr
 8007c00:	00030d40 	.word	0x00030d40

08007c04 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	78fb      	ldrb	r3, [r7, #3]
 8007c1e:	68f9      	ldr	r1, [r7, #12]
 8007c20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c24:	4313      	orrs	r3, r2
 8007c26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3714      	adds	r7, #20
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c36:	b480      	push	{r7}
 8007c38:	b085      	sub	sp, #20
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c50:	f023 0303 	bic.w	r3, r3, #3
 8007c54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c64:	f043 0302 	orr.w	r3, r3, #2
 8007c68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	695b      	ldr	r3, [r3, #20]
 8007c84:	f003 0301 	and.w	r3, r3, #1
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	4a13      	ldr	r2, [pc, #76]	; (8007cf8 <USB_CoreReset+0x64>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d901      	bls.n	8007cb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	e01b      	b.n	8007cea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	daf2      	bge.n	8007ca0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	f043 0201 	orr.w	r2, r3, #1
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	4a09      	ldr	r2, [pc, #36]	; (8007cf8 <USB_CoreReset+0x64>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d901      	bls.n	8007cdc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e006      	b.n	8007cea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	f003 0301 	and.w	r3, r3, #1
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d0f0      	beq.n	8007cca <USB_CoreReset+0x36>

  return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3714      	adds	r7, #20
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	00030d40 	.word	0x00030d40

08007cfc <__errno>:
 8007cfc:	4b01      	ldr	r3, [pc, #4]	; (8007d04 <__errno+0x8>)
 8007cfe:	6818      	ldr	r0, [r3, #0]
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	20000014 	.word	0x20000014

08007d08 <__libc_init_array>:
 8007d08:	b570      	push	{r4, r5, r6, lr}
 8007d0a:	4d0d      	ldr	r5, [pc, #52]	; (8007d40 <__libc_init_array+0x38>)
 8007d0c:	4c0d      	ldr	r4, [pc, #52]	; (8007d44 <__libc_init_array+0x3c>)
 8007d0e:	1b64      	subs	r4, r4, r5
 8007d10:	10a4      	asrs	r4, r4, #2
 8007d12:	2600      	movs	r6, #0
 8007d14:	42a6      	cmp	r6, r4
 8007d16:	d109      	bne.n	8007d2c <__libc_init_array+0x24>
 8007d18:	4d0b      	ldr	r5, [pc, #44]	; (8007d48 <__libc_init_array+0x40>)
 8007d1a:	4c0c      	ldr	r4, [pc, #48]	; (8007d4c <__libc_init_array+0x44>)
 8007d1c:	f004 fb88 	bl	800c430 <_init>
 8007d20:	1b64      	subs	r4, r4, r5
 8007d22:	10a4      	asrs	r4, r4, #2
 8007d24:	2600      	movs	r6, #0
 8007d26:	42a6      	cmp	r6, r4
 8007d28:	d105      	bne.n	8007d36 <__libc_init_array+0x2e>
 8007d2a:	bd70      	pop	{r4, r5, r6, pc}
 8007d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d30:	4798      	blx	r3
 8007d32:	3601      	adds	r6, #1
 8007d34:	e7ee      	b.n	8007d14 <__libc_init_array+0xc>
 8007d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d3a:	4798      	blx	r3
 8007d3c:	3601      	adds	r6, #1
 8007d3e:	e7f2      	b.n	8007d26 <__libc_init_array+0x1e>
 8007d40:	0800c91c 	.word	0x0800c91c
 8007d44:	0800c91c 	.word	0x0800c91c
 8007d48:	0800c91c 	.word	0x0800c91c
 8007d4c:	0800c920 	.word	0x0800c920

08007d50 <memset>:
 8007d50:	4402      	add	r2, r0
 8007d52:	4603      	mov	r3, r0
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d100      	bne.n	8007d5a <memset+0xa>
 8007d58:	4770      	bx	lr
 8007d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d5e:	e7f9      	b.n	8007d54 <memset+0x4>

08007d60 <__cvt>:
 8007d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d62:	ed2d 8b02 	vpush	{d8}
 8007d66:	eeb0 8b40 	vmov.f64	d8, d0
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	4617      	mov	r7, r2
 8007d6e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007d70:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007d72:	ee18 2a90 	vmov	r2, s17
 8007d76:	f025 0520 	bic.w	r5, r5, #32
 8007d7a:	2a00      	cmp	r2, #0
 8007d7c:	bfb6      	itet	lt
 8007d7e:	222d      	movlt	r2, #45	; 0x2d
 8007d80:	2200      	movge	r2, #0
 8007d82:	eeb1 8b40 	vneglt.f64	d8, d0
 8007d86:	2d46      	cmp	r5, #70	; 0x46
 8007d88:	460c      	mov	r4, r1
 8007d8a:	701a      	strb	r2, [r3, #0]
 8007d8c:	d004      	beq.n	8007d98 <__cvt+0x38>
 8007d8e:	2d45      	cmp	r5, #69	; 0x45
 8007d90:	d100      	bne.n	8007d94 <__cvt+0x34>
 8007d92:	3401      	adds	r4, #1
 8007d94:	2102      	movs	r1, #2
 8007d96:	e000      	b.n	8007d9a <__cvt+0x3a>
 8007d98:	2103      	movs	r1, #3
 8007d9a:	ab03      	add	r3, sp, #12
 8007d9c:	9301      	str	r3, [sp, #4]
 8007d9e:	ab02      	add	r3, sp, #8
 8007da0:	9300      	str	r3, [sp, #0]
 8007da2:	4622      	mov	r2, r4
 8007da4:	4633      	mov	r3, r6
 8007da6:	eeb0 0b48 	vmov.f64	d0, d8
 8007daa:	f001 fd2d 	bl	8009808 <_dtoa_r>
 8007dae:	2d47      	cmp	r5, #71	; 0x47
 8007db0:	d101      	bne.n	8007db6 <__cvt+0x56>
 8007db2:	07fb      	lsls	r3, r7, #31
 8007db4:	d51a      	bpl.n	8007dec <__cvt+0x8c>
 8007db6:	2d46      	cmp	r5, #70	; 0x46
 8007db8:	eb00 0204 	add.w	r2, r0, r4
 8007dbc:	d10c      	bne.n	8007dd8 <__cvt+0x78>
 8007dbe:	7803      	ldrb	r3, [r0, #0]
 8007dc0:	2b30      	cmp	r3, #48	; 0x30
 8007dc2:	d107      	bne.n	8007dd4 <__cvt+0x74>
 8007dc4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dcc:	bf1c      	itt	ne
 8007dce:	f1c4 0401 	rsbne	r4, r4, #1
 8007dd2:	6034      	strne	r4, [r6, #0]
 8007dd4:	6833      	ldr	r3, [r6, #0]
 8007dd6:	441a      	add	r2, r3
 8007dd8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007de0:	bf08      	it	eq
 8007de2:	9203      	streq	r2, [sp, #12]
 8007de4:	2130      	movs	r1, #48	; 0x30
 8007de6:	9b03      	ldr	r3, [sp, #12]
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d307      	bcc.n	8007dfc <__cvt+0x9c>
 8007dec:	9b03      	ldr	r3, [sp, #12]
 8007dee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007df0:	1a1b      	subs	r3, r3, r0
 8007df2:	6013      	str	r3, [r2, #0]
 8007df4:	b005      	add	sp, #20
 8007df6:	ecbd 8b02 	vpop	{d8}
 8007dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dfc:	1c5c      	adds	r4, r3, #1
 8007dfe:	9403      	str	r4, [sp, #12]
 8007e00:	7019      	strb	r1, [r3, #0]
 8007e02:	e7f0      	b.n	8007de6 <__cvt+0x86>

08007e04 <__exponent>:
 8007e04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e06:	4603      	mov	r3, r0
 8007e08:	2900      	cmp	r1, #0
 8007e0a:	bfb8      	it	lt
 8007e0c:	4249      	neglt	r1, r1
 8007e0e:	f803 2b02 	strb.w	r2, [r3], #2
 8007e12:	bfb4      	ite	lt
 8007e14:	222d      	movlt	r2, #45	; 0x2d
 8007e16:	222b      	movge	r2, #43	; 0x2b
 8007e18:	2909      	cmp	r1, #9
 8007e1a:	7042      	strb	r2, [r0, #1]
 8007e1c:	dd2a      	ble.n	8007e74 <__exponent+0x70>
 8007e1e:	f10d 0407 	add.w	r4, sp, #7
 8007e22:	46a4      	mov	ip, r4
 8007e24:	270a      	movs	r7, #10
 8007e26:	46a6      	mov	lr, r4
 8007e28:	460a      	mov	r2, r1
 8007e2a:	fb91 f6f7 	sdiv	r6, r1, r7
 8007e2e:	fb07 1516 	mls	r5, r7, r6, r1
 8007e32:	3530      	adds	r5, #48	; 0x30
 8007e34:	2a63      	cmp	r2, #99	; 0x63
 8007e36:	f104 34ff 	add.w	r4, r4, #4294967295
 8007e3a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007e3e:	4631      	mov	r1, r6
 8007e40:	dcf1      	bgt.n	8007e26 <__exponent+0x22>
 8007e42:	3130      	adds	r1, #48	; 0x30
 8007e44:	f1ae 0502 	sub.w	r5, lr, #2
 8007e48:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007e4c:	1c44      	adds	r4, r0, #1
 8007e4e:	4629      	mov	r1, r5
 8007e50:	4561      	cmp	r1, ip
 8007e52:	d30a      	bcc.n	8007e6a <__exponent+0x66>
 8007e54:	f10d 0209 	add.w	r2, sp, #9
 8007e58:	eba2 020e 	sub.w	r2, r2, lr
 8007e5c:	4565      	cmp	r5, ip
 8007e5e:	bf88      	it	hi
 8007e60:	2200      	movhi	r2, #0
 8007e62:	4413      	add	r3, r2
 8007e64:	1a18      	subs	r0, r3, r0
 8007e66:	b003      	add	sp, #12
 8007e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e6e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007e72:	e7ed      	b.n	8007e50 <__exponent+0x4c>
 8007e74:	2330      	movs	r3, #48	; 0x30
 8007e76:	3130      	adds	r1, #48	; 0x30
 8007e78:	7083      	strb	r3, [r0, #2]
 8007e7a:	70c1      	strb	r1, [r0, #3]
 8007e7c:	1d03      	adds	r3, r0, #4
 8007e7e:	e7f1      	b.n	8007e64 <__exponent+0x60>

08007e80 <_printf_float>:
 8007e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e84:	b08b      	sub	sp, #44	; 0x2c
 8007e86:	460c      	mov	r4, r1
 8007e88:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007e8c:	4616      	mov	r6, r2
 8007e8e:	461f      	mov	r7, r3
 8007e90:	4605      	mov	r5, r0
 8007e92:	f002 fd97 	bl	800a9c4 <_localeconv_r>
 8007e96:	f8d0 b000 	ldr.w	fp, [r0]
 8007e9a:	4658      	mov	r0, fp
 8007e9c:	f7f8 f9d0 	bl	8000240 <strlen>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	9308      	str	r3, [sp, #32]
 8007ea4:	f8d8 3000 	ldr.w	r3, [r8]
 8007ea8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007eac:	6822      	ldr	r2, [r4, #0]
 8007eae:	3307      	adds	r3, #7
 8007eb0:	f023 0307 	bic.w	r3, r3, #7
 8007eb4:	f103 0108 	add.w	r1, r3, #8
 8007eb8:	f8c8 1000 	str.w	r1, [r8]
 8007ebc:	4682      	mov	sl, r0
 8007ebe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ec2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007ec6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008128 <_printf_float+0x2a8>
 8007eca:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007ece:	eeb0 6bc0 	vabs.f64	d6, d0
 8007ed2:	eeb4 6b47 	vcmp.f64	d6, d7
 8007ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eda:	dd24      	ble.n	8007f26 <_printf_float+0xa6>
 8007edc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ee4:	d502      	bpl.n	8007eec <_printf_float+0x6c>
 8007ee6:	232d      	movs	r3, #45	; 0x2d
 8007ee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eec:	4b90      	ldr	r3, [pc, #576]	; (8008130 <_printf_float+0x2b0>)
 8007eee:	4891      	ldr	r0, [pc, #580]	; (8008134 <_printf_float+0x2b4>)
 8007ef0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007ef4:	bf94      	ite	ls
 8007ef6:	4698      	movls	r8, r3
 8007ef8:	4680      	movhi	r8, r0
 8007efa:	2303      	movs	r3, #3
 8007efc:	6123      	str	r3, [r4, #16]
 8007efe:	f022 0204 	bic.w	r2, r2, #4
 8007f02:	2300      	movs	r3, #0
 8007f04:	6022      	str	r2, [r4, #0]
 8007f06:	9304      	str	r3, [sp, #16]
 8007f08:	9700      	str	r7, [sp, #0]
 8007f0a:	4633      	mov	r3, r6
 8007f0c:	aa09      	add	r2, sp, #36	; 0x24
 8007f0e:	4621      	mov	r1, r4
 8007f10:	4628      	mov	r0, r5
 8007f12:	f000 f9d3 	bl	80082bc <_printf_common>
 8007f16:	3001      	adds	r0, #1
 8007f18:	f040 808a 	bne.w	8008030 <_printf_float+0x1b0>
 8007f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f20:	b00b      	add	sp, #44	; 0x2c
 8007f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f26:	eeb4 0b40 	vcmp.f64	d0, d0
 8007f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f2e:	d709      	bvc.n	8007f44 <_printf_float+0xc4>
 8007f30:	ee10 3a90 	vmov	r3, s1
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	bfbc      	itt	lt
 8007f38:	232d      	movlt	r3, #45	; 0x2d
 8007f3a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007f3e:	487e      	ldr	r0, [pc, #504]	; (8008138 <_printf_float+0x2b8>)
 8007f40:	4b7e      	ldr	r3, [pc, #504]	; (800813c <_printf_float+0x2bc>)
 8007f42:	e7d5      	b.n	8007ef0 <_printf_float+0x70>
 8007f44:	6863      	ldr	r3, [r4, #4]
 8007f46:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007f4a:	9104      	str	r1, [sp, #16]
 8007f4c:	1c59      	adds	r1, r3, #1
 8007f4e:	d13c      	bne.n	8007fca <_printf_float+0x14a>
 8007f50:	2306      	movs	r3, #6
 8007f52:	6063      	str	r3, [r4, #4]
 8007f54:	2300      	movs	r3, #0
 8007f56:	9303      	str	r3, [sp, #12]
 8007f58:	ab08      	add	r3, sp, #32
 8007f5a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007f5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f62:	ab07      	add	r3, sp, #28
 8007f64:	6861      	ldr	r1, [r4, #4]
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	6022      	str	r2, [r4, #0]
 8007f6a:	f10d 031b 	add.w	r3, sp, #27
 8007f6e:	4628      	mov	r0, r5
 8007f70:	f7ff fef6 	bl	8007d60 <__cvt>
 8007f74:	9b04      	ldr	r3, [sp, #16]
 8007f76:	9907      	ldr	r1, [sp, #28]
 8007f78:	2b47      	cmp	r3, #71	; 0x47
 8007f7a:	4680      	mov	r8, r0
 8007f7c:	d108      	bne.n	8007f90 <_printf_float+0x110>
 8007f7e:	1cc8      	adds	r0, r1, #3
 8007f80:	db02      	blt.n	8007f88 <_printf_float+0x108>
 8007f82:	6863      	ldr	r3, [r4, #4]
 8007f84:	4299      	cmp	r1, r3
 8007f86:	dd41      	ble.n	800800c <_printf_float+0x18c>
 8007f88:	f1a9 0902 	sub.w	r9, r9, #2
 8007f8c:	fa5f f989 	uxtb.w	r9, r9
 8007f90:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007f94:	d820      	bhi.n	8007fd8 <_printf_float+0x158>
 8007f96:	3901      	subs	r1, #1
 8007f98:	464a      	mov	r2, r9
 8007f9a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f9e:	9107      	str	r1, [sp, #28]
 8007fa0:	f7ff ff30 	bl	8007e04 <__exponent>
 8007fa4:	9a08      	ldr	r2, [sp, #32]
 8007fa6:	9004      	str	r0, [sp, #16]
 8007fa8:	1813      	adds	r3, r2, r0
 8007faa:	2a01      	cmp	r2, #1
 8007fac:	6123      	str	r3, [r4, #16]
 8007fae:	dc02      	bgt.n	8007fb6 <_printf_float+0x136>
 8007fb0:	6822      	ldr	r2, [r4, #0]
 8007fb2:	07d2      	lsls	r2, r2, #31
 8007fb4:	d501      	bpl.n	8007fba <_printf_float+0x13a>
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	6123      	str	r3, [r4, #16]
 8007fba:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d0a2      	beq.n	8007f08 <_printf_float+0x88>
 8007fc2:	232d      	movs	r3, #45	; 0x2d
 8007fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fc8:	e79e      	b.n	8007f08 <_printf_float+0x88>
 8007fca:	9904      	ldr	r1, [sp, #16]
 8007fcc:	2947      	cmp	r1, #71	; 0x47
 8007fce:	d1c1      	bne.n	8007f54 <_printf_float+0xd4>
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1bf      	bne.n	8007f54 <_printf_float+0xd4>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e7bc      	b.n	8007f52 <_printf_float+0xd2>
 8007fd8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007fdc:	d118      	bne.n	8008010 <_printf_float+0x190>
 8007fde:	2900      	cmp	r1, #0
 8007fe0:	6863      	ldr	r3, [r4, #4]
 8007fe2:	dd0b      	ble.n	8007ffc <_printf_float+0x17c>
 8007fe4:	6121      	str	r1, [r4, #16]
 8007fe6:	b913      	cbnz	r3, 8007fee <_printf_float+0x16e>
 8007fe8:	6822      	ldr	r2, [r4, #0]
 8007fea:	07d0      	lsls	r0, r2, #31
 8007fec:	d502      	bpl.n	8007ff4 <_printf_float+0x174>
 8007fee:	3301      	adds	r3, #1
 8007ff0:	440b      	add	r3, r1
 8007ff2:	6123      	str	r3, [r4, #16]
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	65a1      	str	r1, [r4, #88]	; 0x58
 8007ff8:	9304      	str	r3, [sp, #16]
 8007ffa:	e7de      	b.n	8007fba <_printf_float+0x13a>
 8007ffc:	b913      	cbnz	r3, 8008004 <_printf_float+0x184>
 8007ffe:	6822      	ldr	r2, [r4, #0]
 8008000:	07d2      	lsls	r2, r2, #31
 8008002:	d501      	bpl.n	8008008 <_printf_float+0x188>
 8008004:	3302      	adds	r3, #2
 8008006:	e7f4      	b.n	8007ff2 <_printf_float+0x172>
 8008008:	2301      	movs	r3, #1
 800800a:	e7f2      	b.n	8007ff2 <_printf_float+0x172>
 800800c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008010:	9b08      	ldr	r3, [sp, #32]
 8008012:	4299      	cmp	r1, r3
 8008014:	db05      	blt.n	8008022 <_printf_float+0x1a2>
 8008016:	6823      	ldr	r3, [r4, #0]
 8008018:	6121      	str	r1, [r4, #16]
 800801a:	07d8      	lsls	r0, r3, #31
 800801c:	d5ea      	bpl.n	8007ff4 <_printf_float+0x174>
 800801e:	1c4b      	adds	r3, r1, #1
 8008020:	e7e7      	b.n	8007ff2 <_printf_float+0x172>
 8008022:	2900      	cmp	r1, #0
 8008024:	bfd4      	ite	le
 8008026:	f1c1 0202 	rsble	r2, r1, #2
 800802a:	2201      	movgt	r2, #1
 800802c:	4413      	add	r3, r2
 800802e:	e7e0      	b.n	8007ff2 <_printf_float+0x172>
 8008030:	6823      	ldr	r3, [r4, #0]
 8008032:	055a      	lsls	r2, r3, #21
 8008034:	d407      	bmi.n	8008046 <_printf_float+0x1c6>
 8008036:	6923      	ldr	r3, [r4, #16]
 8008038:	4642      	mov	r2, r8
 800803a:	4631      	mov	r1, r6
 800803c:	4628      	mov	r0, r5
 800803e:	47b8      	blx	r7
 8008040:	3001      	adds	r0, #1
 8008042:	d12a      	bne.n	800809a <_printf_float+0x21a>
 8008044:	e76a      	b.n	8007f1c <_printf_float+0x9c>
 8008046:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800804a:	f240 80e2 	bls.w	8008212 <_printf_float+0x392>
 800804e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008052:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800805a:	d133      	bne.n	80080c4 <_printf_float+0x244>
 800805c:	4a38      	ldr	r2, [pc, #224]	; (8008140 <_printf_float+0x2c0>)
 800805e:	2301      	movs	r3, #1
 8008060:	4631      	mov	r1, r6
 8008062:	4628      	mov	r0, r5
 8008064:	47b8      	blx	r7
 8008066:	3001      	adds	r0, #1
 8008068:	f43f af58 	beq.w	8007f1c <_printf_float+0x9c>
 800806c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008070:	429a      	cmp	r2, r3
 8008072:	db02      	blt.n	800807a <_printf_float+0x1fa>
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	07d8      	lsls	r0, r3, #31
 8008078:	d50f      	bpl.n	800809a <_printf_float+0x21a>
 800807a:	4653      	mov	r3, sl
 800807c:	465a      	mov	r2, fp
 800807e:	4631      	mov	r1, r6
 8008080:	4628      	mov	r0, r5
 8008082:	47b8      	blx	r7
 8008084:	3001      	adds	r0, #1
 8008086:	f43f af49 	beq.w	8007f1c <_printf_float+0x9c>
 800808a:	f04f 0800 	mov.w	r8, #0
 800808e:	f104 091a 	add.w	r9, r4, #26
 8008092:	9b08      	ldr	r3, [sp, #32]
 8008094:	3b01      	subs	r3, #1
 8008096:	4543      	cmp	r3, r8
 8008098:	dc09      	bgt.n	80080ae <_printf_float+0x22e>
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	079b      	lsls	r3, r3, #30
 800809e:	f100 8108 	bmi.w	80082b2 <_printf_float+0x432>
 80080a2:	68e0      	ldr	r0, [r4, #12]
 80080a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080a6:	4298      	cmp	r0, r3
 80080a8:	bfb8      	it	lt
 80080aa:	4618      	movlt	r0, r3
 80080ac:	e738      	b.n	8007f20 <_printf_float+0xa0>
 80080ae:	2301      	movs	r3, #1
 80080b0:	464a      	mov	r2, r9
 80080b2:	4631      	mov	r1, r6
 80080b4:	4628      	mov	r0, r5
 80080b6:	47b8      	blx	r7
 80080b8:	3001      	adds	r0, #1
 80080ba:	f43f af2f 	beq.w	8007f1c <_printf_float+0x9c>
 80080be:	f108 0801 	add.w	r8, r8, #1
 80080c2:	e7e6      	b.n	8008092 <_printf_float+0x212>
 80080c4:	9b07      	ldr	r3, [sp, #28]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	dc3c      	bgt.n	8008144 <_printf_float+0x2c4>
 80080ca:	4a1d      	ldr	r2, [pc, #116]	; (8008140 <_printf_float+0x2c0>)
 80080cc:	2301      	movs	r3, #1
 80080ce:	4631      	mov	r1, r6
 80080d0:	4628      	mov	r0, r5
 80080d2:	47b8      	blx	r7
 80080d4:	3001      	adds	r0, #1
 80080d6:	f43f af21 	beq.w	8007f1c <_printf_float+0x9c>
 80080da:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80080de:	4313      	orrs	r3, r2
 80080e0:	d102      	bne.n	80080e8 <_printf_float+0x268>
 80080e2:	6823      	ldr	r3, [r4, #0]
 80080e4:	07d9      	lsls	r1, r3, #31
 80080e6:	d5d8      	bpl.n	800809a <_printf_float+0x21a>
 80080e8:	4653      	mov	r3, sl
 80080ea:	465a      	mov	r2, fp
 80080ec:	4631      	mov	r1, r6
 80080ee:	4628      	mov	r0, r5
 80080f0:	47b8      	blx	r7
 80080f2:	3001      	adds	r0, #1
 80080f4:	f43f af12 	beq.w	8007f1c <_printf_float+0x9c>
 80080f8:	f04f 0900 	mov.w	r9, #0
 80080fc:	f104 0a1a 	add.w	sl, r4, #26
 8008100:	9b07      	ldr	r3, [sp, #28]
 8008102:	425b      	negs	r3, r3
 8008104:	454b      	cmp	r3, r9
 8008106:	dc01      	bgt.n	800810c <_printf_float+0x28c>
 8008108:	9b08      	ldr	r3, [sp, #32]
 800810a:	e795      	b.n	8008038 <_printf_float+0x1b8>
 800810c:	2301      	movs	r3, #1
 800810e:	4652      	mov	r2, sl
 8008110:	4631      	mov	r1, r6
 8008112:	4628      	mov	r0, r5
 8008114:	47b8      	blx	r7
 8008116:	3001      	adds	r0, #1
 8008118:	f43f af00 	beq.w	8007f1c <_printf_float+0x9c>
 800811c:	f109 0901 	add.w	r9, r9, #1
 8008120:	e7ee      	b.n	8008100 <_printf_float+0x280>
 8008122:	bf00      	nop
 8008124:	f3af 8000 	nop.w
 8008128:	ffffffff 	.word	0xffffffff
 800812c:	7fefffff 	.word	0x7fefffff
 8008130:	0800c470 	.word	0x0800c470
 8008134:	0800c474 	.word	0x0800c474
 8008138:	0800c47c 	.word	0x0800c47c
 800813c:	0800c478 	.word	0x0800c478
 8008140:	0800c480 	.word	0x0800c480
 8008144:	9a08      	ldr	r2, [sp, #32]
 8008146:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008148:	429a      	cmp	r2, r3
 800814a:	bfa8      	it	ge
 800814c:	461a      	movge	r2, r3
 800814e:	2a00      	cmp	r2, #0
 8008150:	4691      	mov	r9, r2
 8008152:	dc38      	bgt.n	80081c6 <_printf_float+0x346>
 8008154:	2300      	movs	r3, #0
 8008156:	9305      	str	r3, [sp, #20]
 8008158:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800815c:	f104 021a 	add.w	r2, r4, #26
 8008160:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008162:	9905      	ldr	r1, [sp, #20]
 8008164:	9304      	str	r3, [sp, #16]
 8008166:	eba3 0309 	sub.w	r3, r3, r9
 800816a:	428b      	cmp	r3, r1
 800816c:	dc33      	bgt.n	80081d6 <_printf_float+0x356>
 800816e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008172:	429a      	cmp	r2, r3
 8008174:	db3c      	blt.n	80081f0 <_printf_float+0x370>
 8008176:	6823      	ldr	r3, [r4, #0]
 8008178:	07da      	lsls	r2, r3, #31
 800817a:	d439      	bmi.n	80081f0 <_printf_float+0x370>
 800817c:	9b08      	ldr	r3, [sp, #32]
 800817e:	9a04      	ldr	r2, [sp, #16]
 8008180:	9907      	ldr	r1, [sp, #28]
 8008182:	1a9a      	subs	r2, r3, r2
 8008184:	eba3 0901 	sub.w	r9, r3, r1
 8008188:	4591      	cmp	r9, r2
 800818a:	bfa8      	it	ge
 800818c:	4691      	movge	r9, r2
 800818e:	f1b9 0f00 	cmp.w	r9, #0
 8008192:	dc35      	bgt.n	8008200 <_printf_float+0x380>
 8008194:	f04f 0800 	mov.w	r8, #0
 8008198:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800819c:	f104 0a1a 	add.w	sl, r4, #26
 80081a0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80081a4:	1a9b      	subs	r3, r3, r2
 80081a6:	eba3 0309 	sub.w	r3, r3, r9
 80081aa:	4543      	cmp	r3, r8
 80081ac:	f77f af75 	ble.w	800809a <_printf_float+0x21a>
 80081b0:	2301      	movs	r3, #1
 80081b2:	4652      	mov	r2, sl
 80081b4:	4631      	mov	r1, r6
 80081b6:	4628      	mov	r0, r5
 80081b8:	47b8      	blx	r7
 80081ba:	3001      	adds	r0, #1
 80081bc:	f43f aeae 	beq.w	8007f1c <_printf_float+0x9c>
 80081c0:	f108 0801 	add.w	r8, r8, #1
 80081c4:	e7ec      	b.n	80081a0 <_printf_float+0x320>
 80081c6:	4613      	mov	r3, r2
 80081c8:	4631      	mov	r1, r6
 80081ca:	4642      	mov	r2, r8
 80081cc:	4628      	mov	r0, r5
 80081ce:	47b8      	blx	r7
 80081d0:	3001      	adds	r0, #1
 80081d2:	d1bf      	bne.n	8008154 <_printf_float+0x2d4>
 80081d4:	e6a2      	b.n	8007f1c <_printf_float+0x9c>
 80081d6:	2301      	movs	r3, #1
 80081d8:	4631      	mov	r1, r6
 80081da:	4628      	mov	r0, r5
 80081dc:	9204      	str	r2, [sp, #16]
 80081de:	47b8      	blx	r7
 80081e0:	3001      	adds	r0, #1
 80081e2:	f43f ae9b 	beq.w	8007f1c <_printf_float+0x9c>
 80081e6:	9b05      	ldr	r3, [sp, #20]
 80081e8:	9a04      	ldr	r2, [sp, #16]
 80081ea:	3301      	adds	r3, #1
 80081ec:	9305      	str	r3, [sp, #20]
 80081ee:	e7b7      	b.n	8008160 <_printf_float+0x2e0>
 80081f0:	4653      	mov	r3, sl
 80081f2:	465a      	mov	r2, fp
 80081f4:	4631      	mov	r1, r6
 80081f6:	4628      	mov	r0, r5
 80081f8:	47b8      	blx	r7
 80081fa:	3001      	adds	r0, #1
 80081fc:	d1be      	bne.n	800817c <_printf_float+0x2fc>
 80081fe:	e68d      	b.n	8007f1c <_printf_float+0x9c>
 8008200:	9a04      	ldr	r2, [sp, #16]
 8008202:	464b      	mov	r3, r9
 8008204:	4442      	add	r2, r8
 8008206:	4631      	mov	r1, r6
 8008208:	4628      	mov	r0, r5
 800820a:	47b8      	blx	r7
 800820c:	3001      	adds	r0, #1
 800820e:	d1c1      	bne.n	8008194 <_printf_float+0x314>
 8008210:	e684      	b.n	8007f1c <_printf_float+0x9c>
 8008212:	9a08      	ldr	r2, [sp, #32]
 8008214:	2a01      	cmp	r2, #1
 8008216:	dc01      	bgt.n	800821c <_printf_float+0x39c>
 8008218:	07db      	lsls	r3, r3, #31
 800821a:	d537      	bpl.n	800828c <_printf_float+0x40c>
 800821c:	2301      	movs	r3, #1
 800821e:	4642      	mov	r2, r8
 8008220:	4631      	mov	r1, r6
 8008222:	4628      	mov	r0, r5
 8008224:	47b8      	blx	r7
 8008226:	3001      	adds	r0, #1
 8008228:	f43f ae78 	beq.w	8007f1c <_printf_float+0x9c>
 800822c:	4653      	mov	r3, sl
 800822e:	465a      	mov	r2, fp
 8008230:	4631      	mov	r1, r6
 8008232:	4628      	mov	r0, r5
 8008234:	47b8      	blx	r7
 8008236:	3001      	adds	r0, #1
 8008238:	f43f ae70 	beq.w	8007f1c <_printf_float+0x9c>
 800823c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008240:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008248:	d01b      	beq.n	8008282 <_printf_float+0x402>
 800824a:	9b08      	ldr	r3, [sp, #32]
 800824c:	f108 0201 	add.w	r2, r8, #1
 8008250:	3b01      	subs	r3, #1
 8008252:	4631      	mov	r1, r6
 8008254:	4628      	mov	r0, r5
 8008256:	47b8      	blx	r7
 8008258:	3001      	adds	r0, #1
 800825a:	d10e      	bne.n	800827a <_printf_float+0x3fa>
 800825c:	e65e      	b.n	8007f1c <_printf_float+0x9c>
 800825e:	2301      	movs	r3, #1
 8008260:	464a      	mov	r2, r9
 8008262:	4631      	mov	r1, r6
 8008264:	4628      	mov	r0, r5
 8008266:	47b8      	blx	r7
 8008268:	3001      	adds	r0, #1
 800826a:	f43f ae57 	beq.w	8007f1c <_printf_float+0x9c>
 800826e:	f108 0801 	add.w	r8, r8, #1
 8008272:	9b08      	ldr	r3, [sp, #32]
 8008274:	3b01      	subs	r3, #1
 8008276:	4543      	cmp	r3, r8
 8008278:	dcf1      	bgt.n	800825e <_printf_float+0x3de>
 800827a:	9b04      	ldr	r3, [sp, #16]
 800827c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008280:	e6db      	b.n	800803a <_printf_float+0x1ba>
 8008282:	f04f 0800 	mov.w	r8, #0
 8008286:	f104 091a 	add.w	r9, r4, #26
 800828a:	e7f2      	b.n	8008272 <_printf_float+0x3f2>
 800828c:	2301      	movs	r3, #1
 800828e:	4642      	mov	r2, r8
 8008290:	e7df      	b.n	8008252 <_printf_float+0x3d2>
 8008292:	2301      	movs	r3, #1
 8008294:	464a      	mov	r2, r9
 8008296:	4631      	mov	r1, r6
 8008298:	4628      	mov	r0, r5
 800829a:	47b8      	blx	r7
 800829c:	3001      	adds	r0, #1
 800829e:	f43f ae3d 	beq.w	8007f1c <_printf_float+0x9c>
 80082a2:	f108 0801 	add.w	r8, r8, #1
 80082a6:	68e3      	ldr	r3, [r4, #12]
 80082a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082aa:	1a5b      	subs	r3, r3, r1
 80082ac:	4543      	cmp	r3, r8
 80082ae:	dcf0      	bgt.n	8008292 <_printf_float+0x412>
 80082b0:	e6f7      	b.n	80080a2 <_printf_float+0x222>
 80082b2:	f04f 0800 	mov.w	r8, #0
 80082b6:	f104 0919 	add.w	r9, r4, #25
 80082ba:	e7f4      	b.n	80082a6 <_printf_float+0x426>

080082bc <_printf_common>:
 80082bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082c0:	4616      	mov	r6, r2
 80082c2:	4699      	mov	r9, r3
 80082c4:	688a      	ldr	r2, [r1, #8]
 80082c6:	690b      	ldr	r3, [r1, #16]
 80082c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082cc:	4293      	cmp	r3, r2
 80082ce:	bfb8      	it	lt
 80082d0:	4613      	movlt	r3, r2
 80082d2:	6033      	str	r3, [r6, #0]
 80082d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082d8:	4607      	mov	r7, r0
 80082da:	460c      	mov	r4, r1
 80082dc:	b10a      	cbz	r2, 80082e2 <_printf_common+0x26>
 80082de:	3301      	adds	r3, #1
 80082e0:	6033      	str	r3, [r6, #0]
 80082e2:	6823      	ldr	r3, [r4, #0]
 80082e4:	0699      	lsls	r1, r3, #26
 80082e6:	bf42      	ittt	mi
 80082e8:	6833      	ldrmi	r3, [r6, #0]
 80082ea:	3302      	addmi	r3, #2
 80082ec:	6033      	strmi	r3, [r6, #0]
 80082ee:	6825      	ldr	r5, [r4, #0]
 80082f0:	f015 0506 	ands.w	r5, r5, #6
 80082f4:	d106      	bne.n	8008304 <_printf_common+0x48>
 80082f6:	f104 0a19 	add.w	sl, r4, #25
 80082fa:	68e3      	ldr	r3, [r4, #12]
 80082fc:	6832      	ldr	r2, [r6, #0]
 80082fe:	1a9b      	subs	r3, r3, r2
 8008300:	42ab      	cmp	r3, r5
 8008302:	dc26      	bgt.n	8008352 <_printf_common+0x96>
 8008304:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008308:	1e13      	subs	r3, r2, #0
 800830a:	6822      	ldr	r2, [r4, #0]
 800830c:	bf18      	it	ne
 800830e:	2301      	movne	r3, #1
 8008310:	0692      	lsls	r2, r2, #26
 8008312:	d42b      	bmi.n	800836c <_printf_common+0xb0>
 8008314:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008318:	4649      	mov	r1, r9
 800831a:	4638      	mov	r0, r7
 800831c:	47c0      	blx	r8
 800831e:	3001      	adds	r0, #1
 8008320:	d01e      	beq.n	8008360 <_printf_common+0xa4>
 8008322:	6823      	ldr	r3, [r4, #0]
 8008324:	68e5      	ldr	r5, [r4, #12]
 8008326:	6832      	ldr	r2, [r6, #0]
 8008328:	f003 0306 	and.w	r3, r3, #6
 800832c:	2b04      	cmp	r3, #4
 800832e:	bf08      	it	eq
 8008330:	1aad      	subeq	r5, r5, r2
 8008332:	68a3      	ldr	r3, [r4, #8]
 8008334:	6922      	ldr	r2, [r4, #16]
 8008336:	bf0c      	ite	eq
 8008338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800833c:	2500      	movne	r5, #0
 800833e:	4293      	cmp	r3, r2
 8008340:	bfc4      	itt	gt
 8008342:	1a9b      	subgt	r3, r3, r2
 8008344:	18ed      	addgt	r5, r5, r3
 8008346:	2600      	movs	r6, #0
 8008348:	341a      	adds	r4, #26
 800834a:	42b5      	cmp	r5, r6
 800834c:	d11a      	bne.n	8008384 <_printf_common+0xc8>
 800834e:	2000      	movs	r0, #0
 8008350:	e008      	b.n	8008364 <_printf_common+0xa8>
 8008352:	2301      	movs	r3, #1
 8008354:	4652      	mov	r2, sl
 8008356:	4649      	mov	r1, r9
 8008358:	4638      	mov	r0, r7
 800835a:	47c0      	blx	r8
 800835c:	3001      	adds	r0, #1
 800835e:	d103      	bne.n	8008368 <_printf_common+0xac>
 8008360:	f04f 30ff 	mov.w	r0, #4294967295
 8008364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008368:	3501      	adds	r5, #1
 800836a:	e7c6      	b.n	80082fa <_printf_common+0x3e>
 800836c:	18e1      	adds	r1, r4, r3
 800836e:	1c5a      	adds	r2, r3, #1
 8008370:	2030      	movs	r0, #48	; 0x30
 8008372:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008376:	4422      	add	r2, r4
 8008378:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800837c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008380:	3302      	adds	r3, #2
 8008382:	e7c7      	b.n	8008314 <_printf_common+0x58>
 8008384:	2301      	movs	r3, #1
 8008386:	4622      	mov	r2, r4
 8008388:	4649      	mov	r1, r9
 800838a:	4638      	mov	r0, r7
 800838c:	47c0      	blx	r8
 800838e:	3001      	adds	r0, #1
 8008390:	d0e6      	beq.n	8008360 <_printf_common+0xa4>
 8008392:	3601      	adds	r6, #1
 8008394:	e7d9      	b.n	800834a <_printf_common+0x8e>
	...

08008398 <_printf_i>:
 8008398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800839c:	7e0f      	ldrb	r7, [r1, #24]
 800839e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80083a0:	2f78      	cmp	r7, #120	; 0x78
 80083a2:	4691      	mov	r9, r2
 80083a4:	4680      	mov	r8, r0
 80083a6:	460c      	mov	r4, r1
 80083a8:	469a      	mov	sl, r3
 80083aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80083ae:	d807      	bhi.n	80083c0 <_printf_i+0x28>
 80083b0:	2f62      	cmp	r7, #98	; 0x62
 80083b2:	d80a      	bhi.n	80083ca <_printf_i+0x32>
 80083b4:	2f00      	cmp	r7, #0
 80083b6:	f000 80d8 	beq.w	800856a <_printf_i+0x1d2>
 80083ba:	2f58      	cmp	r7, #88	; 0x58
 80083bc:	f000 80a3 	beq.w	8008506 <_printf_i+0x16e>
 80083c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083c8:	e03a      	b.n	8008440 <_printf_i+0xa8>
 80083ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083ce:	2b15      	cmp	r3, #21
 80083d0:	d8f6      	bhi.n	80083c0 <_printf_i+0x28>
 80083d2:	a101      	add	r1, pc, #4	; (adr r1, 80083d8 <_printf_i+0x40>)
 80083d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083d8:	08008431 	.word	0x08008431
 80083dc:	08008445 	.word	0x08008445
 80083e0:	080083c1 	.word	0x080083c1
 80083e4:	080083c1 	.word	0x080083c1
 80083e8:	080083c1 	.word	0x080083c1
 80083ec:	080083c1 	.word	0x080083c1
 80083f0:	08008445 	.word	0x08008445
 80083f4:	080083c1 	.word	0x080083c1
 80083f8:	080083c1 	.word	0x080083c1
 80083fc:	080083c1 	.word	0x080083c1
 8008400:	080083c1 	.word	0x080083c1
 8008404:	08008551 	.word	0x08008551
 8008408:	08008475 	.word	0x08008475
 800840c:	08008533 	.word	0x08008533
 8008410:	080083c1 	.word	0x080083c1
 8008414:	080083c1 	.word	0x080083c1
 8008418:	08008573 	.word	0x08008573
 800841c:	080083c1 	.word	0x080083c1
 8008420:	08008475 	.word	0x08008475
 8008424:	080083c1 	.word	0x080083c1
 8008428:	080083c1 	.word	0x080083c1
 800842c:	0800853b 	.word	0x0800853b
 8008430:	682b      	ldr	r3, [r5, #0]
 8008432:	1d1a      	adds	r2, r3, #4
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	602a      	str	r2, [r5, #0]
 8008438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800843c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008440:	2301      	movs	r3, #1
 8008442:	e0a3      	b.n	800858c <_printf_i+0x1f4>
 8008444:	6820      	ldr	r0, [r4, #0]
 8008446:	6829      	ldr	r1, [r5, #0]
 8008448:	0606      	lsls	r6, r0, #24
 800844a:	f101 0304 	add.w	r3, r1, #4
 800844e:	d50a      	bpl.n	8008466 <_printf_i+0xce>
 8008450:	680e      	ldr	r6, [r1, #0]
 8008452:	602b      	str	r3, [r5, #0]
 8008454:	2e00      	cmp	r6, #0
 8008456:	da03      	bge.n	8008460 <_printf_i+0xc8>
 8008458:	232d      	movs	r3, #45	; 0x2d
 800845a:	4276      	negs	r6, r6
 800845c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008460:	485e      	ldr	r0, [pc, #376]	; (80085dc <_printf_i+0x244>)
 8008462:	230a      	movs	r3, #10
 8008464:	e019      	b.n	800849a <_printf_i+0x102>
 8008466:	680e      	ldr	r6, [r1, #0]
 8008468:	602b      	str	r3, [r5, #0]
 800846a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800846e:	bf18      	it	ne
 8008470:	b236      	sxthne	r6, r6
 8008472:	e7ef      	b.n	8008454 <_printf_i+0xbc>
 8008474:	682b      	ldr	r3, [r5, #0]
 8008476:	6820      	ldr	r0, [r4, #0]
 8008478:	1d19      	adds	r1, r3, #4
 800847a:	6029      	str	r1, [r5, #0]
 800847c:	0601      	lsls	r1, r0, #24
 800847e:	d501      	bpl.n	8008484 <_printf_i+0xec>
 8008480:	681e      	ldr	r6, [r3, #0]
 8008482:	e002      	b.n	800848a <_printf_i+0xf2>
 8008484:	0646      	lsls	r6, r0, #25
 8008486:	d5fb      	bpl.n	8008480 <_printf_i+0xe8>
 8008488:	881e      	ldrh	r6, [r3, #0]
 800848a:	4854      	ldr	r0, [pc, #336]	; (80085dc <_printf_i+0x244>)
 800848c:	2f6f      	cmp	r7, #111	; 0x6f
 800848e:	bf0c      	ite	eq
 8008490:	2308      	moveq	r3, #8
 8008492:	230a      	movne	r3, #10
 8008494:	2100      	movs	r1, #0
 8008496:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800849a:	6865      	ldr	r5, [r4, #4]
 800849c:	60a5      	str	r5, [r4, #8]
 800849e:	2d00      	cmp	r5, #0
 80084a0:	bfa2      	ittt	ge
 80084a2:	6821      	ldrge	r1, [r4, #0]
 80084a4:	f021 0104 	bicge.w	r1, r1, #4
 80084a8:	6021      	strge	r1, [r4, #0]
 80084aa:	b90e      	cbnz	r6, 80084b0 <_printf_i+0x118>
 80084ac:	2d00      	cmp	r5, #0
 80084ae:	d04d      	beq.n	800854c <_printf_i+0x1b4>
 80084b0:	4615      	mov	r5, r2
 80084b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80084b6:	fb03 6711 	mls	r7, r3, r1, r6
 80084ba:	5dc7      	ldrb	r7, [r0, r7]
 80084bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80084c0:	4637      	mov	r7, r6
 80084c2:	42bb      	cmp	r3, r7
 80084c4:	460e      	mov	r6, r1
 80084c6:	d9f4      	bls.n	80084b2 <_printf_i+0x11a>
 80084c8:	2b08      	cmp	r3, #8
 80084ca:	d10b      	bne.n	80084e4 <_printf_i+0x14c>
 80084cc:	6823      	ldr	r3, [r4, #0]
 80084ce:	07de      	lsls	r6, r3, #31
 80084d0:	d508      	bpl.n	80084e4 <_printf_i+0x14c>
 80084d2:	6923      	ldr	r3, [r4, #16]
 80084d4:	6861      	ldr	r1, [r4, #4]
 80084d6:	4299      	cmp	r1, r3
 80084d8:	bfde      	ittt	le
 80084da:	2330      	movle	r3, #48	; 0x30
 80084dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80084e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80084e4:	1b52      	subs	r2, r2, r5
 80084e6:	6122      	str	r2, [r4, #16]
 80084e8:	f8cd a000 	str.w	sl, [sp]
 80084ec:	464b      	mov	r3, r9
 80084ee:	aa03      	add	r2, sp, #12
 80084f0:	4621      	mov	r1, r4
 80084f2:	4640      	mov	r0, r8
 80084f4:	f7ff fee2 	bl	80082bc <_printf_common>
 80084f8:	3001      	adds	r0, #1
 80084fa:	d14c      	bne.n	8008596 <_printf_i+0x1fe>
 80084fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008500:	b004      	add	sp, #16
 8008502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008506:	4835      	ldr	r0, [pc, #212]	; (80085dc <_printf_i+0x244>)
 8008508:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800850c:	6829      	ldr	r1, [r5, #0]
 800850e:	6823      	ldr	r3, [r4, #0]
 8008510:	f851 6b04 	ldr.w	r6, [r1], #4
 8008514:	6029      	str	r1, [r5, #0]
 8008516:	061d      	lsls	r5, r3, #24
 8008518:	d514      	bpl.n	8008544 <_printf_i+0x1ac>
 800851a:	07df      	lsls	r7, r3, #31
 800851c:	bf44      	itt	mi
 800851e:	f043 0320 	orrmi.w	r3, r3, #32
 8008522:	6023      	strmi	r3, [r4, #0]
 8008524:	b91e      	cbnz	r6, 800852e <_printf_i+0x196>
 8008526:	6823      	ldr	r3, [r4, #0]
 8008528:	f023 0320 	bic.w	r3, r3, #32
 800852c:	6023      	str	r3, [r4, #0]
 800852e:	2310      	movs	r3, #16
 8008530:	e7b0      	b.n	8008494 <_printf_i+0xfc>
 8008532:	6823      	ldr	r3, [r4, #0]
 8008534:	f043 0320 	orr.w	r3, r3, #32
 8008538:	6023      	str	r3, [r4, #0]
 800853a:	2378      	movs	r3, #120	; 0x78
 800853c:	4828      	ldr	r0, [pc, #160]	; (80085e0 <_printf_i+0x248>)
 800853e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008542:	e7e3      	b.n	800850c <_printf_i+0x174>
 8008544:	0659      	lsls	r1, r3, #25
 8008546:	bf48      	it	mi
 8008548:	b2b6      	uxthmi	r6, r6
 800854a:	e7e6      	b.n	800851a <_printf_i+0x182>
 800854c:	4615      	mov	r5, r2
 800854e:	e7bb      	b.n	80084c8 <_printf_i+0x130>
 8008550:	682b      	ldr	r3, [r5, #0]
 8008552:	6826      	ldr	r6, [r4, #0]
 8008554:	6961      	ldr	r1, [r4, #20]
 8008556:	1d18      	adds	r0, r3, #4
 8008558:	6028      	str	r0, [r5, #0]
 800855a:	0635      	lsls	r5, r6, #24
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	d501      	bpl.n	8008564 <_printf_i+0x1cc>
 8008560:	6019      	str	r1, [r3, #0]
 8008562:	e002      	b.n	800856a <_printf_i+0x1d2>
 8008564:	0670      	lsls	r0, r6, #25
 8008566:	d5fb      	bpl.n	8008560 <_printf_i+0x1c8>
 8008568:	8019      	strh	r1, [r3, #0]
 800856a:	2300      	movs	r3, #0
 800856c:	6123      	str	r3, [r4, #16]
 800856e:	4615      	mov	r5, r2
 8008570:	e7ba      	b.n	80084e8 <_printf_i+0x150>
 8008572:	682b      	ldr	r3, [r5, #0]
 8008574:	1d1a      	adds	r2, r3, #4
 8008576:	602a      	str	r2, [r5, #0]
 8008578:	681d      	ldr	r5, [r3, #0]
 800857a:	6862      	ldr	r2, [r4, #4]
 800857c:	2100      	movs	r1, #0
 800857e:	4628      	mov	r0, r5
 8008580:	f7f7 fe66 	bl	8000250 <memchr>
 8008584:	b108      	cbz	r0, 800858a <_printf_i+0x1f2>
 8008586:	1b40      	subs	r0, r0, r5
 8008588:	6060      	str	r0, [r4, #4]
 800858a:	6863      	ldr	r3, [r4, #4]
 800858c:	6123      	str	r3, [r4, #16]
 800858e:	2300      	movs	r3, #0
 8008590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008594:	e7a8      	b.n	80084e8 <_printf_i+0x150>
 8008596:	6923      	ldr	r3, [r4, #16]
 8008598:	462a      	mov	r2, r5
 800859a:	4649      	mov	r1, r9
 800859c:	4640      	mov	r0, r8
 800859e:	47d0      	blx	sl
 80085a0:	3001      	adds	r0, #1
 80085a2:	d0ab      	beq.n	80084fc <_printf_i+0x164>
 80085a4:	6823      	ldr	r3, [r4, #0]
 80085a6:	079b      	lsls	r3, r3, #30
 80085a8:	d413      	bmi.n	80085d2 <_printf_i+0x23a>
 80085aa:	68e0      	ldr	r0, [r4, #12]
 80085ac:	9b03      	ldr	r3, [sp, #12]
 80085ae:	4298      	cmp	r0, r3
 80085b0:	bfb8      	it	lt
 80085b2:	4618      	movlt	r0, r3
 80085b4:	e7a4      	b.n	8008500 <_printf_i+0x168>
 80085b6:	2301      	movs	r3, #1
 80085b8:	4632      	mov	r2, r6
 80085ba:	4649      	mov	r1, r9
 80085bc:	4640      	mov	r0, r8
 80085be:	47d0      	blx	sl
 80085c0:	3001      	adds	r0, #1
 80085c2:	d09b      	beq.n	80084fc <_printf_i+0x164>
 80085c4:	3501      	adds	r5, #1
 80085c6:	68e3      	ldr	r3, [r4, #12]
 80085c8:	9903      	ldr	r1, [sp, #12]
 80085ca:	1a5b      	subs	r3, r3, r1
 80085cc:	42ab      	cmp	r3, r5
 80085ce:	dcf2      	bgt.n	80085b6 <_printf_i+0x21e>
 80085d0:	e7eb      	b.n	80085aa <_printf_i+0x212>
 80085d2:	2500      	movs	r5, #0
 80085d4:	f104 0619 	add.w	r6, r4, #25
 80085d8:	e7f5      	b.n	80085c6 <_printf_i+0x22e>
 80085da:	bf00      	nop
 80085dc:	0800c482 	.word	0x0800c482
 80085e0:	0800c493 	.word	0x0800c493

080085e4 <_scanf_float>:
 80085e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e8:	b087      	sub	sp, #28
 80085ea:	4617      	mov	r7, r2
 80085ec:	9303      	str	r3, [sp, #12]
 80085ee:	688b      	ldr	r3, [r1, #8]
 80085f0:	1e5a      	subs	r2, r3, #1
 80085f2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80085f6:	bf83      	ittte	hi
 80085f8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80085fc:	195b      	addhi	r3, r3, r5
 80085fe:	9302      	strhi	r3, [sp, #8]
 8008600:	2300      	movls	r3, #0
 8008602:	bf86      	itte	hi
 8008604:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008608:	608b      	strhi	r3, [r1, #8]
 800860a:	9302      	strls	r3, [sp, #8]
 800860c:	680b      	ldr	r3, [r1, #0]
 800860e:	468b      	mov	fp, r1
 8008610:	2500      	movs	r5, #0
 8008612:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008616:	f84b 3b1c 	str.w	r3, [fp], #28
 800861a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800861e:	4680      	mov	r8, r0
 8008620:	460c      	mov	r4, r1
 8008622:	465e      	mov	r6, fp
 8008624:	46aa      	mov	sl, r5
 8008626:	46a9      	mov	r9, r5
 8008628:	9501      	str	r5, [sp, #4]
 800862a:	68a2      	ldr	r2, [r4, #8]
 800862c:	b152      	cbz	r2, 8008644 <_scanf_float+0x60>
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	2b4e      	cmp	r3, #78	; 0x4e
 8008634:	d864      	bhi.n	8008700 <_scanf_float+0x11c>
 8008636:	2b40      	cmp	r3, #64	; 0x40
 8008638:	d83c      	bhi.n	80086b4 <_scanf_float+0xd0>
 800863a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800863e:	b2c8      	uxtb	r0, r1
 8008640:	280e      	cmp	r0, #14
 8008642:	d93a      	bls.n	80086ba <_scanf_float+0xd6>
 8008644:	f1b9 0f00 	cmp.w	r9, #0
 8008648:	d003      	beq.n	8008652 <_scanf_float+0x6e>
 800864a:	6823      	ldr	r3, [r4, #0]
 800864c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008650:	6023      	str	r3, [r4, #0]
 8008652:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008656:	f1ba 0f01 	cmp.w	sl, #1
 800865a:	f200 8113 	bhi.w	8008884 <_scanf_float+0x2a0>
 800865e:	455e      	cmp	r6, fp
 8008660:	f200 8105 	bhi.w	800886e <_scanf_float+0x28a>
 8008664:	2501      	movs	r5, #1
 8008666:	4628      	mov	r0, r5
 8008668:	b007      	add	sp, #28
 800866a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800866e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008672:	2a0d      	cmp	r2, #13
 8008674:	d8e6      	bhi.n	8008644 <_scanf_float+0x60>
 8008676:	a101      	add	r1, pc, #4	; (adr r1, 800867c <_scanf_float+0x98>)
 8008678:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800867c:	080087bb 	.word	0x080087bb
 8008680:	08008645 	.word	0x08008645
 8008684:	08008645 	.word	0x08008645
 8008688:	08008645 	.word	0x08008645
 800868c:	0800881b 	.word	0x0800881b
 8008690:	080087f3 	.word	0x080087f3
 8008694:	08008645 	.word	0x08008645
 8008698:	08008645 	.word	0x08008645
 800869c:	080087c9 	.word	0x080087c9
 80086a0:	08008645 	.word	0x08008645
 80086a4:	08008645 	.word	0x08008645
 80086a8:	08008645 	.word	0x08008645
 80086ac:	08008645 	.word	0x08008645
 80086b0:	08008781 	.word	0x08008781
 80086b4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80086b8:	e7db      	b.n	8008672 <_scanf_float+0x8e>
 80086ba:	290e      	cmp	r1, #14
 80086bc:	d8c2      	bhi.n	8008644 <_scanf_float+0x60>
 80086be:	a001      	add	r0, pc, #4	; (adr r0, 80086c4 <_scanf_float+0xe0>)
 80086c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80086c4:	08008773 	.word	0x08008773
 80086c8:	08008645 	.word	0x08008645
 80086cc:	08008773 	.word	0x08008773
 80086d0:	08008807 	.word	0x08008807
 80086d4:	08008645 	.word	0x08008645
 80086d8:	08008721 	.word	0x08008721
 80086dc:	0800875d 	.word	0x0800875d
 80086e0:	0800875d 	.word	0x0800875d
 80086e4:	0800875d 	.word	0x0800875d
 80086e8:	0800875d 	.word	0x0800875d
 80086ec:	0800875d 	.word	0x0800875d
 80086f0:	0800875d 	.word	0x0800875d
 80086f4:	0800875d 	.word	0x0800875d
 80086f8:	0800875d 	.word	0x0800875d
 80086fc:	0800875d 	.word	0x0800875d
 8008700:	2b6e      	cmp	r3, #110	; 0x6e
 8008702:	d809      	bhi.n	8008718 <_scanf_float+0x134>
 8008704:	2b60      	cmp	r3, #96	; 0x60
 8008706:	d8b2      	bhi.n	800866e <_scanf_float+0x8a>
 8008708:	2b54      	cmp	r3, #84	; 0x54
 800870a:	d077      	beq.n	80087fc <_scanf_float+0x218>
 800870c:	2b59      	cmp	r3, #89	; 0x59
 800870e:	d199      	bne.n	8008644 <_scanf_float+0x60>
 8008710:	2d07      	cmp	r5, #7
 8008712:	d197      	bne.n	8008644 <_scanf_float+0x60>
 8008714:	2508      	movs	r5, #8
 8008716:	e029      	b.n	800876c <_scanf_float+0x188>
 8008718:	2b74      	cmp	r3, #116	; 0x74
 800871a:	d06f      	beq.n	80087fc <_scanf_float+0x218>
 800871c:	2b79      	cmp	r3, #121	; 0x79
 800871e:	e7f6      	b.n	800870e <_scanf_float+0x12a>
 8008720:	6821      	ldr	r1, [r4, #0]
 8008722:	05c8      	lsls	r0, r1, #23
 8008724:	d51a      	bpl.n	800875c <_scanf_float+0x178>
 8008726:	9b02      	ldr	r3, [sp, #8]
 8008728:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800872c:	6021      	str	r1, [r4, #0]
 800872e:	f109 0901 	add.w	r9, r9, #1
 8008732:	b11b      	cbz	r3, 800873c <_scanf_float+0x158>
 8008734:	3b01      	subs	r3, #1
 8008736:	3201      	adds	r2, #1
 8008738:	9302      	str	r3, [sp, #8]
 800873a:	60a2      	str	r2, [r4, #8]
 800873c:	68a3      	ldr	r3, [r4, #8]
 800873e:	3b01      	subs	r3, #1
 8008740:	60a3      	str	r3, [r4, #8]
 8008742:	6923      	ldr	r3, [r4, #16]
 8008744:	3301      	adds	r3, #1
 8008746:	6123      	str	r3, [r4, #16]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	3b01      	subs	r3, #1
 800874c:	2b00      	cmp	r3, #0
 800874e:	607b      	str	r3, [r7, #4]
 8008750:	f340 8084 	ble.w	800885c <_scanf_float+0x278>
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	3301      	adds	r3, #1
 8008758:	603b      	str	r3, [r7, #0]
 800875a:	e766      	b.n	800862a <_scanf_float+0x46>
 800875c:	eb1a 0f05 	cmn.w	sl, r5
 8008760:	f47f af70 	bne.w	8008644 <_scanf_float+0x60>
 8008764:	6822      	ldr	r2, [r4, #0]
 8008766:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800876a:	6022      	str	r2, [r4, #0]
 800876c:	f806 3b01 	strb.w	r3, [r6], #1
 8008770:	e7e4      	b.n	800873c <_scanf_float+0x158>
 8008772:	6822      	ldr	r2, [r4, #0]
 8008774:	0610      	lsls	r0, r2, #24
 8008776:	f57f af65 	bpl.w	8008644 <_scanf_float+0x60>
 800877a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800877e:	e7f4      	b.n	800876a <_scanf_float+0x186>
 8008780:	f1ba 0f00 	cmp.w	sl, #0
 8008784:	d10e      	bne.n	80087a4 <_scanf_float+0x1c0>
 8008786:	f1b9 0f00 	cmp.w	r9, #0
 800878a:	d10e      	bne.n	80087aa <_scanf_float+0x1c6>
 800878c:	6822      	ldr	r2, [r4, #0]
 800878e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008792:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008796:	d108      	bne.n	80087aa <_scanf_float+0x1c6>
 8008798:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800879c:	6022      	str	r2, [r4, #0]
 800879e:	f04f 0a01 	mov.w	sl, #1
 80087a2:	e7e3      	b.n	800876c <_scanf_float+0x188>
 80087a4:	f1ba 0f02 	cmp.w	sl, #2
 80087a8:	d055      	beq.n	8008856 <_scanf_float+0x272>
 80087aa:	2d01      	cmp	r5, #1
 80087ac:	d002      	beq.n	80087b4 <_scanf_float+0x1d0>
 80087ae:	2d04      	cmp	r5, #4
 80087b0:	f47f af48 	bne.w	8008644 <_scanf_float+0x60>
 80087b4:	3501      	adds	r5, #1
 80087b6:	b2ed      	uxtb	r5, r5
 80087b8:	e7d8      	b.n	800876c <_scanf_float+0x188>
 80087ba:	f1ba 0f01 	cmp.w	sl, #1
 80087be:	f47f af41 	bne.w	8008644 <_scanf_float+0x60>
 80087c2:	f04f 0a02 	mov.w	sl, #2
 80087c6:	e7d1      	b.n	800876c <_scanf_float+0x188>
 80087c8:	b97d      	cbnz	r5, 80087ea <_scanf_float+0x206>
 80087ca:	f1b9 0f00 	cmp.w	r9, #0
 80087ce:	f47f af3c 	bne.w	800864a <_scanf_float+0x66>
 80087d2:	6822      	ldr	r2, [r4, #0]
 80087d4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80087d8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80087dc:	f47f af39 	bne.w	8008652 <_scanf_float+0x6e>
 80087e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80087e4:	6022      	str	r2, [r4, #0]
 80087e6:	2501      	movs	r5, #1
 80087e8:	e7c0      	b.n	800876c <_scanf_float+0x188>
 80087ea:	2d03      	cmp	r5, #3
 80087ec:	d0e2      	beq.n	80087b4 <_scanf_float+0x1d0>
 80087ee:	2d05      	cmp	r5, #5
 80087f0:	e7de      	b.n	80087b0 <_scanf_float+0x1cc>
 80087f2:	2d02      	cmp	r5, #2
 80087f4:	f47f af26 	bne.w	8008644 <_scanf_float+0x60>
 80087f8:	2503      	movs	r5, #3
 80087fa:	e7b7      	b.n	800876c <_scanf_float+0x188>
 80087fc:	2d06      	cmp	r5, #6
 80087fe:	f47f af21 	bne.w	8008644 <_scanf_float+0x60>
 8008802:	2507      	movs	r5, #7
 8008804:	e7b2      	b.n	800876c <_scanf_float+0x188>
 8008806:	6822      	ldr	r2, [r4, #0]
 8008808:	0591      	lsls	r1, r2, #22
 800880a:	f57f af1b 	bpl.w	8008644 <_scanf_float+0x60>
 800880e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008812:	6022      	str	r2, [r4, #0]
 8008814:	f8cd 9004 	str.w	r9, [sp, #4]
 8008818:	e7a8      	b.n	800876c <_scanf_float+0x188>
 800881a:	6822      	ldr	r2, [r4, #0]
 800881c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008820:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008824:	d006      	beq.n	8008834 <_scanf_float+0x250>
 8008826:	0550      	lsls	r0, r2, #21
 8008828:	f57f af0c 	bpl.w	8008644 <_scanf_float+0x60>
 800882c:	f1b9 0f00 	cmp.w	r9, #0
 8008830:	f43f af0f 	beq.w	8008652 <_scanf_float+0x6e>
 8008834:	0591      	lsls	r1, r2, #22
 8008836:	bf58      	it	pl
 8008838:	9901      	ldrpl	r1, [sp, #4]
 800883a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800883e:	bf58      	it	pl
 8008840:	eba9 0101 	subpl.w	r1, r9, r1
 8008844:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008848:	bf58      	it	pl
 800884a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800884e:	6022      	str	r2, [r4, #0]
 8008850:	f04f 0900 	mov.w	r9, #0
 8008854:	e78a      	b.n	800876c <_scanf_float+0x188>
 8008856:	f04f 0a03 	mov.w	sl, #3
 800885a:	e787      	b.n	800876c <_scanf_float+0x188>
 800885c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008860:	4639      	mov	r1, r7
 8008862:	4640      	mov	r0, r8
 8008864:	4798      	blx	r3
 8008866:	2800      	cmp	r0, #0
 8008868:	f43f aedf 	beq.w	800862a <_scanf_float+0x46>
 800886c:	e6ea      	b.n	8008644 <_scanf_float+0x60>
 800886e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008872:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008876:	463a      	mov	r2, r7
 8008878:	4640      	mov	r0, r8
 800887a:	4798      	blx	r3
 800887c:	6923      	ldr	r3, [r4, #16]
 800887e:	3b01      	subs	r3, #1
 8008880:	6123      	str	r3, [r4, #16]
 8008882:	e6ec      	b.n	800865e <_scanf_float+0x7a>
 8008884:	1e6b      	subs	r3, r5, #1
 8008886:	2b06      	cmp	r3, #6
 8008888:	d825      	bhi.n	80088d6 <_scanf_float+0x2f2>
 800888a:	2d02      	cmp	r5, #2
 800888c:	d836      	bhi.n	80088fc <_scanf_float+0x318>
 800888e:	455e      	cmp	r6, fp
 8008890:	f67f aee8 	bls.w	8008664 <_scanf_float+0x80>
 8008894:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008898:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800889c:	463a      	mov	r2, r7
 800889e:	4640      	mov	r0, r8
 80088a0:	4798      	blx	r3
 80088a2:	6923      	ldr	r3, [r4, #16]
 80088a4:	3b01      	subs	r3, #1
 80088a6:	6123      	str	r3, [r4, #16]
 80088a8:	e7f1      	b.n	800888e <_scanf_float+0x2aa>
 80088aa:	9802      	ldr	r0, [sp, #8]
 80088ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088b0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80088b4:	9002      	str	r0, [sp, #8]
 80088b6:	463a      	mov	r2, r7
 80088b8:	4640      	mov	r0, r8
 80088ba:	4798      	blx	r3
 80088bc:	6923      	ldr	r3, [r4, #16]
 80088be:	3b01      	subs	r3, #1
 80088c0:	6123      	str	r3, [r4, #16]
 80088c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088c6:	fa5f fa8a 	uxtb.w	sl, sl
 80088ca:	f1ba 0f02 	cmp.w	sl, #2
 80088ce:	d1ec      	bne.n	80088aa <_scanf_float+0x2c6>
 80088d0:	3d03      	subs	r5, #3
 80088d2:	b2ed      	uxtb	r5, r5
 80088d4:	1b76      	subs	r6, r6, r5
 80088d6:	6823      	ldr	r3, [r4, #0]
 80088d8:	05da      	lsls	r2, r3, #23
 80088da:	d52f      	bpl.n	800893c <_scanf_float+0x358>
 80088dc:	055b      	lsls	r3, r3, #21
 80088de:	d510      	bpl.n	8008902 <_scanf_float+0x31e>
 80088e0:	455e      	cmp	r6, fp
 80088e2:	f67f aebf 	bls.w	8008664 <_scanf_float+0x80>
 80088e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088ee:	463a      	mov	r2, r7
 80088f0:	4640      	mov	r0, r8
 80088f2:	4798      	blx	r3
 80088f4:	6923      	ldr	r3, [r4, #16]
 80088f6:	3b01      	subs	r3, #1
 80088f8:	6123      	str	r3, [r4, #16]
 80088fa:	e7f1      	b.n	80088e0 <_scanf_float+0x2fc>
 80088fc:	46aa      	mov	sl, r5
 80088fe:	9602      	str	r6, [sp, #8]
 8008900:	e7df      	b.n	80088c2 <_scanf_float+0x2de>
 8008902:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008906:	6923      	ldr	r3, [r4, #16]
 8008908:	2965      	cmp	r1, #101	; 0x65
 800890a:	f103 33ff 	add.w	r3, r3, #4294967295
 800890e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008912:	6123      	str	r3, [r4, #16]
 8008914:	d00c      	beq.n	8008930 <_scanf_float+0x34c>
 8008916:	2945      	cmp	r1, #69	; 0x45
 8008918:	d00a      	beq.n	8008930 <_scanf_float+0x34c>
 800891a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800891e:	463a      	mov	r2, r7
 8008920:	4640      	mov	r0, r8
 8008922:	4798      	blx	r3
 8008924:	6923      	ldr	r3, [r4, #16]
 8008926:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800892a:	3b01      	subs	r3, #1
 800892c:	1eb5      	subs	r5, r6, #2
 800892e:	6123      	str	r3, [r4, #16]
 8008930:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008934:	463a      	mov	r2, r7
 8008936:	4640      	mov	r0, r8
 8008938:	4798      	blx	r3
 800893a:	462e      	mov	r6, r5
 800893c:	6825      	ldr	r5, [r4, #0]
 800893e:	f015 0510 	ands.w	r5, r5, #16
 8008942:	d14e      	bne.n	80089e2 <_scanf_float+0x3fe>
 8008944:	7035      	strb	r5, [r6, #0]
 8008946:	6823      	ldr	r3, [r4, #0]
 8008948:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800894c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008950:	d119      	bne.n	8008986 <_scanf_float+0x3a2>
 8008952:	9b01      	ldr	r3, [sp, #4]
 8008954:	454b      	cmp	r3, r9
 8008956:	eba3 0209 	sub.w	r2, r3, r9
 800895a:	d121      	bne.n	80089a0 <_scanf_float+0x3bc>
 800895c:	2200      	movs	r2, #0
 800895e:	4659      	mov	r1, fp
 8008960:	4640      	mov	r0, r8
 8008962:	f000 fe3b 	bl	80095dc <_strtod_r>
 8008966:	6822      	ldr	r2, [r4, #0]
 8008968:	9b03      	ldr	r3, [sp, #12]
 800896a:	f012 0f02 	tst.w	r2, #2
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	d021      	beq.n	80089b6 <_scanf_float+0x3d2>
 8008972:	9903      	ldr	r1, [sp, #12]
 8008974:	1d1a      	adds	r2, r3, #4
 8008976:	600a      	str	r2, [r1, #0]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	ed83 0b00 	vstr	d0, [r3]
 800897e:	68e3      	ldr	r3, [r4, #12]
 8008980:	3301      	adds	r3, #1
 8008982:	60e3      	str	r3, [r4, #12]
 8008984:	e66f      	b.n	8008666 <_scanf_float+0x82>
 8008986:	9b04      	ldr	r3, [sp, #16]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d0e7      	beq.n	800895c <_scanf_float+0x378>
 800898c:	9905      	ldr	r1, [sp, #20]
 800898e:	230a      	movs	r3, #10
 8008990:	462a      	mov	r2, r5
 8008992:	3101      	adds	r1, #1
 8008994:	4640      	mov	r0, r8
 8008996:	f000 fea9 	bl	80096ec <_strtol_r>
 800899a:	9b04      	ldr	r3, [sp, #16]
 800899c:	9e05      	ldr	r6, [sp, #20]
 800899e:	1ac2      	subs	r2, r0, r3
 80089a0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80089a4:	429e      	cmp	r6, r3
 80089a6:	bf28      	it	cs
 80089a8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80089ac:	490e      	ldr	r1, [pc, #56]	; (80089e8 <_scanf_float+0x404>)
 80089ae:	4630      	mov	r0, r6
 80089b0:	f000 f824 	bl	80089fc <siprintf>
 80089b4:	e7d2      	b.n	800895c <_scanf_float+0x378>
 80089b6:	9903      	ldr	r1, [sp, #12]
 80089b8:	f012 0f04 	tst.w	r2, #4
 80089bc:	f103 0204 	add.w	r2, r3, #4
 80089c0:	600a      	str	r2, [r1, #0]
 80089c2:	d1d9      	bne.n	8008978 <_scanf_float+0x394>
 80089c4:	eeb4 0b40 	vcmp.f64	d0, d0
 80089c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089cc:	681e      	ldr	r6, [r3, #0]
 80089ce:	d705      	bvc.n	80089dc <_scanf_float+0x3f8>
 80089d0:	4806      	ldr	r0, [pc, #24]	; (80089ec <_scanf_float+0x408>)
 80089d2:	f000 f80d 	bl	80089f0 <nanf>
 80089d6:	ed86 0a00 	vstr	s0, [r6]
 80089da:	e7d0      	b.n	800897e <_scanf_float+0x39a>
 80089dc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80089e0:	e7f9      	b.n	80089d6 <_scanf_float+0x3f2>
 80089e2:	2500      	movs	r5, #0
 80089e4:	e63f      	b.n	8008666 <_scanf_float+0x82>
 80089e6:	bf00      	nop
 80089e8:	0800c4a4 	.word	0x0800c4a4
 80089ec:	0800c8b0 	.word	0x0800c8b0

080089f0 <nanf>:
 80089f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80089f8 <nanf+0x8>
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	7fc00000 	.word	0x7fc00000

080089fc <siprintf>:
 80089fc:	b40e      	push	{r1, r2, r3}
 80089fe:	b500      	push	{lr}
 8008a00:	b09c      	sub	sp, #112	; 0x70
 8008a02:	ab1d      	add	r3, sp, #116	; 0x74
 8008a04:	9002      	str	r0, [sp, #8]
 8008a06:	9006      	str	r0, [sp, #24]
 8008a08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a0c:	4809      	ldr	r0, [pc, #36]	; (8008a34 <siprintf+0x38>)
 8008a0e:	9107      	str	r1, [sp, #28]
 8008a10:	9104      	str	r1, [sp, #16]
 8008a12:	4909      	ldr	r1, [pc, #36]	; (8008a38 <siprintf+0x3c>)
 8008a14:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a18:	9105      	str	r1, [sp, #20]
 8008a1a:	6800      	ldr	r0, [r0, #0]
 8008a1c:	9301      	str	r3, [sp, #4]
 8008a1e:	a902      	add	r1, sp, #8
 8008a20:	f002 fe0c 	bl	800b63c <_svfiprintf_r>
 8008a24:	9b02      	ldr	r3, [sp, #8]
 8008a26:	2200      	movs	r2, #0
 8008a28:	701a      	strb	r2, [r3, #0]
 8008a2a:	b01c      	add	sp, #112	; 0x70
 8008a2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a30:	b003      	add	sp, #12
 8008a32:	4770      	bx	lr
 8008a34:	20000014 	.word	0x20000014
 8008a38:	ffff0208 	.word	0xffff0208

08008a3c <sulp>:
 8008a3c:	b570      	push	{r4, r5, r6, lr}
 8008a3e:	4604      	mov	r4, r0
 8008a40:	460d      	mov	r5, r1
 8008a42:	4616      	mov	r6, r2
 8008a44:	ec45 4b10 	vmov	d0, r4, r5
 8008a48:	f002 fb5a 	bl	800b100 <__ulp>
 8008a4c:	b17e      	cbz	r6, 8008a6e <sulp+0x32>
 8008a4e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008a52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	dd09      	ble.n	8008a6e <sulp+0x32>
 8008a5a:	051b      	lsls	r3, r3, #20
 8008a5c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8008a60:	2000      	movs	r0, #0
 8008a62:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8008a66:	ec41 0b17 	vmov	d7, r0, r1
 8008a6a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008a6e:	bd70      	pop	{r4, r5, r6, pc}

08008a70 <_strtod_l>:
 8008a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a74:	ed2d 8b0e 	vpush	{d8-d14}
 8008a78:	b097      	sub	sp, #92	; 0x5c
 8008a7a:	461f      	mov	r7, r3
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	9312      	str	r3, [sp, #72]	; 0x48
 8008a80:	4ba1      	ldr	r3, [pc, #644]	; (8008d08 <_strtod_l+0x298>)
 8008a82:	920d      	str	r2, [sp, #52]	; 0x34
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	9307      	str	r3, [sp, #28]
 8008a88:	4604      	mov	r4, r0
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	468b      	mov	fp, r1
 8008a8e:	f7f7 fbd7 	bl	8000240 <strlen>
 8008a92:	f04f 0800 	mov.w	r8, #0
 8008a96:	4605      	mov	r5, r0
 8008a98:	f04f 0900 	mov.w	r9, #0
 8008a9c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008aa0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008aa2:	7813      	ldrb	r3, [r2, #0]
 8008aa4:	2b2b      	cmp	r3, #43	; 0x2b
 8008aa6:	d04d      	beq.n	8008b44 <_strtod_l+0xd4>
 8008aa8:	d83a      	bhi.n	8008b20 <_strtod_l+0xb0>
 8008aaa:	2b0d      	cmp	r3, #13
 8008aac:	d833      	bhi.n	8008b16 <_strtod_l+0xa6>
 8008aae:	2b08      	cmp	r3, #8
 8008ab0:	d833      	bhi.n	8008b1a <_strtod_l+0xaa>
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d03d      	beq.n	8008b32 <_strtod_l+0xc2>
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	9308      	str	r3, [sp, #32]
 8008aba:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8008abc:	7833      	ldrb	r3, [r6, #0]
 8008abe:	2b30      	cmp	r3, #48	; 0x30
 8008ac0:	f040 80b0 	bne.w	8008c24 <_strtod_l+0x1b4>
 8008ac4:	7873      	ldrb	r3, [r6, #1]
 8008ac6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008aca:	2b58      	cmp	r3, #88	; 0x58
 8008acc:	d167      	bne.n	8008b9e <_strtod_l+0x12e>
 8008ace:	9b08      	ldr	r3, [sp, #32]
 8008ad0:	9301      	str	r3, [sp, #4]
 8008ad2:	ab12      	add	r3, sp, #72	; 0x48
 8008ad4:	9702      	str	r7, [sp, #8]
 8008ad6:	9300      	str	r3, [sp, #0]
 8008ad8:	4a8c      	ldr	r2, [pc, #560]	; (8008d0c <_strtod_l+0x29c>)
 8008ada:	ab13      	add	r3, sp, #76	; 0x4c
 8008adc:	a911      	add	r1, sp, #68	; 0x44
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f001 fc68 	bl	800a3b4 <__gethex>
 8008ae4:	f010 0507 	ands.w	r5, r0, #7
 8008ae8:	4607      	mov	r7, r0
 8008aea:	d005      	beq.n	8008af8 <_strtod_l+0x88>
 8008aec:	2d06      	cmp	r5, #6
 8008aee:	d12b      	bne.n	8008b48 <_strtod_l+0xd8>
 8008af0:	3601      	adds	r6, #1
 8008af2:	2300      	movs	r3, #0
 8008af4:	9611      	str	r6, [sp, #68]	; 0x44
 8008af6:	9308      	str	r3, [sp, #32]
 8008af8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f040 854e 	bne.w	800959c <_strtod_l+0xb2c>
 8008b00:	9b08      	ldr	r3, [sp, #32]
 8008b02:	b1e3      	cbz	r3, 8008b3e <_strtod_l+0xce>
 8008b04:	ec49 8b17 	vmov	d7, r8, r9
 8008b08:	eeb1 0b47 	vneg.f64	d0, d7
 8008b0c:	b017      	add	sp, #92	; 0x5c
 8008b0e:	ecbd 8b0e 	vpop	{d8-d14}
 8008b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b16:	2b20      	cmp	r3, #32
 8008b18:	d1cd      	bne.n	8008ab6 <_strtod_l+0x46>
 8008b1a:	3201      	adds	r2, #1
 8008b1c:	9211      	str	r2, [sp, #68]	; 0x44
 8008b1e:	e7bf      	b.n	8008aa0 <_strtod_l+0x30>
 8008b20:	2b2d      	cmp	r3, #45	; 0x2d
 8008b22:	d1c8      	bne.n	8008ab6 <_strtod_l+0x46>
 8008b24:	2301      	movs	r3, #1
 8008b26:	9308      	str	r3, [sp, #32]
 8008b28:	1c53      	adds	r3, r2, #1
 8008b2a:	9311      	str	r3, [sp, #68]	; 0x44
 8008b2c:	7853      	ldrb	r3, [r2, #1]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d1c3      	bne.n	8008aba <_strtod_l+0x4a>
 8008b32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b34:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f040 852d 	bne.w	8009598 <_strtod_l+0xb28>
 8008b3e:	ec49 8b10 	vmov	d0, r8, r9
 8008b42:	e7e3      	b.n	8008b0c <_strtod_l+0x9c>
 8008b44:	2300      	movs	r3, #0
 8008b46:	e7ee      	b.n	8008b26 <_strtod_l+0xb6>
 8008b48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b4a:	b13a      	cbz	r2, 8008b5c <_strtod_l+0xec>
 8008b4c:	2135      	movs	r1, #53	; 0x35
 8008b4e:	a814      	add	r0, sp, #80	; 0x50
 8008b50:	f002 fbde 	bl	800b310 <__copybits>
 8008b54:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008b56:	4620      	mov	r0, r4
 8008b58:	f001 ffa0 	bl	800aa9c <_Bfree>
 8008b5c:	3d01      	subs	r5, #1
 8008b5e:	2d04      	cmp	r5, #4
 8008b60:	d806      	bhi.n	8008b70 <_strtod_l+0x100>
 8008b62:	e8df f005 	tbb	[pc, r5]
 8008b66:	030a      	.short	0x030a
 8008b68:	1714      	.short	0x1714
 8008b6a:	0a          	.byte	0x0a
 8008b6b:	00          	.byte	0x00
 8008b6c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8008b70:	073f      	lsls	r7, r7, #28
 8008b72:	d5c1      	bpl.n	8008af8 <_strtod_l+0x88>
 8008b74:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008b78:	e7be      	b.n	8008af8 <_strtod_l+0x88>
 8008b7a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8008b7e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008b80:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008b84:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008b88:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008b8c:	e7f0      	b.n	8008b70 <_strtod_l+0x100>
 8008b8e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8008d10 <_strtod_l+0x2a0>
 8008b92:	e7ed      	b.n	8008b70 <_strtod_l+0x100>
 8008b94:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008b98:	f04f 38ff 	mov.w	r8, #4294967295
 8008b9c:	e7e8      	b.n	8008b70 <_strtod_l+0x100>
 8008b9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ba0:	1c5a      	adds	r2, r3, #1
 8008ba2:	9211      	str	r2, [sp, #68]	; 0x44
 8008ba4:	785b      	ldrb	r3, [r3, #1]
 8008ba6:	2b30      	cmp	r3, #48	; 0x30
 8008ba8:	d0f9      	beq.n	8008b9e <_strtod_l+0x12e>
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d0a4      	beq.n	8008af8 <_strtod_l+0x88>
 8008bae:	2301      	movs	r3, #1
 8008bb0:	f04f 0a00 	mov.w	sl, #0
 8008bb4:	9304      	str	r3, [sp, #16]
 8008bb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008bb8:	930a      	str	r3, [sp, #40]	; 0x28
 8008bba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008bbe:	f8cd a018 	str.w	sl, [sp, #24]
 8008bc2:	220a      	movs	r2, #10
 8008bc4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008bc6:	7807      	ldrb	r7, [r0, #0]
 8008bc8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008bcc:	b2d9      	uxtb	r1, r3
 8008bce:	2909      	cmp	r1, #9
 8008bd0:	d92a      	bls.n	8008c28 <_strtod_l+0x1b8>
 8008bd2:	9907      	ldr	r1, [sp, #28]
 8008bd4:	462a      	mov	r2, r5
 8008bd6:	f002 fe4b 	bl	800b870 <strncmp>
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	d033      	beq.n	8008c46 <_strtod_l+0x1d6>
 8008bde:	2000      	movs	r0, #0
 8008be0:	9b06      	ldr	r3, [sp, #24]
 8008be2:	463a      	mov	r2, r7
 8008be4:	4601      	mov	r1, r0
 8008be6:	4607      	mov	r7, r0
 8008be8:	2a65      	cmp	r2, #101	; 0x65
 8008bea:	d001      	beq.n	8008bf0 <_strtod_l+0x180>
 8008bec:	2a45      	cmp	r2, #69	; 0x45
 8008bee:	d117      	bne.n	8008c20 <_strtod_l+0x1b0>
 8008bf0:	b91b      	cbnz	r3, 8008bfa <_strtod_l+0x18a>
 8008bf2:	9b04      	ldr	r3, [sp, #16]
 8008bf4:	4303      	orrs	r3, r0
 8008bf6:	d09c      	beq.n	8008b32 <_strtod_l+0xc2>
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8008bfe:	f10b 0201 	add.w	r2, fp, #1
 8008c02:	9211      	str	r2, [sp, #68]	; 0x44
 8008c04:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8008c08:	2a2b      	cmp	r2, #43	; 0x2b
 8008c0a:	d071      	beq.n	8008cf0 <_strtod_l+0x280>
 8008c0c:	2a2d      	cmp	r2, #45	; 0x2d
 8008c0e:	d077      	beq.n	8008d00 <_strtod_l+0x290>
 8008c10:	f04f 0e00 	mov.w	lr, #0
 8008c14:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008c18:	2d09      	cmp	r5, #9
 8008c1a:	d97f      	bls.n	8008d1c <_strtod_l+0x2ac>
 8008c1c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008c20:	2500      	movs	r5, #0
 8008c22:	e09b      	b.n	8008d5c <_strtod_l+0x2ec>
 8008c24:	2300      	movs	r3, #0
 8008c26:	e7c3      	b.n	8008bb0 <_strtod_l+0x140>
 8008c28:	9906      	ldr	r1, [sp, #24]
 8008c2a:	2908      	cmp	r1, #8
 8008c2c:	bfdd      	ittte	le
 8008c2e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008c30:	fb02 3301 	mlale	r3, r2, r1, r3
 8008c34:	9309      	strle	r3, [sp, #36]	; 0x24
 8008c36:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008c3a:	9b06      	ldr	r3, [sp, #24]
 8008c3c:	3001      	adds	r0, #1
 8008c3e:	3301      	adds	r3, #1
 8008c40:	9306      	str	r3, [sp, #24]
 8008c42:	9011      	str	r0, [sp, #68]	; 0x44
 8008c44:	e7be      	b.n	8008bc4 <_strtod_l+0x154>
 8008c46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c48:	195a      	adds	r2, r3, r5
 8008c4a:	9211      	str	r2, [sp, #68]	; 0x44
 8008c4c:	5d5a      	ldrb	r2, [r3, r5]
 8008c4e:	9b06      	ldr	r3, [sp, #24]
 8008c50:	b3a3      	cbz	r3, 8008cbc <_strtod_l+0x24c>
 8008c52:	4607      	mov	r7, r0
 8008c54:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008c58:	2909      	cmp	r1, #9
 8008c5a:	d912      	bls.n	8008c82 <_strtod_l+0x212>
 8008c5c:	2101      	movs	r1, #1
 8008c5e:	e7c3      	b.n	8008be8 <_strtod_l+0x178>
 8008c60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c62:	1c5a      	adds	r2, r3, #1
 8008c64:	9211      	str	r2, [sp, #68]	; 0x44
 8008c66:	785a      	ldrb	r2, [r3, #1]
 8008c68:	3001      	adds	r0, #1
 8008c6a:	2a30      	cmp	r2, #48	; 0x30
 8008c6c:	d0f8      	beq.n	8008c60 <_strtod_l+0x1f0>
 8008c6e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008c72:	2b08      	cmp	r3, #8
 8008c74:	f200 8497 	bhi.w	80095a6 <_strtod_l+0xb36>
 8008c78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c7a:	930a      	str	r3, [sp, #40]	; 0x28
 8008c7c:	4607      	mov	r7, r0
 8008c7e:	2000      	movs	r0, #0
 8008c80:	4603      	mov	r3, r0
 8008c82:	3a30      	subs	r2, #48	; 0x30
 8008c84:	f100 0101 	add.w	r1, r0, #1
 8008c88:	d012      	beq.n	8008cb0 <_strtod_l+0x240>
 8008c8a:	440f      	add	r7, r1
 8008c8c:	eb00 0c03 	add.w	ip, r0, r3
 8008c90:	4619      	mov	r1, r3
 8008c92:	250a      	movs	r5, #10
 8008c94:	4561      	cmp	r1, ip
 8008c96:	d113      	bne.n	8008cc0 <_strtod_l+0x250>
 8008c98:	1819      	adds	r1, r3, r0
 8008c9a:	2908      	cmp	r1, #8
 8008c9c:	f103 0301 	add.w	r3, r3, #1
 8008ca0:	4403      	add	r3, r0
 8008ca2:	dc1c      	bgt.n	8008cde <_strtod_l+0x26e>
 8008ca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ca6:	210a      	movs	r1, #10
 8008ca8:	fb01 2200 	mla	r2, r1, r0, r2
 8008cac:	9209      	str	r2, [sp, #36]	; 0x24
 8008cae:	2100      	movs	r1, #0
 8008cb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008cb2:	1c50      	adds	r0, r2, #1
 8008cb4:	9011      	str	r0, [sp, #68]	; 0x44
 8008cb6:	7852      	ldrb	r2, [r2, #1]
 8008cb8:	4608      	mov	r0, r1
 8008cba:	e7cb      	b.n	8008c54 <_strtod_l+0x1e4>
 8008cbc:	9806      	ldr	r0, [sp, #24]
 8008cbe:	e7d4      	b.n	8008c6a <_strtod_l+0x1fa>
 8008cc0:	2908      	cmp	r1, #8
 8008cc2:	dc04      	bgt.n	8008cce <_strtod_l+0x25e>
 8008cc4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008cc6:	436e      	muls	r6, r5
 8008cc8:	9609      	str	r6, [sp, #36]	; 0x24
 8008cca:	3101      	adds	r1, #1
 8008ccc:	e7e2      	b.n	8008c94 <_strtod_l+0x224>
 8008cce:	f101 0e01 	add.w	lr, r1, #1
 8008cd2:	f1be 0f10 	cmp.w	lr, #16
 8008cd6:	bfd8      	it	le
 8008cd8:	fb05 fa0a 	mulle.w	sl, r5, sl
 8008cdc:	e7f5      	b.n	8008cca <_strtod_l+0x25a>
 8008cde:	2b10      	cmp	r3, #16
 8008ce0:	bfdc      	itt	le
 8008ce2:	210a      	movle	r1, #10
 8008ce4:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8008ce8:	e7e1      	b.n	8008cae <_strtod_l+0x23e>
 8008cea:	2700      	movs	r7, #0
 8008cec:	2101      	movs	r1, #1
 8008cee:	e780      	b.n	8008bf2 <_strtod_l+0x182>
 8008cf0:	f04f 0e00 	mov.w	lr, #0
 8008cf4:	f10b 0202 	add.w	r2, fp, #2
 8008cf8:	9211      	str	r2, [sp, #68]	; 0x44
 8008cfa:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8008cfe:	e789      	b.n	8008c14 <_strtod_l+0x1a4>
 8008d00:	f04f 0e01 	mov.w	lr, #1
 8008d04:	e7f6      	b.n	8008cf4 <_strtod_l+0x284>
 8008d06:	bf00      	nop
 8008d08:	0800c6f8 	.word	0x0800c6f8
 8008d0c:	0800c4ac 	.word	0x0800c4ac
 8008d10:	7ff00000 	.word	0x7ff00000
 8008d14:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008d16:	1c55      	adds	r5, r2, #1
 8008d18:	9511      	str	r5, [sp, #68]	; 0x44
 8008d1a:	7852      	ldrb	r2, [r2, #1]
 8008d1c:	2a30      	cmp	r2, #48	; 0x30
 8008d1e:	d0f9      	beq.n	8008d14 <_strtod_l+0x2a4>
 8008d20:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8008d24:	2d08      	cmp	r5, #8
 8008d26:	f63f af7b 	bhi.w	8008c20 <_strtod_l+0x1b0>
 8008d2a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008d2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008d30:	9207      	str	r2, [sp, #28]
 8008d32:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008d34:	1c55      	adds	r5, r2, #1
 8008d36:	9511      	str	r5, [sp, #68]	; 0x44
 8008d38:	7852      	ldrb	r2, [r2, #1]
 8008d3a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008d3e:	2e09      	cmp	r6, #9
 8008d40:	d937      	bls.n	8008db2 <_strtod_l+0x342>
 8008d42:	9e07      	ldr	r6, [sp, #28]
 8008d44:	1bad      	subs	r5, r5, r6
 8008d46:	2d08      	cmp	r5, #8
 8008d48:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008d4c:	dc02      	bgt.n	8008d54 <_strtod_l+0x2e4>
 8008d4e:	4565      	cmp	r5, ip
 8008d50:	bfa8      	it	ge
 8008d52:	4665      	movge	r5, ip
 8008d54:	f1be 0f00 	cmp.w	lr, #0
 8008d58:	d000      	beq.n	8008d5c <_strtod_l+0x2ec>
 8008d5a:	426d      	negs	r5, r5
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d14d      	bne.n	8008dfc <_strtod_l+0x38c>
 8008d60:	9b04      	ldr	r3, [sp, #16]
 8008d62:	4303      	orrs	r3, r0
 8008d64:	f47f aec8 	bne.w	8008af8 <_strtod_l+0x88>
 8008d68:	2900      	cmp	r1, #0
 8008d6a:	f47f aee2 	bne.w	8008b32 <_strtod_l+0xc2>
 8008d6e:	2a69      	cmp	r2, #105	; 0x69
 8008d70:	d027      	beq.n	8008dc2 <_strtod_l+0x352>
 8008d72:	dc24      	bgt.n	8008dbe <_strtod_l+0x34e>
 8008d74:	2a49      	cmp	r2, #73	; 0x49
 8008d76:	d024      	beq.n	8008dc2 <_strtod_l+0x352>
 8008d78:	2a4e      	cmp	r2, #78	; 0x4e
 8008d7a:	f47f aeda 	bne.w	8008b32 <_strtod_l+0xc2>
 8008d7e:	4996      	ldr	r1, [pc, #600]	; (8008fd8 <_strtod_l+0x568>)
 8008d80:	a811      	add	r0, sp, #68	; 0x44
 8008d82:	f001 fd6f 	bl	800a864 <__match>
 8008d86:	2800      	cmp	r0, #0
 8008d88:	f43f aed3 	beq.w	8008b32 <_strtod_l+0xc2>
 8008d8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	2b28      	cmp	r3, #40	; 0x28
 8008d92:	d12d      	bne.n	8008df0 <_strtod_l+0x380>
 8008d94:	4991      	ldr	r1, [pc, #580]	; (8008fdc <_strtod_l+0x56c>)
 8008d96:	aa14      	add	r2, sp, #80	; 0x50
 8008d98:	a811      	add	r0, sp, #68	; 0x44
 8008d9a:	f001 fd77 	bl	800a88c <__hexnan>
 8008d9e:	2805      	cmp	r0, #5
 8008da0:	d126      	bne.n	8008df0 <_strtod_l+0x380>
 8008da2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008da4:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008da8:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008dac:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008db0:	e6a2      	b.n	8008af8 <_strtod_l+0x88>
 8008db2:	250a      	movs	r5, #10
 8008db4:	fb05 250c 	mla	r5, r5, ip, r2
 8008db8:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8008dbc:	e7b9      	b.n	8008d32 <_strtod_l+0x2c2>
 8008dbe:	2a6e      	cmp	r2, #110	; 0x6e
 8008dc0:	e7db      	b.n	8008d7a <_strtod_l+0x30a>
 8008dc2:	4987      	ldr	r1, [pc, #540]	; (8008fe0 <_strtod_l+0x570>)
 8008dc4:	a811      	add	r0, sp, #68	; 0x44
 8008dc6:	f001 fd4d 	bl	800a864 <__match>
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	f43f aeb1 	beq.w	8008b32 <_strtod_l+0xc2>
 8008dd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008dd2:	4984      	ldr	r1, [pc, #528]	; (8008fe4 <_strtod_l+0x574>)
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	a811      	add	r0, sp, #68	; 0x44
 8008dd8:	9311      	str	r3, [sp, #68]	; 0x44
 8008dda:	f001 fd43 	bl	800a864 <__match>
 8008dde:	b910      	cbnz	r0, 8008de6 <_strtod_l+0x376>
 8008de0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008de2:	3301      	adds	r3, #1
 8008de4:	9311      	str	r3, [sp, #68]	; 0x44
 8008de6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8008ff8 <_strtod_l+0x588>
 8008dea:	f04f 0800 	mov.w	r8, #0
 8008dee:	e683      	b.n	8008af8 <_strtod_l+0x88>
 8008df0:	487d      	ldr	r0, [pc, #500]	; (8008fe8 <_strtod_l+0x578>)
 8008df2:	f002 fd25 	bl	800b840 <nan>
 8008df6:	ec59 8b10 	vmov	r8, r9, d0
 8008dfa:	e67d      	b.n	8008af8 <_strtod_l+0x88>
 8008dfc:	1bea      	subs	r2, r5, r7
 8008dfe:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8008e02:	9207      	str	r2, [sp, #28]
 8008e04:	9a06      	ldr	r2, [sp, #24]
 8008e06:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008e0a:	2a00      	cmp	r2, #0
 8008e0c:	bf08      	it	eq
 8008e0e:	461a      	moveq	r2, r3
 8008e10:	2b10      	cmp	r3, #16
 8008e12:	9206      	str	r2, [sp, #24]
 8008e14:	461a      	mov	r2, r3
 8008e16:	bfa8      	it	ge
 8008e18:	2210      	movge	r2, #16
 8008e1a:	2b09      	cmp	r3, #9
 8008e1c:	ec59 8b17 	vmov	r8, r9, d7
 8008e20:	dd0c      	ble.n	8008e3c <_strtod_l+0x3cc>
 8008e22:	4972      	ldr	r1, [pc, #456]	; (8008fec <_strtod_l+0x57c>)
 8008e24:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008e28:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8008e2c:	ee06 aa90 	vmov	s13, sl
 8008e30:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8008e34:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008e38:	ec59 8b16 	vmov	r8, r9, d6
 8008e3c:	2b0f      	cmp	r3, #15
 8008e3e:	dc36      	bgt.n	8008eae <_strtod_l+0x43e>
 8008e40:	9907      	ldr	r1, [sp, #28]
 8008e42:	2900      	cmp	r1, #0
 8008e44:	f43f ae58 	beq.w	8008af8 <_strtod_l+0x88>
 8008e48:	dd23      	ble.n	8008e92 <_strtod_l+0x422>
 8008e4a:	2916      	cmp	r1, #22
 8008e4c:	dc0b      	bgt.n	8008e66 <_strtod_l+0x3f6>
 8008e4e:	4b67      	ldr	r3, [pc, #412]	; (8008fec <_strtod_l+0x57c>)
 8008e50:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008e54:	ed93 7b00 	vldr	d7, [r3]
 8008e58:	ec49 8b16 	vmov	d6, r8, r9
 8008e5c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008e60:	ec59 8b17 	vmov	r8, r9, d7
 8008e64:	e648      	b.n	8008af8 <_strtod_l+0x88>
 8008e66:	9807      	ldr	r0, [sp, #28]
 8008e68:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8008e6c:	4281      	cmp	r1, r0
 8008e6e:	db1e      	blt.n	8008eae <_strtod_l+0x43e>
 8008e70:	4a5e      	ldr	r2, [pc, #376]	; (8008fec <_strtod_l+0x57c>)
 8008e72:	f1c3 030f 	rsb	r3, r3, #15
 8008e76:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8008e7a:	ed91 7b00 	vldr	d7, [r1]
 8008e7e:	ec49 8b16 	vmov	d6, r8, r9
 8008e82:	1ac3      	subs	r3, r0, r3
 8008e84:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008e88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008e8c:	ed92 6b00 	vldr	d6, [r2]
 8008e90:	e7e4      	b.n	8008e5c <_strtod_l+0x3ec>
 8008e92:	9907      	ldr	r1, [sp, #28]
 8008e94:	3116      	adds	r1, #22
 8008e96:	db0a      	blt.n	8008eae <_strtod_l+0x43e>
 8008e98:	4b54      	ldr	r3, [pc, #336]	; (8008fec <_strtod_l+0x57c>)
 8008e9a:	1b7d      	subs	r5, r7, r5
 8008e9c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008ea0:	ed95 7b00 	vldr	d7, [r5]
 8008ea4:	ec49 8b16 	vmov	d6, r8, r9
 8008ea8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008eac:	e7d8      	b.n	8008e60 <_strtod_l+0x3f0>
 8008eae:	9907      	ldr	r1, [sp, #28]
 8008eb0:	1a9a      	subs	r2, r3, r2
 8008eb2:	440a      	add	r2, r1
 8008eb4:	2a00      	cmp	r2, #0
 8008eb6:	dd6f      	ble.n	8008f98 <_strtod_l+0x528>
 8008eb8:	f012 000f 	ands.w	r0, r2, #15
 8008ebc:	d00a      	beq.n	8008ed4 <_strtod_l+0x464>
 8008ebe:	494b      	ldr	r1, [pc, #300]	; (8008fec <_strtod_l+0x57c>)
 8008ec0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008ec4:	ed91 7b00 	vldr	d7, [r1]
 8008ec8:	ec49 8b16 	vmov	d6, r8, r9
 8008ecc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008ed0:	ec59 8b17 	vmov	r8, r9, d7
 8008ed4:	f032 020f 	bics.w	r2, r2, #15
 8008ed8:	d04f      	beq.n	8008f7a <_strtod_l+0x50a>
 8008eda:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8008ede:	dd22      	ble.n	8008f26 <_strtod_l+0x4b6>
 8008ee0:	2500      	movs	r5, #0
 8008ee2:	462e      	mov	r6, r5
 8008ee4:	9506      	str	r5, [sp, #24]
 8008ee6:	462f      	mov	r7, r5
 8008ee8:	2322      	movs	r3, #34	; 0x22
 8008eea:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8008ff8 <_strtod_l+0x588>
 8008eee:	6023      	str	r3, [r4, #0]
 8008ef0:	f04f 0800 	mov.w	r8, #0
 8008ef4:	9b06      	ldr	r3, [sp, #24]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f43f adfe 	beq.w	8008af8 <_strtod_l+0x88>
 8008efc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008efe:	4620      	mov	r0, r4
 8008f00:	f001 fdcc 	bl	800aa9c <_Bfree>
 8008f04:	4639      	mov	r1, r7
 8008f06:	4620      	mov	r0, r4
 8008f08:	f001 fdc8 	bl	800aa9c <_Bfree>
 8008f0c:	4631      	mov	r1, r6
 8008f0e:	4620      	mov	r0, r4
 8008f10:	f001 fdc4 	bl	800aa9c <_Bfree>
 8008f14:	9906      	ldr	r1, [sp, #24]
 8008f16:	4620      	mov	r0, r4
 8008f18:	f001 fdc0 	bl	800aa9c <_Bfree>
 8008f1c:	4629      	mov	r1, r5
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f001 fdbc 	bl	800aa9c <_Bfree>
 8008f24:	e5e8      	b.n	8008af8 <_strtod_l+0x88>
 8008f26:	2000      	movs	r0, #0
 8008f28:	ec49 8b17 	vmov	d7, r8, r9
 8008f2c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8008ff0 <_strtod_l+0x580>
 8008f30:	1112      	asrs	r2, r2, #4
 8008f32:	4601      	mov	r1, r0
 8008f34:	2a01      	cmp	r2, #1
 8008f36:	dc23      	bgt.n	8008f80 <_strtod_l+0x510>
 8008f38:	b108      	cbz	r0, 8008f3e <_strtod_l+0x4ce>
 8008f3a:	ec59 8b17 	vmov	r8, r9, d7
 8008f3e:	4a2c      	ldr	r2, [pc, #176]	; (8008ff0 <_strtod_l+0x580>)
 8008f40:	482c      	ldr	r0, [pc, #176]	; (8008ff4 <_strtod_l+0x584>)
 8008f42:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008f46:	ed92 7b00 	vldr	d7, [r2]
 8008f4a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008f4e:	ec49 8b16 	vmov	d6, r8, r9
 8008f52:	4a29      	ldr	r2, [pc, #164]	; (8008ff8 <_strtod_l+0x588>)
 8008f54:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008f58:	ee17 1a90 	vmov	r1, s15
 8008f5c:	400a      	ands	r2, r1
 8008f5e:	4282      	cmp	r2, r0
 8008f60:	ec59 8b17 	vmov	r8, r9, d7
 8008f64:	d8bc      	bhi.n	8008ee0 <_strtod_l+0x470>
 8008f66:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8008f6a:	4282      	cmp	r2, r0
 8008f6c:	bf86      	itte	hi
 8008f6e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8008ffc <_strtod_l+0x58c>
 8008f72:	f04f 38ff 	movhi.w	r8, #4294967295
 8008f76:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	9204      	str	r2, [sp, #16]
 8008f7e:	e078      	b.n	8009072 <_strtod_l+0x602>
 8008f80:	07d6      	lsls	r6, r2, #31
 8008f82:	d504      	bpl.n	8008f8e <_strtod_l+0x51e>
 8008f84:	ed9c 6b00 	vldr	d6, [ip]
 8008f88:	2001      	movs	r0, #1
 8008f8a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008f8e:	3101      	adds	r1, #1
 8008f90:	1052      	asrs	r2, r2, #1
 8008f92:	f10c 0c08 	add.w	ip, ip, #8
 8008f96:	e7cd      	b.n	8008f34 <_strtod_l+0x4c4>
 8008f98:	d0ef      	beq.n	8008f7a <_strtod_l+0x50a>
 8008f9a:	4252      	negs	r2, r2
 8008f9c:	f012 000f 	ands.w	r0, r2, #15
 8008fa0:	d00a      	beq.n	8008fb8 <_strtod_l+0x548>
 8008fa2:	4912      	ldr	r1, [pc, #72]	; (8008fec <_strtod_l+0x57c>)
 8008fa4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008fa8:	ed91 7b00 	vldr	d7, [r1]
 8008fac:	ec49 8b16 	vmov	d6, r8, r9
 8008fb0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008fb4:	ec59 8b17 	vmov	r8, r9, d7
 8008fb8:	1112      	asrs	r2, r2, #4
 8008fba:	d0de      	beq.n	8008f7a <_strtod_l+0x50a>
 8008fbc:	2a1f      	cmp	r2, #31
 8008fbe:	dd1f      	ble.n	8009000 <_strtod_l+0x590>
 8008fc0:	2500      	movs	r5, #0
 8008fc2:	462e      	mov	r6, r5
 8008fc4:	9506      	str	r5, [sp, #24]
 8008fc6:	462f      	mov	r7, r5
 8008fc8:	2322      	movs	r3, #34	; 0x22
 8008fca:	f04f 0800 	mov.w	r8, #0
 8008fce:	f04f 0900 	mov.w	r9, #0
 8008fd2:	6023      	str	r3, [r4, #0]
 8008fd4:	e78e      	b.n	8008ef4 <_strtod_l+0x484>
 8008fd6:	bf00      	nop
 8008fd8:	0800c47d 	.word	0x0800c47d
 8008fdc:	0800c4c0 	.word	0x0800c4c0
 8008fe0:	0800c475 	.word	0x0800c475
 8008fe4:	0800c604 	.word	0x0800c604
 8008fe8:	0800c8b0 	.word	0x0800c8b0
 8008fec:	0800c790 	.word	0x0800c790
 8008ff0:	0800c768 	.word	0x0800c768
 8008ff4:	7ca00000 	.word	0x7ca00000
 8008ff8:	7ff00000 	.word	0x7ff00000
 8008ffc:	7fefffff 	.word	0x7fefffff
 8009000:	f012 0110 	ands.w	r1, r2, #16
 8009004:	bf18      	it	ne
 8009006:	216a      	movne	r1, #106	; 0x6a
 8009008:	9104      	str	r1, [sp, #16]
 800900a:	ec49 8b17 	vmov	d7, r8, r9
 800900e:	49be      	ldr	r1, [pc, #760]	; (8009308 <_strtod_l+0x898>)
 8009010:	2000      	movs	r0, #0
 8009012:	07d6      	lsls	r6, r2, #31
 8009014:	d504      	bpl.n	8009020 <_strtod_l+0x5b0>
 8009016:	ed91 6b00 	vldr	d6, [r1]
 800901a:	2001      	movs	r0, #1
 800901c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009020:	1052      	asrs	r2, r2, #1
 8009022:	f101 0108 	add.w	r1, r1, #8
 8009026:	d1f4      	bne.n	8009012 <_strtod_l+0x5a2>
 8009028:	b108      	cbz	r0, 800902e <_strtod_l+0x5be>
 800902a:	ec59 8b17 	vmov	r8, r9, d7
 800902e:	9a04      	ldr	r2, [sp, #16]
 8009030:	b1c2      	cbz	r2, 8009064 <_strtod_l+0x5f4>
 8009032:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8009036:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800903a:	2a00      	cmp	r2, #0
 800903c:	4648      	mov	r0, r9
 800903e:	dd11      	ble.n	8009064 <_strtod_l+0x5f4>
 8009040:	2a1f      	cmp	r2, #31
 8009042:	f340 812e 	ble.w	80092a2 <_strtod_l+0x832>
 8009046:	2a34      	cmp	r2, #52	; 0x34
 8009048:	bfde      	ittt	le
 800904a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800904e:	f04f 32ff 	movle.w	r2, #4294967295
 8009052:	fa02 f101 	lslle.w	r1, r2, r1
 8009056:	f04f 0800 	mov.w	r8, #0
 800905a:	bfcc      	ite	gt
 800905c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009060:	ea01 0900 	andle.w	r9, r1, r0
 8009064:	ec49 8b17 	vmov	d7, r8, r9
 8009068:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800906c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009070:	d0a6      	beq.n	8008fc0 <_strtod_l+0x550>
 8009072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009074:	9200      	str	r2, [sp, #0]
 8009076:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009078:	9a06      	ldr	r2, [sp, #24]
 800907a:	4620      	mov	r0, r4
 800907c:	f001 fd76 	bl	800ab6c <__s2b>
 8009080:	9006      	str	r0, [sp, #24]
 8009082:	2800      	cmp	r0, #0
 8009084:	f43f af2c 	beq.w	8008ee0 <_strtod_l+0x470>
 8009088:	9b07      	ldr	r3, [sp, #28]
 800908a:	1b7d      	subs	r5, r7, r5
 800908c:	2b00      	cmp	r3, #0
 800908e:	bfb4      	ite	lt
 8009090:	462b      	movlt	r3, r5
 8009092:	2300      	movge	r3, #0
 8009094:	9309      	str	r3, [sp, #36]	; 0x24
 8009096:	9b07      	ldr	r3, [sp, #28]
 8009098:	ed9f 9b93 	vldr	d9, [pc, #588]	; 80092e8 <_strtod_l+0x878>
 800909c:	ed9f ab94 	vldr	d10, [pc, #592]	; 80092f0 <_strtod_l+0x880>
 80090a0:	ed9f bb95 	vldr	d11, [pc, #596]	; 80092f8 <_strtod_l+0x888>
 80090a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80090a8:	2500      	movs	r5, #0
 80090aa:	930c      	str	r3, [sp, #48]	; 0x30
 80090ac:	462e      	mov	r6, r5
 80090ae:	9b06      	ldr	r3, [sp, #24]
 80090b0:	4620      	mov	r0, r4
 80090b2:	6859      	ldr	r1, [r3, #4]
 80090b4:	f001 fcb2 	bl	800aa1c <_Balloc>
 80090b8:	4607      	mov	r7, r0
 80090ba:	2800      	cmp	r0, #0
 80090bc:	f43f af14 	beq.w	8008ee8 <_strtod_l+0x478>
 80090c0:	9b06      	ldr	r3, [sp, #24]
 80090c2:	691a      	ldr	r2, [r3, #16]
 80090c4:	3202      	adds	r2, #2
 80090c6:	f103 010c 	add.w	r1, r3, #12
 80090ca:	0092      	lsls	r2, r2, #2
 80090cc:	300c      	adds	r0, #12
 80090ce:	f001 fc97 	bl	800aa00 <memcpy>
 80090d2:	ec49 8b10 	vmov	d0, r8, r9
 80090d6:	aa14      	add	r2, sp, #80	; 0x50
 80090d8:	a913      	add	r1, sp, #76	; 0x4c
 80090da:	4620      	mov	r0, r4
 80090dc:	f002 f88c 	bl	800b1f8 <__d2b>
 80090e0:	ec49 8b18 	vmov	d8, r8, r9
 80090e4:	9012      	str	r0, [sp, #72]	; 0x48
 80090e6:	2800      	cmp	r0, #0
 80090e8:	f43f aefe 	beq.w	8008ee8 <_strtod_l+0x478>
 80090ec:	2101      	movs	r1, #1
 80090ee:	4620      	mov	r0, r4
 80090f0:	f001 fdd6 	bl	800aca0 <__i2b>
 80090f4:	4606      	mov	r6, r0
 80090f6:	2800      	cmp	r0, #0
 80090f8:	f43f aef6 	beq.w	8008ee8 <_strtod_l+0x478>
 80090fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80090fe:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009100:	2b00      	cmp	r3, #0
 8009102:	bfab      	itete	ge
 8009104:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8009106:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8009108:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800910c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8009110:	bfac      	ite	ge
 8009112:	eb03 0b02 	addge.w	fp, r3, r2
 8009116:	eba2 0a03 	sublt.w	sl, r2, r3
 800911a:	9a04      	ldr	r2, [sp, #16]
 800911c:	1a9b      	subs	r3, r3, r2
 800911e:	440b      	add	r3, r1
 8009120:	4a7a      	ldr	r2, [pc, #488]	; (800930c <_strtod_l+0x89c>)
 8009122:	3b01      	subs	r3, #1
 8009124:	4293      	cmp	r3, r2
 8009126:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800912a:	f280 80cd 	bge.w	80092c8 <_strtod_l+0x858>
 800912e:	1ad2      	subs	r2, r2, r3
 8009130:	2a1f      	cmp	r2, #31
 8009132:	eba1 0102 	sub.w	r1, r1, r2
 8009136:	f04f 0001 	mov.w	r0, #1
 800913a:	f300 80b9 	bgt.w	80092b0 <_strtod_l+0x840>
 800913e:	fa00 f302 	lsl.w	r3, r0, r2
 8009142:	930b      	str	r3, [sp, #44]	; 0x2c
 8009144:	2300      	movs	r3, #0
 8009146:	930a      	str	r3, [sp, #40]	; 0x28
 8009148:	eb0b 0301 	add.w	r3, fp, r1
 800914c:	9a04      	ldr	r2, [sp, #16]
 800914e:	459b      	cmp	fp, r3
 8009150:	448a      	add	sl, r1
 8009152:	4492      	add	sl, r2
 8009154:	465a      	mov	r2, fp
 8009156:	bfa8      	it	ge
 8009158:	461a      	movge	r2, r3
 800915a:	4552      	cmp	r2, sl
 800915c:	bfa8      	it	ge
 800915e:	4652      	movge	r2, sl
 8009160:	2a00      	cmp	r2, #0
 8009162:	bfc2      	ittt	gt
 8009164:	1a9b      	subgt	r3, r3, r2
 8009166:	ebaa 0a02 	subgt.w	sl, sl, r2
 800916a:	ebab 0b02 	subgt.w	fp, fp, r2
 800916e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009170:	2a00      	cmp	r2, #0
 8009172:	dd18      	ble.n	80091a6 <_strtod_l+0x736>
 8009174:	4631      	mov	r1, r6
 8009176:	4620      	mov	r0, r4
 8009178:	930f      	str	r3, [sp, #60]	; 0x3c
 800917a:	f001 fe51 	bl	800ae20 <__pow5mult>
 800917e:	4606      	mov	r6, r0
 8009180:	2800      	cmp	r0, #0
 8009182:	f43f aeb1 	beq.w	8008ee8 <_strtod_l+0x478>
 8009186:	4601      	mov	r1, r0
 8009188:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800918a:	4620      	mov	r0, r4
 800918c:	f001 fd9e 	bl	800accc <__multiply>
 8009190:	900e      	str	r0, [sp, #56]	; 0x38
 8009192:	2800      	cmp	r0, #0
 8009194:	f43f aea8 	beq.w	8008ee8 <_strtod_l+0x478>
 8009198:	9912      	ldr	r1, [sp, #72]	; 0x48
 800919a:	4620      	mov	r0, r4
 800919c:	f001 fc7e 	bl	800aa9c <_Bfree>
 80091a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091a4:	9212      	str	r2, [sp, #72]	; 0x48
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f300 8093 	bgt.w	80092d2 <_strtod_l+0x862>
 80091ac:	9b07      	ldr	r3, [sp, #28]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	dd08      	ble.n	80091c4 <_strtod_l+0x754>
 80091b2:	4639      	mov	r1, r7
 80091b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091b6:	4620      	mov	r0, r4
 80091b8:	f001 fe32 	bl	800ae20 <__pow5mult>
 80091bc:	4607      	mov	r7, r0
 80091be:	2800      	cmp	r0, #0
 80091c0:	f43f ae92 	beq.w	8008ee8 <_strtod_l+0x478>
 80091c4:	f1ba 0f00 	cmp.w	sl, #0
 80091c8:	dd08      	ble.n	80091dc <_strtod_l+0x76c>
 80091ca:	4639      	mov	r1, r7
 80091cc:	4652      	mov	r2, sl
 80091ce:	4620      	mov	r0, r4
 80091d0:	f001 fe80 	bl	800aed4 <__lshift>
 80091d4:	4607      	mov	r7, r0
 80091d6:	2800      	cmp	r0, #0
 80091d8:	f43f ae86 	beq.w	8008ee8 <_strtod_l+0x478>
 80091dc:	f1bb 0f00 	cmp.w	fp, #0
 80091e0:	dd08      	ble.n	80091f4 <_strtod_l+0x784>
 80091e2:	4631      	mov	r1, r6
 80091e4:	465a      	mov	r2, fp
 80091e6:	4620      	mov	r0, r4
 80091e8:	f001 fe74 	bl	800aed4 <__lshift>
 80091ec:	4606      	mov	r6, r0
 80091ee:	2800      	cmp	r0, #0
 80091f0:	f43f ae7a 	beq.w	8008ee8 <_strtod_l+0x478>
 80091f4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80091f6:	463a      	mov	r2, r7
 80091f8:	4620      	mov	r0, r4
 80091fa:	f001 fef7 	bl	800afec <__mdiff>
 80091fe:	4605      	mov	r5, r0
 8009200:	2800      	cmp	r0, #0
 8009202:	f43f ae71 	beq.w	8008ee8 <_strtod_l+0x478>
 8009206:	2300      	movs	r3, #0
 8009208:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800920c:	60c3      	str	r3, [r0, #12]
 800920e:	4631      	mov	r1, r6
 8009210:	f001 fed0 	bl	800afb4 <__mcmp>
 8009214:	2800      	cmp	r0, #0
 8009216:	da7d      	bge.n	8009314 <_strtod_l+0x8a4>
 8009218:	ea5a 0308 	orrs.w	r3, sl, r8
 800921c:	f040 80a3 	bne.w	8009366 <_strtod_l+0x8f6>
 8009220:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009224:	2b00      	cmp	r3, #0
 8009226:	f040 809e 	bne.w	8009366 <_strtod_l+0x8f6>
 800922a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800922e:	0d1b      	lsrs	r3, r3, #20
 8009230:	051b      	lsls	r3, r3, #20
 8009232:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009236:	f240 8096 	bls.w	8009366 <_strtod_l+0x8f6>
 800923a:	696b      	ldr	r3, [r5, #20]
 800923c:	b91b      	cbnz	r3, 8009246 <_strtod_l+0x7d6>
 800923e:	692b      	ldr	r3, [r5, #16]
 8009240:	2b01      	cmp	r3, #1
 8009242:	f340 8090 	ble.w	8009366 <_strtod_l+0x8f6>
 8009246:	4629      	mov	r1, r5
 8009248:	2201      	movs	r2, #1
 800924a:	4620      	mov	r0, r4
 800924c:	f001 fe42 	bl	800aed4 <__lshift>
 8009250:	4631      	mov	r1, r6
 8009252:	4605      	mov	r5, r0
 8009254:	f001 feae 	bl	800afb4 <__mcmp>
 8009258:	2800      	cmp	r0, #0
 800925a:	f340 8084 	ble.w	8009366 <_strtod_l+0x8f6>
 800925e:	9904      	ldr	r1, [sp, #16]
 8009260:	4a2b      	ldr	r2, [pc, #172]	; (8009310 <_strtod_l+0x8a0>)
 8009262:	464b      	mov	r3, r9
 8009264:	2900      	cmp	r1, #0
 8009266:	f000 809d 	beq.w	80093a4 <_strtod_l+0x934>
 800926a:	ea02 0109 	and.w	r1, r2, r9
 800926e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009272:	f300 8097 	bgt.w	80093a4 <_strtod_l+0x934>
 8009276:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800927a:	f77f aea5 	ble.w	8008fc8 <_strtod_l+0x558>
 800927e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009300 <_strtod_l+0x890>
 8009282:	ec49 8b16 	vmov	d6, r8, r9
 8009286:	ee26 7b07 	vmul.f64	d7, d6, d7
 800928a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800928e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8009292:	4313      	orrs	r3, r2
 8009294:	bf08      	it	eq
 8009296:	2322      	moveq	r3, #34	; 0x22
 8009298:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800929c:	bf08      	it	eq
 800929e:	6023      	streq	r3, [r4, #0]
 80092a0:	e62c      	b.n	8008efc <_strtod_l+0x48c>
 80092a2:	f04f 31ff 	mov.w	r1, #4294967295
 80092a6:	fa01 f202 	lsl.w	r2, r1, r2
 80092aa:	ea02 0808 	and.w	r8, r2, r8
 80092ae:	e6d9      	b.n	8009064 <_strtod_l+0x5f4>
 80092b0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80092b4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80092b8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80092bc:	33e2      	adds	r3, #226	; 0xe2
 80092be:	fa00 f303 	lsl.w	r3, r0, r3
 80092c2:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 80092c6:	e73f      	b.n	8009148 <_strtod_l+0x6d8>
 80092c8:	2200      	movs	r2, #0
 80092ca:	2301      	movs	r3, #1
 80092cc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80092d0:	e73a      	b.n	8009148 <_strtod_l+0x6d8>
 80092d2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80092d4:	461a      	mov	r2, r3
 80092d6:	4620      	mov	r0, r4
 80092d8:	f001 fdfc 	bl	800aed4 <__lshift>
 80092dc:	9012      	str	r0, [sp, #72]	; 0x48
 80092de:	2800      	cmp	r0, #0
 80092e0:	f47f af64 	bne.w	80091ac <_strtod_l+0x73c>
 80092e4:	e600      	b.n	8008ee8 <_strtod_l+0x478>
 80092e6:	bf00      	nop
 80092e8:	94a03595 	.word	0x94a03595
 80092ec:	3fcfffff 	.word	0x3fcfffff
 80092f0:	94a03595 	.word	0x94a03595
 80092f4:	3fdfffff 	.word	0x3fdfffff
 80092f8:	35afe535 	.word	0x35afe535
 80092fc:	3fe00000 	.word	0x3fe00000
 8009300:	00000000 	.word	0x00000000
 8009304:	39500000 	.word	0x39500000
 8009308:	0800c4d8 	.word	0x0800c4d8
 800930c:	fffffc02 	.word	0xfffffc02
 8009310:	7ff00000 	.word	0x7ff00000
 8009314:	46cb      	mov	fp, r9
 8009316:	d15f      	bne.n	80093d8 <_strtod_l+0x968>
 8009318:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800931c:	f1ba 0f00 	cmp.w	sl, #0
 8009320:	d02a      	beq.n	8009378 <_strtod_l+0x908>
 8009322:	4aa7      	ldr	r2, [pc, #668]	; (80095c0 <_strtod_l+0xb50>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d12b      	bne.n	8009380 <_strtod_l+0x910>
 8009328:	9b04      	ldr	r3, [sp, #16]
 800932a:	4642      	mov	r2, r8
 800932c:	b1fb      	cbz	r3, 800936e <_strtod_l+0x8fe>
 800932e:	4ba5      	ldr	r3, [pc, #660]	; (80095c4 <_strtod_l+0xb54>)
 8009330:	ea09 0303 	and.w	r3, r9, r3
 8009334:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009338:	f04f 31ff 	mov.w	r1, #4294967295
 800933c:	d81a      	bhi.n	8009374 <_strtod_l+0x904>
 800933e:	0d1b      	lsrs	r3, r3, #20
 8009340:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009344:	fa01 f303 	lsl.w	r3, r1, r3
 8009348:	429a      	cmp	r2, r3
 800934a:	d119      	bne.n	8009380 <_strtod_l+0x910>
 800934c:	4b9e      	ldr	r3, [pc, #632]	; (80095c8 <_strtod_l+0xb58>)
 800934e:	459b      	cmp	fp, r3
 8009350:	d102      	bne.n	8009358 <_strtod_l+0x8e8>
 8009352:	3201      	adds	r2, #1
 8009354:	f43f adc8 	beq.w	8008ee8 <_strtod_l+0x478>
 8009358:	4b9a      	ldr	r3, [pc, #616]	; (80095c4 <_strtod_l+0xb54>)
 800935a:	ea0b 0303 	and.w	r3, fp, r3
 800935e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009362:	f04f 0800 	mov.w	r8, #0
 8009366:	9b04      	ldr	r3, [sp, #16]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d188      	bne.n	800927e <_strtod_l+0x80e>
 800936c:	e5c6      	b.n	8008efc <_strtod_l+0x48c>
 800936e:	f04f 33ff 	mov.w	r3, #4294967295
 8009372:	e7e9      	b.n	8009348 <_strtod_l+0x8d8>
 8009374:	460b      	mov	r3, r1
 8009376:	e7e7      	b.n	8009348 <_strtod_l+0x8d8>
 8009378:	ea53 0308 	orrs.w	r3, r3, r8
 800937c:	f43f af6f 	beq.w	800925e <_strtod_l+0x7ee>
 8009380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009382:	b1cb      	cbz	r3, 80093b8 <_strtod_l+0x948>
 8009384:	ea13 0f0b 	tst.w	r3, fp
 8009388:	d0ed      	beq.n	8009366 <_strtod_l+0x8f6>
 800938a:	9a04      	ldr	r2, [sp, #16]
 800938c:	4640      	mov	r0, r8
 800938e:	4649      	mov	r1, r9
 8009390:	f1ba 0f00 	cmp.w	sl, #0
 8009394:	d014      	beq.n	80093c0 <_strtod_l+0x950>
 8009396:	f7ff fb51 	bl	8008a3c <sulp>
 800939a:	ee38 7b00 	vadd.f64	d7, d8, d0
 800939e:	ec59 8b17 	vmov	r8, r9, d7
 80093a2:	e7e0      	b.n	8009366 <_strtod_l+0x8f6>
 80093a4:	4013      	ands	r3, r2
 80093a6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80093aa:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80093ae:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80093b2:	f04f 38ff 	mov.w	r8, #4294967295
 80093b6:	e7d6      	b.n	8009366 <_strtod_l+0x8f6>
 80093b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093ba:	ea13 0f08 	tst.w	r3, r8
 80093be:	e7e3      	b.n	8009388 <_strtod_l+0x918>
 80093c0:	f7ff fb3c 	bl	8008a3c <sulp>
 80093c4:	ee38 0b40 	vsub.f64	d0, d8, d0
 80093c8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80093cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093d0:	ec59 8b10 	vmov	r8, r9, d0
 80093d4:	d1c7      	bne.n	8009366 <_strtod_l+0x8f6>
 80093d6:	e5f7      	b.n	8008fc8 <_strtod_l+0x558>
 80093d8:	4631      	mov	r1, r6
 80093da:	4628      	mov	r0, r5
 80093dc:	f001 ff68 	bl	800b2b0 <__ratio>
 80093e0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80093e4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80093e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093ec:	d865      	bhi.n	80094ba <_strtod_l+0xa4a>
 80093ee:	f1ba 0f00 	cmp.w	sl, #0
 80093f2:	d042      	beq.n	800947a <_strtod_l+0xa0a>
 80093f4:	4b75      	ldr	r3, [pc, #468]	; (80095cc <_strtod_l+0xb5c>)
 80093f6:	2200      	movs	r2, #0
 80093f8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80093fc:	4871      	ldr	r0, [pc, #452]	; (80095c4 <_strtod_l+0xb54>)
 80093fe:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80095d8 <_strtod_l+0xb68>
 8009402:	ea0b 0100 	and.w	r1, fp, r0
 8009406:	4561      	cmp	r1, ip
 8009408:	f040 808e 	bne.w	8009528 <_strtod_l+0xab8>
 800940c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8009410:	ec49 8b10 	vmov	d0, r8, r9
 8009414:	ec43 2b1c 	vmov	d12, r2, r3
 8009418:	910a      	str	r1, [sp, #40]	; 0x28
 800941a:	f001 fe71 	bl	800b100 <__ulp>
 800941e:	ec49 8b1e 	vmov	d14, r8, r9
 8009422:	4868      	ldr	r0, [pc, #416]	; (80095c4 <_strtod_l+0xb54>)
 8009424:	eeac eb00 	vfma.f64	d14, d12, d0
 8009428:	ee1e 3a90 	vmov	r3, s29
 800942c:	4a68      	ldr	r2, [pc, #416]	; (80095d0 <_strtod_l+0xb60>)
 800942e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009430:	4018      	ands	r0, r3
 8009432:	4290      	cmp	r0, r2
 8009434:	ec59 8b1e 	vmov	r8, r9, d14
 8009438:	d94e      	bls.n	80094d8 <_strtod_l+0xa68>
 800943a:	ee18 3a90 	vmov	r3, s17
 800943e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009442:	4293      	cmp	r3, r2
 8009444:	d104      	bne.n	8009450 <_strtod_l+0x9e0>
 8009446:	ee18 3a10 	vmov	r3, s16
 800944a:	3301      	adds	r3, #1
 800944c:	f43f ad4c 	beq.w	8008ee8 <_strtod_l+0x478>
 8009450:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80095c8 <_strtod_l+0xb58>
 8009454:	f04f 38ff 	mov.w	r8, #4294967295
 8009458:	9912      	ldr	r1, [sp, #72]	; 0x48
 800945a:	4620      	mov	r0, r4
 800945c:	f001 fb1e 	bl	800aa9c <_Bfree>
 8009460:	4639      	mov	r1, r7
 8009462:	4620      	mov	r0, r4
 8009464:	f001 fb1a 	bl	800aa9c <_Bfree>
 8009468:	4631      	mov	r1, r6
 800946a:	4620      	mov	r0, r4
 800946c:	f001 fb16 	bl	800aa9c <_Bfree>
 8009470:	4629      	mov	r1, r5
 8009472:	4620      	mov	r0, r4
 8009474:	f001 fb12 	bl	800aa9c <_Bfree>
 8009478:	e619      	b.n	80090ae <_strtod_l+0x63e>
 800947a:	f1b8 0f00 	cmp.w	r8, #0
 800947e:	d112      	bne.n	80094a6 <_strtod_l+0xa36>
 8009480:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009484:	b9b3      	cbnz	r3, 80094b4 <_strtod_l+0xa44>
 8009486:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800948a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800948e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009492:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8009496:	bf58      	it	pl
 8009498:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800949c:	eeb1 7b4d 	vneg.f64	d7, d13
 80094a0:	ec53 2b17 	vmov	r2, r3, d7
 80094a4:	e7aa      	b.n	80093fc <_strtod_l+0x98c>
 80094a6:	f1b8 0f01 	cmp.w	r8, #1
 80094aa:	d103      	bne.n	80094b4 <_strtod_l+0xa44>
 80094ac:	f1b9 0f00 	cmp.w	r9, #0
 80094b0:	f43f ad8a 	beq.w	8008fc8 <_strtod_l+0x558>
 80094b4:	4b47      	ldr	r3, [pc, #284]	; (80095d4 <_strtod_l+0xb64>)
 80094b6:	2200      	movs	r2, #0
 80094b8:	e79e      	b.n	80093f8 <_strtod_l+0x988>
 80094ba:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80094be:	ee20 db0d 	vmul.f64	d13, d0, d13
 80094c2:	f1ba 0f00 	cmp.w	sl, #0
 80094c6:	d104      	bne.n	80094d2 <_strtod_l+0xa62>
 80094c8:	eeb1 7b4d 	vneg.f64	d7, d13
 80094cc:	ec53 2b17 	vmov	r2, r3, d7
 80094d0:	e794      	b.n	80093fc <_strtod_l+0x98c>
 80094d2:	eeb0 7b4d 	vmov.f64	d7, d13
 80094d6:	e7f9      	b.n	80094cc <_strtod_l+0xa5c>
 80094d8:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80094dc:	9b04      	ldr	r3, [sp, #16]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1ba      	bne.n	8009458 <_strtod_l+0x9e8>
 80094e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80094e6:	0d1b      	lsrs	r3, r3, #20
 80094e8:	051b      	lsls	r3, r3, #20
 80094ea:	4299      	cmp	r1, r3
 80094ec:	d1b4      	bne.n	8009458 <_strtod_l+0x9e8>
 80094ee:	ec51 0b1d 	vmov	r0, r1, d13
 80094f2:	f7f7 f921 	bl	8000738 <__aeabi_d2lz>
 80094f6:	f7f7 f889 	bl	800060c <__aeabi_l2d>
 80094fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80094fe:	ec41 0b17 	vmov	d7, r0, r1
 8009502:	ea43 0308 	orr.w	r3, r3, r8
 8009506:	ea53 030a 	orrs.w	r3, r3, sl
 800950a:	ee3d db47 	vsub.f64	d13, d13, d7
 800950e:	d03c      	beq.n	800958a <_strtod_l+0xb1a>
 8009510:	eeb4 dbca 	vcmpe.f64	d13, d10
 8009514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009518:	f53f acf0 	bmi.w	8008efc <_strtod_l+0x48c>
 800951c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8009520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009524:	dd98      	ble.n	8009458 <_strtod_l+0x9e8>
 8009526:	e4e9      	b.n	8008efc <_strtod_l+0x48c>
 8009528:	9804      	ldr	r0, [sp, #16]
 800952a:	b1f0      	cbz	r0, 800956a <_strtod_l+0xafa>
 800952c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8009530:	d81b      	bhi.n	800956a <_strtod_l+0xafa>
 8009532:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80095b8 <_strtod_l+0xb48>
 8009536:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800953a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800953e:	d811      	bhi.n	8009564 <_strtod_l+0xaf4>
 8009540:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8009544:	ee1d 3a10 	vmov	r3, s26
 8009548:	2b01      	cmp	r3, #1
 800954a:	bf38      	it	cc
 800954c:	2301      	movcc	r3, #1
 800954e:	ee0d 3a10 	vmov	s26, r3
 8009552:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8009556:	f1ba 0f00 	cmp.w	sl, #0
 800955a:	d113      	bne.n	8009584 <_strtod_l+0xb14>
 800955c:	eeb1 7b4d 	vneg.f64	d7, d13
 8009560:	ec53 2b17 	vmov	r2, r3, d7
 8009564:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8009568:	1a43      	subs	r3, r0, r1
 800956a:	eeb0 0b48 	vmov.f64	d0, d8
 800956e:	ec43 2b1c 	vmov	d12, r2, r3
 8009572:	910a      	str	r1, [sp, #40]	; 0x28
 8009574:	f001 fdc4 	bl	800b100 <__ulp>
 8009578:	990a      	ldr	r1, [sp, #40]	; 0x28
 800957a:	eeac 8b00 	vfma.f64	d8, d12, d0
 800957e:	ec59 8b18 	vmov	r8, r9, d8
 8009582:	e7ab      	b.n	80094dc <_strtod_l+0xa6c>
 8009584:	eeb0 7b4d 	vmov.f64	d7, d13
 8009588:	e7ea      	b.n	8009560 <_strtod_l+0xaf0>
 800958a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800958e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009592:	f57f af61 	bpl.w	8009458 <_strtod_l+0x9e8>
 8009596:	e4b1      	b.n	8008efc <_strtod_l+0x48c>
 8009598:	2300      	movs	r3, #0
 800959a:	9308      	str	r3, [sp, #32]
 800959c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800959e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095a0:	6013      	str	r3, [r2, #0]
 80095a2:	f7ff baad 	b.w	8008b00 <_strtod_l+0x90>
 80095a6:	2a65      	cmp	r2, #101	; 0x65
 80095a8:	f43f ab9f 	beq.w	8008cea <_strtod_l+0x27a>
 80095ac:	2a45      	cmp	r2, #69	; 0x45
 80095ae:	f43f ab9c 	beq.w	8008cea <_strtod_l+0x27a>
 80095b2:	2101      	movs	r1, #1
 80095b4:	f7ff bbd4 	b.w	8008d60 <_strtod_l+0x2f0>
 80095b8:	ffc00000 	.word	0xffc00000
 80095bc:	41dfffff 	.word	0x41dfffff
 80095c0:	000fffff 	.word	0x000fffff
 80095c4:	7ff00000 	.word	0x7ff00000
 80095c8:	7fefffff 	.word	0x7fefffff
 80095cc:	3ff00000 	.word	0x3ff00000
 80095d0:	7c9fffff 	.word	0x7c9fffff
 80095d4:	bff00000 	.word	0xbff00000
 80095d8:	7fe00000 	.word	0x7fe00000

080095dc <_strtod_r>:
 80095dc:	4b01      	ldr	r3, [pc, #4]	; (80095e4 <_strtod_r+0x8>)
 80095de:	f7ff ba47 	b.w	8008a70 <_strtod_l>
 80095e2:	bf00      	nop
 80095e4:	2000007c 	.word	0x2000007c

080095e8 <_strtol_l.constprop.0>:
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095ee:	d001      	beq.n	80095f4 <_strtol_l.constprop.0+0xc>
 80095f0:	2b24      	cmp	r3, #36	; 0x24
 80095f2:	d906      	bls.n	8009602 <_strtol_l.constprop.0+0x1a>
 80095f4:	f7fe fb82 	bl	8007cfc <__errno>
 80095f8:	2316      	movs	r3, #22
 80095fa:	6003      	str	r3, [r0, #0]
 80095fc:	2000      	movs	r0, #0
 80095fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009602:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80096e8 <_strtol_l.constprop.0+0x100>
 8009606:	460d      	mov	r5, r1
 8009608:	462e      	mov	r6, r5
 800960a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800960e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009612:	f017 0708 	ands.w	r7, r7, #8
 8009616:	d1f7      	bne.n	8009608 <_strtol_l.constprop.0+0x20>
 8009618:	2c2d      	cmp	r4, #45	; 0x2d
 800961a:	d132      	bne.n	8009682 <_strtol_l.constprop.0+0x9a>
 800961c:	782c      	ldrb	r4, [r5, #0]
 800961e:	2701      	movs	r7, #1
 8009620:	1cb5      	adds	r5, r6, #2
 8009622:	2b00      	cmp	r3, #0
 8009624:	d05b      	beq.n	80096de <_strtol_l.constprop.0+0xf6>
 8009626:	2b10      	cmp	r3, #16
 8009628:	d109      	bne.n	800963e <_strtol_l.constprop.0+0x56>
 800962a:	2c30      	cmp	r4, #48	; 0x30
 800962c:	d107      	bne.n	800963e <_strtol_l.constprop.0+0x56>
 800962e:	782c      	ldrb	r4, [r5, #0]
 8009630:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009634:	2c58      	cmp	r4, #88	; 0x58
 8009636:	d14d      	bne.n	80096d4 <_strtol_l.constprop.0+0xec>
 8009638:	786c      	ldrb	r4, [r5, #1]
 800963a:	2310      	movs	r3, #16
 800963c:	3502      	adds	r5, #2
 800963e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009642:	f108 38ff 	add.w	r8, r8, #4294967295
 8009646:	f04f 0c00 	mov.w	ip, #0
 800964a:	fbb8 f9f3 	udiv	r9, r8, r3
 800964e:	4666      	mov	r6, ip
 8009650:	fb03 8a19 	mls	sl, r3, r9, r8
 8009654:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009658:	f1be 0f09 	cmp.w	lr, #9
 800965c:	d816      	bhi.n	800968c <_strtol_l.constprop.0+0xa4>
 800965e:	4674      	mov	r4, lr
 8009660:	42a3      	cmp	r3, r4
 8009662:	dd24      	ble.n	80096ae <_strtol_l.constprop.0+0xc6>
 8009664:	f1bc 0f00 	cmp.w	ip, #0
 8009668:	db1e      	blt.n	80096a8 <_strtol_l.constprop.0+0xc0>
 800966a:	45b1      	cmp	r9, r6
 800966c:	d31c      	bcc.n	80096a8 <_strtol_l.constprop.0+0xc0>
 800966e:	d101      	bne.n	8009674 <_strtol_l.constprop.0+0x8c>
 8009670:	45a2      	cmp	sl, r4
 8009672:	db19      	blt.n	80096a8 <_strtol_l.constprop.0+0xc0>
 8009674:	fb06 4603 	mla	r6, r6, r3, r4
 8009678:	f04f 0c01 	mov.w	ip, #1
 800967c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009680:	e7e8      	b.n	8009654 <_strtol_l.constprop.0+0x6c>
 8009682:	2c2b      	cmp	r4, #43	; 0x2b
 8009684:	bf04      	itt	eq
 8009686:	782c      	ldrbeq	r4, [r5, #0]
 8009688:	1cb5      	addeq	r5, r6, #2
 800968a:	e7ca      	b.n	8009622 <_strtol_l.constprop.0+0x3a>
 800968c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009690:	f1be 0f19 	cmp.w	lr, #25
 8009694:	d801      	bhi.n	800969a <_strtol_l.constprop.0+0xb2>
 8009696:	3c37      	subs	r4, #55	; 0x37
 8009698:	e7e2      	b.n	8009660 <_strtol_l.constprop.0+0x78>
 800969a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800969e:	f1be 0f19 	cmp.w	lr, #25
 80096a2:	d804      	bhi.n	80096ae <_strtol_l.constprop.0+0xc6>
 80096a4:	3c57      	subs	r4, #87	; 0x57
 80096a6:	e7db      	b.n	8009660 <_strtol_l.constprop.0+0x78>
 80096a8:	f04f 3cff 	mov.w	ip, #4294967295
 80096ac:	e7e6      	b.n	800967c <_strtol_l.constprop.0+0x94>
 80096ae:	f1bc 0f00 	cmp.w	ip, #0
 80096b2:	da05      	bge.n	80096c0 <_strtol_l.constprop.0+0xd8>
 80096b4:	2322      	movs	r3, #34	; 0x22
 80096b6:	6003      	str	r3, [r0, #0]
 80096b8:	4646      	mov	r6, r8
 80096ba:	b942      	cbnz	r2, 80096ce <_strtol_l.constprop.0+0xe6>
 80096bc:	4630      	mov	r0, r6
 80096be:	e79e      	b.n	80095fe <_strtol_l.constprop.0+0x16>
 80096c0:	b107      	cbz	r7, 80096c4 <_strtol_l.constprop.0+0xdc>
 80096c2:	4276      	negs	r6, r6
 80096c4:	2a00      	cmp	r2, #0
 80096c6:	d0f9      	beq.n	80096bc <_strtol_l.constprop.0+0xd4>
 80096c8:	f1bc 0f00 	cmp.w	ip, #0
 80096cc:	d000      	beq.n	80096d0 <_strtol_l.constprop.0+0xe8>
 80096ce:	1e69      	subs	r1, r5, #1
 80096d0:	6011      	str	r1, [r2, #0]
 80096d2:	e7f3      	b.n	80096bc <_strtol_l.constprop.0+0xd4>
 80096d4:	2430      	movs	r4, #48	; 0x30
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d1b1      	bne.n	800963e <_strtol_l.constprop.0+0x56>
 80096da:	2308      	movs	r3, #8
 80096dc:	e7af      	b.n	800963e <_strtol_l.constprop.0+0x56>
 80096de:	2c30      	cmp	r4, #48	; 0x30
 80096e0:	d0a5      	beq.n	800962e <_strtol_l.constprop.0+0x46>
 80096e2:	230a      	movs	r3, #10
 80096e4:	e7ab      	b.n	800963e <_strtol_l.constprop.0+0x56>
 80096e6:	bf00      	nop
 80096e8:	0800c501 	.word	0x0800c501

080096ec <_strtol_r>:
 80096ec:	f7ff bf7c 	b.w	80095e8 <_strtol_l.constprop.0>

080096f0 <quorem>:
 80096f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f4:	6903      	ldr	r3, [r0, #16]
 80096f6:	690c      	ldr	r4, [r1, #16]
 80096f8:	42a3      	cmp	r3, r4
 80096fa:	4607      	mov	r7, r0
 80096fc:	f2c0 8081 	blt.w	8009802 <quorem+0x112>
 8009700:	3c01      	subs	r4, #1
 8009702:	f101 0814 	add.w	r8, r1, #20
 8009706:	f100 0514 	add.w	r5, r0, #20
 800970a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800970e:	9301      	str	r3, [sp, #4]
 8009710:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009714:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009718:	3301      	adds	r3, #1
 800971a:	429a      	cmp	r2, r3
 800971c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009720:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009724:	fbb2 f6f3 	udiv	r6, r2, r3
 8009728:	d331      	bcc.n	800978e <quorem+0x9e>
 800972a:	f04f 0e00 	mov.w	lr, #0
 800972e:	4640      	mov	r0, r8
 8009730:	46ac      	mov	ip, r5
 8009732:	46f2      	mov	sl, lr
 8009734:	f850 2b04 	ldr.w	r2, [r0], #4
 8009738:	b293      	uxth	r3, r2
 800973a:	fb06 e303 	mla	r3, r6, r3, lr
 800973e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009742:	b29b      	uxth	r3, r3
 8009744:	ebaa 0303 	sub.w	r3, sl, r3
 8009748:	f8dc a000 	ldr.w	sl, [ip]
 800974c:	0c12      	lsrs	r2, r2, #16
 800974e:	fa13 f38a 	uxtah	r3, r3, sl
 8009752:	fb06 e202 	mla	r2, r6, r2, lr
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	9b00      	ldr	r3, [sp, #0]
 800975a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800975e:	b292      	uxth	r2, r2
 8009760:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009764:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009768:	f8bd 3000 	ldrh.w	r3, [sp]
 800976c:	4581      	cmp	r9, r0
 800976e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009772:	f84c 3b04 	str.w	r3, [ip], #4
 8009776:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800977a:	d2db      	bcs.n	8009734 <quorem+0x44>
 800977c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009780:	b92b      	cbnz	r3, 800978e <quorem+0x9e>
 8009782:	9b01      	ldr	r3, [sp, #4]
 8009784:	3b04      	subs	r3, #4
 8009786:	429d      	cmp	r5, r3
 8009788:	461a      	mov	r2, r3
 800978a:	d32e      	bcc.n	80097ea <quorem+0xfa>
 800978c:	613c      	str	r4, [r7, #16]
 800978e:	4638      	mov	r0, r7
 8009790:	f001 fc10 	bl	800afb4 <__mcmp>
 8009794:	2800      	cmp	r0, #0
 8009796:	db24      	blt.n	80097e2 <quorem+0xf2>
 8009798:	3601      	adds	r6, #1
 800979a:	4628      	mov	r0, r5
 800979c:	f04f 0c00 	mov.w	ip, #0
 80097a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80097a4:	f8d0 e000 	ldr.w	lr, [r0]
 80097a8:	b293      	uxth	r3, r2
 80097aa:	ebac 0303 	sub.w	r3, ip, r3
 80097ae:	0c12      	lsrs	r2, r2, #16
 80097b0:	fa13 f38e 	uxtah	r3, r3, lr
 80097b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80097b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097bc:	b29b      	uxth	r3, r3
 80097be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097c2:	45c1      	cmp	r9, r8
 80097c4:	f840 3b04 	str.w	r3, [r0], #4
 80097c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80097cc:	d2e8      	bcs.n	80097a0 <quorem+0xb0>
 80097ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097d6:	b922      	cbnz	r2, 80097e2 <quorem+0xf2>
 80097d8:	3b04      	subs	r3, #4
 80097da:	429d      	cmp	r5, r3
 80097dc:	461a      	mov	r2, r3
 80097de:	d30a      	bcc.n	80097f6 <quorem+0x106>
 80097e0:	613c      	str	r4, [r7, #16]
 80097e2:	4630      	mov	r0, r6
 80097e4:	b003      	add	sp, #12
 80097e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ea:	6812      	ldr	r2, [r2, #0]
 80097ec:	3b04      	subs	r3, #4
 80097ee:	2a00      	cmp	r2, #0
 80097f0:	d1cc      	bne.n	800978c <quorem+0x9c>
 80097f2:	3c01      	subs	r4, #1
 80097f4:	e7c7      	b.n	8009786 <quorem+0x96>
 80097f6:	6812      	ldr	r2, [r2, #0]
 80097f8:	3b04      	subs	r3, #4
 80097fa:	2a00      	cmp	r2, #0
 80097fc:	d1f0      	bne.n	80097e0 <quorem+0xf0>
 80097fe:	3c01      	subs	r4, #1
 8009800:	e7eb      	b.n	80097da <quorem+0xea>
 8009802:	2000      	movs	r0, #0
 8009804:	e7ee      	b.n	80097e4 <quorem+0xf4>
	...

08009808 <_dtoa_r>:
 8009808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800980c:	ed2d 8b02 	vpush	{d8}
 8009810:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009812:	b091      	sub	sp, #68	; 0x44
 8009814:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009818:	ec59 8b10 	vmov	r8, r9, d0
 800981c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800981e:	9106      	str	r1, [sp, #24]
 8009820:	4606      	mov	r6, r0
 8009822:	9208      	str	r2, [sp, #32]
 8009824:	930c      	str	r3, [sp, #48]	; 0x30
 8009826:	b975      	cbnz	r5, 8009846 <_dtoa_r+0x3e>
 8009828:	2010      	movs	r0, #16
 800982a:	f001 f8cf 	bl	800a9cc <malloc>
 800982e:	4602      	mov	r2, r0
 8009830:	6270      	str	r0, [r6, #36]	; 0x24
 8009832:	b920      	cbnz	r0, 800983e <_dtoa_r+0x36>
 8009834:	4baa      	ldr	r3, [pc, #680]	; (8009ae0 <_dtoa_r+0x2d8>)
 8009836:	21ea      	movs	r1, #234	; 0xea
 8009838:	48aa      	ldr	r0, [pc, #680]	; (8009ae4 <_dtoa_r+0x2dc>)
 800983a:	f002 f83b 	bl	800b8b4 <__assert_func>
 800983e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009842:	6005      	str	r5, [r0, #0]
 8009844:	60c5      	str	r5, [r0, #12]
 8009846:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009848:	6819      	ldr	r1, [r3, #0]
 800984a:	b151      	cbz	r1, 8009862 <_dtoa_r+0x5a>
 800984c:	685a      	ldr	r2, [r3, #4]
 800984e:	604a      	str	r2, [r1, #4]
 8009850:	2301      	movs	r3, #1
 8009852:	4093      	lsls	r3, r2
 8009854:	608b      	str	r3, [r1, #8]
 8009856:	4630      	mov	r0, r6
 8009858:	f001 f920 	bl	800aa9c <_Bfree>
 800985c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800985e:	2200      	movs	r2, #0
 8009860:	601a      	str	r2, [r3, #0]
 8009862:	f1b9 0300 	subs.w	r3, r9, #0
 8009866:	bfbb      	ittet	lt
 8009868:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800986c:	9303      	strlt	r3, [sp, #12]
 800986e:	2300      	movge	r3, #0
 8009870:	2201      	movlt	r2, #1
 8009872:	bfac      	ite	ge
 8009874:	6023      	strge	r3, [r4, #0]
 8009876:	6022      	strlt	r2, [r4, #0]
 8009878:	4b9b      	ldr	r3, [pc, #620]	; (8009ae8 <_dtoa_r+0x2e0>)
 800987a:	9c03      	ldr	r4, [sp, #12]
 800987c:	43a3      	bics	r3, r4
 800987e:	d11c      	bne.n	80098ba <_dtoa_r+0xb2>
 8009880:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009882:	f242 730f 	movw	r3, #9999	; 0x270f
 8009886:	6013      	str	r3, [r2, #0]
 8009888:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800988c:	ea53 0308 	orrs.w	r3, r3, r8
 8009890:	f000 84fd 	beq.w	800a28e <_dtoa_r+0xa86>
 8009894:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009896:	b963      	cbnz	r3, 80098b2 <_dtoa_r+0xaa>
 8009898:	4b94      	ldr	r3, [pc, #592]	; (8009aec <_dtoa_r+0x2e4>)
 800989a:	e01f      	b.n	80098dc <_dtoa_r+0xd4>
 800989c:	4b94      	ldr	r3, [pc, #592]	; (8009af0 <_dtoa_r+0x2e8>)
 800989e:	9301      	str	r3, [sp, #4]
 80098a0:	3308      	adds	r3, #8
 80098a2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80098a4:	6013      	str	r3, [r2, #0]
 80098a6:	9801      	ldr	r0, [sp, #4]
 80098a8:	b011      	add	sp, #68	; 0x44
 80098aa:	ecbd 8b02 	vpop	{d8}
 80098ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b2:	4b8e      	ldr	r3, [pc, #568]	; (8009aec <_dtoa_r+0x2e4>)
 80098b4:	9301      	str	r3, [sp, #4]
 80098b6:	3303      	adds	r3, #3
 80098b8:	e7f3      	b.n	80098a2 <_dtoa_r+0x9a>
 80098ba:	ed9d 8b02 	vldr	d8, [sp, #8]
 80098be:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80098c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098c6:	d10b      	bne.n	80098e0 <_dtoa_r+0xd8>
 80098c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098ca:	2301      	movs	r3, #1
 80098cc:	6013      	str	r3, [r2, #0]
 80098ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f000 84d9 	beq.w	800a288 <_dtoa_r+0xa80>
 80098d6:	4887      	ldr	r0, [pc, #540]	; (8009af4 <_dtoa_r+0x2ec>)
 80098d8:	6018      	str	r0, [r3, #0]
 80098da:	1e43      	subs	r3, r0, #1
 80098dc:	9301      	str	r3, [sp, #4]
 80098de:	e7e2      	b.n	80098a6 <_dtoa_r+0x9e>
 80098e0:	a90f      	add	r1, sp, #60	; 0x3c
 80098e2:	aa0e      	add	r2, sp, #56	; 0x38
 80098e4:	4630      	mov	r0, r6
 80098e6:	eeb0 0b48 	vmov.f64	d0, d8
 80098ea:	f001 fc85 	bl	800b1f8 <__d2b>
 80098ee:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80098f2:	4605      	mov	r5, r0
 80098f4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80098f6:	2900      	cmp	r1, #0
 80098f8:	d046      	beq.n	8009988 <_dtoa_r+0x180>
 80098fa:	ee18 4a90 	vmov	r4, s17
 80098fe:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009902:	ec53 2b18 	vmov	r2, r3, d8
 8009906:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800990a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800990e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009912:	2400      	movs	r4, #0
 8009914:	ec43 2b16 	vmov	d6, r2, r3
 8009918:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800991c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009ac8 <_dtoa_r+0x2c0>
 8009920:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009924:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8009ad0 <_dtoa_r+0x2c8>
 8009928:	eea7 6b05 	vfma.f64	d6, d7, d5
 800992c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009ad8 <_dtoa_r+0x2d0>
 8009930:	ee07 1a90 	vmov	s15, r1
 8009934:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009938:	eeb0 7b46 	vmov.f64	d7, d6
 800993c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009940:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009944:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800994c:	ee16 ba90 	vmov	fp, s13
 8009950:	940a      	str	r4, [sp, #40]	; 0x28
 8009952:	d508      	bpl.n	8009966 <_dtoa_r+0x15e>
 8009954:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009958:	eeb4 6b47 	vcmp.f64	d6, d7
 800995c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009960:	bf18      	it	ne
 8009962:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009966:	f1bb 0f16 	cmp.w	fp, #22
 800996a:	d82f      	bhi.n	80099cc <_dtoa_r+0x1c4>
 800996c:	4b62      	ldr	r3, [pc, #392]	; (8009af8 <_dtoa_r+0x2f0>)
 800996e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009972:	ed93 7b00 	vldr	d7, [r3]
 8009976:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800997a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800997e:	d501      	bpl.n	8009984 <_dtoa_r+0x17c>
 8009980:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009984:	2300      	movs	r3, #0
 8009986:	e022      	b.n	80099ce <_dtoa_r+0x1c6>
 8009988:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800998a:	4401      	add	r1, r0
 800998c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009990:	2b20      	cmp	r3, #32
 8009992:	bfc1      	itttt	gt
 8009994:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009998:	fa04 f303 	lslgt.w	r3, r4, r3
 800999c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80099a0:	fa28 f804 	lsrgt.w	r8, r8, r4
 80099a4:	bfd6      	itet	le
 80099a6:	f1c3 0320 	rsble	r3, r3, #32
 80099aa:	ea43 0808 	orrgt.w	r8, r3, r8
 80099ae:	fa08 f803 	lslle.w	r8, r8, r3
 80099b2:	ee07 8a90 	vmov	s15, r8
 80099b6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80099ba:	3901      	subs	r1, #1
 80099bc:	ee17 4a90 	vmov	r4, s15
 80099c0:	ec53 2b17 	vmov	r2, r3, d7
 80099c4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80099c8:	2401      	movs	r4, #1
 80099ca:	e7a3      	b.n	8009914 <_dtoa_r+0x10c>
 80099cc:	2301      	movs	r3, #1
 80099ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80099d0:	1a43      	subs	r3, r0, r1
 80099d2:	1e5a      	subs	r2, r3, #1
 80099d4:	bf45      	ittet	mi
 80099d6:	f1c3 0301 	rsbmi	r3, r3, #1
 80099da:	9304      	strmi	r3, [sp, #16]
 80099dc:	2300      	movpl	r3, #0
 80099de:	2300      	movmi	r3, #0
 80099e0:	9205      	str	r2, [sp, #20]
 80099e2:	bf54      	ite	pl
 80099e4:	9304      	strpl	r3, [sp, #16]
 80099e6:	9305      	strmi	r3, [sp, #20]
 80099e8:	f1bb 0f00 	cmp.w	fp, #0
 80099ec:	db18      	blt.n	8009a20 <_dtoa_r+0x218>
 80099ee:	9b05      	ldr	r3, [sp, #20]
 80099f0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80099f4:	445b      	add	r3, fp
 80099f6:	9305      	str	r3, [sp, #20]
 80099f8:	2300      	movs	r3, #0
 80099fa:	9a06      	ldr	r2, [sp, #24]
 80099fc:	2a09      	cmp	r2, #9
 80099fe:	d849      	bhi.n	8009a94 <_dtoa_r+0x28c>
 8009a00:	2a05      	cmp	r2, #5
 8009a02:	bfc4      	itt	gt
 8009a04:	3a04      	subgt	r2, #4
 8009a06:	9206      	strgt	r2, [sp, #24]
 8009a08:	9a06      	ldr	r2, [sp, #24]
 8009a0a:	f1a2 0202 	sub.w	r2, r2, #2
 8009a0e:	bfcc      	ite	gt
 8009a10:	2400      	movgt	r4, #0
 8009a12:	2401      	movle	r4, #1
 8009a14:	2a03      	cmp	r2, #3
 8009a16:	d848      	bhi.n	8009aaa <_dtoa_r+0x2a2>
 8009a18:	e8df f002 	tbb	[pc, r2]
 8009a1c:	3a2c2e0b 	.word	0x3a2c2e0b
 8009a20:	9b04      	ldr	r3, [sp, #16]
 8009a22:	2200      	movs	r2, #0
 8009a24:	eba3 030b 	sub.w	r3, r3, fp
 8009a28:	9304      	str	r3, [sp, #16]
 8009a2a:	9209      	str	r2, [sp, #36]	; 0x24
 8009a2c:	f1cb 0300 	rsb	r3, fp, #0
 8009a30:	e7e3      	b.n	80099fa <_dtoa_r+0x1f2>
 8009a32:	2200      	movs	r2, #0
 8009a34:	9207      	str	r2, [sp, #28]
 8009a36:	9a08      	ldr	r2, [sp, #32]
 8009a38:	2a00      	cmp	r2, #0
 8009a3a:	dc39      	bgt.n	8009ab0 <_dtoa_r+0x2a8>
 8009a3c:	f04f 0a01 	mov.w	sl, #1
 8009a40:	46d1      	mov	r9, sl
 8009a42:	4652      	mov	r2, sl
 8009a44:	f8cd a020 	str.w	sl, [sp, #32]
 8009a48:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	6079      	str	r1, [r7, #4]
 8009a4e:	2004      	movs	r0, #4
 8009a50:	f100 0c14 	add.w	ip, r0, #20
 8009a54:	4594      	cmp	ip, r2
 8009a56:	6879      	ldr	r1, [r7, #4]
 8009a58:	d92f      	bls.n	8009aba <_dtoa_r+0x2b2>
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	930d      	str	r3, [sp, #52]	; 0x34
 8009a5e:	f000 ffdd 	bl	800aa1c <_Balloc>
 8009a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a64:	9001      	str	r0, [sp, #4]
 8009a66:	4602      	mov	r2, r0
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	d149      	bne.n	8009b00 <_dtoa_r+0x2f8>
 8009a6c:	4b23      	ldr	r3, [pc, #140]	; (8009afc <_dtoa_r+0x2f4>)
 8009a6e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009a72:	e6e1      	b.n	8009838 <_dtoa_r+0x30>
 8009a74:	2201      	movs	r2, #1
 8009a76:	e7dd      	b.n	8009a34 <_dtoa_r+0x22c>
 8009a78:	2200      	movs	r2, #0
 8009a7a:	9207      	str	r2, [sp, #28]
 8009a7c:	9a08      	ldr	r2, [sp, #32]
 8009a7e:	eb0b 0a02 	add.w	sl, fp, r2
 8009a82:	f10a 0901 	add.w	r9, sl, #1
 8009a86:	464a      	mov	r2, r9
 8009a88:	2a01      	cmp	r2, #1
 8009a8a:	bfb8      	it	lt
 8009a8c:	2201      	movlt	r2, #1
 8009a8e:	e7db      	b.n	8009a48 <_dtoa_r+0x240>
 8009a90:	2201      	movs	r2, #1
 8009a92:	e7f2      	b.n	8009a7a <_dtoa_r+0x272>
 8009a94:	2401      	movs	r4, #1
 8009a96:	2200      	movs	r2, #0
 8009a98:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8009a9c:	f04f 3aff 	mov.w	sl, #4294967295
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	46d1      	mov	r9, sl
 8009aa4:	2212      	movs	r2, #18
 8009aa6:	9108      	str	r1, [sp, #32]
 8009aa8:	e7ce      	b.n	8009a48 <_dtoa_r+0x240>
 8009aaa:	2201      	movs	r2, #1
 8009aac:	9207      	str	r2, [sp, #28]
 8009aae:	e7f5      	b.n	8009a9c <_dtoa_r+0x294>
 8009ab0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009ab4:	46d1      	mov	r9, sl
 8009ab6:	4652      	mov	r2, sl
 8009ab8:	e7c6      	b.n	8009a48 <_dtoa_r+0x240>
 8009aba:	3101      	adds	r1, #1
 8009abc:	6079      	str	r1, [r7, #4]
 8009abe:	0040      	lsls	r0, r0, #1
 8009ac0:	e7c6      	b.n	8009a50 <_dtoa_r+0x248>
 8009ac2:	bf00      	nop
 8009ac4:	f3af 8000 	nop.w
 8009ac8:	636f4361 	.word	0x636f4361
 8009acc:	3fd287a7 	.word	0x3fd287a7
 8009ad0:	8b60c8b3 	.word	0x8b60c8b3
 8009ad4:	3fc68a28 	.word	0x3fc68a28
 8009ad8:	509f79fb 	.word	0x509f79fb
 8009adc:	3fd34413 	.word	0x3fd34413
 8009ae0:	0800c60e 	.word	0x0800c60e
 8009ae4:	0800c625 	.word	0x0800c625
 8009ae8:	7ff00000 	.word	0x7ff00000
 8009aec:	0800c60a 	.word	0x0800c60a
 8009af0:	0800c601 	.word	0x0800c601
 8009af4:	0800c481 	.word	0x0800c481
 8009af8:	0800c790 	.word	0x0800c790
 8009afc:	0800c680 	.word	0x0800c680
 8009b00:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8009b02:	9901      	ldr	r1, [sp, #4]
 8009b04:	6011      	str	r1, [r2, #0]
 8009b06:	f1b9 0f0e 	cmp.w	r9, #14
 8009b0a:	d86c      	bhi.n	8009be6 <_dtoa_r+0x3de>
 8009b0c:	2c00      	cmp	r4, #0
 8009b0e:	d06a      	beq.n	8009be6 <_dtoa_r+0x3de>
 8009b10:	f1bb 0f00 	cmp.w	fp, #0
 8009b14:	f340 80a0 	ble.w	8009c58 <_dtoa_r+0x450>
 8009b18:	49c1      	ldr	r1, [pc, #772]	; (8009e20 <_dtoa_r+0x618>)
 8009b1a:	f00b 020f 	and.w	r2, fp, #15
 8009b1e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009b22:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009b26:	ed92 7b00 	vldr	d7, [r2]
 8009b2a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8009b2e:	f000 8087 	beq.w	8009c40 <_dtoa_r+0x438>
 8009b32:	4abc      	ldr	r2, [pc, #752]	; (8009e24 <_dtoa_r+0x61c>)
 8009b34:	ed92 6b08 	vldr	d6, [r2, #32]
 8009b38:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009b3c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009b40:	f001 010f 	and.w	r1, r1, #15
 8009b44:	2203      	movs	r2, #3
 8009b46:	48b7      	ldr	r0, [pc, #732]	; (8009e24 <_dtoa_r+0x61c>)
 8009b48:	2900      	cmp	r1, #0
 8009b4a:	d17b      	bne.n	8009c44 <_dtoa_r+0x43c>
 8009b4c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009b50:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009b54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b5a:	2900      	cmp	r1, #0
 8009b5c:	f000 80a2 	beq.w	8009ca4 <_dtoa_r+0x49c>
 8009b60:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009b64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b68:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b70:	f140 8098 	bpl.w	8009ca4 <_dtoa_r+0x49c>
 8009b74:	f1b9 0f00 	cmp.w	r9, #0
 8009b78:	f000 8094 	beq.w	8009ca4 <_dtoa_r+0x49c>
 8009b7c:	f1ba 0f00 	cmp.w	sl, #0
 8009b80:	dd2f      	ble.n	8009be2 <_dtoa_r+0x3da>
 8009b82:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009b86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009b8a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b8e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009b92:	3201      	adds	r2, #1
 8009b94:	4650      	mov	r0, sl
 8009b96:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009b9a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009b9e:	ee07 2a90 	vmov	s15, r2
 8009ba2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009ba6:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009baa:	ee15 4a90 	vmov	r4, s11
 8009bae:	ec52 1b15 	vmov	r1, r2, d5
 8009bb2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	d177      	bne.n	8009caa <_dtoa_r+0x4a2>
 8009bba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009bbe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009bc2:	ec42 1b17 	vmov	d7, r1, r2
 8009bc6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bce:	f300 8263 	bgt.w	800a098 <_dtoa_r+0x890>
 8009bd2:	eeb1 7b47 	vneg.f64	d7, d7
 8009bd6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bde:	f100 8258 	bmi.w	800a092 <_dtoa_r+0x88a>
 8009be2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009be6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009be8:	2a00      	cmp	r2, #0
 8009bea:	f2c0 811d 	blt.w	8009e28 <_dtoa_r+0x620>
 8009bee:	f1bb 0f0e 	cmp.w	fp, #14
 8009bf2:	f300 8119 	bgt.w	8009e28 <_dtoa_r+0x620>
 8009bf6:	4b8a      	ldr	r3, [pc, #552]	; (8009e20 <_dtoa_r+0x618>)
 8009bf8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009bfc:	ed93 6b00 	vldr	d6, [r3]
 8009c00:	9b08      	ldr	r3, [sp, #32]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f280 80b7 	bge.w	8009d76 <_dtoa_r+0x56e>
 8009c08:	f1b9 0f00 	cmp.w	r9, #0
 8009c0c:	f300 80b3 	bgt.w	8009d76 <_dtoa_r+0x56e>
 8009c10:	f040 823f 	bne.w	800a092 <_dtoa_r+0x88a>
 8009c14:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009c18:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009c1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c20:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c28:	464c      	mov	r4, r9
 8009c2a:	464f      	mov	r7, r9
 8009c2c:	f280 8215 	bge.w	800a05a <_dtoa_r+0x852>
 8009c30:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009c34:	2331      	movs	r3, #49	; 0x31
 8009c36:	f808 3b01 	strb.w	r3, [r8], #1
 8009c3a:	f10b 0b01 	add.w	fp, fp, #1
 8009c3e:	e211      	b.n	800a064 <_dtoa_r+0x85c>
 8009c40:	2202      	movs	r2, #2
 8009c42:	e780      	b.n	8009b46 <_dtoa_r+0x33e>
 8009c44:	07cc      	lsls	r4, r1, #31
 8009c46:	d504      	bpl.n	8009c52 <_dtoa_r+0x44a>
 8009c48:	ed90 6b00 	vldr	d6, [r0]
 8009c4c:	3201      	adds	r2, #1
 8009c4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009c52:	1049      	asrs	r1, r1, #1
 8009c54:	3008      	adds	r0, #8
 8009c56:	e777      	b.n	8009b48 <_dtoa_r+0x340>
 8009c58:	d022      	beq.n	8009ca0 <_dtoa_r+0x498>
 8009c5a:	f1cb 0100 	rsb	r1, fp, #0
 8009c5e:	4a70      	ldr	r2, [pc, #448]	; (8009e20 <_dtoa_r+0x618>)
 8009c60:	f001 000f 	and.w	r0, r1, #15
 8009c64:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009c68:	ed92 7b00 	vldr	d7, [r2]
 8009c6c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009c70:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c74:	486b      	ldr	r0, [pc, #428]	; (8009e24 <_dtoa_r+0x61c>)
 8009c76:	1109      	asrs	r1, r1, #4
 8009c78:	2400      	movs	r4, #0
 8009c7a:	2202      	movs	r2, #2
 8009c7c:	b929      	cbnz	r1, 8009c8a <_dtoa_r+0x482>
 8009c7e:	2c00      	cmp	r4, #0
 8009c80:	f43f af6a 	beq.w	8009b58 <_dtoa_r+0x350>
 8009c84:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c88:	e766      	b.n	8009b58 <_dtoa_r+0x350>
 8009c8a:	07cf      	lsls	r7, r1, #31
 8009c8c:	d505      	bpl.n	8009c9a <_dtoa_r+0x492>
 8009c8e:	ed90 6b00 	vldr	d6, [r0]
 8009c92:	3201      	adds	r2, #1
 8009c94:	2401      	movs	r4, #1
 8009c96:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009c9a:	1049      	asrs	r1, r1, #1
 8009c9c:	3008      	adds	r0, #8
 8009c9e:	e7ed      	b.n	8009c7c <_dtoa_r+0x474>
 8009ca0:	2202      	movs	r2, #2
 8009ca2:	e759      	b.n	8009b58 <_dtoa_r+0x350>
 8009ca4:	465f      	mov	r7, fp
 8009ca6:	4648      	mov	r0, r9
 8009ca8:	e775      	b.n	8009b96 <_dtoa_r+0x38e>
 8009caa:	ec42 1b17 	vmov	d7, r1, r2
 8009cae:	4a5c      	ldr	r2, [pc, #368]	; (8009e20 <_dtoa_r+0x618>)
 8009cb0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009cb4:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009cb8:	9a01      	ldr	r2, [sp, #4]
 8009cba:	1814      	adds	r4, r2, r0
 8009cbc:	9a07      	ldr	r2, [sp, #28]
 8009cbe:	b352      	cbz	r2, 8009d16 <_dtoa_r+0x50e>
 8009cc0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009cc4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009cc8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009ccc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009cd0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009cd4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009cd8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009cdc:	ee14 2a90 	vmov	r2, s9
 8009ce0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009ce4:	3230      	adds	r2, #48	; 0x30
 8009ce6:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009cea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cf2:	f808 2b01 	strb.w	r2, [r8], #1
 8009cf6:	d439      	bmi.n	8009d6c <_dtoa_r+0x564>
 8009cf8:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009cfc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d04:	d472      	bmi.n	8009dec <_dtoa_r+0x5e4>
 8009d06:	45a0      	cmp	r8, r4
 8009d08:	f43f af6b 	beq.w	8009be2 <_dtoa_r+0x3da>
 8009d0c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009d10:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009d14:	e7e0      	b.n	8009cd8 <_dtoa_r+0x4d0>
 8009d16:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009d1a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009d1e:	4621      	mov	r1, r4
 8009d20:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009d24:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009d28:	ee14 2a90 	vmov	r2, s9
 8009d2c:	3230      	adds	r2, #48	; 0x30
 8009d2e:	f808 2b01 	strb.w	r2, [r8], #1
 8009d32:	45a0      	cmp	r8, r4
 8009d34:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009d38:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009d3c:	d118      	bne.n	8009d70 <_dtoa_r+0x568>
 8009d3e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009d42:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009d46:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d4e:	dc4d      	bgt.n	8009dec <_dtoa_r+0x5e4>
 8009d50:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009d54:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d5c:	f57f af41 	bpl.w	8009be2 <_dtoa_r+0x3da>
 8009d60:	4688      	mov	r8, r1
 8009d62:	3901      	subs	r1, #1
 8009d64:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009d68:	2b30      	cmp	r3, #48	; 0x30
 8009d6a:	d0f9      	beq.n	8009d60 <_dtoa_r+0x558>
 8009d6c:	46bb      	mov	fp, r7
 8009d6e:	e02a      	b.n	8009dc6 <_dtoa_r+0x5be>
 8009d70:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009d74:	e7d6      	b.n	8009d24 <_dtoa_r+0x51c>
 8009d76:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d7a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009d7e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009d82:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009d86:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009d8a:	ee15 3a10 	vmov	r3, s10
 8009d8e:	3330      	adds	r3, #48	; 0x30
 8009d90:	f808 3b01 	strb.w	r3, [r8], #1
 8009d94:	9b01      	ldr	r3, [sp, #4]
 8009d96:	eba8 0303 	sub.w	r3, r8, r3
 8009d9a:	4599      	cmp	r9, r3
 8009d9c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009da0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009da4:	d133      	bne.n	8009e0e <_dtoa_r+0x606>
 8009da6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009daa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009db2:	dc1a      	bgt.n	8009dea <_dtoa_r+0x5e2>
 8009db4:	eeb4 7b46 	vcmp.f64	d7, d6
 8009db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dbc:	d103      	bne.n	8009dc6 <_dtoa_r+0x5be>
 8009dbe:	ee15 3a10 	vmov	r3, s10
 8009dc2:	07d9      	lsls	r1, r3, #31
 8009dc4:	d411      	bmi.n	8009dea <_dtoa_r+0x5e2>
 8009dc6:	4629      	mov	r1, r5
 8009dc8:	4630      	mov	r0, r6
 8009dca:	f000 fe67 	bl	800aa9c <_Bfree>
 8009dce:	2300      	movs	r3, #0
 8009dd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009dd2:	f888 3000 	strb.w	r3, [r8]
 8009dd6:	f10b 0301 	add.w	r3, fp, #1
 8009dda:	6013      	str	r3, [r2, #0]
 8009ddc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	f43f ad61 	beq.w	80098a6 <_dtoa_r+0x9e>
 8009de4:	f8c3 8000 	str.w	r8, [r3]
 8009de8:	e55d      	b.n	80098a6 <_dtoa_r+0x9e>
 8009dea:	465f      	mov	r7, fp
 8009dec:	4643      	mov	r3, r8
 8009dee:	4698      	mov	r8, r3
 8009df0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009df4:	2a39      	cmp	r2, #57	; 0x39
 8009df6:	d106      	bne.n	8009e06 <_dtoa_r+0x5fe>
 8009df8:	9a01      	ldr	r2, [sp, #4]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d1f7      	bne.n	8009dee <_dtoa_r+0x5e6>
 8009dfe:	9901      	ldr	r1, [sp, #4]
 8009e00:	2230      	movs	r2, #48	; 0x30
 8009e02:	3701      	adds	r7, #1
 8009e04:	700a      	strb	r2, [r1, #0]
 8009e06:	781a      	ldrb	r2, [r3, #0]
 8009e08:	3201      	adds	r2, #1
 8009e0a:	701a      	strb	r2, [r3, #0]
 8009e0c:	e7ae      	b.n	8009d6c <_dtoa_r+0x564>
 8009e0e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009e12:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e1a:	d1b2      	bne.n	8009d82 <_dtoa_r+0x57a>
 8009e1c:	e7d3      	b.n	8009dc6 <_dtoa_r+0x5be>
 8009e1e:	bf00      	nop
 8009e20:	0800c790 	.word	0x0800c790
 8009e24:	0800c768 	.word	0x0800c768
 8009e28:	9907      	ldr	r1, [sp, #28]
 8009e2a:	2900      	cmp	r1, #0
 8009e2c:	f000 80d0 	beq.w	8009fd0 <_dtoa_r+0x7c8>
 8009e30:	9906      	ldr	r1, [sp, #24]
 8009e32:	2901      	cmp	r1, #1
 8009e34:	f300 80b4 	bgt.w	8009fa0 <_dtoa_r+0x798>
 8009e38:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009e3a:	2900      	cmp	r1, #0
 8009e3c:	f000 80ac 	beq.w	8009f98 <_dtoa_r+0x790>
 8009e40:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009e44:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009e48:	461c      	mov	r4, r3
 8009e4a:	930a      	str	r3, [sp, #40]	; 0x28
 8009e4c:	9b04      	ldr	r3, [sp, #16]
 8009e4e:	4413      	add	r3, r2
 8009e50:	9304      	str	r3, [sp, #16]
 8009e52:	9b05      	ldr	r3, [sp, #20]
 8009e54:	2101      	movs	r1, #1
 8009e56:	4413      	add	r3, r2
 8009e58:	4630      	mov	r0, r6
 8009e5a:	9305      	str	r3, [sp, #20]
 8009e5c:	f000 ff20 	bl	800aca0 <__i2b>
 8009e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e62:	4607      	mov	r7, r0
 8009e64:	f1b8 0f00 	cmp.w	r8, #0
 8009e68:	dd0d      	ble.n	8009e86 <_dtoa_r+0x67e>
 8009e6a:	9a05      	ldr	r2, [sp, #20]
 8009e6c:	2a00      	cmp	r2, #0
 8009e6e:	dd0a      	ble.n	8009e86 <_dtoa_r+0x67e>
 8009e70:	4542      	cmp	r2, r8
 8009e72:	9904      	ldr	r1, [sp, #16]
 8009e74:	bfa8      	it	ge
 8009e76:	4642      	movge	r2, r8
 8009e78:	1a89      	subs	r1, r1, r2
 8009e7a:	9104      	str	r1, [sp, #16]
 8009e7c:	9905      	ldr	r1, [sp, #20]
 8009e7e:	eba8 0802 	sub.w	r8, r8, r2
 8009e82:	1a8a      	subs	r2, r1, r2
 8009e84:	9205      	str	r2, [sp, #20]
 8009e86:	b303      	cbz	r3, 8009eca <_dtoa_r+0x6c2>
 8009e88:	9a07      	ldr	r2, [sp, #28]
 8009e8a:	2a00      	cmp	r2, #0
 8009e8c:	f000 80a5 	beq.w	8009fda <_dtoa_r+0x7d2>
 8009e90:	2c00      	cmp	r4, #0
 8009e92:	dd13      	ble.n	8009ebc <_dtoa_r+0x6b4>
 8009e94:	4639      	mov	r1, r7
 8009e96:	4622      	mov	r2, r4
 8009e98:	4630      	mov	r0, r6
 8009e9a:	930d      	str	r3, [sp, #52]	; 0x34
 8009e9c:	f000 ffc0 	bl	800ae20 <__pow5mult>
 8009ea0:	462a      	mov	r2, r5
 8009ea2:	4601      	mov	r1, r0
 8009ea4:	4607      	mov	r7, r0
 8009ea6:	4630      	mov	r0, r6
 8009ea8:	f000 ff10 	bl	800accc <__multiply>
 8009eac:	4629      	mov	r1, r5
 8009eae:	900a      	str	r0, [sp, #40]	; 0x28
 8009eb0:	4630      	mov	r0, r6
 8009eb2:	f000 fdf3 	bl	800aa9c <_Bfree>
 8009eb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009eb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009eba:	4615      	mov	r5, r2
 8009ebc:	1b1a      	subs	r2, r3, r4
 8009ebe:	d004      	beq.n	8009eca <_dtoa_r+0x6c2>
 8009ec0:	4629      	mov	r1, r5
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	f000 ffac 	bl	800ae20 <__pow5mult>
 8009ec8:	4605      	mov	r5, r0
 8009eca:	2101      	movs	r1, #1
 8009ecc:	4630      	mov	r0, r6
 8009ece:	f000 fee7 	bl	800aca0 <__i2b>
 8009ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	4604      	mov	r4, r0
 8009ed8:	f340 8081 	ble.w	8009fde <_dtoa_r+0x7d6>
 8009edc:	461a      	mov	r2, r3
 8009ede:	4601      	mov	r1, r0
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	f000 ff9d 	bl	800ae20 <__pow5mult>
 8009ee6:	9b06      	ldr	r3, [sp, #24]
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	4604      	mov	r4, r0
 8009eec:	dd7a      	ble.n	8009fe4 <_dtoa_r+0x7dc>
 8009eee:	2300      	movs	r3, #0
 8009ef0:	930a      	str	r3, [sp, #40]	; 0x28
 8009ef2:	6922      	ldr	r2, [r4, #16]
 8009ef4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009ef8:	6910      	ldr	r0, [r2, #16]
 8009efa:	f000 fe81 	bl	800ac00 <__hi0bits>
 8009efe:	f1c0 0020 	rsb	r0, r0, #32
 8009f02:	9b05      	ldr	r3, [sp, #20]
 8009f04:	4418      	add	r0, r3
 8009f06:	f010 001f 	ands.w	r0, r0, #31
 8009f0a:	f000 808c 	beq.w	800a026 <_dtoa_r+0x81e>
 8009f0e:	f1c0 0220 	rsb	r2, r0, #32
 8009f12:	2a04      	cmp	r2, #4
 8009f14:	f340 8085 	ble.w	800a022 <_dtoa_r+0x81a>
 8009f18:	f1c0 001c 	rsb	r0, r0, #28
 8009f1c:	9b04      	ldr	r3, [sp, #16]
 8009f1e:	4403      	add	r3, r0
 8009f20:	9304      	str	r3, [sp, #16]
 8009f22:	9b05      	ldr	r3, [sp, #20]
 8009f24:	4403      	add	r3, r0
 8009f26:	4480      	add	r8, r0
 8009f28:	9305      	str	r3, [sp, #20]
 8009f2a:	9b04      	ldr	r3, [sp, #16]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	dd05      	ble.n	8009f3c <_dtoa_r+0x734>
 8009f30:	4629      	mov	r1, r5
 8009f32:	461a      	mov	r2, r3
 8009f34:	4630      	mov	r0, r6
 8009f36:	f000 ffcd 	bl	800aed4 <__lshift>
 8009f3a:	4605      	mov	r5, r0
 8009f3c:	9b05      	ldr	r3, [sp, #20]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	dd05      	ble.n	8009f4e <_dtoa_r+0x746>
 8009f42:	4621      	mov	r1, r4
 8009f44:	461a      	mov	r2, r3
 8009f46:	4630      	mov	r0, r6
 8009f48:	f000 ffc4 	bl	800aed4 <__lshift>
 8009f4c:	4604      	mov	r4, r0
 8009f4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d06a      	beq.n	800a02a <_dtoa_r+0x822>
 8009f54:	4621      	mov	r1, r4
 8009f56:	4628      	mov	r0, r5
 8009f58:	f001 f82c 	bl	800afb4 <__mcmp>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	da64      	bge.n	800a02a <_dtoa_r+0x822>
 8009f60:	2300      	movs	r3, #0
 8009f62:	4629      	mov	r1, r5
 8009f64:	220a      	movs	r2, #10
 8009f66:	4630      	mov	r0, r6
 8009f68:	f000 fdba 	bl	800aae0 <__multadd>
 8009f6c:	9b07      	ldr	r3, [sp, #28]
 8009f6e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009f72:	4605      	mov	r5, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	f000 8191 	beq.w	800a29c <_dtoa_r+0xa94>
 8009f7a:	4639      	mov	r1, r7
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	220a      	movs	r2, #10
 8009f80:	4630      	mov	r0, r6
 8009f82:	f000 fdad 	bl	800aae0 <__multadd>
 8009f86:	f1ba 0f00 	cmp.w	sl, #0
 8009f8a:	4607      	mov	r7, r0
 8009f8c:	f300 808d 	bgt.w	800a0aa <_dtoa_r+0x8a2>
 8009f90:	9b06      	ldr	r3, [sp, #24]
 8009f92:	2b02      	cmp	r3, #2
 8009f94:	dc50      	bgt.n	800a038 <_dtoa_r+0x830>
 8009f96:	e088      	b.n	800a0aa <_dtoa_r+0x8a2>
 8009f98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f9a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009f9e:	e751      	b.n	8009e44 <_dtoa_r+0x63c>
 8009fa0:	f109 34ff 	add.w	r4, r9, #4294967295
 8009fa4:	42a3      	cmp	r3, r4
 8009fa6:	bfbf      	itttt	lt
 8009fa8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8009faa:	1ae3      	sublt	r3, r4, r3
 8009fac:	18d2      	addlt	r2, r2, r3
 8009fae:	9209      	strlt	r2, [sp, #36]	; 0x24
 8009fb0:	bfb6      	itet	lt
 8009fb2:	4623      	movlt	r3, r4
 8009fb4:	1b1c      	subge	r4, r3, r4
 8009fb6:	2400      	movlt	r4, #0
 8009fb8:	f1b9 0f00 	cmp.w	r9, #0
 8009fbc:	bfb5      	itete	lt
 8009fbe:	9a04      	ldrlt	r2, [sp, #16]
 8009fc0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009fc4:	eba2 0809 	sublt.w	r8, r2, r9
 8009fc8:	464a      	movge	r2, r9
 8009fca:	bfb8      	it	lt
 8009fcc:	2200      	movlt	r2, #0
 8009fce:	e73c      	b.n	8009e4a <_dtoa_r+0x642>
 8009fd0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009fd4:	9f07      	ldr	r7, [sp, #28]
 8009fd6:	461c      	mov	r4, r3
 8009fd8:	e744      	b.n	8009e64 <_dtoa_r+0x65c>
 8009fda:	461a      	mov	r2, r3
 8009fdc:	e770      	b.n	8009ec0 <_dtoa_r+0x6b8>
 8009fde:	9b06      	ldr	r3, [sp, #24]
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	dc18      	bgt.n	800a016 <_dtoa_r+0x80e>
 8009fe4:	9b02      	ldr	r3, [sp, #8]
 8009fe6:	b9b3      	cbnz	r3, 800a016 <_dtoa_r+0x80e>
 8009fe8:	9b03      	ldr	r3, [sp, #12]
 8009fea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009fee:	b9a2      	cbnz	r2, 800a01a <_dtoa_r+0x812>
 8009ff0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009ff4:	0d12      	lsrs	r2, r2, #20
 8009ff6:	0512      	lsls	r2, r2, #20
 8009ff8:	b18a      	cbz	r2, 800a01e <_dtoa_r+0x816>
 8009ffa:	9b04      	ldr	r3, [sp, #16]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	9304      	str	r3, [sp, #16]
 800a000:	9b05      	ldr	r3, [sp, #20]
 800a002:	3301      	adds	r3, #1
 800a004:	9305      	str	r3, [sp, #20]
 800a006:	2301      	movs	r3, #1
 800a008:	930a      	str	r3, [sp, #40]	; 0x28
 800a00a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	f47f af70 	bne.w	8009ef2 <_dtoa_r+0x6ea>
 800a012:	2001      	movs	r0, #1
 800a014:	e775      	b.n	8009f02 <_dtoa_r+0x6fa>
 800a016:	2300      	movs	r3, #0
 800a018:	e7f6      	b.n	800a008 <_dtoa_r+0x800>
 800a01a:	9b02      	ldr	r3, [sp, #8]
 800a01c:	e7f4      	b.n	800a008 <_dtoa_r+0x800>
 800a01e:	920a      	str	r2, [sp, #40]	; 0x28
 800a020:	e7f3      	b.n	800a00a <_dtoa_r+0x802>
 800a022:	d082      	beq.n	8009f2a <_dtoa_r+0x722>
 800a024:	4610      	mov	r0, r2
 800a026:	301c      	adds	r0, #28
 800a028:	e778      	b.n	8009f1c <_dtoa_r+0x714>
 800a02a:	f1b9 0f00 	cmp.w	r9, #0
 800a02e:	dc37      	bgt.n	800a0a0 <_dtoa_r+0x898>
 800a030:	9b06      	ldr	r3, [sp, #24]
 800a032:	2b02      	cmp	r3, #2
 800a034:	dd34      	ble.n	800a0a0 <_dtoa_r+0x898>
 800a036:	46ca      	mov	sl, r9
 800a038:	f1ba 0f00 	cmp.w	sl, #0
 800a03c:	d10d      	bne.n	800a05a <_dtoa_r+0x852>
 800a03e:	4621      	mov	r1, r4
 800a040:	4653      	mov	r3, sl
 800a042:	2205      	movs	r2, #5
 800a044:	4630      	mov	r0, r6
 800a046:	f000 fd4b 	bl	800aae0 <__multadd>
 800a04a:	4601      	mov	r1, r0
 800a04c:	4604      	mov	r4, r0
 800a04e:	4628      	mov	r0, r5
 800a050:	f000 ffb0 	bl	800afb4 <__mcmp>
 800a054:	2800      	cmp	r0, #0
 800a056:	f73f adeb 	bgt.w	8009c30 <_dtoa_r+0x428>
 800a05a:	9b08      	ldr	r3, [sp, #32]
 800a05c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a060:	ea6f 0b03 	mvn.w	fp, r3
 800a064:	f04f 0900 	mov.w	r9, #0
 800a068:	4621      	mov	r1, r4
 800a06a:	4630      	mov	r0, r6
 800a06c:	f000 fd16 	bl	800aa9c <_Bfree>
 800a070:	2f00      	cmp	r7, #0
 800a072:	f43f aea8 	beq.w	8009dc6 <_dtoa_r+0x5be>
 800a076:	f1b9 0f00 	cmp.w	r9, #0
 800a07a:	d005      	beq.n	800a088 <_dtoa_r+0x880>
 800a07c:	45b9      	cmp	r9, r7
 800a07e:	d003      	beq.n	800a088 <_dtoa_r+0x880>
 800a080:	4649      	mov	r1, r9
 800a082:	4630      	mov	r0, r6
 800a084:	f000 fd0a 	bl	800aa9c <_Bfree>
 800a088:	4639      	mov	r1, r7
 800a08a:	4630      	mov	r0, r6
 800a08c:	f000 fd06 	bl	800aa9c <_Bfree>
 800a090:	e699      	b.n	8009dc6 <_dtoa_r+0x5be>
 800a092:	2400      	movs	r4, #0
 800a094:	4627      	mov	r7, r4
 800a096:	e7e0      	b.n	800a05a <_dtoa_r+0x852>
 800a098:	46bb      	mov	fp, r7
 800a09a:	4604      	mov	r4, r0
 800a09c:	4607      	mov	r7, r0
 800a09e:	e5c7      	b.n	8009c30 <_dtoa_r+0x428>
 800a0a0:	9b07      	ldr	r3, [sp, #28]
 800a0a2:	46ca      	mov	sl, r9
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f000 8100 	beq.w	800a2aa <_dtoa_r+0xaa2>
 800a0aa:	f1b8 0f00 	cmp.w	r8, #0
 800a0ae:	dd05      	ble.n	800a0bc <_dtoa_r+0x8b4>
 800a0b0:	4639      	mov	r1, r7
 800a0b2:	4642      	mov	r2, r8
 800a0b4:	4630      	mov	r0, r6
 800a0b6:	f000 ff0d 	bl	800aed4 <__lshift>
 800a0ba:	4607      	mov	r7, r0
 800a0bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d05d      	beq.n	800a17e <_dtoa_r+0x976>
 800a0c2:	6879      	ldr	r1, [r7, #4]
 800a0c4:	4630      	mov	r0, r6
 800a0c6:	f000 fca9 	bl	800aa1c <_Balloc>
 800a0ca:	4680      	mov	r8, r0
 800a0cc:	b928      	cbnz	r0, 800a0da <_dtoa_r+0x8d2>
 800a0ce:	4b82      	ldr	r3, [pc, #520]	; (800a2d8 <_dtoa_r+0xad0>)
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a0d6:	f7ff bbaf 	b.w	8009838 <_dtoa_r+0x30>
 800a0da:	693a      	ldr	r2, [r7, #16]
 800a0dc:	3202      	adds	r2, #2
 800a0de:	0092      	lsls	r2, r2, #2
 800a0e0:	f107 010c 	add.w	r1, r7, #12
 800a0e4:	300c      	adds	r0, #12
 800a0e6:	f000 fc8b 	bl	800aa00 <memcpy>
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	4641      	mov	r1, r8
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	f000 fef0 	bl	800aed4 <__lshift>
 800a0f4:	9b01      	ldr	r3, [sp, #4]
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	9304      	str	r3, [sp, #16]
 800a0fa:	9b01      	ldr	r3, [sp, #4]
 800a0fc:	4453      	add	r3, sl
 800a0fe:	9308      	str	r3, [sp, #32]
 800a100:	9b02      	ldr	r3, [sp, #8]
 800a102:	f003 0301 	and.w	r3, r3, #1
 800a106:	46b9      	mov	r9, r7
 800a108:	9307      	str	r3, [sp, #28]
 800a10a:	4607      	mov	r7, r0
 800a10c:	9b04      	ldr	r3, [sp, #16]
 800a10e:	4621      	mov	r1, r4
 800a110:	3b01      	subs	r3, #1
 800a112:	4628      	mov	r0, r5
 800a114:	9302      	str	r3, [sp, #8]
 800a116:	f7ff faeb 	bl	80096f0 <quorem>
 800a11a:	4603      	mov	r3, r0
 800a11c:	3330      	adds	r3, #48	; 0x30
 800a11e:	9005      	str	r0, [sp, #20]
 800a120:	4649      	mov	r1, r9
 800a122:	4628      	mov	r0, r5
 800a124:	9309      	str	r3, [sp, #36]	; 0x24
 800a126:	f000 ff45 	bl	800afb4 <__mcmp>
 800a12a:	463a      	mov	r2, r7
 800a12c:	4682      	mov	sl, r0
 800a12e:	4621      	mov	r1, r4
 800a130:	4630      	mov	r0, r6
 800a132:	f000 ff5b 	bl	800afec <__mdiff>
 800a136:	68c2      	ldr	r2, [r0, #12]
 800a138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a13a:	4680      	mov	r8, r0
 800a13c:	bb0a      	cbnz	r2, 800a182 <_dtoa_r+0x97a>
 800a13e:	4601      	mov	r1, r0
 800a140:	4628      	mov	r0, r5
 800a142:	f000 ff37 	bl	800afb4 <__mcmp>
 800a146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a148:	4602      	mov	r2, r0
 800a14a:	4641      	mov	r1, r8
 800a14c:	4630      	mov	r0, r6
 800a14e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800a152:	f000 fca3 	bl	800aa9c <_Bfree>
 800a156:	9b06      	ldr	r3, [sp, #24]
 800a158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a15a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a15e:	ea43 0102 	orr.w	r1, r3, r2
 800a162:	9b07      	ldr	r3, [sp, #28]
 800a164:	430b      	orrs	r3, r1
 800a166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a168:	d10d      	bne.n	800a186 <_dtoa_r+0x97e>
 800a16a:	2b39      	cmp	r3, #57	; 0x39
 800a16c:	d029      	beq.n	800a1c2 <_dtoa_r+0x9ba>
 800a16e:	f1ba 0f00 	cmp.w	sl, #0
 800a172:	dd01      	ble.n	800a178 <_dtoa_r+0x970>
 800a174:	9b05      	ldr	r3, [sp, #20]
 800a176:	3331      	adds	r3, #49	; 0x31
 800a178:	9a02      	ldr	r2, [sp, #8]
 800a17a:	7013      	strb	r3, [r2, #0]
 800a17c:	e774      	b.n	800a068 <_dtoa_r+0x860>
 800a17e:	4638      	mov	r0, r7
 800a180:	e7b8      	b.n	800a0f4 <_dtoa_r+0x8ec>
 800a182:	2201      	movs	r2, #1
 800a184:	e7e1      	b.n	800a14a <_dtoa_r+0x942>
 800a186:	f1ba 0f00 	cmp.w	sl, #0
 800a18a:	db06      	blt.n	800a19a <_dtoa_r+0x992>
 800a18c:	9906      	ldr	r1, [sp, #24]
 800a18e:	ea41 0a0a 	orr.w	sl, r1, sl
 800a192:	9907      	ldr	r1, [sp, #28]
 800a194:	ea5a 0101 	orrs.w	r1, sl, r1
 800a198:	d120      	bne.n	800a1dc <_dtoa_r+0x9d4>
 800a19a:	2a00      	cmp	r2, #0
 800a19c:	ddec      	ble.n	800a178 <_dtoa_r+0x970>
 800a19e:	4629      	mov	r1, r5
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	4630      	mov	r0, r6
 800a1a4:	9304      	str	r3, [sp, #16]
 800a1a6:	f000 fe95 	bl	800aed4 <__lshift>
 800a1aa:	4621      	mov	r1, r4
 800a1ac:	4605      	mov	r5, r0
 800a1ae:	f000 ff01 	bl	800afb4 <__mcmp>
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	9b04      	ldr	r3, [sp, #16]
 800a1b6:	dc02      	bgt.n	800a1be <_dtoa_r+0x9b6>
 800a1b8:	d1de      	bne.n	800a178 <_dtoa_r+0x970>
 800a1ba:	07da      	lsls	r2, r3, #31
 800a1bc:	d5dc      	bpl.n	800a178 <_dtoa_r+0x970>
 800a1be:	2b39      	cmp	r3, #57	; 0x39
 800a1c0:	d1d8      	bne.n	800a174 <_dtoa_r+0x96c>
 800a1c2:	9a02      	ldr	r2, [sp, #8]
 800a1c4:	2339      	movs	r3, #57	; 0x39
 800a1c6:	7013      	strb	r3, [r2, #0]
 800a1c8:	4643      	mov	r3, r8
 800a1ca:	4698      	mov	r8, r3
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a1d2:	2a39      	cmp	r2, #57	; 0x39
 800a1d4:	d051      	beq.n	800a27a <_dtoa_r+0xa72>
 800a1d6:	3201      	adds	r2, #1
 800a1d8:	701a      	strb	r2, [r3, #0]
 800a1da:	e745      	b.n	800a068 <_dtoa_r+0x860>
 800a1dc:	2a00      	cmp	r2, #0
 800a1de:	dd03      	ble.n	800a1e8 <_dtoa_r+0x9e0>
 800a1e0:	2b39      	cmp	r3, #57	; 0x39
 800a1e2:	d0ee      	beq.n	800a1c2 <_dtoa_r+0x9ba>
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	e7c7      	b.n	800a178 <_dtoa_r+0x970>
 800a1e8:	9a04      	ldr	r2, [sp, #16]
 800a1ea:	9908      	ldr	r1, [sp, #32]
 800a1ec:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a1f0:	428a      	cmp	r2, r1
 800a1f2:	d02b      	beq.n	800a24c <_dtoa_r+0xa44>
 800a1f4:	4629      	mov	r1, r5
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	220a      	movs	r2, #10
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	f000 fc70 	bl	800aae0 <__multadd>
 800a200:	45b9      	cmp	r9, r7
 800a202:	4605      	mov	r5, r0
 800a204:	f04f 0300 	mov.w	r3, #0
 800a208:	f04f 020a 	mov.w	r2, #10
 800a20c:	4649      	mov	r1, r9
 800a20e:	4630      	mov	r0, r6
 800a210:	d107      	bne.n	800a222 <_dtoa_r+0xa1a>
 800a212:	f000 fc65 	bl	800aae0 <__multadd>
 800a216:	4681      	mov	r9, r0
 800a218:	4607      	mov	r7, r0
 800a21a:	9b04      	ldr	r3, [sp, #16]
 800a21c:	3301      	adds	r3, #1
 800a21e:	9304      	str	r3, [sp, #16]
 800a220:	e774      	b.n	800a10c <_dtoa_r+0x904>
 800a222:	f000 fc5d 	bl	800aae0 <__multadd>
 800a226:	4639      	mov	r1, r7
 800a228:	4681      	mov	r9, r0
 800a22a:	2300      	movs	r3, #0
 800a22c:	220a      	movs	r2, #10
 800a22e:	4630      	mov	r0, r6
 800a230:	f000 fc56 	bl	800aae0 <__multadd>
 800a234:	4607      	mov	r7, r0
 800a236:	e7f0      	b.n	800a21a <_dtoa_r+0xa12>
 800a238:	f1ba 0f00 	cmp.w	sl, #0
 800a23c:	9a01      	ldr	r2, [sp, #4]
 800a23e:	bfcc      	ite	gt
 800a240:	46d0      	movgt	r8, sl
 800a242:	f04f 0801 	movle.w	r8, #1
 800a246:	4490      	add	r8, r2
 800a248:	f04f 0900 	mov.w	r9, #0
 800a24c:	4629      	mov	r1, r5
 800a24e:	2201      	movs	r2, #1
 800a250:	4630      	mov	r0, r6
 800a252:	9302      	str	r3, [sp, #8]
 800a254:	f000 fe3e 	bl	800aed4 <__lshift>
 800a258:	4621      	mov	r1, r4
 800a25a:	4605      	mov	r5, r0
 800a25c:	f000 feaa 	bl	800afb4 <__mcmp>
 800a260:	2800      	cmp	r0, #0
 800a262:	dcb1      	bgt.n	800a1c8 <_dtoa_r+0x9c0>
 800a264:	d102      	bne.n	800a26c <_dtoa_r+0xa64>
 800a266:	9b02      	ldr	r3, [sp, #8]
 800a268:	07db      	lsls	r3, r3, #31
 800a26a:	d4ad      	bmi.n	800a1c8 <_dtoa_r+0x9c0>
 800a26c:	4643      	mov	r3, r8
 800a26e:	4698      	mov	r8, r3
 800a270:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a274:	2a30      	cmp	r2, #48	; 0x30
 800a276:	d0fa      	beq.n	800a26e <_dtoa_r+0xa66>
 800a278:	e6f6      	b.n	800a068 <_dtoa_r+0x860>
 800a27a:	9a01      	ldr	r2, [sp, #4]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d1a4      	bne.n	800a1ca <_dtoa_r+0x9c2>
 800a280:	f10b 0b01 	add.w	fp, fp, #1
 800a284:	2331      	movs	r3, #49	; 0x31
 800a286:	e778      	b.n	800a17a <_dtoa_r+0x972>
 800a288:	4b14      	ldr	r3, [pc, #80]	; (800a2dc <_dtoa_r+0xad4>)
 800a28a:	f7ff bb27 	b.w	80098dc <_dtoa_r+0xd4>
 800a28e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a290:	2b00      	cmp	r3, #0
 800a292:	f47f ab03 	bne.w	800989c <_dtoa_r+0x94>
 800a296:	4b12      	ldr	r3, [pc, #72]	; (800a2e0 <_dtoa_r+0xad8>)
 800a298:	f7ff bb20 	b.w	80098dc <_dtoa_r+0xd4>
 800a29c:	f1ba 0f00 	cmp.w	sl, #0
 800a2a0:	dc03      	bgt.n	800a2aa <_dtoa_r+0xaa2>
 800a2a2:	9b06      	ldr	r3, [sp, #24]
 800a2a4:	2b02      	cmp	r3, #2
 800a2a6:	f73f aec7 	bgt.w	800a038 <_dtoa_r+0x830>
 800a2aa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a2ae:	4621      	mov	r1, r4
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	f7ff fa1d 	bl	80096f0 <quorem>
 800a2b6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a2ba:	f808 3b01 	strb.w	r3, [r8], #1
 800a2be:	9a01      	ldr	r2, [sp, #4]
 800a2c0:	eba8 0202 	sub.w	r2, r8, r2
 800a2c4:	4592      	cmp	sl, r2
 800a2c6:	ddb7      	ble.n	800a238 <_dtoa_r+0xa30>
 800a2c8:	4629      	mov	r1, r5
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	220a      	movs	r2, #10
 800a2ce:	4630      	mov	r0, r6
 800a2d0:	f000 fc06 	bl	800aae0 <__multadd>
 800a2d4:	4605      	mov	r5, r0
 800a2d6:	e7ea      	b.n	800a2ae <_dtoa_r+0xaa6>
 800a2d8:	0800c680 	.word	0x0800c680
 800a2dc:	0800c480 	.word	0x0800c480
 800a2e0:	0800c601 	.word	0x0800c601

0800a2e4 <rshift>:
 800a2e4:	6903      	ldr	r3, [r0, #16]
 800a2e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a2ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a2f2:	f100 0414 	add.w	r4, r0, #20
 800a2f6:	dd45      	ble.n	800a384 <rshift+0xa0>
 800a2f8:	f011 011f 	ands.w	r1, r1, #31
 800a2fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a300:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a304:	d10c      	bne.n	800a320 <rshift+0x3c>
 800a306:	f100 0710 	add.w	r7, r0, #16
 800a30a:	4629      	mov	r1, r5
 800a30c:	42b1      	cmp	r1, r6
 800a30e:	d334      	bcc.n	800a37a <rshift+0x96>
 800a310:	1a9b      	subs	r3, r3, r2
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	1eea      	subs	r2, r5, #3
 800a316:	4296      	cmp	r6, r2
 800a318:	bf38      	it	cc
 800a31a:	2300      	movcc	r3, #0
 800a31c:	4423      	add	r3, r4
 800a31e:	e015      	b.n	800a34c <rshift+0x68>
 800a320:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a324:	f1c1 0820 	rsb	r8, r1, #32
 800a328:	40cf      	lsrs	r7, r1
 800a32a:	f105 0e04 	add.w	lr, r5, #4
 800a32e:	46a1      	mov	r9, r4
 800a330:	4576      	cmp	r6, lr
 800a332:	46f4      	mov	ip, lr
 800a334:	d815      	bhi.n	800a362 <rshift+0x7e>
 800a336:	1a9a      	subs	r2, r3, r2
 800a338:	0092      	lsls	r2, r2, #2
 800a33a:	3a04      	subs	r2, #4
 800a33c:	3501      	adds	r5, #1
 800a33e:	42ae      	cmp	r6, r5
 800a340:	bf38      	it	cc
 800a342:	2200      	movcc	r2, #0
 800a344:	18a3      	adds	r3, r4, r2
 800a346:	50a7      	str	r7, [r4, r2]
 800a348:	b107      	cbz	r7, 800a34c <rshift+0x68>
 800a34a:	3304      	adds	r3, #4
 800a34c:	1b1a      	subs	r2, r3, r4
 800a34e:	42a3      	cmp	r3, r4
 800a350:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a354:	bf08      	it	eq
 800a356:	2300      	moveq	r3, #0
 800a358:	6102      	str	r2, [r0, #16]
 800a35a:	bf08      	it	eq
 800a35c:	6143      	streq	r3, [r0, #20]
 800a35e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a362:	f8dc c000 	ldr.w	ip, [ip]
 800a366:	fa0c fc08 	lsl.w	ip, ip, r8
 800a36a:	ea4c 0707 	orr.w	r7, ip, r7
 800a36e:	f849 7b04 	str.w	r7, [r9], #4
 800a372:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a376:	40cf      	lsrs	r7, r1
 800a378:	e7da      	b.n	800a330 <rshift+0x4c>
 800a37a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a37e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a382:	e7c3      	b.n	800a30c <rshift+0x28>
 800a384:	4623      	mov	r3, r4
 800a386:	e7e1      	b.n	800a34c <rshift+0x68>

0800a388 <__hexdig_fun>:
 800a388:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a38c:	2b09      	cmp	r3, #9
 800a38e:	d802      	bhi.n	800a396 <__hexdig_fun+0xe>
 800a390:	3820      	subs	r0, #32
 800a392:	b2c0      	uxtb	r0, r0
 800a394:	4770      	bx	lr
 800a396:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a39a:	2b05      	cmp	r3, #5
 800a39c:	d801      	bhi.n	800a3a2 <__hexdig_fun+0x1a>
 800a39e:	3847      	subs	r0, #71	; 0x47
 800a3a0:	e7f7      	b.n	800a392 <__hexdig_fun+0xa>
 800a3a2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a3a6:	2b05      	cmp	r3, #5
 800a3a8:	d801      	bhi.n	800a3ae <__hexdig_fun+0x26>
 800a3aa:	3827      	subs	r0, #39	; 0x27
 800a3ac:	e7f1      	b.n	800a392 <__hexdig_fun+0xa>
 800a3ae:	2000      	movs	r0, #0
 800a3b0:	4770      	bx	lr
	...

0800a3b4 <__gethex>:
 800a3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3b8:	ed2d 8b02 	vpush	{d8}
 800a3bc:	b089      	sub	sp, #36	; 0x24
 800a3be:	ee08 0a10 	vmov	s16, r0
 800a3c2:	9304      	str	r3, [sp, #16]
 800a3c4:	4bb4      	ldr	r3, [pc, #720]	; (800a698 <__gethex+0x2e4>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	9301      	str	r3, [sp, #4]
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	468b      	mov	fp, r1
 800a3ce:	4690      	mov	r8, r2
 800a3d0:	f7f5 ff36 	bl	8000240 <strlen>
 800a3d4:	9b01      	ldr	r3, [sp, #4]
 800a3d6:	f8db 2000 	ldr.w	r2, [fp]
 800a3da:	4403      	add	r3, r0
 800a3dc:	4682      	mov	sl, r0
 800a3de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a3e2:	9305      	str	r3, [sp, #20]
 800a3e4:	1c93      	adds	r3, r2, #2
 800a3e6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a3ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a3ee:	32fe      	adds	r2, #254	; 0xfe
 800a3f0:	18d1      	adds	r1, r2, r3
 800a3f2:	461f      	mov	r7, r3
 800a3f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a3f8:	9100      	str	r1, [sp, #0]
 800a3fa:	2830      	cmp	r0, #48	; 0x30
 800a3fc:	d0f8      	beq.n	800a3f0 <__gethex+0x3c>
 800a3fe:	f7ff ffc3 	bl	800a388 <__hexdig_fun>
 800a402:	4604      	mov	r4, r0
 800a404:	2800      	cmp	r0, #0
 800a406:	d13a      	bne.n	800a47e <__gethex+0xca>
 800a408:	9901      	ldr	r1, [sp, #4]
 800a40a:	4652      	mov	r2, sl
 800a40c:	4638      	mov	r0, r7
 800a40e:	f001 fa2f 	bl	800b870 <strncmp>
 800a412:	4605      	mov	r5, r0
 800a414:	2800      	cmp	r0, #0
 800a416:	d168      	bne.n	800a4ea <__gethex+0x136>
 800a418:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a41c:	eb07 060a 	add.w	r6, r7, sl
 800a420:	f7ff ffb2 	bl	800a388 <__hexdig_fun>
 800a424:	2800      	cmp	r0, #0
 800a426:	d062      	beq.n	800a4ee <__gethex+0x13a>
 800a428:	4633      	mov	r3, r6
 800a42a:	7818      	ldrb	r0, [r3, #0]
 800a42c:	2830      	cmp	r0, #48	; 0x30
 800a42e:	461f      	mov	r7, r3
 800a430:	f103 0301 	add.w	r3, r3, #1
 800a434:	d0f9      	beq.n	800a42a <__gethex+0x76>
 800a436:	f7ff ffa7 	bl	800a388 <__hexdig_fun>
 800a43a:	2301      	movs	r3, #1
 800a43c:	fab0 f480 	clz	r4, r0
 800a440:	0964      	lsrs	r4, r4, #5
 800a442:	4635      	mov	r5, r6
 800a444:	9300      	str	r3, [sp, #0]
 800a446:	463a      	mov	r2, r7
 800a448:	4616      	mov	r6, r2
 800a44a:	3201      	adds	r2, #1
 800a44c:	7830      	ldrb	r0, [r6, #0]
 800a44e:	f7ff ff9b 	bl	800a388 <__hexdig_fun>
 800a452:	2800      	cmp	r0, #0
 800a454:	d1f8      	bne.n	800a448 <__gethex+0x94>
 800a456:	9901      	ldr	r1, [sp, #4]
 800a458:	4652      	mov	r2, sl
 800a45a:	4630      	mov	r0, r6
 800a45c:	f001 fa08 	bl	800b870 <strncmp>
 800a460:	b980      	cbnz	r0, 800a484 <__gethex+0xd0>
 800a462:	b94d      	cbnz	r5, 800a478 <__gethex+0xc4>
 800a464:	eb06 050a 	add.w	r5, r6, sl
 800a468:	462a      	mov	r2, r5
 800a46a:	4616      	mov	r6, r2
 800a46c:	3201      	adds	r2, #1
 800a46e:	7830      	ldrb	r0, [r6, #0]
 800a470:	f7ff ff8a 	bl	800a388 <__hexdig_fun>
 800a474:	2800      	cmp	r0, #0
 800a476:	d1f8      	bne.n	800a46a <__gethex+0xb6>
 800a478:	1bad      	subs	r5, r5, r6
 800a47a:	00ad      	lsls	r5, r5, #2
 800a47c:	e004      	b.n	800a488 <__gethex+0xd4>
 800a47e:	2400      	movs	r4, #0
 800a480:	4625      	mov	r5, r4
 800a482:	e7e0      	b.n	800a446 <__gethex+0x92>
 800a484:	2d00      	cmp	r5, #0
 800a486:	d1f7      	bne.n	800a478 <__gethex+0xc4>
 800a488:	7833      	ldrb	r3, [r6, #0]
 800a48a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a48e:	2b50      	cmp	r3, #80	; 0x50
 800a490:	d13b      	bne.n	800a50a <__gethex+0x156>
 800a492:	7873      	ldrb	r3, [r6, #1]
 800a494:	2b2b      	cmp	r3, #43	; 0x2b
 800a496:	d02c      	beq.n	800a4f2 <__gethex+0x13e>
 800a498:	2b2d      	cmp	r3, #45	; 0x2d
 800a49a:	d02e      	beq.n	800a4fa <__gethex+0x146>
 800a49c:	1c71      	adds	r1, r6, #1
 800a49e:	f04f 0900 	mov.w	r9, #0
 800a4a2:	7808      	ldrb	r0, [r1, #0]
 800a4a4:	f7ff ff70 	bl	800a388 <__hexdig_fun>
 800a4a8:	1e43      	subs	r3, r0, #1
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	2b18      	cmp	r3, #24
 800a4ae:	d82c      	bhi.n	800a50a <__gethex+0x156>
 800a4b0:	f1a0 0210 	sub.w	r2, r0, #16
 800a4b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a4b8:	f7ff ff66 	bl	800a388 <__hexdig_fun>
 800a4bc:	1e43      	subs	r3, r0, #1
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	2b18      	cmp	r3, #24
 800a4c2:	d91d      	bls.n	800a500 <__gethex+0x14c>
 800a4c4:	f1b9 0f00 	cmp.w	r9, #0
 800a4c8:	d000      	beq.n	800a4cc <__gethex+0x118>
 800a4ca:	4252      	negs	r2, r2
 800a4cc:	4415      	add	r5, r2
 800a4ce:	f8cb 1000 	str.w	r1, [fp]
 800a4d2:	b1e4      	cbz	r4, 800a50e <__gethex+0x15a>
 800a4d4:	9b00      	ldr	r3, [sp, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	bf14      	ite	ne
 800a4da:	2700      	movne	r7, #0
 800a4dc:	2706      	moveq	r7, #6
 800a4de:	4638      	mov	r0, r7
 800a4e0:	b009      	add	sp, #36	; 0x24
 800a4e2:	ecbd 8b02 	vpop	{d8}
 800a4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ea:	463e      	mov	r6, r7
 800a4ec:	4625      	mov	r5, r4
 800a4ee:	2401      	movs	r4, #1
 800a4f0:	e7ca      	b.n	800a488 <__gethex+0xd4>
 800a4f2:	f04f 0900 	mov.w	r9, #0
 800a4f6:	1cb1      	adds	r1, r6, #2
 800a4f8:	e7d3      	b.n	800a4a2 <__gethex+0xee>
 800a4fa:	f04f 0901 	mov.w	r9, #1
 800a4fe:	e7fa      	b.n	800a4f6 <__gethex+0x142>
 800a500:	230a      	movs	r3, #10
 800a502:	fb03 0202 	mla	r2, r3, r2, r0
 800a506:	3a10      	subs	r2, #16
 800a508:	e7d4      	b.n	800a4b4 <__gethex+0x100>
 800a50a:	4631      	mov	r1, r6
 800a50c:	e7df      	b.n	800a4ce <__gethex+0x11a>
 800a50e:	1bf3      	subs	r3, r6, r7
 800a510:	3b01      	subs	r3, #1
 800a512:	4621      	mov	r1, r4
 800a514:	2b07      	cmp	r3, #7
 800a516:	dc0b      	bgt.n	800a530 <__gethex+0x17c>
 800a518:	ee18 0a10 	vmov	r0, s16
 800a51c:	f000 fa7e 	bl	800aa1c <_Balloc>
 800a520:	4604      	mov	r4, r0
 800a522:	b940      	cbnz	r0, 800a536 <__gethex+0x182>
 800a524:	4b5d      	ldr	r3, [pc, #372]	; (800a69c <__gethex+0x2e8>)
 800a526:	4602      	mov	r2, r0
 800a528:	21de      	movs	r1, #222	; 0xde
 800a52a:	485d      	ldr	r0, [pc, #372]	; (800a6a0 <__gethex+0x2ec>)
 800a52c:	f001 f9c2 	bl	800b8b4 <__assert_func>
 800a530:	3101      	adds	r1, #1
 800a532:	105b      	asrs	r3, r3, #1
 800a534:	e7ee      	b.n	800a514 <__gethex+0x160>
 800a536:	f100 0914 	add.w	r9, r0, #20
 800a53a:	f04f 0b00 	mov.w	fp, #0
 800a53e:	f1ca 0301 	rsb	r3, sl, #1
 800a542:	f8cd 9008 	str.w	r9, [sp, #8]
 800a546:	f8cd b000 	str.w	fp, [sp]
 800a54a:	9306      	str	r3, [sp, #24]
 800a54c:	42b7      	cmp	r7, r6
 800a54e:	d340      	bcc.n	800a5d2 <__gethex+0x21e>
 800a550:	9802      	ldr	r0, [sp, #8]
 800a552:	9b00      	ldr	r3, [sp, #0]
 800a554:	f840 3b04 	str.w	r3, [r0], #4
 800a558:	eba0 0009 	sub.w	r0, r0, r9
 800a55c:	1080      	asrs	r0, r0, #2
 800a55e:	0146      	lsls	r6, r0, #5
 800a560:	6120      	str	r0, [r4, #16]
 800a562:	4618      	mov	r0, r3
 800a564:	f000 fb4c 	bl	800ac00 <__hi0bits>
 800a568:	1a30      	subs	r0, r6, r0
 800a56a:	f8d8 6000 	ldr.w	r6, [r8]
 800a56e:	42b0      	cmp	r0, r6
 800a570:	dd63      	ble.n	800a63a <__gethex+0x286>
 800a572:	1b87      	subs	r7, r0, r6
 800a574:	4639      	mov	r1, r7
 800a576:	4620      	mov	r0, r4
 800a578:	f000 feed 	bl	800b356 <__any_on>
 800a57c:	4682      	mov	sl, r0
 800a57e:	b1a8      	cbz	r0, 800a5ac <__gethex+0x1f8>
 800a580:	1e7b      	subs	r3, r7, #1
 800a582:	1159      	asrs	r1, r3, #5
 800a584:	f003 021f 	and.w	r2, r3, #31
 800a588:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a58c:	f04f 0a01 	mov.w	sl, #1
 800a590:	fa0a f202 	lsl.w	r2, sl, r2
 800a594:	420a      	tst	r2, r1
 800a596:	d009      	beq.n	800a5ac <__gethex+0x1f8>
 800a598:	4553      	cmp	r3, sl
 800a59a:	dd05      	ble.n	800a5a8 <__gethex+0x1f4>
 800a59c:	1eb9      	subs	r1, r7, #2
 800a59e:	4620      	mov	r0, r4
 800a5a0:	f000 fed9 	bl	800b356 <__any_on>
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	d145      	bne.n	800a634 <__gethex+0x280>
 800a5a8:	f04f 0a02 	mov.w	sl, #2
 800a5ac:	4639      	mov	r1, r7
 800a5ae:	4620      	mov	r0, r4
 800a5b0:	f7ff fe98 	bl	800a2e4 <rshift>
 800a5b4:	443d      	add	r5, r7
 800a5b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a5ba:	42ab      	cmp	r3, r5
 800a5bc:	da4c      	bge.n	800a658 <__gethex+0x2a4>
 800a5be:	ee18 0a10 	vmov	r0, s16
 800a5c2:	4621      	mov	r1, r4
 800a5c4:	f000 fa6a 	bl	800aa9c <_Bfree>
 800a5c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	6013      	str	r3, [r2, #0]
 800a5ce:	27a3      	movs	r7, #163	; 0xa3
 800a5d0:	e785      	b.n	800a4de <__gethex+0x12a>
 800a5d2:	1e73      	subs	r3, r6, #1
 800a5d4:	9a05      	ldr	r2, [sp, #20]
 800a5d6:	9303      	str	r3, [sp, #12]
 800a5d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d019      	beq.n	800a614 <__gethex+0x260>
 800a5e0:	f1bb 0f20 	cmp.w	fp, #32
 800a5e4:	d107      	bne.n	800a5f6 <__gethex+0x242>
 800a5e6:	9b02      	ldr	r3, [sp, #8]
 800a5e8:	9a00      	ldr	r2, [sp, #0]
 800a5ea:	f843 2b04 	str.w	r2, [r3], #4
 800a5ee:	9302      	str	r3, [sp, #8]
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	9300      	str	r3, [sp, #0]
 800a5f4:	469b      	mov	fp, r3
 800a5f6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a5fa:	f7ff fec5 	bl	800a388 <__hexdig_fun>
 800a5fe:	9b00      	ldr	r3, [sp, #0]
 800a600:	f000 000f 	and.w	r0, r0, #15
 800a604:	fa00 f00b 	lsl.w	r0, r0, fp
 800a608:	4303      	orrs	r3, r0
 800a60a:	9300      	str	r3, [sp, #0]
 800a60c:	f10b 0b04 	add.w	fp, fp, #4
 800a610:	9b03      	ldr	r3, [sp, #12]
 800a612:	e00d      	b.n	800a630 <__gethex+0x27c>
 800a614:	9b03      	ldr	r3, [sp, #12]
 800a616:	9a06      	ldr	r2, [sp, #24]
 800a618:	4413      	add	r3, r2
 800a61a:	42bb      	cmp	r3, r7
 800a61c:	d3e0      	bcc.n	800a5e0 <__gethex+0x22c>
 800a61e:	4618      	mov	r0, r3
 800a620:	9901      	ldr	r1, [sp, #4]
 800a622:	9307      	str	r3, [sp, #28]
 800a624:	4652      	mov	r2, sl
 800a626:	f001 f923 	bl	800b870 <strncmp>
 800a62a:	9b07      	ldr	r3, [sp, #28]
 800a62c:	2800      	cmp	r0, #0
 800a62e:	d1d7      	bne.n	800a5e0 <__gethex+0x22c>
 800a630:	461e      	mov	r6, r3
 800a632:	e78b      	b.n	800a54c <__gethex+0x198>
 800a634:	f04f 0a03 	mov.w	sl, #3
 800a638:	e7b8      	b.n	800a5ac <__gethex+0x1f8>
 800a63a:	da0a      	bge.n	800a652 <__gethex+0x29e>
 800a63c:	1a37      	subs	r7, r6, r0
 800a63e:	4621      	mov	r1, r4
 800a640:	ee18 0a10 	vmov	r0, s16
 800a644:	463a      	mov	r2, r7
 800a646:	f000 fc45 	bl	800aed4 <__lshift>
 800a64a:	1bed      	subs	r5, r5, r7
 800a64c:	4604      	mov	r4, r0
 800a64e:	f100 0914 	add.w	r9, r0, #20
 800a652:	f04f 0a00 	mov.w	sl, #0
 800a656:	e7ae      	b.n	800a5b6 <__gethex+0x202>
 800a658:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a65c:	42a8      	cmp	r0, r5
 800a65e:	dd72      	ble.n	800a746 <__gethex+0x392>
 800a660:	1b45      	subs	r5, r0, r5
 800a662:	42ae      	cmp	r6, r5
 800a664:	dc36      	bgt.n	800a6d4 <__gethex+0x320>
 800a666:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a66a:	2b02      	cmp	r3, #2
 800a66c:	d02a      	beq.n	800a6c4 <__gethex+0x310>
 800a66e:	2b03      	cmp	r3, #3
 800a670:	d02c      	beq.n	800a6cc <__gethex+0x318>
 800a672:	2b01      	cmp	r3, #1
 800a674:	d11c      	bne.n	800a6b0 <__gethex+0x2fc>
 800a676:	42ae      	cmp	r6, r5
 800a678:	d11a      	bne.n	800a6b0 <__gethex+0x2fc>
 800a67a:	2e01      	cmp	r6, #1
 800a67c:	d112      	bne.n	800a6a4 <__gethex+0x2f0>
 800a67e:	9a04      	ldr	r2, [sp, #16]
 800a680:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a684:	6013      	str	r3, [r2, #0]
 800a686:	2301      	movs	r3, #1
 800a688:	6123      	str	r3, [r4, #16]
 800a68a:	f8c9 3000 	str.w	r3, [r9]
 800a68e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a690:	2762      	movs	r7, #98	; 0x62
 800a692:	601c      	str	r4, [r3, #0]
 800a694:	e723      	b.n	800a4de <__gethex+0x12a>
 800a696:	bf00      	nop
 800a698:	0800c6f8 	.word	0x0800c6f8
 800a69c:	0800c680 	.word	0x0800c680
 800a6a0:	0800c691 	.word	0x0800c691
 800a6a4:	1e71      	subs	r1, r6, #1
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	f000 fe55 	bl	800b356 <__any_on>
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	d1e6      	bne.n	800a67e <__gethex+0x2ca>
 800a6b0:	ee18 0a10 	vmov	r0, s16
 800a6b4:	4621      	mov	r1, r4
 800a6b6:	f000 f9f1 	bl	800aa9c <_Bfree>
 800a6ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6bc:	2300      	movs	r3, #0
 800a6be:	6013      	str	r3, [r2, #0]
 800a6c0:	2750      	movs	r7, #80	; 0x50
 800a6c2:	e70c      	b.n	800a4de <__gethex+0x12a>
 800a6c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d1f2      	bne.n	800a6b0 <__gethex+0x2fc>
 800a6ca:	e7d8      	b.n	800a67e <__gethex+0x2ca>
 800a6cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d1d5      	bne.n	800a67e <__gethex+0x2ca>
 800a6d2:	e7ed      	b.n	800a6b0 <__gethex+0x2fc>
 800a6d4:	1e6f      	subs	r7, r5, #1
 800a6d6:	f1ba 0f00 	cmp.w	sl, #0
 800a6da:	d131      	bne.n	800a740 <__gethex+0x38c>
 800a6dc:	b127      	cbz	r7, 800a6e8 <__gethex+0x334>
 800a6de:	4639      	mov	r1, r7
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	f000 fe38 	bl	800b356 <__any_on>
 800a6e6:	4682      	mov	sl, r0
 800a6e8:	117b      	asrs	r3, r7, #5
 800a6ea:	2101      	movs	r1, #1
 800a6ec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a6f0:	f007 071f 	and.w	r7, r7, #31
 800a6f4:	fa01 f707 	lsl.w	r7, r1, r7
 800a6f8:	421f      	tst	r7, r3
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	bf18      	it	ne
 800a700:	f04a 0a02 	orrne.w	sl, sl, #2
 800a704:	1b76      	subs	r6, r6, r5
 800a706:	f7ff fded 	bl	800a2e4 <rshift>
 800a70a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a70e:	2702      	movs	r7, #2
 800a710:	f1ba 0f00 	cmp.w	sl, #0
 800a714:	d048      	beq.n	800a7a8 <__gethex+0x3f4>
 800a716:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a71a:	2b02      	cmp	r3, #2
 800a71c:	d015      	beq.n	800a74a <__gethex+0x396>
 800a71e:	2b03      	cmp	r3, #3
 800a720:	d017      	beq.n	800a752 <__gethex+0x39e>
 800a722:	2b01      	cmp	r3, #1
 800a724:	d109      	bne.n	800a73a <__gethex+0x386>
 800a726:	f01a 0f02 	tst.w	sl, #2
 800a72a:	d006      	beq.n	800a73a <__gethex+0x386>
 800a72c:	f8d9 0000 	ldr.w	r0, [r9]
 800a730:	ea4a 0a00 	orr.w	sl, sl, r0
 800a734:	f01a 0f01 	tst.w	sl, #1
 800a738:	d10e      	bne.n	800a758 <__gethex+0x3a4>
 800a73a:	f047 0710 	orr.w	r7, r7, #16
 800a73e:	e033      	b.n	800a7a8 <__gethex+0x3f4>
 800a740:	f04f 0a01 	mov.w	sl, #1
 800a744:	e7d0      	b.n	800a6e8 <__gethex+0x334>
 800a746:	2701      	movs	r7, #1
 800a748:	e7e2      	b.n	800a710 <__gethex+0x35c>
 800a74a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a74c:	f1c3 0301 	rsb	r3, r3, #1
 800a750:	9315      	str	r3, [sp, #84]	; 0x54
 800a752:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a754:	2b00      	cmp	r3, #0
 800a756:	d0f0      	beq.n	800a73a <__gethex+0x386>
 800a758:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a75c:	f104 0314 	add.w	r3, r4, #20
 800a760:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a764:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a768:	f04f 0c00 	mov.w	ip, #0
 800a76c:	4618      	mov	r0, r3
 800a76e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a772:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a776:	d01c      	beq.n	800a7b2 <__gethex+0x3fe>
 800a778:	3201      	adds	r2, #1
 800a77a:	6002      	str	r2, [r0, #0]
 800a77c:	2f02      	cmp	r7, #2
 800a77e:	f104 0314 	add.w	r3, r4, #20
 800a782:	d13f      	bne.n	800a804 <__gethex+0x450>
 800a784:	f8d8 2000 	ldr.w	r2, [r8]
 800a788:	3a01      	subs	r2, #1
 800a78a:	42b2      	cmp	r2, r6
 800a78c:	d10a      	bne.n	800a7a4 <__gethex+0x3f0>
 800a78e:	1171      	asrs	r1, r6, #5
 800a790:	2201      	movs	r2, #1
 800a792:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a796:	f006 061f 	and.w	r6, r6, #31
 800a79a:	fa02 f606 	lsl.w	r6, r2, r6
 800a79e:	421e      	tst	r6, r3
 800a7a0:	bf18      	it	ne
 800a7a2:	4617      	movne	r7, r2
 800a7a4:	f047 0720 	orr.w	r7, r7, #32
 800a7a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a7aa:	601c      	str	r4, [r3, #0]
 800a7ac:	9b04      	ldr	r3, [sp, #16]
 800a7ae:	601d      	str	r5, [r3, #0]
 800a7b0:	e695      	b.n	800a4de <__gethex+0x12a>
 800a7b2:	4299      	cmp	r1, r3
 800a7b4:	f843 cc04 	str.w	ip, [r3, #-4]
 800a7b8:	d8d8      	bhi.n	800a76c <__gethex+0x3b8>
 800a7ba:	68a3      	ldr	r3, [r4, #8]
 800a7bc:	459b      	cmp	fp, r3
 800a7be:	db19      	blt.n	800a7f4 <__gethex+0x440>
 800a7c0:	6861      	ldr	r1, [r4, #4]
 800a7c2:	ee18 0a10 	vmov	r0, s16
 800a7c6:	3101      	adds	r1, #1
 800a7c8:	f000 f928 	bl	800aa1c <_Balloc>
 800a7cc:	4681      	mov	r9, r0
 800a7ce:	b918      	cbnz	r0, 800a7d8 <__gethex+0x424>
 800a7d0:	4b1a      	ldr	r3, [pc, #104]	; (800a83c <__gethex+0x488>)
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	2184      	movs	r1, #132	; 0x84
 800a7d6:	e6a8      	b.n	800a52a <__gethex+0x176>
 800a7d8:	6922      	ldr	r2, [r4, #16]
 800a7da:	3202      	adds	r2, #2
 800a7dc:	f104 010c 	add.w	r1, r4, #12
 800a7e0:	0092      	lsls	r2, r2, #2
 800a7e2:	300c      	adds	r0, #12
 800a7e4:	f000 f90c 	bl	800aa00 <memcpy>
 800a7e8:	4621      	mov	r1, r4
 800a7ea:	ee18 0a10 	vmov	r0, s16
 800a7ee:	f000 f955 	bl	800aa9c <_Bfree>
 800a7f2:	464c      	mov	r4, r9
 800a7f4:	6923      	ldr	r3, [r4, #16]
 800a7f6:	1c5a      	adds	r2, r3, #1
 800a7f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a7fc:	6122      	str	r2, [r4, #16]
 800a7fe:	2201      	movs	r2, #1
 800a800:	615a      	str	r2, [r3, #20]
 800a802:	e7bb      	b.n	800a77c <__gethex+0x3c8>
 800a804:	6922      	ldr	r2, [r4, #16]
 800a806:	455a      	cmp	r2, fp
 800a808:	dd0b      	ble.n	800a822 <__gethex+0x46e>
 800a80a:	2101      	movs	r1, #1
 800a80c:	4620      	mov	r0, r4
 800a80e:	f7ff fd69 	bl	800a2e4 <rshift>
 800a812:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a816:	3501      	adds	r5, #1
 800a818:	42ab      	cmp	r3, r5
 800a81a:	f6ff aed0 	blt.w	800a5be <__gethex+0x20a>
 800a81e:	2701      	movs	r7, #1
 800a820:	e7c0      	b.n	800a7a4 <__gethex+0x3f0>
 800a822:	f016 061f 	ands.w	r6, r6, #31
 800a826:	d0fa      	beq.n	800a81e <__gethex+0x46a>
 800a828:	4453      	add	r3, sl
 800a82a:	f1c6 0620 	rsb	r6, r6, #32
 800a82e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a832:	f000 f9e5 	bl	800ac00 <__hi0bits>
 800a836:	42b0      	cmp	r0, r6
 800a838:	dbe7      	blt.n	800a80a <__gethex+0x456>
 800a83a:	e7f0      	b.n	800a81e <__gethex+0x46a>
 800a83c:	0800c680 	.word	0x0800c680

0800a840 <L_shift>:
 800a840:	f1c2 0208 	rsb	r2, r2, #8
 800a844:	0092      	lsls	r2, r2, #2
 800a846:	b570      	push	{r4, r5, r6, lr}
 800a848:	f1c2 0620 	rsb	r6, r2, #32
 800a84c:	6843      	ldr	r3, [r0, #4]
 800a84e:	6804      	ldr	r4, [r0, #0]
 800a850:	fa03 f506 	lsl.w	r5, r3, r6
 800a854:	432c      	orrs	r4, r5
 800a856:	40d3      	lsrs	r3, r2
 800a858:	6004      	str	r4, [r0, #0]
 800a85a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a85e:	4288      	cmp	r0, r1
 800a860:	d3f4      	bcc.n	800a84c <L_shift+0xc>
 800a862:	bd70      	pop	{r4, r5, r6, pc}

0800a864 <__match>:
 800a864:	b530      	push	{r4, r5, lr}
 800a866:	6803      	ldr	r3, [r0, #0]
 800a868:	3301      	adds	r3, #1
 800a86a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a86e:	b914      	cbnz	r4, 800a876 <__match+0x12>
 800a870:	6003      	str	r3, [r0, #0]
 800a872:	2001      	movs	r0, #1
 800a874:	bd30      	pop	{r4, r5, pc}
 800a876:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a87a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a87e:	2d19      	cmp	r5, #25
 800a880:	bf98      	it	ls
 800a882:	3220      	addls	r2, #32
 800a884:	42a2      	cmp	r2, r4
 800a886:	d0f0      	beq.n	800a86a <__match+0x6>
 800a888:	2000      	movs	r0, #0
 800a88a:	e7f3      	b.n	800a874 <__match+0x10>

0800a88c <__hexnan>:
 800a88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a890:	680b      	ldr	r3, [r1, #0]
 800a892:	115e      	asrs	r6, r3, #5
 800a894:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a898:	f013 031f 	ands.w	r3, r3, #31
 800a89c:	b087      	sub	sp, #28
 800a89e:	bf18      	it	ne
 800a8a0:	3604      	addne	r6, #4
 800a8a2:	2500      	movs	r5, #0
 800a8a4:	1f37      	subs	r7, r6, #4
 800a8a6:	4690      	mov	r8, r2
 800a8a8:	6802      	ldr	r2, [r0, #0]
 800a8aa:	9301      	str	r3, [sp, #4]
 800a8ac:	4682      	mov	sl, r0
 800a8ae:	f846 5c04 	str.w	r5, [r6, #-4]
 800a8b2:	46b9      	mov	r9, r7
 800a8b4:	463c      	mov	r4, r7
 800a8b6:	9502      	str	r5, [sp, #8]
 800a8b8:	46ab      	mov	fp, r5
 800a8ba:	7851      	ldrb	r1, [r2, #1]
 800a8bc:	1c53      	adds	r3, r2, #1
 800a8be:	9303      	str	r3, [sp, #12]
 800a8c0:	b341      	cbz	r1, 800a914 <__hexnan+0x88>
 800a8c2:	4608      	mov	r0, r1
 800a8c4:	9205      	str	r2, [sp, #20]
 800a8c6:	9104      	str	r1, [sp, #16]
 800a8c8:	f7ff fd5e 	bl	800a388 <__hexdig_fun>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	d14f      	bne.n	800a970 <__hexnan+0xe4>
 800a8d0:	9904      	ldr	r1, [sp, #16]
 800a8d2:	9a05      	ldr	r2, [sp, #20]
 800a8d4:	2920      	cmp	r1, #32
 800a8d6:	d818      	bhi.n	800a90a <__hexnan+0x7e>
 800a8d8:	9b02      	ldr	r3, [sp, #8]
 800a8da:	459b      	cmp	fp, r3
 800a8dc:	dd13      	ble.n	800a906 <__hexnan+0x7a>
 800a8de:	454c      	cmp	r4, r9
 800a8e0:	d206      	bcs.n	800a8f0 <__hexnan+0x64>
 800a8e2:	2d07      	cmp	r5, #7
 800a8e4:	dc04      	bgt.n	800a8f0 <__hexnan+0x64>
 800a8e6:	462a      	mov	r2, r5
 800a8e8:	4649      	mov	r1, r9
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	f7ff ffa8 	bl	800a840 <L_shift>
 800a8f0:	4544      	cmp	r4, r8
 800a8f2:	d950      	bls.n	800a996 <__hexnan+0x10a>
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	f1a4 0904 	sub.w	r9, r4, #4
 800a8fa:	f844 3c04 	str.w	r3, [r4, #-4]
 800a8fe:	f8cd b008 	str.w	fp, [sp, #8]
 800a902:	464c      	mov	r4, r9
 800a904:	461d      	mov	r5, r3
 800a906:	9a03      	ldr	r2, [sp, #12]
 800a908:	e7d7      	b.n	800a8ba <__hexnan+0x2e>
 800a90a:	2929      	cmp	r1, #41	; 0x29
 800a90c:	d156      	bne.n	800a9bc <__hexnan+0x130>
 800a90e:	3202      	adds	r2, #2
 800a910:	f8ca 2000 	str.w	r2, [sl]
 800a914:	f1bb 0f00 	cmp.w	fp, #0
 800a918:	d050      	beq.n	800a9bc <__hexnan+0x130>
 800a91a:	454c      	cmp	r4, r9
 800a91c:	d206      	bcs.n	800a92c <__hexnan+0xa0>
 800a91e:	2d07      	cmp	r5, #7
 800a920:	dc04      	bgt.n	800a92c <__hexnan+0xa0>
 800a922:	462a      	mov	r2, r5
 800a924:	4649      	mov	r1, r9
 800a926:	4620      	mov	r0, r4
 800a928:	f7ff ff8a 	bl	800a840 <L_shift>
 800a92c:	4544      	cmp	r4, r8
 800a92e:	d934      	bls.n	800a99a <__hexnan+0x10e>
 800a930:	f1a8 0204 	sub.w	r2, r8, #4
 800a934:	4623      	mov	r3, r4
 800a936:	f853 1b04 	ldr.w	r1, [r3], #4
 800a93a:	f842 1f04 	str.w	r1, [r2, #4]!
 800a93e:	429f      	cmp	r7, r3
 800a940:	d2f9      	bcs.n	800a936 <__hexnan+0xaa>
 800a942:	1b3b      	subs	r3, r7, r4
 800a944:	f023 0303 	bic.w	r3, r3, #3
 800a948:	3304      	adds	r3, #4
 800a94a:	3401      	adds	r4, #1
 800a94c:	3e03      	subs	r6, #3
 800a94e:	42b4      	cmp	r4, r6
 800a950:	bf88      	it	hi
 800a952:	2304      	movhi	r3, #4
 800a954:	4443      	add	r3, r8
 800a956:	2200      	movs	r2, #0
 800a958:	f843 2b04 	str.w	r2, [r3], #4
 800a95c:	429f      	cmp	r7, r3
 800a95e:	d2fb      	bcs.n	800a958 <__hexnan+0xcc>
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	b91b      	cbnz	r3, 800a96c <__hexnan+0xe0>
 800a964:	4547      	cmp	r7, r8
 800a966:	d127      	bne.n	800a9b8 <__hexnan+0x12c>
 800a968:	2301      	movs	r3, #1
 800a96a:	603b      	str	r3, [r7, #0]
 800a96c:	2005      	movs	r0, #5
 800a96e:	e026      	b.n	800a9be <__hexnan+0x132>
 800a970:	3501      	adds	r5, #1
 800a972:	2d08      	cmp	r5, #8
 800a974:	f10b 0b01 	add.w	fp, fp, #1
 800a978:	dd06      	ble.n	800a988 <__hexnan+0xfc>
 800a97a:	4544      	cmp	r4, r8
 800a97c:	d9c3      	bls.n	800a906 <__hexnan+0x7a>
 800a97e:	2300      	movs	r3, #0
 800a980:	f844 3c04 	str.w	r3, [r4, #-4]
 800a984:	2501      	movs	r5, #1
 800a986:	3c04      	subs	r4, #4
 800a988:	6822      	ldr	r2, [r4, #0]
 800a98a:	f000 000f 	and.w	r0, r0, #15
 800a98e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a992:	6022      	str	r2, [r4, #0]
 800a994:	e7b7      	b.n	800a906 <__hexnan+0x7a>
 800a996:	2508      	movs	r5, #8
 800a998:	e7b5      	b.n	800a906 <__hexnan+0x7a>
 800a99a:	9b01      	ldr	r3, [sp, #4]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d0df      	beq.n	800a960 <__hexnan+0xd4>
 800a9a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9a4:	f1c3 0320 	rsb	r3, r3, #32
 800a9a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a9ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a9b0:	401a      	ands	r2, r3
 800a9b2:	f846 2c04 	str.w	r2, [r6, #-4]
 800a9b6:	e7d3      	b.n	800a960 <__hexnan+0xd4>
 800a9b8:	3f04      	subs	r7, #4
 800a9ba:	e7d1      	b.n	800a960 <__hexnan+0xd4>
 800a9bc:	2004      	movs	r0, #4
 800a9be:	b007      	add	sp, #28
 800a9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a9c4 <_localeconv_r>:
 800a9c4:	4800      	ldr	r0, [pc, #0]	; (800a9c8 <_localeconv_r+0x4>)
 800a9c6:	4770      	bx	lr
 800a9c8:	2000016c 	.word	0x2000016c

0800a9cc <malloc>:
 800a9cc:	4b02      	ldr	r3, [pc, #8]	; (800a9d8 <malloc+0xc>)
 800a9ce:	4601      	mov	r1, r0
 800a9d0:	6818      	ldr	r0, [r3, #0]
 800a9d2:	f000 bd63 	b.w	800b49c <_malloc_r>
 800a9d6:	bf00      	nop
 800a9d8:	20000014 	.word	0x20000014

0800a9dc <__ascii_mbtowc>:
 800a9dc:	b082      	sub	sp, #8
 800a9de:	b901      	cbnz	r1, 800a9e2 <__ascii_mbtowc+0x6>
 800a9e0:	a901      	add	r1, sp, #4
 800a9e2:	b142      	cbz	r2, 800a9f6 <__ascii_mbtowc+0x1a>
 800a9e4:	b14b      	cbz	r3, 800a9fa <__ascii_mbtowc+0x1e>
 800a9e6:	7813      	ldrb	r3, [r2, #0]
 800a9e8:	600b      	str	r3, [r1, #0]
 800a9ea:	7812      	ldrb	r2, [r2, #0]
 800a9ec:	1e10      	subs	r0, r2, #0
 800a9ee:	bf18      	it	ne
 800a9f0:	2001      	movne	r0, #1
 800a9f2:	b002      	add	sp, #8
 800a9f4:	4770      	bx	lr
 800a9f6:	4610      	mov	r0, r2
 800a9f8:	e7fb      	b.n	800a9f2 <__ascii_mbtowc+0x16>
 800a9fa:	f06f 0001 	mvn.w	r0, #1
 800a9fe:	e7f8      	b.n	800a9f2 <__ascii_mbtowc+0x16>

0800aa00 <memcpy>:
 800aa00:	440a      	add	r2, r1
 800aa02:	4291      	cmp	r1, r2
 800aa04:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa08:	d100      	bne.n	800aa0c <memcpy+0xc>
 800aa0a:	4770      	bx	lr
 800aa0c:	b510      	push	{r4, lr}
 800aa0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa16:	4291      	cmp	r1, r2
 800aa18:	d1f9      	bne.n	800aa0e <memcpy+0xe>
 800aa1a:	bd10      	pop	{r4, pc}

0800aa1c <_Balloc>:
 800aa1c:	b570      	push	{r4, r5, r6, lr}
 800aa1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aa20:	4604      	mov	r4, r0
 800aa22:	460d      	mov	r5, r1
 800aa24:	b976      	cbnz	r6, 800aa44 <_Balloc+0x28>
 800aa26:	2010      	movs	r0, #16
 800aa28:	f7ff ffd0 	bl	800a9cc <malloc>
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	6260      	str	r0, [r4, #36]	; 0x24
 800aa30:	b920      	cbnz	r0, 800aa3c <_Balloc+0x20>
 800aa32:	4b18      	ldr	r3, [pc, #96]	; (800aa94 <_Balloc+0x78>)
 800aa34:	4818      	ldr	r0, [pc, #96]	; (800aa98 <_Balloc+0x7c>)
 800aa36:	2166      	movs	r1, #102	; 0x66
 800aa38:	f000 ff3c 	bl	800b8b4 <__assert_func>
 800aa3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa40:	6006      	str	r6, [r0, #0]
 800aa42:	60c6      	str	r6, [r0, #12]
 800aa44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aa46:	68f3      	ldr	r3, [r6, #12]
 800aa48:	b183      	cbz	r3, 800aa6c <_Balloc+0x50>
 800aa4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa52:	b9b8      	cbnz	r0, 800aa84 <_Balloc+0x68>
 800aa54:	2101      	movs	r1, #1
 800aa56:	fa01 f605 	lsl.w	r6, r1, r5
 800aa5a:	1d72      	adds	r2, r6, #5
 800aa5c:	0092      	lsls	r2, r2, #2
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f000 fc9a 	bl	800b398 <_calloc_r>
 800aa64:	b160      	cbz	r0, 800aa80 <_Balloc+0x64>
 800aa66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa6a:	e00e      	b.n	800aa8a <_Balloc+0x6e>
 800aa6c:	2221      	movs	r2, #33	; 0x21
 800aa6e:	2104      	movs	r1, #4
 800aa70:	4620      	mov	r0, r4
 800aa72:	f000 fc91 	bl	800b398 <_calloc_r>
 800aa76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa78:	60f0      	str	r0, [r6, #12]
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d1e4      	bne.n	800aa4a <_Balloc+0x2e>
 800aa80:	2000      	movs	r0, #0
 800aa82:	bd70      	pop	{r4, r5, r6, pc}
 800aa84:	6802      	ldr	r2, [r0, #0]
 800aa86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa90:	e7f7      	b.n	800aa82 <_Balloc+0x66>
 800aa92:	bf00      	nop
 800aa94:	0800c60e 	.word	0x0800c60e
 800aa98:	0800c70c 	.word	0x0800c70c

0800aa9c <_Bfree>:
 800aa9c:	b570      	push	{r4, r5, r6, lr}
 800aa9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aaa0:	4605      	mov	r5, r0
 800aaa2:	460c      	mov	r4, r1
 800aaa4:	b976      	cbnz	r6, 800aac4 <_Bfree+0x28>
 800aaa6:	2010      	movs	r0, #16
 800aaa8:	f7ff ff90 	bl	800a9cc <malloc>
 800aaac:	4602      	mov	r2, r0
 800aaae:	6268      	str	r0, [r5, #36]	; 0x24
 800aab0:	b920      	cbnz	r0, 800aabc <_Bfree+0x20>
 800aab2:	4b09      	ldr	r3, [pc, #36]	; (800aad8 <_Bfree+0x3c>)
 800aab4:	4809      	ldr	r0, [pc, #36]	; (800aadc <_Bfree+0x40>)
 800aab6:	218a      	movs	r1, #138	; 0x8a
 800aab8:	f000 fefc 	bl	800b8b4 <__assert_func>
 800aabc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aac0:	6006      	str	r6, [r0, #0]
 800aac2:	60c6      	str	r6, [r0, #12]
 800aac4:	b13c      	cbz	r4, 800aad6 <_Bfree+0x3a>
 800aac6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aac8:	6862      	ldr	r2, [r4, #4]
 800aaca:	68db      	ldr	r3, [r3, #12]
 800aacc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aad0:	6021      	str	r1, [r4, #0]
 800aad2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aad6:	bd70      	pop	{r4, r5, r6, pc}
 800aad8:	0800c60e 	.word	0x0800c60e
 800aadc:	0800c70c 	.word	0x0800c70c

0800aae0 <__multadd>:
 800aae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aae4:	690d      	ldr	r5, [r1, #16]
 800aae6:	4607      	mov	r7, r0
 800aae8:	460c      	mov	r4, r1
 800aaea:	461e      	mov	r6, r3
 800aaec:	f101 0c14 	add.w	ip, r1, #20
 800aaf0:	2000      	movs	r0, #0
 800aaf2:	f8dc 3000 	ldr.w	r3, [ip]
 800aaf6:	b299      	uxth	r1, r3
 800aaf8:	fb02 6101 	mla	r1, r2, r1, r6
 800aafc:	0c1e      	lsrs	r6, r3, #16
 800aafe:	0c0b      	lsrs	r3, r1, #16
 800ab00:	fb02 3306 	mla	r3, r2, r6, r3
 800ab04:	b289      	uxth	r1, r1
 800ab06:	3001      	adds	r0, #1
 800ab08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab0c:	4285      	cmp	r5, r0
 800ab0e:	f84c 1b04 	str.w	r1, [ip], #4
 800ab12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab16:	dcec      	bgt.n	800aaf2 <__multadd+0x12>
 800ab18:	b30e      	cbz	r6, 800ab5e <__multadd+0x7e>
 800ab1a:	68a3      	ldr	r3, [r4, #8]
 800ab1c:	42ab      	cmp	r3, r5
 800ab1e:	dc19      	bgt.n	800ab54 <__multadd+0x74>
 800ab20:	6861      	ldr	r1, [r4, #4]
 800ab22:	4638      	mov	r0, r7
 800ab24:	3101      	adds	r1, #1
 800ab26:	f7ff ff79 	bl	800aa1c <_Balloc>
 800ab2a:	4680      	mov	r8, r0
 800ab2c:	b928      	cbnz	r0, 800ab3a <__multadd+0x5a>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	4b0c      	ldr	r3, [pc, #48]	; (800ab64 <__multadd+0x84>)
 800ab32:	480d      	ldr	r0, [pc, #52]	; (800ab68 <__multadd+0x88>)
 800ab34:	21b5      	movs	r1, #181	; 0xb5
 800ab36:	f000 febd 	bl	800b8b4 <__assert_func>
 800ab3a:	6922      	ldr	r2, [r4, #16]
 800ab3c:	3202      	adds	r2, #2
 800ab3e:	f104 010c 	add.w	r1, r4, #12
 800ab42:	0092      	lsls	r2, r2, #2
 800ab44:	300c      	adds	r0, #12
 800ab46:	f7ff ff5b 	bl	800aa00 <memcpy>
 800ab4a:	4621      	mov	r1, r4
 800ab4c:	4638      	mov	r0, r7
 800ab4e:	f7ff ffa5 	bl	800aa9c <_Bfree>
 800ab52:	4644      	mov	r4, r8
 800ab54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab58:	3501      	adds	r5, #1
 800ab5a:	615e      	str	r6, [r3, #20]
 800ab5c:	6125      	str	r5, [r4, #16]
 800ab5e:	4620      	mov	r0, r4
 800ab60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab64:	0800c680 	.word	0x0800c680
 800ab68:	0800c70c 	.word	0x0800c70c

0800ab6c <__s2b>:
 800ab6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab70:	460c      	mov	r4, r1
 800ab72:	4615      	mov	r5, r2
 800ab74:	461f      	mov	r7, r3
 800ab76:	2209      	movs	r2, #9
 800ab78:	3308      	adds	r3, #8
 800ab7a:	4606      	mov	r6, r0
 800ab7c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab80:	2100      	movs	r1, #0
 800ab82:	2201      	movs	r2, #1
 800ab84:	429a      	cmp	r2, r3
 800ab86:	db09      	blt.n	800ab9c <__s2b+0x30>
 800ab88:	4630      	mov	r0, r6
 800ab8a:	f7ff ff47 	bl	800aa1c <_Balloc>
 800ab8e:	b940      	cbnz	r0, 800aba2 <__s2b+0x36>
 800ab90:	4602      	mov	r2, r0
 800ab92:	4b19      	ldr	r3, [pc, #100]	; (800abf8 <__s2b+0x8c>)
 800ab94:	4819      	ldr	r0, [pc, #100]	; (800abfc <__s2b+0x90>)
 800ab96:	21ce      	movs	r1, #206	; 0xce
 800ab98:	f000 fe8c 	bl	800b8b4 <__assert_func>
 800ab9c:	0052      	lsls	r2, r2, #1
 800ab9e:	3101      	adds	r1, #1
 800aba0:	e7f0      	b.n	800ab84 <__s2b+0x18>
 800aba2:	9b08      	ldr	r3, [sp, #32]
 800aba4:	6143      	str	r3, [r0, #20]
 800aba6:	2d09      	cmp	r5, #9
 800aba8:	f04f 0301 	mov.w	r3, #1
 800abac:	6103      	str	r3, [r0, #16]
 800abae:	dd16      	ble.n	800abde <__s2b+0x72>
 800abb0:	f104 0909 	add.w	r9, r4, #9
 800abb4:	46c8      	mov	r8, r9
 800abb6:	442c      	add	r4, r5
 800abb8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800abbc:	4601      	mov	r1, r0
 800abbe:	3b30      	subs	r3, #48	; 0x30
 800abc0:	220a      	movs	r2, #10
 800abc2:	4630      	mov	r0, r6
 800abc4:	f7ff ff8c 	bl	800aae0 <__multadd>
 800abc8:	45a0      	cmp	r8, r4
 800abca:	d1f5      	bne.n	800abb8 <__s2b+0x4c>
 800abcc:	f1a5 0408 	sub.w	r4, r5, #8
 800abd0:	444c      	add	r4, r9
 800abd2:	1b2d      	subs	r5, r5, r4
 800abd4:	1963      	adds	r3, r4, r5
 800abd6:	42bb      	cmp	r3, r7
 800abd8:	db04      	blt.n	800abe4 <__s2b+0x78>
 800abda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abde:	340a      	adds	r4, #10
 800abe0:	2509      	movs	r5, #9
 800abe2:	e7f6      	b.n	800abd2 <__s2b+0x66>
 800abe4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800abe8:	4601      	mov	r1, r0
 800abea:	3b30      	subs	r3, #48	; 0x30
 800abec:	220a      	movs	r2, #10
 800abee:	4630      	mov	r0, r6
 800abf0:	f7ff ff76 	bl	800aae0 <__multadd>
 800abf4:	e7ee      	b.n	800abd4 <__s2b+0x68>
 800abf6:	bf00      	nop
 800abf8:	0800c680 	.word	0x0800c680
 800abfc:	0800c70c 	.word	0x0800c70c

0800ac00 <__hi0bits>:
 800ac00:	0c03      	lsrs	r3, r0, #16
 800ac02:	041b      	lsls	r3, r3, #16
 800ac04:	b9d3      	cbnz	r3, 800ac3c <__hi0bits+0x3c>
 800ac06:	0400      	lsls	r0, r0, #16
 800ac08:	2310      	movs	r3, #16
 800ac0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ac0e:	bf04      	itt	eq
 800ac10:	0200      	lsleq	r0, r0, #8
 800ac12:	3308      	addeq	r3, #8
 800ac14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ac18:	bf04      	itt	eq
 800ac1a:	0100      	lsleq	r0, r0, #4
 800ac1c:	3304      	addeq	r3, #4
 800ac1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ac22:	bf04      	itt	eq
 800ac24:	0080      	lsleq	r0, r0, #2
 800ac26:	3302      	addeq	r3, #2
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	db05      	blt.n	800ac38 <__hi0bits+0x38>
 800ac2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ac30:	f103 0301 	add.w	r3, r3, #1
 800ac34:	bf08      	it	eq
 800ac36:	2320      	moveq	r3, #32
 800ac38:	4618      	mov	r0, r3
 800ac3a:	4770      	bx	lr
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	e7e4      	b.n	800ac0a <__hi0bits+0xa>

0800ac40 <__lo0bits>:
 800ac40:	6803      	ldr	r3, [r0, #0]
 800ac42:	f013 0207 	ands.w	r2, r3, #7
 800ac46:	4601      	mov	r1, r0
 800ac48:	d00b      	beq.n	800ac62 <__lo0bits+0x22>
 800ac4a:	07da      	lsls	r2, r3, #31
 800ac4c:	d423      	bmi.n	800ac96 <__lo0bits+0x56>
 800ac4e:	0798      	lsls	r0, r3, #30
 800ac50:	bf49      	itett	mi
 800ac52:	085b      	lsrmi	r3, r3, #1
 800ac54:	089b      	lsrpl	r3, r3, #2
 800ac56:	2001      	movmi	r0, #1
 800ac58:	600b      	strmi	r3, [r1, #0]
 800ac5a:	bf5c      	itt	pl
 800ac5c:	600b      	strpl	r3, [r1, #0]
 800ac5e:	2002      	movpl	r0, #2
 800ac60:	4770      	bx	lr
 800ac62:	b298      	uxth	r0, r3
 800ac64:	b9a8      	cbnz	r0, 800ac92 <__lo0bits+0x52>
 800ac66:	0c1b      	lsrs	r3, r3, #16
 800ac68:	2010      	movs	r0, #16
 800ac6a:	b2da      	uxtb	r2, r3
 800ac6c:	b90a      	cbnz	r2, 800ac72 <__lo0bits+0x32>
 800ac6e:	3008      	adds	r0, #8
 800ac70:	0a1b      	lsrs	r3, r3, #8
 800ac72:	071a      	lsls	r2, r3, #28
 800ac74:	bf04      	itt	eq
 800ac76:	091b      	lsreq	r3, r3, #4
 800ac78:	3004      	addeq	r0, #4
 800ac7a:	079a      	lsls	r2, r3, #30
 800ac7c:	bf04      	itt	eq
 800ac7e:	089b      	lsreq	r3, r3, #2
 800ac80:	3002      	addeq	r0, #2
 800ac82:	07da      	lsls	r2, r3, #31
 800ac84:	d403      	bmi.n	800ac8e <__lo0bits+0x4e>
 800ac86:	085b      	lsrs	r3, r3, #1
 800ac88:	f100 0001 	add.w	r0, r0, #1
 800ac8c:	d005      	beq.n	800ac9a <__lo0bits+0x5a>
 800ac8e:	600b      	str	r3, [r1, #0]
 800ac90:	4770      	bx	lr
 800ac92:	4610      	mov	r0, r2
 800ac94:	e7e9      	b.n	800ac6a <__lo0bits+0x2a>
 800ac96:	2000      	movs	r0, #0
 800ac98:	4770      	bx	lr
 800ac9a:	2020      	movs	r0, #32
 800ac9c:	4770      	bx	lr
	...

0800aca0 <__i2b>:
 800aca0:	b510      	push	{r4, lr}
 800aca2:	460c      	mov	r4, r1
 800aca4:	2101      	movs	r1, #1
 800aca6:	f7ff feb9 	bl	800aa1c <_Balloc>
 800acaa:	4602      	mov	r2, r0
 800acac:	b928      	cbnz	r0, 800acba <__i2b+0x1a>
 800acae:	4b05      	ldr	r3, [pc, #20]	; (800acc4 <__i2b+0x24>)
 800acb0:	4805      	ldr	r0, [pc, #20]	; (800acc8 <__i2b+0x28>)
 800acb2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800acb6:	f000 fdfd 	bl	800b8b4 <__assert_func>
 800acba:	2301      	movs	r3, #1
 800acbc:	6144      	str	r4, [r0, #20]
 800acbe:	6103      	str	r3, [r0, #16]
 800acc0:	bd10      	pop	{r4, pc}
 800acc2:	bf00      	nop
 800acc4:	0800c680 	.word	0x0800c680
 800acc8:	0800c70c 	.word	0x0800c70c

0800accc <__multiply>:
 800accc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acd0:	4691      	mov	r9, r2
 800acd2:	690a      	ldr	r2, [r1, #16]
 800acd4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800acd8:	429a      	cmp	r2, r3
 800acda:	bfb8      	it	lt
 800acdc:	460b      	movlt	r3, r1
 800acde:	460c      	mov	r4, r1
 800ace0:	bfbc      	itt	lt
 800ace2:	464c      	movlt	r4, r9
 800ace4:	4699      	movlt	r9, r3
 800ace6:	6927      	ldr	r7, [r4, #16]
 800ace8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800acec:	68a3      	ldr	r3, [r4, #8]
 800acee:	6861      	ldr	r1, [r4, #4]
 800acf0:	eb07 060a 	add.w	r6, r7, sl
 800acf4:	42b3      	cmp	r3, r6
 800acf6:	b085      	sub	sp, #20
 800acf8:	bfb8      	it	lt
 800acfa:	3101      	addlt	r1, #1
 800acfc:	f7ff fe8e 	bl	800aa1c <_Balloc>
 800ad00:	b930      	cbnz	r0, 800ad10 <__multiply+0x44>
 800ad02:	4602      	mov	r2, r0
 800ad04:	4b44      	ldr	r3, [pc, #272]	; (800ae18 <__multiply+0x14c>)
 800ad06:	4845      	ldr	r0, [pc, #276]	; (800ae1c <__multiply+0x150>)
 800ad08:	f240 115d 	movw	r1, #349	; 0x15d
 800ad0c:	f000 fdd2 	bl	800b8b4 <__assert_func>
 800ad10:	f100 0514 	add.w	r5, r0, #20
 800ad14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ad18:	462b      	mov	r3, r5
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	4543      	cmp	r3, r8
 800ad1e:	d321      	bcc.n	800ad64 <__multiply+0x98>
 800ad20:	f104 0314 	add.w	r3, r4, #20
 800ad24:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ad28:	f109 0314 	add.w	r3, r9, #20
 800ad2c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ad30:	9202      	str	r2, [sp, #8]
 800ad32:	1b3a      	subs	r2, r7, r4
 800ad34:	3a15      	subs	r2, #21
 800ad36:	f022 0203 	bic.w	r2, r2, #3
 800ad3a:	3204      	adds	r2, #4
 800ad3c:	f104 0115 	add.w	r1, r4, #21
 800ad40:	428f      	cmp	r7, r1
 800ad42:	bf38      	it	cc
 800ad44:	2204      	movcc	r2, #4
 800ad46:	9201      	str	r2, [sp, #4]
 800ad48:	9a02      	ldr	r2, [sp, #8]
 800ad4a:	9303      	str	r3, [sp, #12]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d80c      	bhi.n	800ad6a <__multiply+0x9e>
 800ad50:	2e00      	cmp	r6, #0
 800ad52:	dd03      	ble.n	800ad5c <__multiply+0x90>
 800ad54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d05a      	beq.n	800ae12 <__multiply+0x146>
 800ad5c:	6106      	str	r6, [r0, #16]
 800ad5e:	b005      	add	sp, #20
 800ad60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad64:	f843 2b04 	str.w	r2, [r3], #4
 800ad68:	e7d8      	b.n	800ad1c <__multiply+0x50>
 800ad6a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ad6e:	f1ba 0f00 	cmp.w	sl, #0
 800ad72:	d024      	beq.n	800adbe <__multiply+0xf2>
 800ad74:	f104 0e14 	add.w	lr, r4, #20
 800ad78:	46a9      	mov	r9, r5
 800ad7a:	f04f 0c00 	mov.w	ip, #0
 800ad7e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ad82:	f8d9 1000 	ldr.w	r1, [r9]
 800ad86:	fa1f fb82 	uxth.w	fp, r2
 800ad8a:	b289      	uxth	r1, r1
 800ad8c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ad90:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ad94:	f8d9 2000 	ldr.w	r2, [r9]
 800ad98:	4461      	add	r1, ip
 800ad9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad9e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ada2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ada6:	b289      	uxth	r1, r1
 800ada8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800adac:	4577      	cmp	r7, lr
 800adae:	f849 1b04 	str.w	r1, [r9], #4
 800adb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800adb6:	d8e2      	bhi.n	800ad7e <__multiply+0xb2>
 800adb8:	9a01      	ldr	r2, [sp, #4]
 800adba:	f845 c002 	str.w	ip, [r5, r2]
 800adbe:	9a03      	ldr	r2, [sp, #12]
 800adc0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800adc4:	3304      	adds	r3, #4
 800adc6:	f1b9 0f00 	cmp.w	r9, #0
 800adca:	d020      	beq.n	800ae0e <__multiply+0x142>
 800adcc:	6829      	ldr	r1, [r5, #0]
 800adce:	f104 0c14 	add.w	ip, r4, #20
 800add2:	46ae      	mov	lr, r5
 800add4:	f04f 0a00 	mov.w	sl, #0
 800add8:	f8bc b000 	ldrh.w	fp, [ip]
 800addc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ade0:	fb09 220b 	mla	r2, r9, fp, r2
 800ade4:	4492      	add	sl, r2
 800ade6:	b289      	uxth	r1, r1
 800ade8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800adec:	f84e 1b04 	str.w	r1, [lr], #4
 800adf0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800adf4:	f8be 1000 	ldrh.w	r1, [lr]
 800adf8:	0c12      	lsrs	r2, r2, #16
 800adfa:	fb09 1102 	mla	r1, r9, r2, r1
 800adfe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ae02:	4567      	cmp	r7, ip
 800ae04:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ae08:	d8e6      	bhi.n	800add8 <__multiply+0x10c>
 800ae0a:	9a01      	ldr	r2, [sp, #4]
 800ae0c:	50a9      	str	r1, [r5, r2]
 800ae0e:	3504      	adds	r5, #4
 800ae10:	e79a      	b.n	800ad48 <__multiply+0x7c>
 800ae12:	3e01      	subs	r6, #1
 800ae14:	e79c      	b.n	800ad50 <__multiply+0x84>
 800ae16:	bf00      	nop
 800ae18:	0800c680 	.word	0x0800c680
 800ae1c:	0800c70c 	.word	0x0800c70c

0800ae20 <__pow5mult>:
 800ae20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae24:	4615      	mov	r5, r2
 800ae26:	f012 0203 	ands.w	r2, r2, #3
 800ae2a:	4606      	mov	r6, r0
 800ae2c:	460f      	mov	r7, r1
 800ae2e:	d007      	beq.n	800ae40 <__pow5mult+0x20>
 800ae30:	4c25      	ldr	r4, [pc, #148]	; (800aec8 <__pow5mult+0xa8>)
 800ae32:	3a01      	subs	r2, #1
 800ae34:	2300      	movs	r3, #0
 800ae36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae3a:	f7ff fe51 	bl	800aae0 <__multadd>
 800ae3e:	4607      	mov	r7, r0
 800ae40:	10ad      	asrs	r5, r5, #2
 800ae42:	d03d      	beq.n	800aec0 <__pow5mult+0xa0>
 800ae44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ae46:	b97c      	cbnz	r4, 800ae68 <__pow5mult+0x48>
 800ae48:	2010      	movs	r0, #16
 800ae4a:	f7ff fdbf 	bl	800a9cc <malloc>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	6270      	str	r0, [r6, #36]	; 0x24
 800ae52:	b928      	cbnz	r0, 800ae60 <__pow5mult+0x40>
 800ae54:	4b1d      	ldr	r3, [pc, #116]	; (800aecc <__pow5mult+0xac>)
 800ae56:	481e      	ldr	r0, [pc, #120]	; (800aed0 <__pow5mult+0xb0>)
 800ae58:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ae5c:	f000 fd2a 	bl	800b8b4 <__assert_func>
 800ae60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae64:	6004      	str	r4, [r0, #0]
 800ae66:	60c4      	str	r4, [r0, #12]
 800ae68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ae6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae70:	b94c      	cbnz	r4, 800ae86 <__pow5mult+0x66>
 800ae72:	f240 2171 	movw	r1, #625	; 0x271
 800ae76:	4630      	mov	r0, r6
 800ae78:	f7ff ff12 	bl	800aca0 <__i2b>
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae82:	4604      	mov	r4, r0
 800ae84:	6003      	str	r3, [r0, #0]
 800ae86:	f04f 0900 	mov.w	r9, #0
 800ae8a:	07eb      	lsls	r3, r5, #31
 800ae8c:	d50a      	bpl.n	800aea4 <__pow5mult+0x84>
 800ae8e:	4639      	mov	r1, r7
 800ae90:	4622      	mov	r2, r4
 800ae92:	4630      	mov	r0, r6
 800ae94:	f7ff ff1a 	bl	800accc <__multiply>
 800ae98:	4639      	mov	r1, r7
 800ae9a:	4680      	mov	r8, r0
 800ae9c:	4630      	mov	r0, r6
 800ae9e:	f7ff fdfd 	bl	800aa9c <_Bfree>
 800aea2:	4647      	mov	r7, r8
 800aea4:	106d      	asrs	r5, r5, #1
 800aea6:	d00b      	beq.n	800aec0 <__pow5mult+0xa0>
 800aea8:	6820      	ldr	r0, [r4, #0]
 800aeaa:	b938      	cbnz	r0, 800aebc <__pow5mult+0x9c>
 800aeac:	4622      	mov	r2, r4
 800aeae:	4621      	mov	r1, r4
 800aeb0:	4630      	mov	r0, r6
 800aeb2:	f7ff ff0b 	bl	800accc <__multiply>
 800aeb6:	6020      	str	r0, [r4, #0]
 800aeb8:	f8c0 9000 	str.w	r9, [r0]
 800aebc:	4604      	mov	r4, r0
 800aebe:	e7e4      	b.n	800ae8a <__pow5mult+0x6a>
 800aec0:	4638      	mov	r0, r7
 800aec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aec6:	bf00      	nop
 800aec8:	0800c858 	.word	0x0800c858
 800aecc:	0800c60e 	.word	0x0800c60e
 800aed0:	0800c70c 	.word	0x0800c70c

0800aed4 <__lshift>:
 800aed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aed8:	460c      	mov	r4, r1
 800aeda:	6849      	ldr	r1, [r1, #4]
 800aedc:	6923      	ldr	r3, [r4, #16]
 800aede:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aee2:	68a3      	ldr	r3, [r4, #8]
 800aee4:	4607      	mov	r7, r0
 800aee6:	4691      	mov	r9, r2
 800aee8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aeec:	f108 0601 	add.w	r6, r8, #1
 800aef0:	42b3      	cmp	r3, r6
 800aef2:	db0b      	blt.n	800af0c <__lshift+0x38>
 800aef4:	4638      	mov	r0, r7
 800aef6:	f7ff fd91 	bl	800aa1c <_Balloc>
 800aefa:	4605      	mov	r5, r0
 800aefc:	b948      	cbnz	r0, 800af12 <__lshift+0x3e>
 800aefe:	4602      	mov	r2, r0
 800af00:	4b2a      	ldr	r3, [pc, #168]	; (800afac <__lshift+0xd8>)
 800af02:	482b      	ldr	r0, [pc, #172]	; (800afb0 <__lshift+0xdc>)
 800af04:	f240 11d9 	movw	r1, #473	; 0x1d9
 800af08:	f000 fcd4 	bl	800b8b4 <__assert_func>
 800af0c:	3101      	adds	r1, #1
 800af0e:	005b      	lsls	r3, r3, #1
 800af10:	e7ee      	b.n	800aef0 <__lshift+0x1c>
 800af12:	2300      	movs	r3, #0
 800af14:	f100 0114 	add.w	r1, r0, #20
 800af18:	f100 0210 	add.w	r2, r0, #16
 800af1c:	4618      	mov	r0, r3
 800af1e:	4553      	cmp	r3, sl
 800af20:	db37      	blt.n	800af92 <__lshift+0xbe>
 800af22:	6920      	ldr	r0, [r4, #16]
 800af24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af28:	f104 0314 	add.w	r3, r4, #20
 800af2c:	f019 091f 	ands.w	r9, r9, #31
 800af30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800af38:	d02f      	beq.n	800af9a <__lshift+0xc6>
 800af3a:	f1c9 0e20 	rsb	lr, r9, #32
 800af3e:	468a      	mov	sl, r1
 800af40:	f04f 0c00 	mov.w	ip, #0
 800af44:	681a      	ldr	r2, [r3, #0]
 800af46:	fa02 f209 	lsl.w	r2, r2, r9
 800af4a:	ea42 020c 	orr.w	r2, r2, ip
 800af4e:	f84a 2b04 	str.w	r2, [sl], #4
 800af52:	f853 2b04 	ldr.w	r2, [r3], #4
 800af56:	4298      	cmp	r0, r3
 800af58:	fa22 fc0e 	lsr.w	ip, r2, lr
 800af5c:	d8f2      	bhi.n	800af44 <__lshift+0x70>
 800af5e:	1b03      	subs	r3, r0, r4
 800af60:	3b15      	subs	r3, #21
 800af62:	f023 0303 	bic.w	r3, r3, #3
 800af66:	3304      	adds	r3, #4
 800af68:	f104 0215 	add.w	r2, r4, #21
 800af6c:	4290      	cmp	r0, r2
 800af6e:	bf38      	it	cc
 800af70:	2304      	movcc	r3, #4
 800af72:	f841 c003 	str.w	ip, [r1, r3]
 800af76:	f1bc 0f00 	cmp.w	ip, #0
 800af7a:	d001      	beq.n	800af80 <__lshift+0xac>
 800af7c:	f108 0602 	add.w	r6, r8, #2
 800af80:	3e01      	subs	r6, #1
 800af82:	4638      	mov	r0, r7
 800af84:	612e      	str	r6, [r5, #16]
 800af86:	4621      	mov	r1, r4
 800af88:	f7ff fd88 	bl	800aa9c <_Bfree>
 800af8c:	4628      	mov	r0, r5
 800af8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af92:	f842 0f04 	str.w	r0, [r2, #4]!
 800af96:	3301      	adds	r3, #1
 800af98:	e7c1      	b.n	800af1e <__lshift+0x4a>
 800af9a:	3904      	subs	r1, #4
 800af9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800afa0:	f841 2f04 	str.w	r2, [r1, #4]!
 800afa4:	4298      	cmp	r0, r3
 800afa6:	d8f9      	bhi.n	800af9c <__lshift+0xc8>
 800afa8:	e7ea      	b.n	800af80 <__lshift+0xac>
 800afaa:	bf00      	nop
 800afac:	0800c680 	.word	0x0800c680
 800afb0:	0800c70c 	.word	0x0800c70c

0800afb4 <__mcmp>:
 800afb4:	b530      	push	{r4, r5, lr}
 800afb6:	6902      	ldr	r2, [r0, #16]
 800afb8:	690c      	ldr	r4, [r1, #16]
 800afba:	1b12      	subs	r2, r2, r4
 800afbc:	d10e      	bne.n	800afdc <__mcmp+0x28>
 800afbe:	f100 0314 	add.w	r3, r0, #20
 800afc2:	3114      	adds	r1, #20
 800afc4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800afc8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800afcc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800afd0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800afd4:	42a5      	cmp	r5, r4
 800afd6:	d003      	beq.n	800afe0 <__mcmp+0x2c>
 800afd8:	d305      	bcc.n	800afe6 <__mcmp+0x32>
 800afda:	2201      	movs	r2, #1
 800afdc:	4610      	mov	r0, r2
 800afde:	bd30      	pop	{r4, r5, pc}
 800afe0:	4283      	cmp	r3, r0
 800afe2:	d3f3      	bcc.n	800afcc <__mcmp+0x18>
 800afe4:	e7fa      	b.n	800afdc <__mcmp+0x28>
 800afe6:	f04f 32ff 	mov.w	r2, #4294967295
 800afea:	e7f7      	b.n	800afdc <__mcmp+0x28>

0800afec <__mdiff>:
 800afec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff0:	460c      	mov	r4, r1
 800aff2:	4606      	mov	r6, r0
 800aff4:	4611      	mov	r1, r2
 800aff6:	4620      	mov	r0, r4
 800aff8:	4690      	mov	r8, r2
 800affa:	f7ff ffdb 	bl	800afb4 <__mcmp>
 800affe:	1e05      	subs	r5, r0, #0
 800b000:	d110      	bne.n	800b024 <__mdiff+0x38>
 800b002:	4629      	mov	r1, r5
 800b004:	4630      	mov	r0, r6
 800b006:	f7ff fd09 	bl	800aa1c <_Balloc>
 800b00a:	b930      	cbnz	r0, 800b01a <__mdiff+0x2e>
 800b00c:	4b3a      	ldr	r3, [pc, #232]	; (800b0f8 <__mdiff+0x10c>)
 800b00e:	4602      	mov	r2, r0
 800b010:	f240 2132 	movw	r1, #562	; 0x232
 800b014:	4839      	ldr	r0, [pc, #228]	; (800b0fc <__mdiff+0x110>)
 800b016:	f000 fc4d 	bl	800b8b4 <__assert_func>
 800b01a:	2301      	movs	r3, #1
 800b01c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b020:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b024:	bfa4      	itt	ge
 800b026:	4643      	movge	r3, r8
 800b028:	46a0      	movge	r8, r4
 800b02a:	4630      	mov	r0, r6
 800b02c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b030:	bfa6      	itte	ge
 800b032:	461c      	movge	r4, r3
 800b034:	2500      	movge	r5, #0
 800b036:	2501      	movlt	r5, #1
 800b038:	f7ff fcf0 	bl	800aa1c <_Balloc>
 800b03c:	b920      	cbnz	r0, 800b048 <__mdiff+0x5c>
 800b03e:	4b2e      	ldr	r3, [pc, #184]	; (800b0f8 <__mdiff+0x10c>)
 800b040:	4602      	mov	r2, r0
 800b042:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b046:	e7e5      	b.n	800b014 <__mdiff+0x28>
 800b048:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b04c:	6926      	ldr	r6, [r4, #16]
 800b04e:	60c5      	str	r5, [r0, #12]
 800b050:	f104 0914 	add.w	r9, r4, #20
 800b054:	f108 0514 	add.w	r5, r8, #20
 800b058:	f100 0e14 	add.w	lr, r0, #20
 800b05c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b060:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b064:	f108 0210 	add.w	r2, r8, #16
 800b068:	46f2      	mov	sl, lr
 800b06a:	2100      	movs	r1, #0
 800b06c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b070:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b074:	fa1f f883 	uxth.w	r8, r3
 800b078:	fa11 f18b 	uxtah	r1, r1, fp
 800b07c:	0c1b      	lsrs	r3, r3, #16
 800b07e:	eba1 0808 	sub.w	r8, r1, r8
 800b082:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b086:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b08a:	fa1f f888 	uxth.w	r8, r8
 800b08e:	1419      	asrs	r1, r3, #16
 800b090:	454e      	cmp	r6, r9
 800b092:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b096:	f84a 3b04 	str.w	r3, [sl], #4
 800b09a:	d8e7      	bhi.n	800b06c <__mdiff+0x80>
 800b09c:	1b33      	subs	r3, r6, r4
 800b09e:	3b15      	subs	r3, #21
 800b0a0:	f023 0303 	bic.w	r3, r3, #3
 800b0a4:	3304      	adds	r3, #4
 800b0a6:	3415      	adds	r4, #21
 800b0a8:	42a6      	cmp	r6, r4
 800b0aa:	bf38      	it	cc
 800b0ac:	2304      	movcc	r3, #4
 800b0ae:	441d      	add	r5, r3
 800b0b0:	4473      	add	r3, lr
 800b0b2:	469e      	mov	lr, r3
 800b0b4:	462e      	mov	r6, r5
 800b0b6:	4566      	cmp	r6, ip
 800b0b8:	d30e      	bcc.n	800b0d8 <__mdiff+0xec>
 800b0ba:	f10c 0203 	add.w	r2, ip, #3
 800b0be:	1b52      	subs	r2, r2, r5
 800b0c0:	f022 0203 	bic.w	r2, r2, #3
 800b0c4:	3d03      	subs	r5, #3
 800b0c6:	45ac      	cmp	ip, r5
 800b0c8:	bf38      	it	cc
 800b0ca:	2200      	movcc	r2, #0
 800b0cc:	441a      	add	r2, r3
 800b0ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b0d2:	b17b      	cbz	r3, 800b0f4 <__mdiff+0x108>
 800b0d4:	6107      	str	r7, [r0, #16]
 800b0d6:	e7a3      	b.n	800b020 <__mdiff+0x34>
 800b0d8:	f856 8b04 	ldr.w	r8, [r6], #4
 800b0dc:	fa11 f288 	uxtah	r2, r1, r8
 800b0e0:	1414      	asrs	r4, r2, #16
 800b0e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b0e6:	b292      	uxth	r2, r2
 800b0e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b0ec:	f84e 2b04 	str.w	r2, [lr], #4
 800b0f0:	1421      	asrs	r1, r4, #16
 800b0f2:	e7e0      	b.n	800b0b6 <__mdiff+0xca>
 800b0f4:	3f01      	subs	r7, #1
 800b0f6:	e7ea      	b.n	800b0ce <__mdiff+0xe2>
 800b0f8:	0800c680 	.word	0x0800c680
 800b0fc:	0800c70c 	.word	0x0800c70c

0800b100 <__ulp>:
 800b100:	b082      	sub	sp, #8
 800b102:	ed8d 0b00 	vstr	d0, [sp]
 800b106:	9b01      	ldr	r3, [sp, #4]
 800b108:	4912      	ldr	r1, [pc, #72]	; (800b154 <__ulp+0x54>)
 800b10a:	4019      	ands	r1, r3
 800b10c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b110:	2900      	cmp	r1, #0
 800b112:	dd05      	ble.n	800b120 <__ulp+0x20>
 800b114:	2200      	movs	r2, #0
 800b116:	460b      	mov	r3, r1
 800b118:	ec43 2b10 	vmov	d0, r2, r3
 800b11c:	b002      	add	sp, #8
 800b11e:	4770      	bx	lr
 800b120:	4249      	negs	r1, r1
 800b122:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b126:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b12a:	f04f 0200 	mov.w	r2, #0
 800b12e:	f04f 0300 	mov.w	r3, #0
 800b132:	da04      	bge.n	800b13e <__ulp+0x3e>
 800b134:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b138:	fa41 f300 	asr.w	r3, r1, r0
 800b13c:	e7ec      	b.n	800b118 <__ulp+0x18>
 800b13e:	f1a0 0114 	sub.w	r1, r0, #20
 800b142:	291e      	cmp	r1, #30
 800b144:	bfda      	itte	le
 800b146:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b14a:	fa20 f101 	lsrle.w	r1, r0, r1
 800b14e:	2101      	movgt	r1, #1
 800b150:	460a      	mov	r2, r1
 800b152:	e7e1      	b.n	800b118 <__ulp+0x18>
 800b154:	7ff00000 	.word	0x7ff00000

0800b158 <__b2d>:
 800b158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b15a:	6905      	ldr	r5, [r0, #16]
 800b15c:	f100 0714 	add.w	r7, r0, #20
 800b160:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b164:	1f2e      	subs	r6, r5, #4
 800b166:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b16a:	4620      	mov	r0, r4
 800b16c:	f7ff fd48 	bl	800ac00 <__hi0bits>
 800b170:	f1c0 0320 	rsb	r3, r0, #32
 800b174:	280a      	cmp	r0, #10
 800b176:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b1f4 <__b2d+0x9c>
 800b17a:	600b      	str	r3, [r1, #0]
 800b17c:	dc14      	bgt.n	800b1a8 <__b2d+0x50>
 800b17e:	f1c0 0e0b 	rsb	lr, r0, #11
 800b182:	fa24 f10e 	lsr.w	r1, r4, lr
 800b186:	42b7      	cmp	r7, r6
 800b188:	ea41 030c 	orr.w	r3, r1, ip
 800b18c:	bf34      	ite	cc
 800b18e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b192:	2100      	movcs	r1, #0
 800b194:	3015      	adds	r0, #21
 800b196:	fa04 f000 	lsl.w	r0, r4, r0
 800b19a:	fa21 f10e 	lsr.w	r1, r1, lr
 800b19e:	ea40 0201 	orr.w	r2, r0, r1
 800b1a2:	ec43 2b10 	vmov	d0, r2, r3
 800b1a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1a8:	42b7      	cmp	r7, r6
 800b1aa:	bf3a      	itte	cc
 800b1ac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b1b0:	f1a5 0608 	subcc.w	r6, r5, #8
 800b1b4:	2100      	movcs	r1, #0
 800b1b6:	380b      	subs	r0, #11
 800b1b8:	d017      	beq.n	800b1ea <__b2d+0x92>
 800b1ba:	f1c0 0c20 	rsb	ip, r0, #32
 800b1be:	fa04 f500 	lsl.w	r5, r4, r0
 800b1c2:	42be      	cmp	r6, r7
 800b1c4:	fa21 f40c 	lsr.w	r4, r1, ip
 800b1c8:	ea45 0504 	orr.w	r5, r5, r4
 800b1cc:	bf8c      	ite	hi
 800b1ce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b1d2:	2400      	movls	r4, #0
 800b1d4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b1d8:	fa01 f000 	lsl.w	r0, r1, r0
 800b1dc:	fa24 f40c 	lsr.w	r4, r4, ip
 800b1e0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b1e4:	ea40 0204 	orr.w	r2, r0, r4
 800b1e8:	e7db      	b.n	800b1a2 <__b2d+0x4a>
 800b1ea:	ea44 030c 	orr.w	r3, r4, ip
 800b1ee:	460a      	mov	r2, r1
 800b1f0:	e7d7      	b.n	800b1a2 <__b2d+0x4a>
 800b1f2:	bf00      	nop
 800b1f4:	3ff00000 	.word	0x3ff00000

0800b1f8 <__d2b>:
 800b1f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b1fc:	4689      	mov	r9, r1
 800b1fe:	2101      	movs	r1, #1
 800b200:	ec57 6b10 	vmov	r6, r7, d0
 800b204:	4690      	mov	r8, r2
 800b206:	f7ff fc09 	bl	800aa1c <_Balloc>
 800b20a:	4604      	mov	r4, r0
 800b20c:	b930      	cbnz	r0, 800b21c <__d2b+0x24>
 800b20e:	4602      	mov	r2, r0
 800b210:	4b25      	ldr	r3, [pc, #148]	; (800b2a8 <__d2b+0xb0>)
 800b212:	4826      	ldr	r0, [pc, #152]	; (800b2ac <__d2b+0xb4>)
 800b214:	f240 310a 	movw	r1, #778	; 0x30a
 800b218:	f000 fb4c 	bl	800b8b4 <__assert_func>
 800b21c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b220:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b224:	bb35      	cbnz	r5, 800b274 <__d2b+0x7c>
 800b226:	2e00      	cmp	r6, #0
 800b228:	9301      	str	r3, [sp, #4]
 800b22a:	d028      	beq.n	800b27e <__d2b+0x86>
 800b22c:	4668      	mov	r0, sp
 800b22e:	9600      	str	r6, [sp, #0]
 800b230:	f7ff fd06 	bl	800ac40 <__lo0bits>
 800b234:	9900      	ldr	r1, [sp, #0]
 800b236:	b300      	cbz	r0, 800b27a <__d2b+0x82>
 800b238:	9a01      	ldr	r2, [sp, #4]
 800b23a:	f1c0 0320 	rsb	r3, r0, #32
 800b23e:	fa02 f303 	lsl.w	r3, r2, r3
 800b242:	430b      	orrs	r3, r1
 800b244:	40c2      	lsrs	r2, r0
 800b246:	6163      	str	r3, [r4, #20]
 800b248:	9201      	str	r2, [sp, #4]
 800b24a:	9b01      	ldr	r3, [sp, #4]
 800b24c:	61a3      	str	r3, [r4, #24]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	bf14      	ite	ne
 800b252:	2202      	movne	r2, #2
 800b254:	2201      	moveq	r2, #1
 800b256:	6122      	str	r2, [r4, #16]
 800b258:	b1d5      	cbz	r5, 800b290 <__d2b+0x98>
 800b25a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b25e:	4405      	add	r5, r0
 800b260:	f8c9 5000 	str.w	r5, [r9]
 800b264:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b268:	f8c8 0000 	str.w	r0, [r8]
 800b26c:	4620      	mov	r0, r4
 800b26e:	b003      	add	sp, #12
 800b270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b274:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b278:	e7d5      	b.n	800b226 <__d2b+0x2e>
 800b27a:	6161      	str	r1, [r4, #20]
 800b27c:	e7e5      	b.n	800b24a <__d2b+0x52>
 800b27e:	a801      	add	r0, sp, #4
 800b280:	f7ff fcde 	bl	800ac40 <__lo0bits>
 800b284:	9b01      	ldr	r3, [sp, #4]
 800b286:	6163      	str	r3, [r4, #20]
 800b288:	2201      	movs	r2, #1
 800b28a:	6122      	str	r2, [r4, #16]
 800b28c:	3020      	adds	r0, #32
 800b28e:	e7e3      	b.n	800b258 <__d2b+0x60>
 800b290:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b294:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b298:	f8c9 0000 	str.w	r0, [r9]
 800b29c:	6918      	ldr	r0, [r3, #16]
 800b29e:	f7ff fcaf 	bl	800ac00 <__hi0bits>
 800b2a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b2a6:	e7df      	b.n	800b268 <__d2b+0x70>
 800b2a8:	0800c680 	.word	0x0800c680
 800b2ac:	0800c70c 	.word	0x0800c70c

0800b2b0 <__ratio>:
 800b2b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b4:	4688      	mov	r8, r1
 800b2b6:	4669      	mov	r1, sp
 800b2b8:	4681      	mov	r9, r0
 800b2ba:	f7ff ff4d 	bl	800b158 <__b2d>
 800b2be:	a901      	add	r1, sp, #4
 800b2c0:	4640      	mov	r0, r8
 800b2c2:	ec55 4b10 	vmov	r4, r5, d0
 800b2c6:	ee10 aa10 	vmov	sl, s0
 800b2ca:	f7ff ff45 	bl	800b158 <__b2d>
 800b2ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b2d2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800b2d6:	1a59      	subs	r1, r3, r1
 800b2d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2dc:	1ad3      	subs	r3, r2, r3
 800b2de:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b2e2:	ec57 6b10 	vmov	r6, r7, d0
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	bfd6      	itet	le
 800b2ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b2ee:	462a      	movgt	r2, r5
 800b2f0:	463a      	movle	r2, r7
 800b2f2:	46ab      	mov	fp, r5
 800b2f4:	bfd6      	itet	le
 800b2f6:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800b2fa:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b2fe:	ee00 3a90 	vmovle	s1, r3
 800b302:	ec4b ab17 	vmov	d7, sl, fp
 800b306:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800b30a:	b003      	add	sp, #12
 800b30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b310 <__copybits>:
 800b310:	3901      	subs	r1, #1
 800b312:	b570      	push	{r4, r5, r6, lr}
 800b314:	1149      	asrs	r1, r1, #5
 800b316:	6914      	ldr	r4, [r2, #16]
 800b318:	3101      	adds	r1, #1
 800b31a:	f102 0314 	add.w	r3, r2, #20
 800b31e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b322:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b326:	1f05      	subs	r5, r0, #4
 800b328:	42a3      	cmp	r3, r4
 800b32a:	d30c      	bcc.n	800b346 <__copybits+0x36>
 800b32c:	1aa3      	subs	r3, r4, r2
 800b32e:	3b11      	subs	r3, #17
 800b330:	f023 0303 	bic.w	r3, r3, #3
 800b334:	3211      	adds	r2, #17
 800b336:	42a2      	cmp	r2, r4
 800b338:	bf88      	it	hi
 800b33a:	2300      	movhi	r3, #0
 800b33c:	4418      	add	r0, r3
 800b33e:	2300      	movs	r3, #0
 800b340:	4288      	cmp	r0, r1
 800b342:	d305      	bcc.n	800b350 <__copybits+0x40>
 800b344:	bd70      	pop	{r4, r5, r6, pc}
 800b346:	f853 6b04 	ldr.w	r6, [r3], #4
 800b34a:	f845 6f04 	str.w	r6, [r5, #4]!
 800b34e:	e7eb      	b.n	800b328 <__copybits+0x18>
 800b350:	f840 3b04 	str.w	r3, [r0], #4
 800b354:	e7f4      	b.n	800b340 <__copybits+0x30>

0800b356 <__any_on>:
 800b356:	f100 0214 	add.w	r2, r0, #20
 800b35a:	6900      	ldr	r0, [r0, #16]
 800b35c:	114b      	asrs	r3, r1, #5
 800b35e:	4298      	cmp	r0, r3
 800b360:	b510      	push	{r4, lr}
 800b362:	db11      	blt.n	800b388 <__any_on+0x32>
 800b364:	dd0a      	ble.n	800b37c <__any_on+0x26>
 800b366:	f011 011f 	ands.w	r1, r1, #31
 800b36a:	d007      	beq.n	800b37c <__any_on+0x26>
 800b36c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b370:	fa24 f001 	lsr.w	r0, r4, r1
 800b374:	fa00 f101 	lsl.w	r1, r0, r1
 800b378:	428c      	cmp	r4, r1
 800b37a:	d10b      	bne.n	800b394 <__any_on+0x3e>
 800b37c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b380:	4293      	cmp	r3, r2
 800b382:	d803      	bhi.n	800b38c <__any_on+0x36>
 800b384:	2000      	movs	r0, #0
 800b386:	bd10      	pop	{r4, pc}
 800b388:	4603      	mov	r3, r0
 800b38a:	e7f7      	b.n	800b37c <__any_on+0x26>
 800b38c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b390:	2900      	cmp	r1, #0
 800b392:	d0f5      	beq.n	800b380 <__any_on+0x2a>
 800b394:	2001      	movs	r0, #1
 800b396:	e7f6      	b.n	800b386 <__any_on+0x30>

0800b398 <_calloc_r>:
 800b398:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b39a:	fba1 2402 	umull	r2, r4, r1, r2
 800b39e:	b94c      	cbnz	r4, 800b3b4 <_calloc_r+0x1c>
 800b3a0:	4611      	mov	r1, r2
 800b3a2:	9201      	str	r2, [sp, #4]
 800b3a4:	f000 f87a 	bl	800b49c <_malloc_r>
 800b3a8:	9a01      	ldr	r2, [sp, #4]
 800b3aa:	4605      	mov	r5, r0
 800b3ac:	b930      	cbnz	r0, 800b3bc <_calloc_r+0x24>
 800b3ae:	4628      	mov	r0, r5
 800b3b0:	b003      	add	sp, #12
 800b3b2:	bd30      	pop	{r4, r5, pc}
 800b3b4:	220c      	movs	r2, #12
 800b3b6:	6002      	str	r2, [r0, #0]
 800b3b8:	2500      	movs	r5, #0
 800b3ba:	e7f8      	b.n	800b3ae <_calloc_r+0x16>
 800b3bc:	4621      	mov	r1, r4
 800b3be:	f7fc fcc7 	bl	8007d50 <memset>
 800b3c2:	e7f4      	b.n	800b3ae <_calloc_r+0x16>

0800b3c4 <_free_r>:
 800b3c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3c6:	2900      	cmp	r1, #0
 800b3c8:	d044      	beq.n	800b454 <_free_r+0x90>
 800b3ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3ce:	9001      	str	r0, [sp, #4]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	f1a1 0404 	sub.w	r4, r1, #4
 800b3d6:	bfb8      	it	lt
 800b3d8:	18e4      	addlt	r4, r4, r3
 800b3da:	f000 fab5 	bl	800b948 <__malloc_lock>
 800b3de:	4a1e      	ldr	r2, [pc, #120]	; (800b458 <_free_r+0x94>)
 800b3e0:	9801      	ldr	r0, [sp, #4]
 800b3e2:	6813      	ldr	r3, [r2, #0]
 800b3e4:	b933      	cbnz	r3, 800b3f4 <_free_r+0x30>
 800b3e6:	6063      	str	r3, [r4, #4]
 800b3e8:	6014      	str	r4, [r2, #0]
 800b3ea:	b003      	add	sp, #12
 800b3ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3f0:	f000 bab0 	b.w	800b954 <__malloc_unlock>
 800b3f4:	42a3      	cmp	r3, r4
 800b3f6:	d908      	bls.n	800b40a <_free_r+0x46>
 800b3f8:	6825      	ldr	r5, [r4, #0]
 800b3fa:	1961      	adds	r1, r4, r5
 800b3fc:	428b      	cmp	r3, r1
 800b3fe:	bf01      	itttt	eq
 800b400:	6819      	ldreq	r1, [r3, #0]
 800b402:	685b      	ldreq	r3, [r3, #4]
 800b404:	1949      	addeq	r1, r1, r5
 800b406:	6021      	streq	r1, [r4, #0]
 800b408:	e7ed      	b.n	800b3e6 <_free_r+0x22>
 800b40a:	461a      	mov	r2, r3
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	b10b      	cbz	r3, 800b414 <_free_r+0x50>
 800b410:	42a3      	cmp	r3, r4
 800b412:	d9fa      	bls.n	800b40a <_free_r+0x46>
 800b414:	6811      	ldr	r1, [r2, #0]
 800b416:	1855      	adds	r5, r2, r1
 800b418:	42a5      	cmp	r5, r4
 800b41a:	d10b      	bne.n	800b434 <_free_r+0x70>
 800b41c:	6824      	ldr	r4, [r4, #0]
 800b41e:	4421      	add	r1, r4
 800b420:	1854      	adds	r4, r2, r1
 800b422:	42a3      	cmp	r3, r4
 800b424:	6011      	str	r1, [r2, #0]
 800b426:	d1e0      	bne.n	800b3ea <_free_r+0x26>
 800b428:	681c      	ldr	r4, [r3, #0]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	6053      	str	r3, [r2, #4]
 800b42e:	4421      	add	r1, r4
 800b430:	6011      	str	r1, [r2, #0]
 800b432:	e7da      	b.n	800b3ea <_free_r+0x26>
 800b434:	d902      	bls.n	800b43c <_free_r+0x78>
 800b436:	230c      	movs	r3, #12
 800b438:	6003      	str	r3, [r0, #0]
 800b43a:	e7d6      	b.n	800b3ea <_free_r+0x26>
 800b43c:	6825      	ldr	r5, [r4, #0]
 800b43e:	1961      	adds	r1, r4, r5
 800b440:	428b      	cmp	r3, r1
 800b442:	bf04      	itt	eq
 800b444:	6819      	ldreq	r1, [r3, #0]
 800b446:	685b      	ldreq	r3, [r3, #4]
 800b448:	6063      	str	r3, [r4, #4]
 800b44a:	bf04      	itt	eq
 800b44c:	1949      	addeq	r1, r1, r5
 800b44e:	6021      	streq	r1, [r4, #0]
 800b450:	6054      	str	r4, [r2, #4]
 800b452:	e7ca      	b.n	800b3ea <_free_r+0x26>
 800b454:	b003      	add	sp, #12
 800b456:	bd30      	pop	{r4, r5, pc}
 800b458:	20000900 	.word	0x20000900

0800b45c <sbrk_aligned>:
 800b45c:	b570      	push	{r4, r5, r6, lr}
 800b45e:	4e0e      	ldr	r6, [pc, #56]	; (800b498 <sbrk_aligned+0x3c>)
 800b460:	460c      	mov	r4, r1
 800b462:	6831      	ldr	r1, [r6, #0]
 800b464:	4605      	mov	r5, r0
 800b466:	b911      	cbnz	r1, 800b46e <sbrk_aligned+0x12>
 800b468:	f000 f9f2 	bl	800b850 <_sbrk_r>
 800b46c:	6030      	str	r0, [r6, #0]
 800b46e:	4621      	mov	r1, r4
 800b470:	4628      	mov	r0, r5
 800b472:	f000 f9ed 	bl	800b850 <_sbrk_r>
 800b476:	1c43      	adds	r3, r0, #1
 800b478:	d00a      	beq.n	800b490 <sbrk_aligned+0x34>
 800b47a:	1cc4      	adds	r4, r0, #3
 800b47c:	f024 0403 	bic.w	r4, r4, #3
 800b480:	42a0      	cmp	r0, r4
 800b482:	d007      	beq.n	800b494 <sbrk_aligned+0x38>
 800b484:	1a21      	subs	r1, r4, r0
 800b486:	4628      	mov	r0, r5
 800b488:	f000 f9e2 	bl	800b850 <_sbrk_r>
 800b48c:	3001      	adds	r0, #1
 800b48e:	d101      	bne.n	800b494 <sbrk_aligned+0x38>
 800b490:	f04f 34ff 	mov.w	r4, #4294967295
 800b494:	4620      	mov	r0, r4
 800b496:	bd70      	pop	{r4, r5, r6, pc}
 800b498:	20000904 	.word	0x20000904

0800b49c <_malloc_r>:
 800b49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4a0:	1ccd      	adds	r5, r1, #3
 800b4a2:	f025 0503 	bic.w	r5, r5, #3
 800b4a6:	3508      	adds	r5, #8
 800b4a8:	2d0c      	cmp	r5, #12
 800b4aa:	bf38      	it	cc
 800b4ac:	250c      	movcc	r5, #12
 800b4ae:	2d00      	cmp	r5, #0
 800b4b0:	4607      	mov	r7, r0
 800b4b2:	db01      	blt.n	800b4b8 <_malloc_r+0x1c>
 800b4b4:	42a9      	cmp	r1, r5
 800b4b6:	d905      	bls.n	800b4c4 <_malloc_r+0x28>
 800b4b8:	230c      	movs	r3, #12
 800b4ba:	603b      	str	r3, [r7, #0]
 800b4bc:	2600      	movs	r6, #0
 800b4be:	4630      	mov	r0, r6
 800b4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4c4:	4e2e      	ldr	r6, [pc, #184]	; (800b580 <_malloc_r+0xe4>)
 800b4c6:	f000 fa3f 	bl	800b948 <__malloc_lock>
 800b4ca:	6833      	ldr	r3, [r6, #0]
 800b4cc:	461c      	mov	r4, r3
 800b4ce:	bb34      	cbnz	r4, 800b51e <_malloc_r+0x82>
 800b4d0:	4629      	mov	r1, r5
 800b4d2:	4638      	mov	r0, r7
 800b4d4:	f7ff ffc2 	bl	800b45c <sbrk_aligned>
 800b4d8:	1c43      	adds	r3, r0, #1
 800b4da:	4604      	mov	r4, r0
 800b4dc:	d14d      	bne.n	800b57a <_malloc_r+0xde>
 800b4de:	6834      	ldr	r4, [r6, #0]
 800b4e0:	4626      	mov	r6, r4
 800b4e2:	2e00      	cmp	r6, #0
 800b4e4:	d140      	bne.n	800b568 <_malloc_r+0xcc>
 800b4e6:	6823      	ldr	r3, [r4, #0]
 800b4e8:	4631      	mov	r1, r6
 800b4ea:	4638      	mov	r0, r7
 800b4ec:	eb04 0803 	add.w	r8, r4, r3
 800b4f0:	f000 f9ae 	bl	800b850 <_sbrk_r>
 800b4f4:	4580      	cmp	r8, r0
 800b4f6:	d13a      	bne.n	800b56e <_malloc_r+0xd2>
 800b4f8:	6821      	ldr	r1, [r4, #0]
 800b4fa:	3503      	adds	r5, #3
 800b4fc:	1a6d      	subs	r5, r5, r1
 800b4fe:	f025 0503 	bic.w	r5, r5, #3
 800b502:	3508      	adds	r5, #8
 800b504:	2d0c      	cmp	r5, #12
 800b506:	bf38      	it	cc
 800b508:	250c      	movcc	r5, #12
 800b50a:	4629      	mov	r1, r5
 800b50c:	4638      	mov	r0, r7
 800b50e:	f7ff ffa5 	bl	800b45c <sbrk_aligned>
 800b512:	3001      	adds	r0, #1
 800b514:	d02b      	beq.n	800b56e <_malloc_r+0xd2>
 800b516:	6823      	ldr	r3, [r4, #0]
 800b518:	442b      	add	r3, r5
 800b51a:	6023      	str	r3, [r4, #0]
 800b51c:	e00e      	b.n	800b53c <_malloc_r+0xa0>
 800b51e:	6822      	ldr	r2, [r4, #0]
 800b520:	1b52      	subs	r2, r2, r5
 800b522:	d41e      	bmi.n	800b562 <_malloc_r+0xc6>
 800b524:	2a0b      	cmp	r2, #11
 800b526:	d916      	bls.n	800b556 <_malloc_r+0xba>
 800b528:	1961      	adds	r1, r4, r5
 800b52a:	42a3      	cmp	r3, r4
 800b52c:	6025      	str	r5, [r4, #0]
 800b52e:	bf18      	it	ne
 800b530:	6059      	strne	r1, [r3, #4]
 800b532:	6863      	ldr	r3, [r4, #4]
 800b534:	bf08      	it	eq
 800b536:	6031      	streq	r1, [r6, #0]
 800b538:	5162      	str	r2, [r4, r5]
 800b53a:	604b      	str	r3, [r1, #4]
 800b53c:	4638      	mov	r0, r7
 800b53e:	f104 060b 	add.w	r6, r4, #11
 800b542:	f000 fa07 	bl	800b954 <__malloc_unlock>
 800b546:	f026 0607 	bic.w	r6, r6, #7
 800b54a:	1d23      	adds	r3, r4, #4
 800b54c:	1af2      	subs	r2, r6, r3
 800b54e:	d0b6      	beq.n	800b4be <_malloc_r+0x22>
 800b550:	1b9b      	subs	r3, r3, r6
 800b552:	50a3      	str	r3, [r4, r2]
 800b554:	e7b3      	b.n	800b4be <_malloc_r+0x22>
 800b556:	6862      	ldr	r2, [r4, #4]
 800b558:	42a3      	cmp	r3, r4
 800b55a:	bf0c      	ite	eq
 800b55c:	6032      	streq	r2, [r6, #0]
 800b55e:	605a      	strne	r2, [r3, #4]
 800b560:	e7ec      	b.n	800b53c <_malloc_r+0xa0>
 800b562:	4623      	mov	r3, r4
 800b564:	6864      	ldr	r4, [r4, #4]
 800b566:	e7b2      	b.n	800b4ce <_malloc_r+0x32>
 800b568:	4634      	mov	r4, r6
 800b56a:	6876      	ldr	r6, [r6, #4]
 800b56c:	e7b9      	b.n	800b4e2 <_malloc_r+0x46>
 800b56e:	230c      	movs	r3, #12
 800b570:	603b      	str	r3, [r7, #0]
 800b572:	4638      	mov	r0, r7
 800b574:	f000 f9ee 	bl	800b954 <__malloc_unlock>
 800b578:	e7a1      	b.n	800b4be <_malloc_r+0x22>
 800b57a:	6025      	str	r5, [r4, #0]
 800b57c:	e7de      	b.n	800b53c <_malloc_r+0xa0>
 800b57e:	bf00      	nop
 800b580:	20000900 	.word	0x20000900

0800b584 <__ssputs_r>:
 800b584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b588:	688e      	ldr	r6, [r1, #8]
 800b58a:	429e      	cmp	r6, r3
 800b58c:	4682      	mov	sl, r0
 800b58e:	460c      	mov	r4, r1
 800b590:	4690      	mov	r8, r2
 800b592:	461f      	mov	r7, r3
 800b594:	d838      	bhi.n	800b608 <__ssputs_r+0x84>
 800b596:	898a      	ldrh	r2, [r1, #12]
 800b598:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b59c:	d032      	beq.n	800b604 <__ssputs_r+0x80>
 800b59e:	6825      	ldr	r5, [r4, #0]
 800b5a0:	6909      	ldr	r1, [r1, #16]
 800b5a2:	eba5 0901 	sub.w	r9, r5, r1
 800b5a6:	6965      	ldr	r5, [r4, #20]
 800b5a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	444b      	add	r3, r9
 800b5b4:	106d      	asrs	r5, r5, #1
 800b5b6:	429d      	cmp	r5, r3
 800b5b8:	bf38      	it	cc
 800b5ba:	461d      	movcc	r5, r3
 800b5bc:	0553      	lsls	r3, r2, #21
 800b5be:	d531      	bpl.n	800b624 <__ssputs_r+0xa0>
 800b5c0:	4629      	mov	r1, r5
 800b5c2:	f7ff ff6b 	bl	800b49c <_malloc_r>
 800b5c6:	4606      	mov	r6, r0
 800b5c8:	b950      	cbnz	r0, 800b5e0 <__ssputs_r+0x5c>
 800b5ca:	230c      	movs	r3, #12
 800b5cc:	f8ca 3000 	str.w	r3, [sl]
 800b5d0:	89a3      	ldrh	r3, [r4, #12]
 800b5d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5d6:	81a3      	strh	r3, [r4, #12]
 800b5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5e0:	6921      	ldr	r1, [r4, #16]
 800b5e2:	464a      	mov	r2, r9
 800b5e4:	f7ff fa0c 	bl	800aa00 <memcpy>
 800b5e8:	89a3      	ldrh	r3, [r4, #12]
 800b5ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b5ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5f2:	81a3      	strh	r3, [r4, #12]
 800b5f4:	6126      	str	r6, [r4, #16]
 800b5f6:	6165      	str	r5, [r4, #20]
 800b5f8:	444e      	add	r6, r9
 800b5fa:	eba5 0509 	sub.w	r5, r5, r9
 800b5fe:	6026      	str	r6, [r4, #0]
 800b600:	60a5      	str	r5, [r4, #8]
 800b602:	463e      	mov	r6, r7
 800b604:	42be      	cmp	r6, r7
 800b606:	d900      	bls.n	800b60a <__ssputs_r+0x86>
 800b608:	463e      	mov	r6, r7
 800b60a:	6820      	ldr	r0, [r4, #0]
 800b60c:	4632      	mov	r2, r6
 800b60e:	4641      	mov	r1, r8
 800b610:	f000 f980 	bl	800b914 <memmove>
 800b614:	68a3      	ldr	r3, [r4, #8]
 800b616:	1b9b      	subs	r3, r3, r6
 800b618:	60a3      	str	r3, [r4, #8]
 800b61a:	6823      	ldr	r3, [r4, #0]
 800b61c:	4433      	add	r3, r6
 800b61e:	6023      	str	r3, [r4, #0]
 800b620:	2000      	movs	r0, #0
 800b622:	e7db      	b.n	800b5dc <__ssputs_r+0x58>
 800b624:	462a      	mov	r2, r5
 800b626:	f000 f99b 	bl	800b960 <_realloc_r>
 800b62a:	4606      	mov	r6, r0
 800b62c:	2800      	cmp	r0, #0
 800b62e:	d1e1      	bne.n	800b5f4 <__ssputs_r+0x70>
 800b630:	6921      	ldr	r1, [r4, #16]
 800b632:	4650      	mov	r0, sl
 800b634:	f7ff fec6 	bl	800b3c4 <_free_r>
 800b638:	e7c7      	b.n	800b5ca <__ssputs_r+0x46>
	...

0800b63c <_svfiprintf_r>:
 800b63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b640:	4698      	mov	r8, r3
 800b642:	898b      	ldrh	r3, [r1, #12]
 800b644:	061b      	lsls	r3, r3, #24
 800b646:	b09d      	sub	sp, #116	; 0x74
 800b648:	4607      	mov	r7, r0
 800b64a:	460d      	mov	r5, r1
 800b64c:	4614      	mov	r4, r2
 800b64e:	d50e      	bpl.n	800b66e <_svfiprintf_r+0x32>
 800b650:	690b      	ldr	r3, [r1, #16]
 800b652:	b963      	cbnz	r3, 800b66e <_svfiprintf_r+0x32>
 800b654:	2140      	movs	r1, #64	; 0x40
 800b656:	f7ff ff21 	bl	800b49c <_malloc_r>
 800b65a:	6028      	str	r0, [r5, #0]
 800b65c:	6128      	str	r0, [r5, #16]
 800b65e:	b920      	cbnz	r0, 800b66a <_svfiprintf_r+0x2e>
 800b660:	230c      	movs	r3, #12
 800b662:	603b      	str	r3, [r7, #0]
 800b664:	f04f 30ff 	mov.w	r0, #4294967295
 800b668:	e0d1      	b.n	800b80e <_svfiprintf_r+0x1d2>
 800b66a:	2340      	movs	r3, #64	; 0x40
 800b66c:	616b      	str	r3, [r5, #20]
 800b66e:	2300      	movs	r3, #0
 800b670:	9309      	str	r3, [sp, #36]	; 0x24
 800b672:	2320      	movs	r3, #32
 800b674:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b678:	f8cd 800c 	str.w	r8, [sp, #12]
 800b67c:	2330      	movs	r3, #48	; 0x30
 800b67e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b828 <_svfiprintf_r+0x1ec>
 800b682:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b686:	f04f 0901 	mov.w	r9, #1
 800b68a:	4623      	mov	r3, r4
 800b68c:	469a      	mov	sl, r3
 800b68e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b692:	b10a      	cbz	r2, 800b698 <_svfiprintf_r+0x5c>
 800b694:	2a25      	cmp	r2, #37	; 0x25
 800b696:	d1f9      	bne.n	800b68c <_svfiprintf_r+0x50>
 800b698:	ebba 0b04 	subs.w	fp, sl, r4
 800b69c:	d00b      	beq.n	800b6b6 <_svfiprintf_r+0x7a>
 800b69e:	465b      	mov	r3, fp
 800b6a0:	4622      	mov	r2, r4
 800b6a2:	4629      	mov	r1, r5
 800b6a4:	4638      	mov	r0, r7
 800b6a6:	f7ff ff6d 	bl	800b584 <__ssputs_r>
 800b6aa:	3001      	adds	r0, #1
 800b6ac:	f000 80aa 	beq.w	800b804 <_svfiprintf_r+0x1c8>
 800b6b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6b2:	445a      	add	r2, fp
 800b6b4:	9209      	str	r2, [sp, #36]	; 0x24
 800b6b6:	f89a 3000 	ldrb.w	r3, [sl]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	f000 80a2 	beq.w	800b804 <_svfiprintf_r+0x1c8>
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b6c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6ca:	f10a 0a01 	add.w	sl, sl, #1
 800b6ce:	9304      	str	r3, [sp, #16]
 800b6d0:	9307      	str	r3, [sp, #28]
 800b6d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6d6:	931a      	str	r3, [sp, #104]	; 0x68
 800b6d8:	4654      	mov	r4, sl
 800b6da:	2205      	movs	r2, #5
 800b6dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6e0:	4851      	ldr	r0, [pc, #324]	; (800b828 <_svfiprintf_r+0x1ec>)
 800b6e2:	f7f4 fdb5 	bl	8000250 <memchr>
 800b6e6:	9a04      	ldr	r2, [sp, #16]
 800b6e8:	b9d8      	cbnz	r0, 800b722 <_svfiprintf_r+0xe6>
 800b6ea:	06d0      	lsls	r0, r2, #27
 800b6ec:	bf44      	itt	mi
 800b6ee:	2320      	movmi	r3, #32
 800b6f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6f4:	0711      	lsls	r1, r2, #28
 800b6f6:	bf44      	itt	mi
 800b6f8:	232b      	movmi	r3, #43	; 0x2b
 800b6fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6fe:	f89a 3000 	ldrb.w	r3, [sl]
 800b702:	2b2a      	cmp	r3, #42	; 0x2a
 800b704:	d015      	beq.n	800b732 <_svfiprintf_r+0xf6>
 800b706:	9a07      	ldr	r2, [sp, #28]
 800b708:	4654      	mov	r4, sl
 800b70a:	2000      	movs	r0, #0
 800b70c:	f04f 0c0a 	mov.w	ip, #10
 800b710:	4621      	mov	r1, r4
 800b712:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b716:	3b30      	subs	r3, #48	; 0x30
 800b718:	2b09      	cmp	r3, #9
 800b71a:	d94e      	bls.n	800b7ba <_svfiprintf_r+0x17e>
 800b71c:	b1b0      	cbz	r0, 800b74c <_svfiprintf_r+0x110>
 800b71e:	9207      	str	r2, [sp, #28]
 800b720:	e014      	b.n	800b74c <_svfiprintf_r+0x110>
 800b722:	eba0 0308 	sub.w	r3, r0, r8
 800b726:	fa09 f303 	lsl.w	r3, r9, r3
 800b72a:	4313      	orrs	r3, r2
 800b72c:	9304      	str	r3, [sp, #16]
 800b72e:	46a2      	mov	sl, r4
 800b730:	e7d2      	b.n	800b6d8 <_svfiprintf_r+0x9c>
 800b732:	9b03      	ldr	r3, [sp, #12]
 800b734:	1d19      	adds	r1, r3, #4
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	9103      	str	r1, [sp, #12]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	bfbb      	ittet	lt
 800b73e:	425b      	neglt	r3, r3
 800b740:	f042 0202 	orrlt.w	r2, r2, #2
 800b744:	9307      	strge	r3, [sp, #28]
 800b746:	9307      	strlt	r3, [sp, #28]
 800b748:	bfb8      	it	lt
 800b74a:	9204      	strlt	r2, [sp, #16]
 800b74c:	7823      	ldrb	r3, [r4, #0]
 800b74e:	2b2e      	cmp	r3, #46	; 0x2e
 800b750:	d10c      	bne.n	800b76c <_svfiprintf_r+0x130>
 800b752:	7863      	ldrb	r3, [r4, #1]
 800b754:	2b2a      	cmp	r3, #42	; 0x2a
 800b756:	d135      	bne.n	800b7c4 <_svfiprintf_r+0x188>
 800b758:	9b03      	ldr	r3, [sp, #12]
 800b75a:	1d1a      	adds	r2, r3, #4
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	9203      	str	r2, [sp, #12]
 800b760:	2b00      	cmp	r3, #0
 800b762:	bfb8      	it	lt
 800b764:	f04f 33ff 	movlt.w	r3, #4294967295
 800b768:	3402      	adds	r4, #2
 800b76a:	9305      	str	r3, [sp, #20]
 800b76c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b838 <_svfiprintf_r+0x1fc>
 800b770:	7821      	ldrb	r1, [r4, #0]
 800b772:	2203      	movs	r2, #3
 800b774:	4650      	mov	r0, sl
 800b776:	f7f4 fd6b 	bl	8000250 <memchr>
 800b77a:	b140      	cbz	r0, 800b78e <_svfiprintf_r+0x152>
 800b77c:	2340      	movs	r3, #64	; 0x40
 800b77e:	eba0 000a 	sub.w	r0, r0, sl
 800b782:	fa03 f000 	lsl.w	r0, r3, r0
 800b786:	9b04      	ldr	r3, [sp, #16]
 800b788:	4303      	orrs	r3, r0
 800b78a:	3401      	adds	r4, #1
 800b78c:	9304      	str	r3, [sp, #16]
 800b78e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b792:	4826      	ldr	r0, [pc, #152]	; (800b82c <_svfiprintf_r+0x1f0>)
 800b794:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b798:	2206      	movs	r2, #6
 800b79a:	f7f4 fd59 	bl	8000250 <memchr>
 800b79e:	2800      	cmp	r0, #0
 800b7a0:	d038      	beq.n	800b814 <_svfiprintf_r+0x1d8>
 800b7a2:	4b23      	ldr	r3, [pc, #140]	; (800b830 <_svfiprintf_r+0x1f4>)
 800b7a4:	bb1b      	cbnz	r3, 800b7ee <_svfiprintf_r+0x1b2>
 800b7a6:	9b03      	ldr	r3, [sp, #12]
 800b7a8:	3307      	adds	r3, #7
 800b7aa:	f023 0307 	bic.w	r3, r3, #7
 800b7ae:	3308      	adds	r3, #8
 800b7b0:	9303      	str	r3, [sp, #12]
 800b7b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7b4:	4433      	add	r3, r6
 800b7b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b7b8:	e767      	b.n	800b68a <_svfiprintf_r+0x4e>
 800b7ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7be:	460c      	mov	r4, r1
 800b7c0:	2001      	movs	r0, #1
 800b7c2:	e7a5      	b.n	800b710 <_svfiprintf_r+0xd4>
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	3401      	adds	r4, #1
 800b7c8:	9305      	str	r3, [sp, #20]
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	f04f 0c0a 	mov.w	ip, #10
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7d6:	3a30      	subs	r2, #48	; 0x30
 800b7d8:	2a09      	cmp	r2, #9
 800b7da:	d903      	bls.n	800b7e4 <_svfiprintf_r+0x1a8>
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d0c5      	beq.n	800b76c <_svfiprintf_r+0x130>
 800b7e0:	9105      	str	r1, [sp, #20]
 800b7e2:	e7c3      	b.n	800b76c <_svfiprintf_r+0x130>
 800b7e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7e8:	4604      	mov	r4, r0
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	e7f0      	b.n	800b7d0 <_svfiprintf_r+0x194>
 800b7ee:	ab03      	add	r3, sp, #12
 800b7f0:	9300      	str	r3, [sp, #0]
 800b7f2:	462a      	mov	r2, r5
 800b7f4:	4b0f      	ldr	r3, [pc, #60]	; (800b834 <_svfiprintf_r+0x1f8>)
 800b7f6:	a904      	add	r1, sp, #16
 800b7f8:	4638      	mov	r0, r7
 800b7fa:	f7fc fb41 	bl	8007e80 <_printf_float>
 800b7fe:	1c42      	adds	r2, r0, #1
 800b800:	4606      	mov	r6, r0
 800b802:	d1d6      	bne.n	800b7b2 <_svfiprintf_r+0x176>
 800b804:	89ab      	ldrh	r3, [r5, #12]
 800b806:	065b      	lsls	r3, r3, #25
 800b808:	f53f af2c 	bmi.w	800b664 <_svfiprintf_r+0x28>
 800b80c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b80e:	b01d      	add	sp, #116	; 0x74
 800b810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b814:	ab03      	add	r3, sp, #12
 800b816:	9300      	str	r3, [sp, #0]
 800b818:	462a      	mov	r2, r5
 800b81a:	4b06      	ldr	r3, [pc, #24]	; (800b834 <_svfiprintf_r+0x1f8>)
 800b81c:	a904      	add	r1, sp, #16
 800b81e:	4638      	mov	r0, r7
 800b820:	f7fc fdba 	bl	8008398 <_printf_i>
 800b824:	e7eb      	b.n	800b7fe <_svfiprintf_r+0x1c2>
 800b826:	bf00      	nop
 800b828:	0800c864 	.word	0x0800c864
 800b82c:	0800c86e 	.word	0x0800c86e
 800b830:	08007e81 	.word	0x08007e81
 800b834:	0800b585 	.word	0x0800b585
 800b838:	0800c86a 	.word	0x0800c86a
 800b83c:	00000000 	.word	0x00000000

0800b840 <nan>:
 800b840:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b848 <nan+0x8>
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	00000000 	.word	0x00000000
 800b84c:	7ff80000 	.word	0x7ff80000

0800b850 <_sbrk_r>:
 800b850:	b538      	push	{r3, r4, r5, lr}
 800b852:	4d06      	ldr	r5, [pc, #24]	; (800b86c <_sbrk_r+0x1c>)
 800b854:	2300      	movs	r3, #0
 800b856:	4604      	mov	r4, r0
 800b858:	4608      	mov	r0, r1
 800b85a:	602b      	str	r3, [r5, #0]
 800b85c:	f7f6 fd54 	bl	8002308 <_sbrk>
 800b860:	1c43      	adds	r3, r0, #1
 800b862:	d102      	bne.n	800b86a <_sbrk_r+0x1a>
 800b864:	682b      	ldr	r3, [r5, #0]
 800b866:	b103      	cbz	r3, 800b86a <_sbrk_r+0x1a>
 800b868:	6023      	str	r3, [r4, #0]
 800b86a:	bd38      	pop	{r3, r4, r5, pc}
 800b86c:	20000908 	.word	0x20000908

0800b870 <strncmp>:
 800b870:	b510      	push	{r4, lr}
 800b872:	b17a      	cbz	r2, 800b894 <strncmp+0x24>
 800b874:	4603      	mov	r3, r0
 800b876:	3901      	subs	r1, #1
 800b878:	1884      	adds	r4, r0, r2
 800b87a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b87e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b882:	4290      	cmp	r0, r2
 800b884:	d101      	bne.n	800b88a <strncmp+0x1a>
 800b886:	42a3      	cmp	r3, r4
 800b888:	d101      	bne.n	800b88e <strncmp+0x1e>
 800b88a:	1a80      	subs	r0, r0, r2
 800b88c:	bd10      	pop	{r4, pc}
 800b88e:	2800      	cmp	r0, #0
 800b890:	d1f3      	bne.n	800b87a <strncmp+0xa>
 800b892:	e7fa      	b.n	800b88a <strncmp+0x1a>
 800b894:	4610      	mov	r0, r2
 800b896:	e7f9      	b.n	800b88c <strncmp+0x1c>

0800b898 <__ascii_wctomb>:
 800b898:	b149      	cbz	r1, 800b8ae <__ascii_wctomb+0x16>
 800b89a:	2aff      	cmp	r2, #255	; 0xff
 800b89c:	bf85      	ittet	hi
 800b89e:	238a      	movhi	r3, #138	; 0x8a
 800b8a0:	6003      	strhi	r3, [r0, #0]
 800b8a2:	700a      	strbls	r2, [r1, #0]
 800b8a4:	f04f 30ff 	movhi.w	r0, #4294967295
 800b8a8:	bf98      	it	ls
 800b8aa:	2001      	movls	r0, #1
 800b8ac:	4770      	bx	lr
 800b8ae:	4608      	mov	r0, r1
 800b8b0:	4770      	bx	lr
	...

0800b8b4 <__assert_func>:
 800b8b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8b6:	4614      	mov	r4, r2
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	4b09      	ldr	r3, [pc, #36]	; (800b8e0 <__assert_func+0x2c>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4605      	mov	r5, r0
 800b8c0:	68d8      	ldr	r0, [r3, #12]
 800b8c2:	b14c      	cbz	r4, 800b8d8 <__assert_func+0x24>
 800b8c4:	4b07      	ldr	r3, [pc, #28]	; (800b8e4 <__assert_func+0x30>)
 800b8c6:	9100      	str	r1, [sp, #0]
 800b8c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b8cc:	4906      	ldr	r1, [pc, #24]	; (800b8e8 <__assert_func+0x34>)
 800b8ce:	462b      	mov	r3, r5
 800b8d0:	f000 f80e 	bl	800b8f0 <fiprintf>
 800b8d4:	f000 fa8c 	bl	800bdf0 <abort>
 800b8d8:	4b04      	ldr	r3, [pc, #16]	; (800b8ec <__assert_func+0x38>)
 800b8da:	461c      	mov	r4, r3
 800b8dc:	e7f3      	b.n	800b8c6 <__assert_func+0x12>
 800b8de:	bf00      	nop
 800b8e0:	20000014 	.word	0x20000014
 800b8e4:	0800c875 	.word	0x0800c875
 800b8e8:	0800c882 	.word	0x0800c882
 800b8ec:	0800c8b0 	.word	0x0800c8b0

0800b8f0 <fiprintf>:
 800b8f0:	b40e      	push	{r1, r2, r3}
 800b8f2:	b503      	push	{r0, r1, lr}
 800b8f4:	4601      	mov	r1, r0
 800b8f6:	ab03      	add	r3, sp, #12
 800b8f8:	4805      	ldr	r0, [pc, #20]	; (800b910 <fiprintf+0x20>)
 800b8fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8fe:	6800      	ldr	r0, [r0, #0]
 800b900:	9301      	str	r3, [sp, #4]
 800b902:	f000 f885 	bl	800ba10 <_vfiprintf_r>
 800b906:	b002      	add	sp, #8
 800b908:	f85d eb04 	ldr.w	lr, [sp], #4
 800b90c:	b003      	add	sp, #12
 800b90e:	4770      	bx	lr
 800b910:	20000014 	.word	0x20000014

0800b914 <memmove>:
 800b914:	4288      	cmp	r0, r1
 800b916:	b510      	push	{r4, lr}
 800b918:	eb01 0402 	add.w	r4, r1, r2
 800b91c:	d902      	bls.n	800b924 <memmove+0x10>
 800b91e:	4284      	cmp	r4, r0
 800b920:	4623      	mov	r3, r4
 800b922:	d807      	bhi.n	800b934 <memmove+0x20>
 800b924:	1e43      	subs	r3, r0, #1
 800b926:	42a1      	cmp	r1, r4
 800b928:	d008      	beq.n	800b93c <memmove+0x28>
 800b92a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b92e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b932:	e7f8      	b.n	800b926 <memmove+0x12>
 800b934:	4402      	add	r2, r0
 800b936:	4601      	mov	r1, r0
 800b938:	428a      	cmp	r2, r1
 800b93a:	d100      	bne.n	800b93e <memmove+0x2a>
 800b93c:	bd10      	pop	{r4, pc}
 800b93e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b942:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b946:	e7f7      	b.n	800b938 <memmove+0x24>

0800b948 <__malloc_lock>:
 800b948:	4801      	ldr	r0, [pc, #4]	; (800b950 <__malloc_lock+0x8>)
 800b94a:	f000 bc11 	b.w	800c170 <__retarget_lock_acquire_recursive>
 800b94e:	bf00      	nop
 800b950:	2000090c 	.word	0x2000090c

0800b954 <__malloc_unlock>:
 800b954:	4801      	ldr	r0, [pc, #4]	; (800b95c <__malloc_unlock+0x8>)
 800b956:	f000 bc0c 	b.w	800c172 <__retarget_lock_release_recursive>
 800b95a:	bf00      	nop
 800b95c:	2000090c 	.word	0x2000090c

0800b960 <_realloc_r>:
 800b960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b964:	4680      	mov	r8, r0
 800b966:	4614      	mov	r4, r2
 800b968:	460e      	mov	r6, r1
 800b96a:	b921      	cbnz	r1, 800b976 <_realloc_r+0x16>
 800b96c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b970:	4611      	mov	r1, r2
 800b972:	f7ff bd93 	b.w	800b49c <_malloc_r>
 800b976:	b92a      	cbnz	r2, 800b984 <_realloc_r+0x24>
 800b978:	f7ff fd24 	bl	800b3c4 <_free_r>
 800b97c:	4625      	mov	r5, r4
 800b97e:	4628      	mov	r0, r5
 800b980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b984:	f000 fc5c 	bl	800c240 <_malloc_usable_size_r>
 800b988:	4284      	cmp	r4, r0
 800b98a:	4607      	mov	r7, r0
 800b98c:	d802      	bhi.n	800b994 <_realloc_r+0x34>
 800b98e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b992:	d812      	bhi.n	800b9ba <_realloc_r+0x5a>
 800b994:	4621      	mov	r1, r4
 800b996:	4640      	mov	r0, r8
 800b998:	f7ff fd80 	bl	800b49c <_malloc_r>
 800b99c:	4605      	mov	r5, r0
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	d0ed      	beq.n	800b97e <_realloc_r+0x1e>
 800b9a2:	42bc      	cmp	r4, r7
 800b9a4:	4622      	mov	r2, r4
 800b9a6:	4631      	mov	r1, r6
 800b9a8:	bf28      	it	cs
 800b9aa:	463a      	movcs	r2, r7
 800b9ac:	f7ff f828 	bl	800aa00 <memcpy>
 800b9b0:	4631      	mov	r1, r6
 800b9b2:	4640      	mov	r0, r8
 800b9b4:	f7ff fd06 	bl	800b3c4 <_free_r>
 800b9b8:	e7e1      	b.n	800b97e <_realloc_r+0x1e>
 800b9ba:	4635      	mov	r5, r6
 800b9bc:	e7df      	b.n	800b97e <_realloc_r+0x1e>

0800b9be <__sfputc_r>:
 800b9be:	6893      	ldr	r3, [r2, #8]
 800b9c0:	3b01      	subs	r3, #1
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	b410      	push	{r4}
 800b9c6:	6093      	str	r3, [r2, #8]
 800b9c8:	da08      	bge.n	800b9dc <__sfputc_r+0x1e>
 800b9ca:	6994      	ldr	r4, [r2, #24]
 800b9cc:	42a3      	cmp	r3, r4
 800b9ce:	db01      	blt.n	800b9d4 <__sfputc_r+0x16>
 800b9d0:	290a      	cmp	r1, #10
 800b9d2:	d103      	bne.n	800b9dc <__sfputc_r+0x1e>
 800b9d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9d8:	f000 b94a 	b.w	800bc70 <__swbuf_r>
 800b9dc:	6813      	ldr	r3, [r2, #0]
 800b9de:	1c58      	adds	r0, r3, #1
 800b9e0:	6010      	str	r0, [r2, #0]
 800b9e2:	7019      	strb	r1, [r3, #0]
 800b9e4:	4608      	mov	r0, r1
 800b9e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9ea:	4770      	bx	lr

0800b9ec <__sfputs_r>:
 800b9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ee:	4606      	mov	r6, r0
 800b9f0:	460f      	mov	r7, r1
 800b9f2:	4614      	mov	r4, r2
 800b9f4:	18d5      	adds	r5, r2, r3
 800b9f6:	42ac      	cmp	r4, r5
 800b9f8:	d101      	bne.n	800b9fe <__sfputs_r+0x12>
 800b9fa:	2000      	movs	r0, #0
 800b9fc:	e007      	b.n	800ba0e <__sfputs_r+0x22>
 800b9fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba02:	463a      	mov	r2, r7
 800ba04:	4630      	mov	r0, r6
 800ba06:	f7ff ffda 	bl	800b9be <__sfputc_r>
 800ba0a:	1c43      	adds	r3, r0, #1
 800ba0c:	d1f3      	bne.n	800b9f6 <__sfputs_r+0xa>
 800ba0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ba10 <_vfiprintf_r>:
 800ba10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba14:	460d      	mov	r5, r1
 800ba16:	b09d      	sub	sp, #116	; 0x74
 800ba18:	4614      	mov	r4, r2
 800ba1a:	4698      	mov	r8, r3
 800ba1c:	4606      	mov	r6, r0
 800ba1e:	b118      	cbz	r0, 800ba28 <_vfiprintf_r+0x18>
 800ba20:	6983      	ldr	r3, [r0, #24]
 800ba22:	b90b      	cbnz	r3, 800ba28 <_vfiprintf_r+0x18>
 800ba24:	f000 fb06 	bl	800c034 <__sinit>
 800ba28:	4b89      	ldr	r3, [pc, #548]	; (800bc50 <_vfiprintf_r+0x240>)
 800ba2a:	429d      	cmp	r5, r3
 800ba2c:	d11b      	bne.n	800ba66 <_vfiprintf_r+0x56>
 800ba2e:	6875      	ldr	r5, [r6, #4]
 800ba30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba32:	07d9      	lsls	r1, r3, #31
 800ba34:	d405      	bmi.n	800ba42 <_vfiprintf_r+0x32>
 800ba36:	89ab      	ldrh	r3, [r5, #12]
 800ba38:	059a      	lsls	r2, r3, #22
 800ba3a:	d402      	bmi.n	800ba42 <_vfiprintf_r+0x32>
 800ba3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba3e:	f000 fb97 	bl	800c170 <__retarget_lock_acquire_recursive>
 800ba42:	89ab      	ldrh	r3, [r5, #12]
 800ba44:	071b      	lsls	r3, r3, #28
 800ba46:	d501      	bpl.n	800ba4c <_vfiprintf_r+0x3c>
 800ba48:	692b      	ldr	r3, [r5, #16]
 800ba4a:	b9eb      	cbnz	r3, 800ba88 <_vfiprintf_r+0x78>
 800ba4c:	4629      	mov	r1, r5
 800ba4e:	4630      	mov	r0, r6
 800ba50:	f000 f960 	bl	800bd14 <__swsetup_r>
 800ba54:	b1c0      	cbz	r0, 800ba88 <_vfiprintf_r+0x78>
 800ba56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba58:	07dc      	lsls	r4, r3, #31
 800ba5a:	d50e      	bpl.n	800ba7a <_vfiprintf_r+0x6a>
 800ba5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba60:	b01d      	add	sp, #116	; 0x74
 800ba62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba66:	4b7b      	ldr	r3, [pc, #492]	; (800bc54 <_vfiprintf_r+0x244>)
 800ba68:	429d      	cmp	r5, r3
 800ba6a:	d101      	bne.n	800ba70 <_vfiprintf_r+0x60>
 800ba6c:	68b5      	ldr	r5, [r6, #8]
 800ba6e:	e7df      	b.n	800ba30 <_vfiprintf_r+0x20>
 800ba70:	4b79      	ldr	r3, [pc, #484]	; (800bc58 <_vfiprintf_r+0x248>)
 800ba72:	429d      	cmp	r5, r3
 800ba74:	bf08      	it	eq
 800ba76:	68f5      	ldreq	r5, [r6, #12]
 800ba78:	e7da      	b.n	800ba30 <_vfiprintf_r+0x20>
 800ba7a:	89ab      	ldrh	r3, [r5, #12]
 800ba7c:	0598      	lsls	r0, r3, #22
 800ba7e:	d4ed      	bmi.n	800ba5c <_vfiprintf_r+0x4c>
 800ba80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba82:	f000 fb76 	bl	800c172 <__retarget_lock_release_recursive>
 800ba86:	e7e9      	b.n	800ba5c <_vfiprintf_r+0x4c>
 800ba88:	2300      	movs	r3, #0
 800ba8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba8c:	2320      	movs	r3, #32
 800ba8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba92:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba96:	2330      	movs	r3, #48	; 0x30
 800ba98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bc5c <_vfiprintf_r+0x24c>
 800ba9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800baa0:	f04f 0901 	mov.w	r9, #1
 800baa4:	4623      	mov	r3, r4
 800baa6:	469a      	mov	sl, r3
 800baa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800baac:	b10a      	cbz	r2, 800bab2 <_vfiprintf_r+0xa2>
 800baae:	2a25      	cmp	r2, #37	; 0x25
 800bab0:	d1f9      	bne.n	800baa6 <_vfiprintf_r+0x96>
 800bab2:	ebba 0b04 	subs.w	fp, sl, r4
 800bab6:	d00b      	beq.n	800bad0 <_vfiprintf_r+0xc0>
 800bab8:	465b      	mov	r3, fp
 800baba:	4622      	mov	r2, r4
 800babc:	4629      	mov	r1, r5
 800babe:	4630      	mov	r0, r6
 800bac0:	f7ff ff94 	bl	800b9ec <__sfputs_r>
 800bac4:	3001      	adds	r0, #1
 800bac6:	f000 80aa 	beq.w	800bc1e <_vfiprintf_r+0x20e>
 800baca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bacc:	445a      	add	r2, fp
 800bace:	9209      	str	r2, [sp, #36]	; 0x24
 800bad0:	f89a 3000 	ldrb.w	r3, [sl]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	f000 80a2 	beq.w	800bc1e <_vfiprintf_r+0x20e>
 800bada:	2300      	movs	r3, #0
 800badc:	f04f 32ff 	mov.w	r2, #4294967295
 800bae0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bae4:	f10a 0a01 	add.w	sl, sl, #1
 800bae8:	9304      	str	r3, [sp, #16]
 800baea:	9307      	str	r3, [sp, #28]
 800baec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800baf0:	931a      	str	r3, [sp, #104]	; 0x68
 800baf2:	4654      	mov	r4, sl
 800baf4:	2205      	movs	r2, #5
 800baf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bafa:	4858      	ldr	r0, [pc, #352]	; (800bc5c <_vfiprintf_r+0x24c>)
 800bafc:	f7f4 fba8 	bl	8000250 <memchr>
 800bb00:	9a04      	ldr	r2, [sp, #16]
 800bb02:	b9d8      	cbnz	r0, 800bb3c <_vfiprintf_r+0x12c>
 800bb04:	06d1      	lsls	r1, r2, #27
 800bb06:	bf44      	itt	mi
 800bb08:	2320      	movmi	r3, #32
 800bb0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb0e:	0713      	lsls	r3, r2, #28
 800bb10:	bf44      	itt	mi
 800bb12:	232b      	movmi	r3, #43	; 0x2b
 800bb14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb18:	f89a 3000 	ldrb.w	r3, [sl]
 800bb1c:	2b2a      	cmp	r3, #42	; 0x2a
 800bb1e:	d015      	beq.n	800bb4c <_vfiprintf_r+0x13c>
 800bb20:	9a07      	ldr	r2, [sp, #28]
 800bb22:	4654      	mov	r4, sl
 800bb24:	2000      	movs	r0, #0
 800bb26:	f04f 0c0a 	mov.w	ip, #10
 800bb2a:	4621      	mov	r1, r4
 800bb2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb30:	3b30      	subs	r3, #48	; 0x30
 800bb32:	2b09      	cmp	r3, #9
 800bb34:	d94e      	bls.n	800bbd4 <_vfiprintf_r+0x1c4>
 800bb36:	b1b0      	cbz	r0, 800bb66 <_vfiprintf_r+0x156>
 800bb38:	9207      	str	r2, [sp, #28]
 800bb3a:	e014      	b.n	800bb66 <_vfiprintf_r+0x156>
 800bb3c:	eba0 0308 	sub.w	r3, r0, r8
 800bb40:	fa09 f303 	lsl.w	r3, r9, r3
 800bb44:	4313      	orrs	r3, r2
 800bb46:	9304      	str	r3, [sp, #16]
 800bb48:	46a2      	mov	sl, r4
 800bb4a:	e7d2      	b.n	800baf2 <_vfiprintf_r+0xe2>
 800bb4c:	9b03      	ldr	r3, [sp, #12]
 800bb4e:	1d19      	adds	r1, r3, #4
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	9103      	str	r1, [sp, #12]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	bfbb      	ittet	lt
 800bb58:	425b      	neglt	r3, r3
 800bb5a:	f042 0202 	orrlt.w	r2, r2, #2
 800bb5e:	9307      	strge	r3, [sp, #28]
 800bb60:	9307      	strlt	r3, [sp, #28]
 800bb62:	bfb8      	it	lt
 800bb64:	9204      	strlt	r2, [sp, #16]
 800bb66:	7823      	ldrb	r3, [r4, #0]
 800bb68:	2b2e      	cmp	r3, #46	; 0x2e
 800bb6a:	d10c      	bne.n	800bb86 <_vfiprintf_r+0x176>
 800bb6c:	7863      	ldrb	r3, [r4, #1]
 800bb6e:	2b2a      	cmp	r3, #42	; 0x2a
 800bb70:	d135      	bne.n	800bbde <_vfiprintf_r+0x1ce>
 800bb72:	9b03      	ldr	r3, [sp, #12]
 800bb74:	1d1a      	adds	r2, r3, #4
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	9203      	str	r2, [sp, #12]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	bfb8      	it	lt
 800bb7e:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb82:	3402      	adds	r4, #2
 800bb84:	9305      	str	r3, [sp, #20]
 800bb86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bc6c <_vfiprintf_r+0x25c>
 800bb8a:	7821      	ldrb	r1, [r4, #0]
 800bb8c:	2203      	movs	r2, #3
 800bb8e:	4650      	mov	r0, sl
 800bb90:	f7f4 fb5e 	bl	8000250 <memchr>
 800bb94:	b140      	cbz	r0, 800bba8 <_vfiprintf_r+0x198>
 800bb96:	2340      	movs	r3, #64	; 0x40
 800bb98:	eba0 000a 	sub.w	r0, r0, sl
 800bb9c:	fa03 f000 	lsl.w	r0, r3, r0
 800bba0:	9b04      	ldr	r3, [sp, #16]
 800bba2:	4303      	orrs	r3, r0
 800bba4:	3401      	adds	r4, #1
 800bba6:	9304      	str	r3, [sp, #16]
 800bba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbac:	482c      	ldr	r0, [pc, #176]	; (800bc60 <_vfiprintf_r+0x250>)
 800bbae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbb2:	2206      	movs	r2, #6
 800bbb4:	f7f4 fb4c 	bl	8000250 <memchr>
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	d03f      	beq.n	800bc3c <_vfiprintf_r+0x22c>
 800bbbc:	4b29      	ldr	r3, [pc, #164]	; (800bc64 <_vfiprintf_r+0x254>)
 800bbbe:	bb1b      	cbnz	r3, 800bc08 <_vfiprintf_r+0x1f8>
 800bbc0:	9b03      	ldr	r3, [sp, #12]
 800bbc2:	3307      	adds	r3, #7
 800bbc4:	f023 0307 	bic.w	r3, r3, #7
 800bbc8:	3308      	adds	r3, #8
 800bbca:	9303      	str	r3, [sp, #12]
 800bbcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbce:	443b      	add	r3, r7
 800bbd0:	9309      	str	r3, [sp, #36]	; 0x24
 800bbd2:	e767      	b.n	800baa4 <_vfiprintf_r+0x94>
 800bbd4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbd8:	460c      	mov	r4, r1
 800bbda:	2001      	movs	r0, #1
 800bbdc:	e7a5      	b.n	800bb2a <_vfiprintf_r+0x11a>
 800bbde:	2300      	movs	r3, #0
 800bbe0:	3401      	adds	r4, #1
 800bbe2:	9305      	str	r3, [sp, #20]
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	f04f 0c0a 	mov.w	ip, #10
 800bbea:	4620      	mov	r0, r4
 800bbec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbf0:	3a30      	subs	r2, #48	; 0x30
 800bbf2:	2a09      	cmp	r2, #9
 800bbf4:	d903      	bls.n	800bbfe <_vfiprintf_r+0x1ee>
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d0c5      	beq.n	800bb86 <_vfiprintf_r+0x176>
 800bbfa:	9105      	str	r1, [sp, #20]
 800bbfc:	e7c3      	b.n	800bb86 <_vfiprintf_r+0x176>
 800bbfe:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc02:	4604      	mov	r4, r0
 800bc04:	2301      	movs	r3, #1
 800bc06:	e7f0      	b.n	800bbea <_vfiprintf_r+0x1da>
 800bc08:	ab03      	add	r3, sp, #12
 800bc0a:	9300      	str	r3, [sp, #0]
 800bc0c:	462a      	mov	r2, r5
 800bc0e:	4b16      	ldr	r3, [pc, #88]	; (800bc68 <_vfiprintf_r+0x258>)
 800bc10:	a904      	add	r1, sp, #16
 800bc12:	4630      	mov	r0, r6
 800bc14:	f7fc f934 	bl	8007e80 <_printf_float>
 800bc18:	4607      	mov	r7, r0
 800bc1a:	1c78      	adds	r0, r7, #1
 800bc1c:	d1d6      	bne.n	800bbcc <_vfiprintf_r+0x1bc>
 800bc1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc20:	07d9      	lsls	r1, r3, #31
 800bc22:	d405      	bmi.n	800bc30 <_vfiprintf_r+0x220>
 800bc24:	89ab      	ldrh	r3, [r5, #12]
 800bc26:	059a      	lsls	r2, r3, #22
 800bc28:	d402      	bmi.n	800bc30 <_vfiprintf_r+0x220>
 800bc2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc2c:	f000 faa1 	bl	800c172 <__retarget_lock_release_recursive>
 800bc30:	89ab      	ldrh	r3, [r5, #12]
 800bc32:	065b      	lsls	r3, r3, #25
 800bc34:	f53f af12 	bmi.w	800ba5c <_vfiprintf_r+0x4c>
 800bc38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc3a:	e711      	b.n	800ba60 <_vfiprintf_r+0x50>
 800bc3c:	ab03      	add	r3, sp, #12
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	462a      	mov	r2, r5
 800bc42:	4b09      	ldr	r3, [pc, #36]	; (800bc68 <_vfiprintf_r+0x258>)
 800bc44:	a904      	add	r1, sp, #16
 800bc46:	4630      	mov	r0, r6
 800bc48:	f7fc fba6 	bl	8008398 <_printf_i>
 800bc4c:	e7e4      	b.n	800bc18 <_vfiprintf_r+0x208>
 800bc4e:	bf00      	nop
 800bc50:	0800c8d4 	.word	0x0800c8d4
 800bc54:	0800c8f4 	.word	0x0800c8f4
 800bc58:	0800c8b4 	.word	0x0800c8b4
 800bc5c:	0800c864 	.word	0x0800c864
 800bc60:	0800c86e 	.word	0x0800c86e
 800bc64:	08007e81 	.word	0x08007e81
 800bc68:	0800b9ed 	.word	0x0800b9ed
 800bc6c:	0800c86a 	.word	0x0800c86a

0800bc70 <__swbuf_r>:
 800bc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc72:	460e      	mov	r6, r1
 800bc74:	4614      	mov	r4, r2
 800bc76:	4605      	mov	r5, r0
 800bc78:	b118      	cbz	r0, 800bc82 <__swbuf_r+0x12>
 800bc7a:	6983      	ldr	r3, [r0, #24]
 800bc7c:	b90b      	cbnz	r3, 800bc82 <__swbuf_r+0x12>
 800bc7e:	f000 f9d9 	bl	800c034 <__sinit>
 800bc82:	4b21      	ldr	r3, [pc, #132]	; (800bd08 <__swbuf_r+0x98>)
 800bc84:	429c      	cmp	r4, r3
 800bc86:	d12b      	bne.n	800bce0 <__swbuf_r+0x70>
 800bc88:	686c      	ldr	r4, [r5, #4]
 800bc8a:	69a3      	ldr	r3, [r4, #24]
 800bc8c:	60a3      	str	r3, [r4, #8]
 800bc8e:	89a3      	ldrh	r3, [r4, #12]
 800bc90:	071a      	lsls	r2, r3, #28
 800bc92:	d52f      	bpl.n	800bcf4 <__swbuf_r+0x84>
 800bc94:	6923      	ldr	r3, [r4, #16]
 800bc96:	b36b      	cbz	r3, 800bcf4 <__swbuf_r+0x84>
 800bc98:	6923      	ldr	r3, [r4, #16]
 800bc9a:	6820      	ldr	r0, [r4, #0]
 800bc9c:	1ac0      	subs	r0, r0, r3
 800bc9e:	6963      	ldr	r3, [r4, #20]
 800bca0:	b2f6      	uxtb	r6, r6
 800bca2:	4283      	cmp	r3, r0
 800bca4:	4637      	mov	r7, r6
 800bca6:	dc04      	bgt.n	800bcb2 <__swbuf_r+0x42>
 800bca8:	4621      	mov	r1, r4
 800bcaa:	4628      	mov	r0, r5
 800bcac:	f000 f92e 	bl	800bf0c <_fflush_r>
 800bcb0:	bb30      	cbnz	r0, 800bd00 <__swbuf_r+0x90>
 800bcb2:	68a3      	ldr	r3, [r4, #8]
 800bcb4:	3b01      	subs	r3, #1
 800bcb6:	60a3      	str	r3, [r4, #8]
 800bcb8:	6823      	ldr	r3, [r4, #0]
 800bcba:	1c5a      	adds	r2, r3, #1
 800bcbc:	6022      	str	r2, [r4, #0]
 800bcbe:	701e      	strb	r6, [r3, #0]
 800bcc0:	6963      	ldr	r3, [r4, #20]
 800bcc2:	3001      	adds	r0, #1
 800bcc4:	4283      	cmp	r3, r0
 800bcc6:	d004      	beq.n	800bcd2 <__swbuf_r+0x62>
 800bcc8:	89a3      	ldrh	r3, [r4, #12]
 800bcca:	07db      	lsls	r3, r3, #31
 800bccc:	d506      	bpl.n	800bcdc <__swbuf_r+0x6c>
 800bcce:	2e0a      	cmp	r6, #10
 800bcd0:	d104      	bne.n	800bcdc <__swbuf_r+0x6c>
 800bcd2:	4621      	mov	r1, r4
 800bcd4:	4628      	mov	r0, r5
 800bcd6:	f000 f919 	bl	800bf0c <_fflush_r>
 800bcda:	b988      	cbnz	r0, 800bd00 <__swbuf_r+0x90>
 800bcdc:	4638      	mov	r0, r7
 800bcde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bce0:	4b0a      	ldr	r3, [pc, #40]	; (800bd0c <__swbuf_r+0x9c>)
 800bce2:	429c      	cmp	r4, r3
 800bce4:	d101      	bne.n	800bcea <__swbuf_r+0x7a>
 800bce6:	68ac      	ldr	r4, [r5, #8]
 800bce8:	e7cf      	b.n	800bc8a <__swbuf_r+0x1a>
 800bcea:	4b09      	ldr	r3, [pc, #36]	; (800bd10 <__swbuf_r+0xa0>)
 800bcec:	429c      	cmp	r4, r3
 800bcee:	bf08      	it	eq
 800bcf0:	68ec      	ldreq	r4, [r5, #12]
 800bcf2:	e7ca      	b.n	800bc8a <__swbuf_r+0x1a>
 800bcf4:	4621      	mov	r1, r4
 800bcf6:	4628      	mov	r0, r5
 800bcf8:	f000 f80c 	bl	800bd14 <__swsetup_r>
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	d0cb      	beq.n	800bc98 <__swbuf_r+0x28>
 800bd00:	f04f 37ff 	mov.w	r7, #4294967295
 800bd04:	e7ea      	b.n	800bcdc <__swbuf_r+0x6c>
 800bd06:	bf00      	nop
 800bd08:	0800c8d4 	.word	0x0800c8d4
 800bd0c:	0800c8f4 	.word	0x0800c8f4
 800bd10:	0800c8b4 	.word	0x0800c8b4

0800bd14 <__swsetup_r>:
 800bd14:	4b32      	ldr	r3, [pc, #200]	; (800bde0 <__swsetup_r+0xcc>)
 800bd16:	b570      	push	{r4, r5, r6, lr}
 800bd18:	681d      	ldr	r5, [r3, #0]
 800bd1a:	4606      	mov	r6, r0
 800bd1c:	460c      	mov	r4, r1
 800bd1e:	b125      	cbz	r5, 800bd2a <__swsetup_r+0x16>
 800bd20:	69ab      	ldr	r3, [r5, #24]
 800bd22:	b913      	cbnz	r3, 800bd2a <__swsetup_r+0x16>
 800bd24:	4628      	mov	r0, r5
 800bd26:	f000 f985 	bl	800c034 <__sinit>
 800bd2a:	4b2e      	ldr	r3, [pc, #184]	; (800bde4 <__swsetup_r+0xd0>)
 800bd2c:	429c      	cmp	r4, r3
 800bd2e:	d10f      	bne.n	800bd50 <__swsetup_r+0x3c>
 800bd30:	686c      	ldr	r4, [r5, #4]
 800bd32:	89a3      	ldrh	r3, [r4, #12]
 800bd34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd38:	0719      	lsls	r1, r3, #28
 800bd3a:	d42c      	bmi.n	800bd96 <__swsetup_r+0x82>
 800bd3c:	06dd      	lsls	r5, r3, #27
 800bd3e:	d411      	bmi.n	800bd64 <__swsetup_r+0x50>
 800bd40:	2309      	movs	r3, #9
 800bd42:	6033      	str	r3, [r6, #0]
 800bd44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bd48:	81a3      	strh	r3, [r4, #12]
 800bd4a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd4e:	e03e      	b.n	800bdce <__swsetup_r+0xba>
 800bd50:	4b25      	ldr	r3, [pc, #148]	; (800bde8 <__swsetup_r+0xd4>)
 800bd52:	429c      	cmp	r4, r3
 800bd54:	d101      	bne.n	800bd5a <__swsetup_r+0x46>
 800bd56:	68ac      	ldr	r4, [r5, #8]
 800bd58:	e7eb      	b.n	800bd32 <__swsetup_r+0x1e>
 800bd5a:	4b24      	ldr	r3, [pc, #144]	; (800bdec <__swsetup_r+0xd8>)
 800bd5c:	429c      	cmp	r4, r3
 800bd5e:	bf08      	it	eq
 800bd60:	68ec      	ldreq	r4, [r5, #12]
 800bd62:	e7e6      	b.n	800bd32 <__swsetup_r+0x1e>
 800bd64:	0758      	lsls	r0, r3, #29
 800bd66:	d512      	bpl.n	800bd8e <__swsetup_r+0x7a>
 800bd68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd6a:	b141      	cbz	r1, 800bd7e <__swsetup_r+0x6a>
 800bd6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd70:	4299      	cmp	r1, r3
 800bd72:	d002      	beq.n	800bd7a <__swsetup_r+0x66>
 800bd74:	4630      	mov	r0, r6
 800bd76:	f7ff fb25 	bl	800b3c4 <_free_r>
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	6363      	str	r3, [r4, #52]	; 0x34
 800bd7e:	89a3      	ldrh	r3, [r4, #12]
 800bd80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bd84:	81a3      	strh	r3, [r4, #12]
 800bd86:	2300      	movs	r3, #0
 800bd88:	6063      	str	r3, [r4, #4]
 800bd8a:	6923      	ldr	r3, [r4, #16]
 800bd8c:	6023      	str	r3, [r4, #0]
 800bd8e:	89a3      	ldrh	r3, [r4, #12]
 800bd90:	f043 0308 	orr.w	r3, r3, #8
 800bd94:	81a3      	strh	r3, [r4, #12]
 800bd96:	6923      	ldr	r3, [r4, #16]
 800bd98:	b94b      	cbnz	r3, 800bdae <__swsetup_r+0x9a>
 800bd9a:	89a3      	ldrh	r3, [r4, #12]
 800bd9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bda0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bda4:	d003      	beq.n	800bdae <__swsetup_r+0x9a>
 800bda6:	4621      	mov	r1, r4
 800bda8:	4630      	mov	r0, r6
 800bdaa:	f000 fa09 	bl	800c1c0 <__smakebuf_r>
 800bdae:	89a0      	ldrh	r0, [r4, #12]
 800bdb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bdb4:	f010 0301 	ands.w	r3, r0, #1
 800bdb8:	d00a      	beq.n	800bdd0 <__swsetup_r+0xbc>
 800bdba:	2300      	movs	r3, #0
 800bdbc:	60a3      	str	r3, [r4, #8]
 800bdbe:	6963      	ldr	r3, [r4, #20]
 800bdc0:	425b      	negs	r3, r3
 800bdc2:	61a3      	str	r3, [r4, #24]
 800bdc4:	6923      	ldr	r3, [r4, #16]
 800bdc6:	b943      	cbnz	r3, 800bdda <__swsetup_r+0xc6>
 800bdc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bdcc:	d1ba      	bne.n	800bd44 <__swsetup_r+0x30>
 800bdce:	bd70      	pop	{r4, r5, r6, pc}
 800bdd0:	0781      	lsls	r1, r0, #30
 800bdd2:	bf58      	it	pl
 800bdd4:	6963      	ldrpl	r3, [r4, #20]
 800bdd6:	60a3      	str	r3, [r4, #8]
 800bdd8:	e7f4      	b.n	800bdc4 <__swsetup_r+0xb0>
 800bdda:	2000      	movs	r0, #0
 800bddc:	e7f7      	b.n	800bdce <__swsetup_r+0xba>
 800bdde:	bf00      	nop
 800bde0:	20000014 	.word	0x20000014
 800bde4:	0800c8d4 	.word	0x0800c8d4
 800bde8:	0800c8f4 	.word	0x0800c8f4
 800bdec:	0800c8b4 	.word	0x0800c8b4

0800bdf0 <abort>:
 800bdf0:	b508      	push	{r3, lr}
 800bdf2:	2006      	movs	r0, #6
 800bdf4:	f000 fa54 	bl	800c2a0 <raise>
 800bdf8:	2001      	movs	r0, #1
 800bdfa:	f7f6 fa0d 	bl	8002218 <_exit>
	...

0800be00 <__sflush_r>:
 800be00:	898a      	ldrh	r2, [r1, #12]
 800be02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be06:	4605      	mov	r5, r0
 800be08:	0710      	lsls	r0, r2, #28
 800be0a:	460c      	mov	r4, r1
 800be0c:	d458      	bmi.n	800bec0 <__sflush_r+0xc0>
 800be0e:	684b      	ldr	r3, [r1, #4]
 800be10:	2b00      	cmp	r3, #0
 800be12:	dc05      	bgt.n	800be20 <__sflush_r+0x20>
 800be14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be16:	2b00      	cmp	r3, #0
 800be18:	dc02      	bgt.n	800be20 <__sflush_r+0x20>
 800be1a:	2000      	movs	r0, #0
 800be1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be22:	2e00      	cmp	r6, #0
 800be24:	d0f9      	beq.n	800be1a <__sflush_r+0x1a>
 800be26:	2300      	movs	r3, #0
 800be28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be2c:	682f      	ldr	r7, [r5, #0]
 800be2e:	602b      	str	r3, [r5, #0]
 800be30:	d032      	beq.n	800be98 <__sflush_r+0x98>
 800be32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be34:	89a3      	ldrh	r3, [r4, #12]
 800be36:	075a      	lsls	r2, r3, #29
 800be38:	d505      	bpl.n	800be46 <__sflush_r+0x46>
 800be3a:	6863      	ldr	r3, [r4, #4]
 800be3c:	1ac0      	subs	r0, r0, r3
 800be3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be40:	b10b      	cbz	r3, 800be46 <__sflush_r+0x46>
 800be42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be44:	1ac0      	subs	r0, r0, r3
 800be46:	2300      	movs	r3, #0
 800be48:	4602      	mov	r2, r0
 800be4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be4c:	6a21      	ldr	r1, [r4, #32]
 800be4e:	4628      	mov	r0, r5
 800be50:	47b0      	blx	r6
 800be52:	1c43      	adds	r3, r0, #1
 800be54:	89a3      	ldrh	r3, [r4, #12]
 800be56:	d106      	bne.n	800be66 <__sflush_r+0x66>
 800be58:	6829      	ldr	r1, [r5, #0]
 800be5a:	291d      	cmp	r1, #29
 800be5c:	d82c      	bhi.n	800beb8 <__sflush_r+0xb8>
 800be5e:	4a2a      	ldr	r2, [pc, #168]	; (800bf08 <__sflush_r+0x108>)
 800be60:	40ca      	lsrs	r2, r1
 800be62:	07d6      	lsls	r6, r2, #31
 800be64:	d528      	bpl.n	800beb8 <__sflush_r+0xb8>
 800be66:	2200      	movs	r2, #0
 800be68:	6062      	str	r2, [r4, #4]
 800be6a:	04d9      	lsls	r1, r3, #19
 800be6c:	6922      	ldr	r2, [r4, #16]
 800be6e:	6022      	str	r2, [r4, #0]
 800be70:	d504      	bpl.n	800be7c <__sflush_r+0x7c>
 800be72:	1c42      	adds	r2, r0, #1
 800be74:	d101      	bne.n	800be7a <__sflush_r+0x7a>
 800be76:	682b      	ldr	r3, [r5, #0]
 800be78:	b903      	cbnz	r3, 800be7c <__sflush_r+0x7c>
 800be7a:	6560      	str	r0, [r4, #84]	; 0x54
 800be7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be7e:	602f      	str	r7, [r5, #0]
 800be80:	2900      	cmp	r1, #0
 800be82:	d0ca      	beq.n	800be1a <__sflush_r+0x1a>
 800be84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be88:	4299      	cmp	r1, r3
 800be8a:	d002      	beq.n	800be92 <__sflush_r+0x92>
 800be8c:	4628      	mov	r0, r5
 800be8e:	f7ff fa99 	bl	800b3c4 <_free_r>
 800be92:	2000      	movs	r0, #0
 800be94:	6360      	str	r0, [r4, #52]	; 0x34
 800be96:	e7c1      	b.n	800be1c <__sflush_r+0x1c>
 800be98:	6a21      	ldr	r1, [r4, #32]
 800be9a:	2301      	movs	r3, #1
 800be9c:	4628      	mov	r0, r5
 800be9e:	47b0      	blx	r6
 800bea0:	1c41      	adds	r1, r0, #1
 800bea2:	d1c7      	bne.n	800be34 <__sflush_r+0x34>
 800bea4:	682b      	ldr	r3, [r5, #0]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d0c4      	beq.n	800be34 <__sflush_r+0x34>
 800beaa:	2b1d      	cmp	r3, #29
 800beac:	d001      	beq.n	800beb2 <__sflush_r+0xb2>
 800beae:	2b16      	cmp	r3, #22
 800beb0:	d101      	bne.n	800beb6 <__sflush_r+0xb6>
 800beb2:	602f      	str	r7, [r5, #0]
 800beb4:	e7b1      	b.n	800be1a <__sflush_r+0x1a>
 800beb6:	89a3      	ldrh	r3, [r4, #12]
 800beb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bebc:	81a3      	strh	r3, [r4, #12]
 800bebe:	e7ad      	b.n	800be1c <__sflush_r+0x1c>
 800bec0:	690f      	ldr	r7, [r1, #16]
 800bec2:	2f00      	cmp	r7, #0
 800bec4:	d0a9      	beq.n	800be1a <__sflush_r+0x1a>
 800bec6:	0793      	lsls	r3, r2, #30
 800bec8:	680e      	ldr	r6, [r1, #0]
 800beca:	bf08      	it	eq
 800becc:	694b      	ldreq	r3, [r1, #20]
 800bece:	600f      	str	r7, [r1, #0]
 800bed0:	bf18      	it	ne
 800bed2:	2300      	movne	r3, #0
 800bed4:	eba6 0807 	sub.w	r8, r6, r7
 800bed8:	608b      	str	r3, [r1, #8]
 800beda:	f1b8 0f00 	cmp.w	r8, #0
 800bede:	dd9c      	ble.n	800be1a <__sflush_r+0x1a>
 800bee0:	6a21      	ldr	r1, [r4, #32]
 800bee2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bee4:	4643      	mov	r3, r8
 800bee6:	463a      	mov	r2, r7
 800bee8:	4628      	mov	r0, r5
 800beea:	47b0      	blx	r6
 800beec:	2800      	cmp	r0, #0
 800beee:	dc06      	bgt.n	800befe <__sflush_r+0xfe>
 800bef0:	89a3      	ldrh	r3, [r4, #12]
 800bef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bef6:	81a3      	strh	r3, [r4, #12]
 800bef8:	f04f 30ff 	mov.w	r0, #4294967295
 800befc:	e78e      	b.n	800be1c <__sflush_r+0x1c>
 800befe:	4407      	add	r7, r0
 800bf00:	eba8 0800 	sub.w	r8, r8, r0
 800bf04:	e7e9      	b.n	800beda <__sflush_r+0xda>
 800bf06:	bf00      	nop
 800bf08:	20400001 	.word	0x20400001

0800bf0c <_fflush_r>:
 800bf0c:	b538      	push	{r3, r4, r5, lr}
 800bf0e:	690b      	ldr	r3, [r1, #16]
 800bf10:	4605      	mov	r5, r0
 800bf12:	460c      	mov	r4, r1
 800bf14:	b913      	cbnz	r3, 800bf1c <_fflush_r+0x10>
 800bf16:	2500      	movs	r5, #0
 800bf18:	4628      	mov	r0, r5
 800bf1a:	bd38      	pop	{r3, r4, r5, pc}
 800bf1c:	b118      	cbz	r0, 800bf26 <_fflush_r+0x1a>
 800bf1e:	6983      	ldr	r3, [r0, #24]
 800bf20:	b90b      	cbnz	r3, 800bf26 <_fflush_r+0x1a>
 800bf22:	f000 f887 	bl	800c034 <__sinit>
 800bf26:	4b14      	ldr	r3, [pc, #80]	; (800bf78 <_fflush_r+0x6c>)
 800bf28:	429c      	cmp	r4, r3
 800bf2a:	d11b      	bne.n	800bf64 <_fflush_r+0x58>
 800bf2c:	686c      	ldr	r4, [r5, #4]
 800bf2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d0ef      	beq.n	800bf16 <_fflush_r+0xa>
 800bf36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf38:	07d0      	lsls	r0, r2, #31
 800bf3a:	d404      	bmi.n	800bf46 <_fflush_r+0x3a>
 800bf3c:	0599      	lsls	r1, r3, #22
 800bf3e:	d402      	bmi.n	800bf46 <_fflush_r+0x3a>
 800bf40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf42:	f000 f915 	bl	800c170 <__retarget_lock_acquire_recursive>
 800bf46:	4628      	mov	r0, r5
 800bf48:	4621      	mov	r1, r4
 800bf4a:	f7ff ff59 	bl	800be00 <__sflush_r>
 800bf4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf50:	07da      	lsls	r2, r3, #31
 800bf52:	4605      	mov	r5, r0
 800bf54:	d4e0      	bmi.n	800bf18 <_fflush_r+0xc>
 800bf56:	89a3      	ldrh	r3, [r4, #12]
 800bf58:	059b      	lsls	r3, r3, #22
 800bf5a:	d4dd      	bmi.n	800bf18 <_fflush_r+0xc>
 800bf5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf5e:	f000 f908 	bl	800c172 <__retarget_lock_release_recursive>
 800bf62:	e7d9      	b.n	800bf18 <_fflush_r+0xc>
 800bf64:	4b05      	ldr	r3, [pc, #20]	; (800bf7c <_fflush_r+0x70>)
 800bf66:	429c      	cmp	r4, r3
 800bf68:	d101      	bne.n	800bf6e <_fflush_r+0x62>
 800bf6a:	68ac      	ldr	r4, [r5, #8]
 800bf6c:	e7df      	b.n	800bf2e <_fflush_r+0x22>
 800bf6e:	4b04      	ldr	r3, [pc, #16]	; (800bf80 <_fflush_r+0x74>)
 800bf70:	429c      	cmp	r4, r3
 800bf72:	bf08      	it	eq
 800bf74:	68ec      	ldreq	r4, [r5, #12]
 800bf76:	e7da      	b.n	800bf2e <_fflush_r+0x22>
 800bf78:	0800c8d4 	.word	0x0800c8d4
 800bf7c:	0800c8f4 	.word	0x0800c8f4
 800bf80:	0800c8b4 	.word	0x0800c8b4

0800bf84 <std>:
 800bf84:	2300      	movs	r3, #0
 800bf86:	b510      	push	{r4, lr}
 800bf88:	4604      	mov	r4, r0
 800bf8a:	e9c0 3300 	strd	r3, r3, [r0]
 800bf8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf92:	6083      	str	r3, [r0, #8]
 800bf94:	8181      	strh	r1, [r0, #12]
 800bf96:	6643      	str	r3, [r0, #100]	; 0x64
 800bf98:	81c2      	strh	r2, [r0, #14]
 800bf9a:	6183      	str	r3, [r0, #24]
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	2208      	movs	r2, #8
 800bfa0:	305c      	adds	r0, #92	; 0x5c
 800bfa2:	f7fb fed5 	bl	8007d50 <memset>
 800bfa6:	4b05      	ldr	r3, [pc, #20]	; (800bfbc <std+0x38>)
 800bfa8:	6263      	str	r3, [r4, #36]	; 0x24
 800bfaa:	4b05      	ldr	r3, [pc, #20]	; (800bfc0 <std+0x3c>)
 800bfac:	62a3      	str	r3, [r4, #40]	; 0x28
 800bfae:	4b05      	ldr	r3, [pc, #20]	; (800bfc4 <std+0x40>)
 800bfb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bfb2:	4b05      	ldr	r3, [pc, #20]	; (800bfc8 <std+0x44>)
 800bfb4:	6224      	str	r4, [r4, #32]
 800bfb6:	6323      	str	r3, [r4, #48]	; 0x30
 800bfb8:	bd10      	pop	{r4, pc}
 800bfba:	bf00      	nop
 800bfbc:	0800c2d9 	.word	0x0800c2d9
 800bfc0:	0800c2fb 	.word	0x0800c2fb
 800bfc4:	0800c333 	.word	0x0800c333
 800bfc8:	0800c357 	.word	0x0800c357

0800bfcc <_cleanup_r>:
 800bfcc:	4901      	ldr	r1, [pc, #4]	; (800bfd4 <_cleanup_r+0x8>)
 800bfce:	f000 b8af 	b.w	800c130 <_fwalk_reent>
 800bfd2:	bf00      	nop
 800bfd4:	0800bf0d 	.word	0x0800bf0d

0800bfd8 <__sfmoreglue>:
 800bfd8:	b570      	push	{r4, r5, r6, lr}
 800bfda:	2268      	movs	r2, #104	; 0x68
 800bfdc:	1e4d      	subs	r5, r1, #1
 800bfde:	4355      	muls	r5, r2
 800bfe0:	460e      	mov	r6, r1
 800bfe2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bfe6:	f7ff fa59 	bl	800b49c <_malloc_r>
 800bfea:	4604      	mov	r4, r0
 800bfec:	b140      	cbz	r0, 800c000 <__sfmoreglue+0x28>
 800bfee:	2100      	movs	r1, #0
 800bff0:	e9c0 1600 	strd	r1, r6, [r0]
 800bff4:	300c      	adds	r0, #12
 800bff6:	60a0      	str	r0, [r4, #8]
 800bff8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bffc:	f7fb fea8 	bl	8007d50 <memset>
 800c000:	4620      	mov	r0, r4
 800c002:	bd70      	pop	{r4, r5, r6, pc}

0800c004 <__sfp_lock_acquire>:
 800c004:	4801      	ldr	r0, [pc, #4]	; (800c00c <__sfp_lock_acquire+0x8>)
 800c006:	f000 b8b3 	b.w	800c170 <__retarget_lock_acquire_recursive>
 800c00a:	bf00      	nop
 800c00c:	2000090d 	.word	0x2000090d

0800c010 <__sfp_lock_release>:
 800c010:	4801      	ldr	r0, [pc, #4]	; (800c018 <__sfp_lock_release+0x8>)
 800c012:	f000 b8ae 	b.w	800c172 <__retarget_lock_release_recursive>
 800c016:	bf00      	nop
 800c018:	2000090d 	.word	0x2000090d

0800c01c <__sinit_lock_acquire>:
 800c01c:	4801      	ldr	r0, [pc, #4]	; (800c024 <__sinit_lock_acquire+0x8>)
 800c01e:	f000 b8a7 	b.w	800c170 <__retarget_lock_acquire_recursive>
 800c022:	bf00      	nop
 800c024:	2000090e 	.word	0x2000090e

0800c028 <__sinit_lock_release>:
 800c028:	4801      	ldr	r0, [pc, #4]	; (800c030 <__sinit_lock_release+0x8>)
 800c02a:	f000 b8a2 	b.w	800c172 <__retarget_lock_release_recursive>
 800c02e:	bf00      	nop
 800c030:	2000090e 	.word	0x2000090e

0800c034 <__sinit>:
 800c034:	b510      	push	{r4, lr}
 800c036:	4604      	mov	r4, r0
 800c038:	f7ff fff0 	bl	800c01c <__sinit_lock_acquire>
 800c03c:	69a3      	ldr	r3, [r4, #24]
 800c03e:	b11b      	cbz	r3, 800c048 <__sinit+0x14>
 800c040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c044:	f7ff bff0 	b.w	800c028 <__sinit_lock_release>
 800c048:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c04c:	6523      	str	r3, [r4, #80]	; 0x50
 800c04e:	4b13      	ldr	r3, [pc, #76]	; (800c09c <__sinit+0x68>)
 800c050:	4a13      	ldr	r2, [pc, #76]	; (800c0a0 <__sinit+0x6c>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	62a2      	str	r2, [r4, #40]	; 0x28
 800c056:	42a3      	cmp	r3, r4
 800c058:	bf04      	itt	eq
 800c05a:	2301      	moveq	r3, #1
 800c05c:	61a3      	streq	r3, [r4, #24]
 800c05e:	4620      	mov	r0, r4
 800c060:	f000 f820 	bl	800c0a4 <__sfp>
 800c064:	6060      	str	r0, [r4, #4]
 800c066:	4620      	mov	r0, r4
 800c068:	f000 f81c 	bl	800c0a4 <__sfp>
 800c06c:	60a0      	str	r0, [r4, #8]
 800c06e:	4620      	mov	r0, r4
 800c070:	f000 f818 	bl	800c0a4 <__sfp>
 800c074:	2200      	movs	r2, #0
 800c076:	60e0      	str	r0, [r4, #12]
 800c078:	2104      	movs	r1, #4
 800c07a:	6860      	ldr	r0, [r4, #4]
 800c07c:	f7ff ff82 	bl	800bf84 <std>
 800c080:	68a0      	ldr	r0, [r4, #8]
 800c082:	2201      	movs	r2, #1
 800c084:	2109      	movs	r1, #9
 800c086:	f7ff ff7d 	bl	800bf84 <std>
 800c08a:	68e0      	ldr	r0, [r4, #12]
 800c08c:	2202      	movs	r2, #2
 800c08e:	2112      	movs	r1, #18
 800c090:	f7ff ff78 	bl	800bf84 <std>
 800c094:	2301      	movs	r3, #1
 800c096:	61a3      	str	r3, [r4, #24]
 800c098:	e7d2      	b.n	800c040 <__sinit+0xc>
 800c09a:	bf00      	nop
 800c09c:	0800c46c 	.word	0x0800c46c
 800c0a0:	0800bfcd 	.word	0x0800bfcd

0800c0a4 <__sfp>:
 800c0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0a6:	4607      	mov	r7, r0
 800c0a8:	f7ff ffac 	bl	800c004 <__sfp_lock_acquire>
 800c0ac:	4b1e      	ldr	r3, [pc, #120]	; (800c128 <__sfp+0x84>)
 800c0ae:	681e      	ldr	r6, [r3, #0]
 800c0b0:	69b3      	ldr	r3, [r6, #24]
 800c0b2:	b913      	cbnz	r3, 800c0ba <__sfp+0x16>
 800c0b4:	4630      	mov	r0, r6
 800c0b6:	f7ff ffbd 	bl	800c034 <__sinit>
 800c0ba:	3648      	adds	r6, #72	; 0x48
 800c0bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c0c0:	3b01      	subs	r3, #1
 800c0c2:	d503      	bpl.n	800c0cc <__sfp+0x28>
 800c0c4:	6833      	ldr	r3, [r6, #0]
 800c0c6:	b30b      	cbz	r3, 800c10c <__sfp+0x68>
 800c0c8:	6836      	ldr	r6, [r6, #0]
 800c0ca:	e7f7      	b.n	800c0bc <__sfp+0x18>
 800c0cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c0d0:	b9d5      	cbnz	r5, 800c108 <__sfp+0x64>
 800c0d2:	4b16      	ldr	r3, [pc, #88]	; (800c12c <__sfp+0x88>)
 800c0d4:	60e3      	str	r3, [r4, #12]
 800c0d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c0da:	6665      	str	r5, [r4, #100]	; 0x64
 800c0dc:	f000 f847 	bl	800c16e <__retarget_lock_init_recursive>
 800c0e0:	f7ff ff96 	bl	800c010 <__sfp_lock_release>
 800c0e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c0e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c0ec:	6025      	str	r5, [r4, #0]
 800c0ee:	61a5      	str	r5, [r4, #24]
 800c0f0:	2208      	movs	r2, #8
 800c0f2:	4629      	mov	r1, r5
 800c0f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c0f8:	f7fb fe2a 	bl	8007d50 <memset>
 800c0fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c100:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c104:	4620      	mov	r0, r4
 800c106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c108:	3468      	adds	r4, #104	; 0x68
 800c10a:	e7d9      	b.n	800c0c0 <__sfp+0x1c>
 800c10c:	2104      	movs	r1, #4
 800c10e:	4638      	mov	r0, r7
 800c110:	f7ff ff62 	bl	800bfd8 <__sfmoreglue>
 800c114:	4604      	mov	r4, r0
 800c116:	6030      	str	r0, [r6, #0]
 800c118:	2800      	cmp	r0, #0
 800c11a:	d1d5      	bne.n	800c0c8 <__sfp+0x24>
 800c11c:	f7ff ff78 	bl	800c010 <__sfp_lock_release>
 800c120:	230c      	movs	r3, #12
 800c122:	603b      	str	r3, [r7, #0]
 800c124:	e7ee      	b.n	800c104 <__sfp+0x60>
 800c126:	bf00      	nop
 800c128:	0800c46c 	.word	0x0800c46c
 800c12c:	ffff0001 	.word	0xffff0001

0800c130 <_fwalk_reent>:
 800c130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c134:	4606      	mov	r6, r0
 800c136:	4688      	mov	r8, r1
 800c138:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c13c:	2700      	movs	r7, #0
 800c13e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c142:	f1b9 0901 	subs.w	r9, r9, #1
 800c146:	d505      	bpl.n	800c154 <_fwalk_reent+0x24>
 800c148:	6824      	ldr	r4, [r4, #0]
 800c14a:	2c00      	cmp	r4, #0
 800c14c:	d1f7      	bne.n	800c13e <_fwalk_reent+0xe>
 800c14e:	4638      	mov	r0, r7
 800c150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c154:	89ab      	ldrh	r3, [r5, #12]
 800c156:	2b01      	cmp	r3, #1
 800c158:	d907      	bls.n	800c16a <_fwalk_reent+0x3a>
 800c15a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c15e:	3301      	adds	r3, #1
 800c160:	d003      	beq.n	800c16a <_fwalk_reent+0x3a>
 800c162:	4629      	mov	r1, r5
 800c164:	4630      	mov	r0, r6
 800c166:	47c0      	blx	r8
 800c168:	4307      	orrs	r7, r0
 800c16a:	3568      	adds	r5, #104	; 0x68
 800c16c:	e7e9      	b.n	800c142 <_fwalk_reent+0x12>

0800c16e <__retarget_lock_init_recursive>:
 800c16e:	4770      	bx	lr

0800c170 <__retarget_lock_acquire_recursive>:
 800c170:	4770      	bx	lr

0800c172 <__retarget_lock_release_recursive>:
 800c172:	4770      	bx	lr

0800c174 <__swhatbuf_r>:
 800c174:	b570      	push	{r4, r5, r6, lr}
 800c176:	460e      	mov	r6, r1
 800c178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c17c:	2900      	cmp	r1, #0
 800c17e:	b096      	sub	sp, #88	; 0x58
 800c180:	4614      	mov	r4, r2
 800c182:	461d      	mov	r5, r3
 800c184:	da08      	bge.n	800c198 <__swhatbuf_r+0x24>
 800c186:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c18a:	2200      	movs	r2, #0
 800c18c:	602a      	str	r2, [r5, #0]
 800c18e:	061a      	lsls	r2, r3, #24
 800c190:	d410      	bmi.n	800c1b4 <__swhatbuf_r+0x40>
 800c192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c196:	e00e      	b.n	800c1b6 <__swhatbuf_r+0x42>
 800c198:	466a      	mov	r2, sp
 800c19a:	f000 f903 	bl	800c3a4 <_fstat_r>
 800c19e:	2800      	cmp	r0, #0
 800c1a0:	dbf1      	blt.n	800c186 <__swhatbuf_r+0x12>
 800c1a2:	9a01      	ldr	r2, [sp, #4]
 800c1a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c1a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c1ac:	425a      	negs	r2, r3
 800c1ae:	415a      	adcs	r2, r3
 800c1b0:	602a      	str	r2, [r5, #0]
 800c1b2:	e7ee      	b.n	800c192 <__swhatbuf_r+0x1e>
 800c1b4:	2340      	movs	r3, #64	; 0x40
 800c1b6:	2000      	movs	r0, #0
 800c1b8:	6023      	str	r3, [r4, #0]
 800c1ba:	b016      	add	sp, #88	; 0x58
 800c1bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c1c0 <__smakebuf_r>:
 800c1c0:	898b      	ldrh	r3, [r1, #12]
 800c1c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c1c4:	079d      	lsls	r5, r3, #30
 800c1c6:	4606      	mov	r6, r0
 800c1c8:	460c      	mov	r4, r1
 800c1ca:	d507      	bpl.n	800c1dc <__smakebuf_r+0x1c>
 800c1cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c1d0:	6023      	str	r3, [r4, #0]
 800c1d2:	6123      	str	r3, [r4, #16]
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	6163      	str	r3, [r4, #20]
 800c1d8:	b002      	add	sp, #8
 800c1da:	bd70      	pop	{r4, r5, r6, pc}
 800c1dc:	ab01      	add	r3, sp, #4
 800c1de:	466a      	mov	r2, sp
 800c1e0:	f7ff ffc8 	bl	800c174 <__swhatbuf_r>
 800c1e4:	9900      	ldr	r1, [sp, #0]
 800c1e6:	4605      	mov	r5, r0
 800c1e8:	4630      	mov	r0, r6
 800c1ea:	f7ff f957 	bl	800b49c <_malloc_r>
 800c1ee:	b948      	cbnz	r0, 800c204 <__smakebuf_r+0x44>
 800c1f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1f4:	059a      	lsls	r2, r3, #22
 800c1f6:	d4ef      	bmi.n	800c1d8 <__smakebuf_r+0x18>
 800c1f8:	f023 0303 	bic.w	r3, r3, #3
 800c1fc:	f043 0302 	orr.w	r3, r3, #2
 800c200:	81a3      	strh	r3, [r4, #12]
 800c202:	e7e3      	b.n	800c1cc <__smakebuf_r+0xc>
 800c204:	4b0d      	ldr	r3, [pc, #52]	; (800c23c <__smakebuf_r+0x7c>)
 800c206:	62b3      	str	r3, [r6, #40]	; 0x28
 800c208:	89a3      	ldrh	r3, [r4, #12]
 800c20a:	6020      	str	r0, [r4, #0]
 800c20c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c210:	81a3      	strh	r3, [r4, #12]
 800c212:	9b00      	ldr	r3, [sp, #0]
 800c214:	6163      	str	r3, [r4, #20]
 800c216:	9b01      	ldr	r3, [sp, #4]
 800c218:	6120      	str	r0, [r4, #16]
 800c21a:	b15b      	cbz	r3, 800c234 <__smakebuf_r+0x74>
 800c21c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c220:	4630      	mov	r0, r6
 800c222:	f000 f8d1 	bl	800c3c8 <_isatty_r>
 800c226:	b128      	cbz	r0, 800c234 <__smakebuf_r+0x74>
 800c228:	89a3      	ldrh	r3, [r4, #12]
 800c22a:	f023 0303 	bic.w	r3, r3, #3
 800c22e:	f043 0301 	orr.w	r3, r3, #1
 800c232:	81a3      	strh	r3, [r4, #12]
 800c234:	89a0      	ldrh	r0, [r4, #12]
 800c236:	4305      	orrs	r5, r0
 800c238:	81a5      	strh	r5, [r4, #12]
 800c23a:	e7cd      	b.n	800c1d8 <__smakebuf_r+0x18>
 800c23c:	0800bfcd 	.word	0x0800bfcd

0800c240 <_malloc_usable_size_r>:
 800c240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c244:	1f18      	subs	r0, r3, #4
 800c246:	2b00      	cmp	r3, #0
 800c248:	bfbc      	itt	lt
 800c24a:	580b      	ldrlt	r3, [r1, r0]
 800c24c:	18c0      	addlt	r0, r0, r3
 800c24e:	4770      	bx	lr

0800c250 <_raise_r>:
 800c250:	291f      	cmp	r1, #31
 800c252:	b538      	push	{r3, r4, r5, lr}
 800c254:	4604      	mov	r4, r0
 800c256:	460d      	mov	r5, r1
 800c258:	d904      	bls.n	800c264 <_raise_r+0x14>
 800c25a:	2316      	movs	r3, #22
 800c25c:	6003      	str	r3, [r0, #0]
 800c25e:	f04f 30ff 	mov.w	r0, #4294967295
 800c262:	bd38      	pop	{r3, r4, r5, pc}
 800c264:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c266:	b112      	cbz	r2, 800c26e <_raise_r+0x1e>
 800c268:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c26c:	b94b      	cbnz	r3, 800c282 <_raise_r+0x32>
 800c26e:	4620      	mov	r0, r4
 800c270:	f000 f830 	bl	800c2d4 <_getpid_r>
 800c274:	462a      	mov	r2, r5
 800c276:	4601      	mov	r1, r0
 800c278:	4620      	mov	r0, r4
 800c27a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c27e:	f000 b817 	b.w	800c2b0 <_kill_r>
 800c282:	2b01      	cmp	r3, #1
 800c284:	d00a      	beq.n	800c29c <_raise_r+0x4c>
 800c286:	1c59      	adds	r1, r3, #1
 800c288:	d103      	bne.n	800c292 <_raise_r+0x42>
 800c28a:	2316      	movs	r3, #22
 800c28c:	6003      	str	r3, [r0, #0]
 800c28e:	2001      	movs	r0, #1
 800c290:	e7e7      	b.n	800c262 <_raise_r+0x12>
 800c292:	2400      	movs	r4, #0
 800c294:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c298:	4628      	mov	r0, r5
 800c29a:	4798      	blx	r3
 800c29c:	2000      	movs	r0, #0
 800c29e:	e7e0      	b.n	800c262 <_raise_r+0x12>

0800c2a0 <raise>:
 800c2a0:	4b02      	ldr	r3, [pc, #8]	; (800c2ac <raise+0xc>)
 800c2a2:	4601      	mov	r1, r0
 800c2a4:	6818      	ldr	r0, [r3, #0]
 800c2a6:	f7ff bfd3 	b.w	800c250 <_raise_r>
 800c2aa:	bf00      	nop
 800c2ac:	20000014 	.word	0x20000014

0800c2b0 <_kill_r>:
 800c2b0:	b538      	push	{r3, r4, r5, lr}
 800c2b2:	4d07      	ldr	r5, [pc, #28]	; (800c2d0 <_kill_r+0x20>)
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	4604      	mov	r4, r0
 800c2b8:	4608      	mov	r0, r1
 800c2ba:	4611      	mov	r1, r2
 800c2bc:	602b      	str	r3, [r5, #0]
 800c2be:	f7f5 ff9b 	bl	80021f8 <_kill>
 800c2c2:	1c43      	adds	r3, r0, #1
 800c2c4:	d102      	bne.n	800c2cc <_kill_r+0x1c>
 800c2c6:	682b      	ldr	r3, [r5, #0]
 800c2c8:	b103      	cbz	r3, 800c2cc <_kill_r+0x1c>
 800c2ca:	6023      	str	r3, [r4, #0]
 800c2cc:	bd38      	pop	{r3, r4, r5, pc}
 800c2ce:	bf00      	nop
 800c2d0:	20000908 	.word	0x20000908

0800c2d4 <_getpid_r>:
 800c2d4:	f7f5 bf88 	b.w	80021e8 <_getpid>

0800c2d8 <__sread>:
 800c2d8:	b510      	push	{r4, lr}
 800c2da:	460c      	mov	r4, r1
 800c2dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2e0:	f000 f894 	bl	800c40c <_read_r>
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	bfab      	itete	ge
 800c2e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c2ea:	89a3      	ldrhlt	r3, [r4, #12]
 800c2ec:	181b      	addge	r3, r3, r0
 800c2ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c2f2:	bfac      	ite	ge
 800c2f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c2f6:	81a3      	strhlt	r3, [r4, #12]
 800c2f8:	bd10      	pop	{r4, pc}

0800c2fa <__swrite>:
 800c2fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2fe:	461f      	mov	r7, r3
 800c300:	898b      	ldrh	r3, [r1, #12]
 800c302:	05db      	lsls	r3, r3, #23
 800c304:	4605      	mov	r5, r0
 800c306:	460c      	mov	r4, r1
 800c308:	4616      	mov	r6, r2
 800c30a:	d505      	bpl.n	800c318 <__swrite+0x1e>
 800c30c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c310:	2302      	movs	r3, #2
 800c312:	2200      	movs	r2, #0
 800c314:	f000 f868 	bl	800c3e8 <_lseek_r>
 800c318:	89a3      	ldrh	r3, [r4, #12]
 800c31a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c31e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c322:	81a3      	strh	r3, [r4, #12]
 800c324:	4632      	mov	r2, r6
 800c326:	463b      	mov	r3, r7
 800c328:	4628      	mov	r0, r5
 800c32a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c32e:	f000 b817 	b.w	800c360 <_write_r>

0800c332 <__sseek>:
 800c332:	b510      	push	{r4, lr}
 800c334:	460c      	mov	r4, r1
 800c336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c33a:	f000 f855 	bl	800c3e8 <_lseek_r>
 800c33e:	1c43      	adds	r3, r0, #1
 800c340:	89a3      	ldrh	r3, [r4, #12]
 800c342:	bf15      	itete	ne
 800c344:	6560      	strne	r0, [r4, #84]	; 0x54
 800c346:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c34a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c34e:	81a3      	strheq	r3, [r4, #12]
 800c350:	bf18      	it	ne
 800c352:	81a3      	strhne	r3, [r4, #12]
 800c354:	bd10      	pop	{r4, pc}

0800c356 <__sclose>:
 800c356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c35a:	f000 b813 	b.w	800c384 <_close_r>
	...

0800c360 <_write_r>:
 800c360:	b538      	push	{r3, r4, r5, lr}
 800c362:	4d07      	ldr	r5, [pc, #28]	; (800c380 <_write_r+0x20>)
 800c364:	4604      	mov	r4, r0
 800c366:	4608      	mov	r0, r1
 800c368:	4611      	mov	r1, r2
 800c36a:	2200      	movs	r2, #0
 800c36c:	602a      	str	r2, [r5, #0]
 800c36e:	461a      	mov	r2, r3
 800c370:	f7f5 ff79 	bl	8002266 <_write>
 800c374:	1c43      	adds	r3, r0, #1
 800c376:	d102      	bne.n	800c37e <_write_r+0x1e>
 800c378:	682b      	ldr	r3, [r5, #0]
 800c37a:	b103      	cbz	r3, 800c37e <_write_r+0x1e>
 800c37c:	6023      	str	r3, [r4, #0]
 800c37e:	bd38      	pop	{r3, r4, r5, pc}
 800c380:	20000908 	.word	0x20000908

0800c384 <_close_r>:
 800c384:	b538      	push	{r3, r4, r5, lr}
 800c386:	4d06      	ldr	r5, [pc, #24]	; (800c3a0 <_close_r+0x1c>)
 800c388:	2300      	movs	r3, #0
 800c38a:	4604      	mov	r4, r0
 800c38c:	4608      	mov	r0, r1
 800c38e:	602b      	str	r3, [r5, #0]
 800c390:	f7f5 ff85 	bl	800229e <_close>
 800c394:	1c43      	adds	r3, r0, #1
 800c396:	d102      	bne.n	800c39e <_close_r+0x1a>
 800c398:	682b      	ldr	r3, [r5, #0]
 800c39a:	b103      	cbz	r3, 800c39e <_close_r+0x1a>
 800c39c:	6023      	str	r3, [r4, #0]
 800c39e:	bd38      	pop	{r3, r4, r5, pc}
 800c3a0:	20000908 	.word	0x20000908

0800c3a4 <_fstat_r>:
 800c3a4:	b538      	push	{r3, r4, r5, lr}
 800c3a6:	4d07      	ldr	r5, [pc, #28]	; (800c3c4 <_fstat_r+0x20>)
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	4604      	mov	r4, r0
 800c3ac:	4608      	mov	r0, r1
 800c3ae:	4611      	mov	r1, r2
 800c3b0:	602b      	str	r3, [r5, #0]
 800c3b2:	f7f5 ff80 	bl	80022b6 <_fstat>
 800c3b6:	1c43      	adds	r3, r0, #1
 800c3b8:	d102      	bne.n	800c3c0 <_fstat_r+0x1c>
 800c3ba:	682b      	ldr	r3, [r5, #0]
 800c3bc:	b103      	cbz	r3, 800c3c0 <_fstat_r+0x1c>
 800c3be:	6023      	str	r3, [r4, #0]
 800c3c0:	bd38      	pop	{r3, r4, r5, pc}
 800c3c2:	bf00      	nop
 800c3c4:	20000908 	.word	0x20000908

0800c3c8 <_isatty_r>:
 800c3c8:	b538      	push	{r3, r4, r5, lr}
 800c3ca:	4d06      	ldr	r5, [pc, #24]	; (800c3e4 <_isatty_r+0x1c>)
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	4608      	mov	r0, r1
 800c3d2:	602b      	str	r3, [r5, #0]
 800c3d4:	f7f5 ff7f 	bl	80022d6 <_isatty>
 800c3d8:	1c43      	adds	r3, r0, #1
 800c3da:	d102      	bne.n	800c3e2 <_isatty_r+0x1a>
 800c3dc:	682b      	ldr	r3, [r5, #0]
 800c3de:	b103      	cbz	r3, 800c3e2 <_isatty_r+0x1a>
 800c3e0:	6023      	str	r3, [r4, #0]
 800c3e2:	bd38      	pop	{r3, r4, r5, pc}
 800c3e4:	20000908 	.word	0x20000908

0800c3e8 <_lseek_r>:
 800c3e8:	b538      	push	{r3, r4, r5, lr}
 800c3ea:	4d07      	ldr	r5, [pc, #28]	; (800c408 <_lseek_r+0x20>)
 800c3ec:	4604      	mov	r4, r0
 800c3ee:	4608      	mov	r0, r1
 800c3f0:	4611      	mov	r1, r2
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	602a      	str	r2, [r5, #0]
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	f7f5 ff78 	bl	80022ec <_lseek>
 800c3fc:	1c43      	adds	r3, r0, #1
 800c3fe:	d102      	bne.n	800c406 <_lseek_r+0x1e>
 800c400:	682b      	ldr	r3, [r5, #0]
 800c402:	b103      	cbz	r3, 800c406 <_lseek_r+0x1e>
 800c404:	6023      	str	r3, [r4, #0]
 800c406:	bd38      	pop	{r3, r4, r5, pc}
 800c408:	20000908 	.word	0x20000908

0800c40c <_read_r>:
 800c40c:	b538      	push	{r3, r4, r5, lr}
 800c40e:	4d07      	ldr	r5, [pc, #28]	; (800c42c <_read_r+0x20>)
 800c410:	4604      	mov	r4, r0
 800c412:	4608      	mov	r0, r1
 800c414:	4611      	mov	r1, r2
 800c416:	2200      	movs	r2, #0
 800c418:	602a      	str	r2, [r5, #0]
 800c41a:	461a      	mov	r2, r3
 800c41c:	f7f5 ff06 	bl	800222c <_read>
 800c420:	1c43      	adds	r3, r0, #1
 800c422:	d102      	bne.n	800c42a <_read_r+0x1e>
 800c424:	682b      	ldr	r3, [r5, #0]
 800c426:	b103      	cbz	r3, 800c42a <_read_r+0x1e>
 800c428:	6023      	str	r3, [r4, #0]
 800c42a:	bd38      	pop	{r3, r4, r5, pc}
 800c42c:	20000908 	.word	0x20000908

0800c430 <_init>:
 800c430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c432:	bf00      	nop
 800c434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c436:	bc08      	pop	{r3}
 800c438:	469e      	mov	lr, r3
 800c43a:	4770      	bx	lr

0800c43c <_fini>:
 800c43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c43e:	bf00      	nop
 800c440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c442:	bc08      	pop	{r3}
 800c444:	469e      	mov	lr, r3
 800c446:	4770      	bx	lr
