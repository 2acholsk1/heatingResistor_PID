
HeatingResistor_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093a0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  080095a0  080095a0  000195a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800999c  0800999c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800999c  0800999c  0001999c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099a4  080099a4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099a4  080099a4  000199a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099a8  080099a8  000199a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080099ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f0  200001dc  08009b88  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008cc  08009b88  000208cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187b6  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d5a  00000000  00000000  000389c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  0003b720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001338  00000000  00000000  0003cb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ced  00000000  00000000  0003deb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018778  00000000  00000000  00067ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001012f5  00000000  00000000  0008031d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00181612  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000675c  00000000  00000000  00181664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	08009588 	.word	0x08009588

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	08009588 	.word	0x08009588

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295
 800030e:	f000 b9bf 	b.w	8000690 <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af04      	add	r7, sp, #16
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 80006a2:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <BMP280_Read8+0x38>)
 80006a4:	6818      	ldr	r0, [r3, #0]
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	230a      	movs	r3, #10
 80006ac:	9302      	str	r3, [sp, #8]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	f107 030f 	add.w	r3, r7, #15
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	2301      	movs	r3, #1
 80006ba:	21ec      	movs	r1, #236	; 0xec
 80006bc:	f002 f83a 	bl	8002734 <HAL_I2C_Mem_Read>
  return tmp;
 80006c0:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200001f8 	.word	0x200001f8

080006d0 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af04      	add	r7, sp, #16
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 80006da:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <BMP280_Read16+0x40>)
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	230a      	movs	r3, #10
 80006e4:	9302      	str	r3, [sp, #8]
 80006e6:	2302      	movs	r3, #2
 80006e8:	9301      	str	r3, [sp, #4]
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2301      	movs	r3, #1
 80006f2:	21ec      	movs	r1, #236	; 0xec
 80006f4:	f002 f81e 	bl	8002734 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 80006f8:	7b3b      	ldrb	r3, [r7, #12]
 80006fa:	021b      	lsls	r3, r3, #8
 80006fc:	b21a      	sxth	r2, r3
 80006fe:	7b7b      	ldrb	r3, [r7, #13]
 8000700:	b21b      	sxth	r3, r3
 8000702:	4313      	orrs	r3, r2
 8000704:	b21b      	sxth	r3, r3
 8000706:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200001f8 	.word	0x200001f8

08000714 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ffd5 	bl	80006d0 <BMP280_Read16>
 8000726:	4603      	mov	r3, r0
 8000728:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 800072a:	89fb      	ldrh	r3, [r7, #14]
 800072c:	0a1b      	lsrs	r3, r3, #8
 800072e:	b29b      	uxth	r3, r3
 8000730:	b21a      	sxth	r2, r3
 8000732:	89fb      	ldrh	r3, [r7, #14]
 8000734:	021b      	lsls	r3, r3, #8
 8000736:	b21b      	sxth	r3, r3
 8000738:	4313      	orrs	r3, r2
 800073a:	b21b      	sxth	r3, r3
 800073c:	b29b      	uxth	r3, r3
}
 800073e:	4618      	mov	r0, r3
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af04      	add	r7, sp, #16
 800074e:	4603      	mov	r3, r0
 8000750:	460a      	mov	r2, r1
 8000752:	71fb      	strb	r3, [r7, #7]
 8000754:	4613      	mov	r3, r2
 8000756:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <BMP280_Write8+0x34>)
 800075a:	6818      	ldr	r0, [r3, #0]
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	b29a      	uxth	r2, r3
 8000760:	230a      	movs	r3, #10
 8000762:	9302      	str	r3, [sp, #8]
 8000764:	2301      	movs	r3, #1
 8000766:	9301      	str	r3, [sp, #4]
 8000768:	1dbb      	adds	r3, r7, #6
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	2301      	movs	r3, #1
 800076e:	21ec      	movs	r1, #236	; 0xec
 8000770:	f001 fecc 	bl	800250c <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200001f8 	.word	0x200001f8

08000780 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af04      	add	r7, sp, #16
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 800078a:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <BMP280_Read24+0x40>)
 800078c:	6818      	ldr	r0, [r3, #0]
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	b29a      	uxth	r2, r3
 8000792:	230a      	movs	r3, #10
 8000794:	9302      	str	r3, [sp, #8]
 8000796:	2303      	movs	r3, #3
 8000798:	9301      	str	r3, [sp, #4]
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	2301      	movs	r3, #1
 80007a2:	21ec      	movs	r1, #236	; 0xec
 80007a4:	f001 ffc6 	bl	8002734 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 80007a8:	7b3b      	ldrb	r3, [r7, #12]
 80007aa:	041a      	lsls	r2, r3, #16
 80007ac:	7b7b      	ldrb	r3, [r7, #13]
 80007ae:	021b      	lsls	r3, r3, #8
 80007b0:	4313      	orrs	r3, r2
 80007b2:	7bba      	ldrb	r2, [r7, #14]
 80007b4:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200001f8 	.word	0x200001f8

080007c4 <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	4608      	mov	r0, r1
 80007ce:	4611      	mov	r1, r2
 80007d0:	461a      	mov	r2, r3
 80007d2:	4603      	mov	r3, r0
 80007d4:	70fb      	strb	r3, [r7, #3]
 80007d6:	460b      	mov	r3, r1
 80007d8:	70bb      	strb	r3, [r7, #2]
 80007da:	4613      	mov	r3, r2
 80007dc:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 80007de:	4a48      	ldr	r2, [pc, #288]	; (8000900 <BMP280_Init+0x13c>)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 80007e4:	787b      	ldrb	r3, [r7, #1]
 80007e6:	2b03      	cmp	r3, #3
 80007e8:	d901      	bls.n	80007ee <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 80007ea:	2303      	movs	r3, #3
 80007ec:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 80007ee:	4a45      	ldr	r2, [pc, #276]	; (8000904 <BMP280_Init+0x140>)
 80007f0:	787b      	ldrb	r3, [r7, #1]
 80007f2:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 80007f4:	787b      	ldrb	r3, [r7, #1]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d101      	bne.n	80007fe <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 80007fe:	78fb      	ldrb	r3, [r7, #3]
 8000800:	2b05      	cmp	r3, #5
 8000802:	d901      	bls.n	8000808 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 8000804:	2305      	movs	r3, #5
 8000806:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 8000808:	4a3f      	ldr	r2, [pc, #252]	; (8000908 <BMP280_Init+0x144>)
 800080a:	78fb      	ldrb	r3, [r7, #3]
 800080c:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 800080e:	78bb      	ldrb	r3, [r7, #2]
 8000810:	2b05      	cmp	r3, #5
 8000812:	d901      	bls.n	8000818 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 8000814:	2305      	movs	r3, #5
 8000816:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 8000818:	4a3c      	ldr	r2, [pc, #240]	; (800090c <BMP280_Init+0x148>)
 800081a:	78bb      	ldrb	r3, [r7, #2]
 800081c:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 800081e:	bf00      	nop
 8000820:	20d0      	movs	r0, #208	; 0xd0
 8000822:	f7ff ff37 	bl	8000694 <BMP280_Read8>
 8000826:	4603      	mov	r3, r0
 8000828:	2b58      	cmp	r3, #88	; 0x58
 800082a:	d1f9      	bne.n	8000820 <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 800082c:	2088      	movs	r0, #136	; 0x88
 800082e:	f7ff ff71 	bl	8000714 <BMP280_Read16LE>
 8000832:	4603      	mov	r3, r0
 8000834:	461a      	mov	r2, r3
 8000836:	4b36      	ldr	r3, [pc, #216]	; (8000910 <BMP280_Init+0x14c>)
 8000838:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 800083a:	208a      	movs	r0, #138	; 0x8a
 800083c:	f7ff ff6a 	bl	8000714 <BMP280_Read16LE>
 8000840:	4603      	mov	r3, r0
 8000842:	b21a      	sxth	r2, r3
 8000844:	4b33      	ldr	r3, [pc, #204]	; (8000914 <BMP280_Init+0x150>)
 8000846:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8000848:	208c      	movs	r0, #140	; 0x8c
 800084a:	f7ff ff63 	bl	8000714 <BMP280_Read16LE>
 800084e:	4603      	mov	r3, r0
 8000850:	b21a      	sxth	r2, r3
 8000852:	4b31      	ldr	r3, [pc, #196]	; (8000918 <BMP280_Init+0x154>)
 8000854:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 8000856:	208e      	movs	r0, #142	; 0x8e
 8000858:	f7ff ff5c 	bl	8000714 <BMP280_Read16LE>
 800085c:	4603      	mov	r3, r0
 800085e:	461a      	mov	r2, r3
 8000860:	4b2e      	ldr	r3, [pc, #184]	; (800091c <BMP280_Init+0x158>)
 8000862:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 8000864:	2090      	movs	r0, #144	; 0x90
 8000866:	f7ff ff55 	bl	8000714 <BMP280_Read16LE>
 800086a:	4603      	mov	r3, r0
 800086c:	b21a      	sxth	r2, r3
 800086e:	4b2c      	ldr	r3, [pc, #176]	; (8000920 <BMP280_Init+0x15c>)
 8000870:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 8000872:	2092      	movs	r0, #146	; 0x92
 8000874:	f7ff ff4e 	bl	8000714 <BMP280_Read16LE>
 8000878:	4603      	mov	r3, r0
 800087a:	b21a      	sxth	r2, r3
 800087c:	4b29      	ldr	r3, [pc, #164]	; (8000924 <BMP280_Init+0x160>)
 800087e:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 8000880:	2094      	movs	r0, #148	; 0x94
 8000882:	f7ff ff47 	bl	8000714 <BMP280_Read16LE>
 8000886:	4603      	mov	r3, r0
 8000888:	b21a      	sxth	r2, r3
 800088a:	4b27      	ldr	r3, [pc, #156]	; (8000928 <BMP280_Init+0x164>)
 800088c:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 800088e:	2096      	movs	r0, #150	; 0x96
 8000890:	f7ff ff40 	bl	8000714 <BMP280_Read16LE>
 8000894:	4603      	mov	r3, r0
 8000896:	b21a      	sxth	r2, r3
 8000898:	4b24      	ldr	r3, [pc, #144]	; (800092c <BMP280_Init+0x168>)
 800089a:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 800089c:	2098      	movs	r0, #152	; 0x98
 800089e:	f7ff ff39 	bl	8000714 <BMP280_Read16LE>
 80008a2:	4603      	mov	r3, r0
 80008a4:	b21a      	sxth	r2, r3
 80008a6:	4b22      	ldr	r3, [pc, #136]	; (8000930 <BMP280_Init+0x16c>)
 80008a8:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 80008aa:	209a      	movs	r0, #154	; 0x9a
 80008ac:	f7ff ff32 	bl	8000714 <BMP280_Read16LE>
 80008b0:	4603      	mov	r3, r0
 80008b2:	b21a      	sxth	r2, r3
 80008b4:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <BMP280_Init+0x170>)
 80008b6:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 80008b8:	209c      	movs	r0, #156	; 0x9c
 80008ba:	f7ff ff2b 	bl	8000714 <BMP280_Read16LE>
 80008be:	4603      	mov	r3, r0
 80008c0:	b21a      	sxth	r2, r3
 80008c2:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <BMP280_Init+0x174>)
 80008c4:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 80008c6:	209e      	movs	r0, #158	; 0x9e
 80008c8:	f7ff ff24 	bl	8000714 <BMP280_Read16LE>
 80008cc:	4603      	mov	r3, r0
 80008ce:	b21a      	sxth	r2, r3
 80008d0:	4b1a      	ldr	r3, [pc, #104]	; (800093c <BMP280_Init+0x178>)
 80008d2:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 80008d4:	78fb      	ldrb	r3, [r7, #3]
 80008d6:	015b      	lsls	r3, r3, #5
 80008d8:	b25a      	sxtb	r2, r3
 80008da:	78bb      	ldrb	r3, [r7, #2]
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	b25b      	sxtb	r3, r3
 80008e0:	4313      	orrs	r3, r2
 80008e2:	b25a      	sxtb	r2, r3
 80008e4:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	b25b      	sxtb	r3, r3
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	4619      	mov	r1, r3
 80008f0:	20f4      	movs	r0, #244	; 0xf4
 80008f2:	f7ff ff29 	bl	8000748 <BMP280_Write8>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200001f8 	.word	0x200001f8
 8000904:	200001fe 	.word	0x200001fe
 8000908:	200001fc 	.word	0x200001fc
 800090c:	200001fd 	.word	0x200001fd
 8000910:	20000214 	.word	0x20000214
 8000914:	20000200 	.word	0x20000200
 8000918:	20000202 	.word	0x20000202
 800091c:	20000216 	.word	0x20000216
 8000920:	20000204 	.word	0x20000204
 8000924:	20000206 	.word	0x20000206
 8000928:	20000208 	.word	0x20000208
 800092c:	2000020a 	.word	0x2000020a
 8000930:	2000020c 	.word	0x2000020c
 8000934:	2000020e 	.word	0x2000020e
 8000938:	20000210 	.word	0x20000210
 800093c:	20000212 	.word	0x20000212

08000940 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 8000946:	4b3d      	ldr	r3, [pc, #244]	; (8000a3c <BMP280_ReadTemperature+0xfc>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d16d      	bne.n	8000a2a <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 800094e:	20f4      	movs	r0, #244	; 0xf4
 8000950:	f7ff fea0 	bl	8000694 <BMP280_Read8>
 8000954:	4603      	mov	r3, r0
 8000956:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8000958:	7dfb      	ldrb	r3, [r7, #23]
 800095a:	f023 0303 	bic.w	r3, r3, #3
 800095e:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 8000960:	7dfb      	ldrb	r3, [r7, #23]
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8000968:	7dfb      	ldrb	r3, [r7, #23]
 800096a:	4619      	mov	r1, r3
 800096c:	20f4      	movs	r0, #244	; 0xf4
 800096e:	f7ff feeb 	bl	8000748 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 8000972:	20f4      	movs	r0, #244	; 0xf4
 8000974:	f7ff fe8e 	bl	8000694 <BMP280_Read8>
 8000978:	4603      	mov	r3, r0
 800097a:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 800097c:	7dbb      	ldrb	r3, [r7, #22]
 800097e:	f003 0303 	and.w	r3, r3, #3
 8000982:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8000984:	7dbb      	ldrb	r3, [r7, #22]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d14f      	bne.n	8000a2a <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 800098a:	20f4      	movs	r0, #244	; 0xf4
 800098c:	f7ff fe82 	bl	8000694 <BMP280_Read8>
 8000990:	4603      	mov	r3, r0
 8000992:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8000994:	7dbb      	ldrb	r3, [r7, #22]
 8000996:	f003 0303 	and.w	r3, r3, #3
 800099a:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 800099c:	7dbb      	ldrb	r3, [r7, #22]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d000      	beq.n	80009a4 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 80009a2:	e7f2      	b.n	800098a <BMP280_ReadTemperature+0x4a>
				  break;
 80009a4:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 80009a6:	20fa      	movs	r0, #250	; 0xfa
 80009a8:	f7ff feea 	bl	8000780 <BMP280_Read24>
 80009ac:	4603      	mov	r3, r0
 80009ae:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	111b      	asrs	r3, r3, #4
 80009b4:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	10da      	asrs	r2, r3, #3
 80009ba:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <BMP280_ReadTemperature+0x100>)
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 80009c2:	4a20      	ldr	r2, [pc, #128]	; (8000a44 <BMP280_ReadTemperature+0x104>)
 80009c4:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80009c8:	fb02 f303 	mul.w	r3, r2, r3
 80009cc:	12db      	asrs	r3, r3, #11
 80009ce:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	111b      	asrs	r3, r3, #4
 80009d4:	4a1a      	ldr	r2, [pc, #104]	; (8000a40 <BMP280_ReadTemperature+0x100>)
 80009d6:	8812      	ldrh	r2, [r2, #0]
 80009d8:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	1112      	asrs	r2, r2, #4
 80009de:	4918      	ldr	r1, [pc, #96]	; (8000a40 <BMP280_ReadTemperature+0x100>)
 80009e0:	8809      	ldrh	r1, [r1, #0]
 80009e2:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80009e4:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80009e8:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 80009ea:	4a17      	ldr	r2, [pc, #92]	; (8000a48 <BMP280_ReadTemperature+0x108>)
 80009ec:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80009f0:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80009f4:	139b      	asrs	r3, r3, #14
 80009f6:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 80009f8:	68fa      	ldr	r2, [r7, #12]
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	4413      	add	r3, r2
 80009fe:	4a13      	ldr	r2, [pc, #76]	; (8000a4c <BMP280_ReadTemperature+0x10c>)
 8000a00:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <BMP280_ReadTemperature+0x10c>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	4613      	mov	r3, r2
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	4413      	add	r3, r2
 8000a0c:	3380      	adds	r3, #128	; 0x80
 8000a0e:	121b      	asrs	r3, r3, #8
 8000a10:	ee07 3a90 	vmov	s15, r3
 8000a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a18:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 8000a1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a20:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000a50 <BMP280_ReadTemperature+0x110>
 8000a24:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000a28:	e001      	b.n	8000a2e <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 8000a2a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000a54 <BMP280_ReadTemperature+0x114>
}
 8000a2e:	eef0 7a47 	vmov.f32	s15, s14
 8000a32:	eeb0 0a67 	vmov.f32	s0, s15
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200001fe 	.word	0x200001fe
 8000a40:	20000214 	.word	0x20000214
 8000a44:	20000200 	.word	0x20000200
 8000a48:	20000202 	.word	0x20000202
 8000a4c:	20000218 	.word	0x20000218
 8000a50:	42c80000 	.word	0x42c80000
 8000a54:	c2c60000 	.word	0xc2c60000

08000a58 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 8000a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000a5c:	b0cc      	sub	sp, #304	; 0x130
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8000a64:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 8000a68:	f7ff ff6a 	bl	8000940 <BMP280_ReadTemperature>
 8000a6c:	eef0 7a40 	vmov.f32	s15, s0
 8000a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a74:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 8000a78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a7c:	edd3 7a00 	vldr	s15, [r3]
 8000a80:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8000d50 <BMP280_ReadTemperatureAndPressure+0x2f8>
 8000a84:	eef4 7a47 	vcmp.f32	s15, s14
 8000a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a8c:	d101      	bne.n	8000a92 <BMP280_ReadTemperatureAndPressure+0x3a>
		  return -1;
 8000a8e:	23ff      	movs	r3, #255	; 0xff
 8000a90:	e2bf      	b.n	8001012 <BMP280_ReadTemperatureAndPressure+0x5ba>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 8000a92:	20f7      	movs	r0, #247	; 0xf7
 8000a94:	f7ff fe74 	bl	8000780 <BMP280_Read24>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  adc_P >>= 4;
 8000a9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000aa2:	111b      	asrs	r3, r3, #4
 8000aa4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 8000aa8:	4baa      	ldr	r3, [pc, #680]	; (8000d54 <BMP280_ReadTemperatureAndPressure+0x2fc>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	17da      	asrs	r2, r3, #31
 8000aae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000ab2:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8000ab6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8000aba:	460b      	mov	r3, r1
 8000abc:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8000ac0:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	f143 33ff 	adc.w	r3, r3, #4294967295
 8000ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000aca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000ace:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 8000ad2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000ad6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ada:	fb03 f102 	mul.w	r1, r3, r2
 8000ade:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000ae2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ae6:	fb02 f303 	mul.w	r3, r2, r3
 8000aea:	18ca      	adds	r2, r1, r3
 8000aec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000af0:	fba3 4503 	umull	r4, r5, r3, r3
 8000af4:	1953      	adds	r3, r2, r5
 8000af6:	461d      	mov	r5, r3
 8000af8:	4b97      	ldr	r3, [pc, #604]	; (8000d58 <BMP280_ReadTemperatureAndPressure+0x300>)
 8000afa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000afe:	b21b      	sxth	r3, r3
 8000b00:	17da      	asrs	r2, r3, #31
 8000b02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000b06:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8000b0a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	fb03 f205 	mul.w	r2, r3, r5
 8000b14:	460b      	mov	r3, r1
 8000b16:	fb04 f303 	mul.w	r3, r4, r3
 8000b1a:	4413      	add	r3, r2
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	fba4 8902 	umull	r8, r9, r4, r2
 8000b22:	444b      	add	r3, r9
 8000b24:	4699      	mov	r9, r3
 8000b26:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
 8000b2a:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 8000b2e:	4b8b      	ldr	r3, [pc, #556]	; (8000d5c <BMP280_ReadTemperatureAndPressure+0x304>)
 8000b30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b34:	b21b      	sxth	r3, r3
 8000b36:	17da      	asrs	r2, r3, #31
 8000b38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000b3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000b40:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b44:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8000b48:	462a      	mov	r2, r5
 8000b4a:	fb02 f203 	mul.w	r2, r2, r3
 8000b4e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000b52:	4621      	mov	r1, r4
 8000b54:	fb01 f303 	mul.w	r3, r1, r3
 8000b58:	441a      	add	r2, r3
 8000b5a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b5e:	4621      	mov	r1, r4
 8000b60:	fba3 ab01 	umull	sl, fp, r3, r1
 8000b64:	eb02 030b 	add.w	r3, r2, fp
 8000b68:	469b      	mov	fp, r3
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	f04f 0100 	mov.w	r1, #0
 8000b72:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8000b76:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8000b7a:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8000b7e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000b82:	1814      	adds	r4, r2, r0
 8000b84:	643c      	str	r4, [r7, #64]	; 0x40
 8000b86:	414b      	adcs	r3, r1
 8000b88:	647b      	str	r3, [r7, #68]	; 0x44
 8000b8a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8000b8e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 8000b92:	4b73      	ldr	r3, [pc, #460]	; (8000d60 <BMP280_ReadTemperatureAndPressure+0x308>)
 8000b94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b98:	b21b      	sxth	r3, r3
 8000b9a:	17da      	asrs	r2, r3, #31
 8000b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000ba0:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	f04f 0100 	mov.w	r1, #0
 8000bac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000bb0:	00d9      	lsls	r1, r3, #3
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000bb8:	1814      	adds	r4, r2, r0
 8000bba:	63bc      	str	r4, [r7, #56]	; 0x38
 8000bbc:	414b      	adcs	r3, r1
 8000bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000bc0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8000bc4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8000bc8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000bcc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000bd0:	fb03 f102 	mul.w	r1, r3, r2
 8000bd4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000bd8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000bdc:	fb02 f303 	mul.w	r3, r2, r3
 8000be0:	18ca      	adds	r2, r1, r3
 8000be2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000be6:	fba3 1303 	umull	r1, r3, r3, r3
 8000bea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000bee:	460b      	mov	r3, r1
 8000bf0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000bf8:	18d3      	adds	r3, r2, r3
 8000bfa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000bfe:	4b59      	ldr	r3, [pc, #356]	; (8000d64 <BMP280_ReadTemperatureAndPressure+0x30c>)
 8000c00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c04:	b21b      	sxth	r3, r3
 8000c06:	17da      	asrs	r2, r3, #31
 8000c08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000c0c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8000c10:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8000c14:	462b      	mov	r3, r5
 8000c16:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8000c1a:	4642      	mov	r2, r8
 8000c1c:	fb02 f203 	mul.w	r2, r2, r3
 8000c20:	464b      	mov	r3, r9
 8000c22:	4621      	mov	r1, r4
 8000c24:	fb01 f303 	mul.w	r3, r1, r3
 8000c28:	4413      	add	r3, r2
 8000c2a:	4622      	mov	r2, r4
 8000c2c:	4641      	mov	r1, r8
 8000c2e:	fba2 1201 	umull	r1, r2, r2, r1
 8000c32:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8000c36:	460a      	mov	r2, r1
 8000c38:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8000c3c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8000c40:	4413      	add	r3, r2
 8000c42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000c46:	f04f 0000 	mov.w	r0, #0
 8000c4a:	f04f 0100 	mov.w	r1, #0
 8000c4e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8000c52:	4623      	mov	r3, r4
 8000c54:	0a18      	lsrs	r0, r3, #8
 8000c56:	462b      	mov	r3, r5
 8000c58:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000c5c:	462b      	mov	r3, r5
 8000c5e:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 8000c60:	4b41      	ldr	r3, [pc, #260]	; (8000d68 <BMP280_ReadTemperatureAndPressure+0x310>)
 8000c62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c66:	b21b      	sxth	r3, r3
 8000c68:	17da      	asrs	r2, r3, #31
 8000c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000c6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8000c72:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000c76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8000c7a:	464a      	mov	r2, r9
 8000c7c:	fb02 f203 	mul.w	r2, r2, r3
 8000c80:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000c84:	4644      	mov	r4, r8
 8000c86:	fb04 f303 	mul.w	r3, r4, r3
 8000c8a:	441a      	add	r2, r3
 8000c8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000c90:	4644      	mov	r4, r8
 8000c92:	fba3 4304 	umull	r4, r3, r3, r4
 8000c96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000c9a:	4623      	mov	r3, r4
 8000c9c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8000ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ca4:	18d3      	adds	r3, r2, r3
 8000ca6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000caa:	f04f 0200 	mov.w	r2, #0
 8000cae:	f04f 0300 	mov.w	r3, #0
 8000cb2:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8000cb6:	464c      	mov	r4, r9
 8000cb8:	0323      	lsls	r3, r4, #12
 8000cba:	4644      	mov	r4, r8
 8000cbc:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000cc0:	4644      	mov	r4, r8
 8000cc2:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8000cc4:	1884      	adds	r4, r0, r2
 8000cc6:	633c      	str	r4, [r7, #48]	; 0x30
 8000cc8:	eb41 0303 	adc.w	r3, r1, r3
 8000ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8000cce:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8000cd2:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8000cd6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000cda:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8000cde:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8000ce2:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8000ce6:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <BMP280_ReadTemperatureAndPressure+0x314>)
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	2200      	movs	r2, #0
 8000cee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000cf2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8000cf6:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8000cfa:	462b      	mov	r3, r5
 8000cfc:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8000d00:	4642      	mov	r2, r8
 8000d02:	fb02 f203 	mul.w	r2, r2, r3
 8000d06:	464b      	mov	r3, r9
 8000d08:	4621      	mov	r1, r4
 8000d0a:	fb01 f303 	mul.w	r3, r1, r3
 8000d0e:	4413      	add	r3, r2
 8000d10:	4622      	mov	r2, r4
 8000d12:	4641      	mov	r1, r8
 8000d14:	fba2 1201 	umull	r1, r2, r2, r1
 8000d18:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8000d1c:	460a      	mov	r2, r1
 8000d1e:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8000d22:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000d26:	4413      	add	r3, r2
 8000d28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000d2c:	f04f 0200 	mov.w	r2, #0
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8000d38:	4629      	mov	r1, r5
 8000d3a:	104a      	asrs	r2, r1, #1
 8000d3c:	4629      	mov	r1, r5
 8000d3e:	17cb      	asrs	r3, r1, #31
 8000d40:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	  if (var1 == 0) {
 8000d44:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	d111      	bne.n	8000d70 <BMP280_ReadTemperatureAndPressure+0x318>
	    return 0;  // avoid exception caused by division by zero
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	e160      	b.n	8001012 <BMP280_ReadTemperatureAndPressure+0x5ba>
 8000d50:	c2c60000 	.word	0xc2c60000
 8000d54:	20000218 	.word	0x20000218
 8000d58:	2000020c 	.word	0x2000020c
 8000d5c:	2000020a 	.word	0x2000020a
 8000d60:	20000208 	.word	0x20000208
 8000d64:	20000206 	.word	0x20000206
 8000d68:	20000204 	.word	0x20000204
 8000d6c:	20000216 	.word	0x20000216
	  }
	  p = 1048576 - adc_P;
 8000d70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000d74:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8000d78:	17da      	asrs	r2, r3, #31
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000d7e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000d82:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 8000d86:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000d8a:	105b      	asrs	r3, r3, #1
 8000d8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000d90:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000d94:	07db      	lsls	r3, r3, #31
 8000d96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000d9a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000d9e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8000da2:	4621      	mov	r1, r4
 8000da4:	1a89      	subs	r1, r1, r2
 8000da6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8000daa:	4629      	mov	r1, r5
 8000dac:	eb61 0303 	sbc.w	r3, r1, r3
 8000db0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000db4:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8000db8:	4622      	mov	r2, r4
 8000dba:	462b      	mov	r3, r5
 8000dbc:	1891      	adds	r1, r2, r2
 8000dbe:	6239      	str	r1, [r7, #32]
 8000dc0:	415b      	adcs	r3, r3
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8000dc4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000dc8:	4621      	mov	r1, r4
 8000dca:	1851      	adds	r1, r2, r1
 8000dcc:	61b9      	str	r1, [r7, #24]
 8000dce:	4629      	mov	r1, r5
 8000dd0:	414b      	adcs	r3, r1
 8000dd2:	61fb      	str	r3, [r7, #28]
 8000dd4:	f04f 0200 	mov.w	r2, #0
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000de0:	4649      	mov	r1, r9
 8000de2:	018b      	lsls	r3, r1, #6
 8000de4:	4641      	mov	r1, r8
 8000de6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000dea:	4641      	mov	r1, r8
 8000dec:	018a      	lsls	r2, r1, #6
 8000dee:	4641      	mov	r1, r8
 8000df0:	1889      	adds	r1, r1, r2
 8000df2:	6139      	str	r1, [r7, #16]
 8000df4:	4649      	mov	r1, r9
 8000df6:	eb43 0101 	adc.w	r1, r3, r1
 8000dfa:	6179      	str	r1, [r7, #20]
 8000dfc:	f04f 0200 	mov.w	r2, #0
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000e08:	4649      	mov	r1, r9
 8000e0a:	008b      	lsls	r3, r1, #2
 8000e0c:	4641      	mov	r1, r8
 8000e0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000e12:	4641      	mov	r1, r8
 8000e14:	008a      	lsls	r2, r1, #2
 8000e16:	4610      	mov	r0, r2
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4622      	mov	r2, r4
 8000e1e:	189b      	adds	r3, r3, r2
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	460b      	mov	r3, r1
 8000e24:	462a      	mov	r2, r5
 8000e26:	eb42 0303 	adc.w	r3, r2, r3
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	f04f 0200 	mov.w	r2, #0
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000e38:	4649      	mov	r1, r9
 8000e3a:	008b      	lsls	r3, r1, #2
 8000e3c:	4641      	mov	r1, r8
 8000e3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000e42:	4641      	mov	r1, r8
 8000e44:	008a      	lsls	r2, r1, #2
 8000e46:	4610      	mov	r0, r2
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	4622      	mov	r2, r4
 8000e4e:	189b      	adds	r3, r3, r2
 8000e50:	67bb      	str	r3, [r7, #120]	; 0x78
 8000e52:	462b      	mov	r3, r5
 8000e54:	460a      	mov	r2, r1
 8000e56:	eb42 0303 	adc.w	r3, r2, r3
 8000e5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000e5c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000e60:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8000e64:	f7ff fa44 	bl	80002f0 <__aeabi_ldivmod>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8000e70:	4b6b      	ldr	r3, [pc, #428]	; (8001020 <BMP280_ReadTemperatureAndPressure+0x5c8>)
 8000e72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e76:	b21b      	sxth	r3, r3
 8000e78:	17da      	asrs	r2, r3, #31
 8000e7a:	673b      	str	r3, [r7, #112]	; 0x70
 8000e7c:	677a      	str	r2, [r7, #116]	; 0x74
 8000e7e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8000e82:	f04f 0000 	mov.w	r0, #0
 8000e86:	f04f 0100 	mov.w	r1, #0
 8000e8a:	0b50      	lsrs	r0, r2, #13
 8000e8c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000e90:	1359      	asrs	r1, r3, #13
 8000e92:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8000e96:	462b      	mov	r3, r5
 8000e98:	fb00 f203 	mul.w	r2, r0, r3
 8000e9c:	4623      	mov	r3, r4
 8000e9e:	fb03 f301 	mul.w	r3, r3, r1
 8000ea2:	4413      	add	r3, r2
 8000ea4:	4622      	mov	r2, r4
 8000ea6:	fba2 1200 	umull	r1, r2, r2, r0
 8000eaa:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8000eae:	460a      	mov	r2, r1
 8000eb0:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8000eb4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000eb8:	4413      	add	r3, r2
 8000eba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000ebe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8000ec2:	f04f 0000 	mov.w	r0, #0
 8000ec6:	f04f 0100 	mov.w	r1, #0
 8000eca:	0b50      	lsrs	r0, r2, #13
 8000ecc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000ed0:	1359      	asrs	r1, r3, #13
 8000ed2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8000ed6:	462b      	mov	r3, r5
 8000ed8:	fb00 f203 	mul.w	r2, r0, r3
 8000edc:	4623      	mov	r3, r4
 8000ede:	fb03 f301 	mul.w	r3, r3, r1
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4622      	mov	r2, r4
 8000ee6:	fba2 1200 	umull	r1, r2, r2, r0
 8000eea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8000eee:	460a      	mov	r2, r1
 8000ef0:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8000ef4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000ef8:	4413      	add	r3, r2
 8000efa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	f04f 0300 	mov.w	r3, #0
 8000f06:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8000f0a:	4621      	mov	r1, r4
 8000f0c:	0e4a      	lsrs	r2, r1, #25
 8000f0e:	4629      	mov	r1, r5
 8000f10:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000f14:	4629      	mov	r1, r5
 8000f16:	164b      	asrs	r3, r1, #25
 8000f18:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 8000f1c:	4b41      	ldr	r3, [pc, #260]	; (8001024 <BMP280_ReadTemperatureAndPressure+0x5cc>)
 8000f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f22:	b21b      	sxth	r3, r3
 8000f24:	17da      	asrs	r2, r3, #31
 8000f26:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f28:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000f2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000f2e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8000f32:	462a      	mov	r2, r5
 8000f34:	fb02 f203 	mul.w	r2, r2, r3
 8000f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000f3c:	4621      	mov	r1, r4
 8000f3e:	fb01 f303 	mul.w	r3, r1, r3
 8000f42:	4413      	add	r3, r2
 8000f44:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000f48:	4621      	mov	r1, r4
 8000f4a:	fba2 1201 	umull	r1, r2, r2, r1
 8000f4e:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000f52:	460a      	mov	r2, r1
 8000f54:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8000f58:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000f5c:	4413      	add	r3, r2
 8000f5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	f04f 0300 	mov.w	r3, #0
 8000f6a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8000f6e:	4621      	mov	r1, r4
 8000f70:	0cca      	lsrs	r2, r1, #19
 8000f72:	4629      	mov	r1, r5
 8000f74:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000f78:	4629      	mov	r1, r5
 8000f7a:	14cb      	asrs	r3, r1, #19
 8000f7c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8000f80:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8000f84:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000f88:	1884      	adds	r4, r0, r2
 8000f8a:	663c      	str	r4, [r7, #96]	; 0x60
 8000f8c:	eb41 0303 	adc.w	r3, r1, r3
 8000f90:	667b      	str	r3, [r7, #100]	; 0x64
 8000f92:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000f96:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8000f9a:	4621      	mov	r1, r4
 8000f9c:	1889      	adds	r1, r1, r2
 8000f9e:	65b9      	str	r1, [r7, #88]	; 0x58
 8000fa0:	4629      	mov	r1, r5
 8000fa2:	eb43 0101 	adc.w	r1, r3, r1
 8000fa6:	65f9      	str	r1, [r7, #92]	; 0x5c
 8000fa8:	f04f 0000 	mov.w	r0, #0
 8000fac:	f04f 0100 	mov.w	r1, #0
 8000fb0:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8000fb4:	4623      	mov	r3, r4
 8000fb6:	0a18      	lsrs	r0, r3, #8
 8000fb8:	462b      	mov	r3, r5
 8000fba:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000fbe:	462b      	mov	r3, r5
 8000fc0:	1219      	asrs	r1, r3, #8
 8000fc2:	4b19      	ldr	r3, [pc, #100]	; (8001028 <BMP280_ReadTemperatureAndPressure+0x5d0>)
 8000fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	17da      	asrs	r2, r3, #31
 8000fcc:	653b      	str	r3, [r7, #80]	; 0x50
 8000fce:	657a      	str	r2, [r7, #84]	; 0x54
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	f04f 0300 	mov.w	r3, #0
 8000fd8:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8000fdc:	464c      	mov	r4, r9
 8000fde:	0123      	lsls	r3, r4, #4
 8000fe0:	4644      	mov	r4, r8
 8000fe2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000fe6:	4644      	mov	r4, r8
 8000fe8:	0122      	lsls	r2, r4, #4
 8000fea:	1884      	adds	r4, r0, r2
 8000fec:	603c      	str	r4, [r7, #0]
 8000fee:	eb41 0303 	adc.w	r3, r1, r3
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000ff8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  *pressure = (int32_t)p/256;
 8000ffc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001000:	2b00      	cmp	r3, #0
 8001002:	da00      	bge.n	8001006 <BMP280_ReadTemperatureAndPressure+0x5ae>
 8001004:	33ff      	adds	r3, #255	; 0xff
 8001006:	121b      	asrs	r3, r3, #8
 8001008:	461a      	mov	r2, r3
 800100a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800100e:	601a      	str	r2, [r3, #0]

	  return 0;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001018:	46bd      	mov	sp, r7
 800101a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800101e:	bf00      	nop
 8001020:	20000212 	.word	0x20000212
 8001024:	20000210 	.word	0x20000210
 8001028:	2000020e 	.word	0x2000020e

0800102c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001030:	f000 fe69 	bl	8001d06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001034:	f000 f826 	bl	8001084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001038:	f000 fa28 	bl	800148c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800103c:	f000 f9c8 	bl	80013d0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001040:	f000 f9f6 	bl	8001430 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001044:	f000 f888 	bl	8001158 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001048:	f000 f974 	bl	8001334 <MX_TIM3_Init>
  MX_TIM1_Init();
 800104c:	f000 f8c4 	bl	80011d8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8001050:	2301      	movs	r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	2101      	movs	r1, #1
 8001056:	4808      	ldr	r0, [pc, #32]	; (8001078 <main+0x4c>)
 8001058:	f7ff fbb4 	bl	80007c4 <BMP280_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 800105c:	4807      	ldr	r0, [pc, #28]	; (800107c <main+0x50>)
 800105e:	f003 fa61 	bl	8004524 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001062:	2100      	movs	r1, #0
 8001064:	4806      	ldr	r0, [pc, #24]	; (8001080 <main+0x54>)
 8001066:	f003 fb37 	bl	80046d8 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, max_pulse);
 800106a:	4b05      	ldr	r3, [pc, #20]	; (8001080 <main+0x54>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001072:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001074:	e7fe      	b.n	8001074 <main+0x48>
 8001076:	bf00      	nop
 8001078:	2000021c 	.word	0x2000021c
 800107c:	200002bc 	.word	0x200002bc
 8001080:	20000270 	.word	0x20000270

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b094      	sub	sp, #80	; 0x50
 8001088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	2234      	movs	r2, #52	; 0x34
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f005 fc32 	bl	80068fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001098:	f107 0308 	add.w	r3, r7, #8
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010a8:	f002 f8d8 	bl	800325c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ac:	4b28      	ldr	r3, [pc, #160]	; (8001150 <SystemClock_Config+0xcc>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	4a27      	ldr	r2, [pc, #156]	; (8001150 <SystemClock_Config+0xcc>)
 80010b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b6:	6413      	str	r3, [r2, #64]	; 0x40
 80010b8:	4b25      	ldr	r3, [pc, #148]	; (8001150 <SystemClock_Config+0xcc>)
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010c4:	4b23      	ldr	r3, [pc, #140]	; (8001154 <SystemClock_Config+0xd0>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010cc:	4a21      	ldr	r2, [pc, #132]	; (8001154 <SystemClock_Config+0xd0>)
 80010ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <SystemClock_Config+0xd0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010dc:	603b      	str	r3, [r7, #0]
 80010de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010e0:	2301      	movs	r3, #1
 80010e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ea:	2302      	movs	r3, #2
 80010ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010f4:	2304      	movs	r3, #4
 80010f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 80010f8:	2390      	movs	r3, #144	; 0x90
 80010fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001100:	2306      	movs	r3, #6
 8001102:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001104:	2302      	movs	r3, #2
 8001106:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4618      	mov	r0, r3
 800110e:	f002 f8b5 	bl	800327c <HAL_RCC_OscConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001118:	f000 faea 	bl	80016f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111c:	230f      	movs	r3, #15
 800111e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001120:	2302      	movs	r3, #2
 8001122:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800112c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	2102      	movs	r1, #2
 8001138:	4618      	mov	r0, r3
 800113a:	f002 fb4d 	bl	80037d8 <HAL_RCC_ClockConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001144:	f000 fad4 	bl	80016f0 <Error_Handler>
  }
}
 8001148:	bf00      	nop
 800114a:	3750      	adds	r7, #80	; 0x50
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40023800 	.word	0x40023800
 8001154:	40007000 	.word	0x40007000

08001158 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <MX_I2C1_Init+0x74>)
 800115e:	4a1c      	ldr	r2, [pc, #112]	; (80011d0 <MX_I2C1_Init+0x78>)
 8001160:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8001162:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <MX_I2C1_Init+0x74>)
 8001164:	4a1b      	ldr	r2, [pc, #108]	; (80011d4 <MX_I2C1_Init+0x7c>)
 8001166:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <MX_I2C1_Init+0x74>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800116e:	4b17      	ldr	r3, [pc, #92]	; (80011cc <MX_I2C1_Init+0x74>)
 8001170:	2201      	movs	r2, #1
 8001172:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001174:	4b15      	ldr	r3, [pc, #84]	; (80011cc <MX_I2C1_Init+0x74>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800117a:	4b14      	ldr	r3, [pc, #80]	; (80011cc <MX_I2C1_Init+0x74>)
 800117c:	2200      	movs	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <MX_I2C1_Init+0x74>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <MX_I2C1_Init+0x74>)
 8001188:	2200      	movs	r2, #0
 800118a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <MX_I2C1_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001192:	480e      	ldr	r0, [pc, #56]	; (80011cc <MX_I2C1_Init+0x74>)
 8001194:	f001 f92a 	bl	80023ec <HAL_I2C_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800119e:	f000 faa7 	bl	80016f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011a2:	2100      	movs	r1, #0
 80011a4:	4809      	ldr	r0, [pc, #36]	; (80011cc <MX_I2C1_Init+0x74>)
 80011a6:	f001 fe79 	bl	8002e9c <HAL_I2CEx_ConfigAnalogFilter>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011b0:	f000 fa9e 	bl	80016f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011b4:	2100      	movs	r1, #0
 80011b6:	4805      	ldr	r0, [pc, #20]	; (80011cc <MX_I2C1_Init+0x74>)
 80011b8:	f001 febb 	bl	8002f32 <HAL_I2CEx_ConfigDigitalFilter>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011c2:	f000 fa95 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	2000021c 	.word	0x2000021c
 80011d0:	40005400 	.word	0x40005400
 80011d4:	00808cd2 	.word	0x00808cd2

080011d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b09a      	sub	sp, #104	; 0x68
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
 8001208:	615a      	str	r2, [r3, #20]
 800120a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	222c      	movs	r2, #44	; 0x2c
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f005 fb72 	bl	80068fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001218:	4b44      	ldr	r3, [pc, #272]	; (800132c <MX_TIM1_Init+0x154>)
 800121a:	4a45      	ldr	r2, [pc, #276]	; (8001330 <MX_TIM1_Init+0x158>)
 800121c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800121e:	4b43      	ldr	r3, [pc, #268]	; (800132c <MX_TIM1_Init+0x154>)
 8001220:	2247      	movs	r2, #71	; 0x47
 8001222:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001224:	4b41      	ldr	r3, [pc, #260]	; (800132c <MX_TIM1_Init+0x154>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800122a:	4b40      	ldr	r3, [pc, #256]	; (800132c <MX_TIM1_Init+0x154>)
 800122c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001230:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001232:	4b3e      	ldr	r3, [pc, #248]	; (800132c <MX_TIM1_Init+0x154>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001238:	4b3c      	ldr	r3, [pc, #240]	; (800132c <MX_TIM1_Init+0x154>)
 800123a:	2200      	movs	r2, #0
 800123c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123e:	4b3b      	ldr	r3, [pc, #236]	; (800132c <MX_TIM1_Init+0x154>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001244:	4839      	ldr	r0, [pc, #228]	; (800132c <MX_TIM1_Init+0x154>)
 8001246:	f003 f915 	bl	8004474 <HAL_TIM_Base_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001250:	f000 fa4e 	bl	80016f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001258:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800125a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800125e:	4619      	mov	r1, r3
 8001260:	4832      	ldr	r0, [pc, #200]	; (800132c <MX_TIM1_Init+0x154>)
 8001262:	f003 fd67 	bl	8004d34 <HAL_TIM_ConfigClockSource>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800126c:	f000 fa40 	bl	80016f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001270:	482e      	ldr	r0, [pc, #184]	; (800132c <MX_TIM1_Init+0x154>)
 8001272:	f003 f9cf 	bl	8004614 <HAL_TIM_PWM_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800127c:	f000 fa38 	bl	80016f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001280:	2320      	movs	r3, #32
 8001282:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001284:	2300      	movs	r3, #0
 8001286:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800128c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001290:	4619      	mov	r1, r3
 8001292:	4826      	ldr	r0, [pc, #152]	; (800132c <MX_TIM1_Init+0x154>)
 8001294:	f004 f9fe 	bl	8005694 <HAL_TIMEx_MasterConfigSynchronization>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800129e:	f000 fa27 	bl	80016f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a2:	2360      	movs	r3, #96	; 0x60
 80012a4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 80012a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012aa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ac:	2300      	movs	r3, #0
 80012ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012b0:	2300      	movs	r3, #0
 80012b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012b8:	2300      	movs	r3, #0
 80012ba:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012bc:	2300      	movs	r3, #0
 80012be:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012c4:	2200      	movs	r2, #0
 80012c6:	4619      	mov	r1, r3
 80012c8:	4818      	ldr	r0, [pc, #96]	; (800132c <MX_TIM1_Init+0x154>)
 80012ca:	f003 fc1f 	bl	8004b0c <HAL_TIM_PWM_ConfigChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80012d4:	f000 fa0c 	bl	80016f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	4619      	mov	r1, r3
 800130c:	4807      	ldr	r0, [pc, #28]	; (800132c <MX_TIM1_Init+0x154>)
 800130e:	f004 fa4f 	bl	80057b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001318:	f000 f9ea 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800131c:	4803      	ldr	r0, [pc, #12]	; (800132c <MX_TIM1_Init+0x154>)
 800131e:	f000 faab 	bl	8001878 <HAL_TIM_MspPostInit>

}
 8001322:	bf00      	nop
 8001324:	3768      	adds	r7, #104	; 0x68
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000270 	.word	0x20000270
 8001330:	40010000 	.word	0x40010000

08001334 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133a:	f107 0310 	add.w	r3, r7, #16
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <MX_TIM3_Init+0x94>)
 8001354:	4a1d      	ldr	r2, [pc, #116]	; (80013cc <MX_TIM3_Init+0x98>)
 8001356:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <MX_TIM3_Init+0x94>)
 800135a:	2264      	movs	r2, #100	; 0x64
 800135c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135e:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <MX_TIM3_Init+0x94>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <MX_TIM3_Init+0x94>)
 8001366:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 800136a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <MX_TIM3_Init+0x94>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <MX_TIM3_Init+0x94>)
 8001374:	2280      	movs	r2, #128	; 0x80
 8001376:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001378:	4813      	ldr	r0, [pc, #76]	; (80013c8 <MX_TIM3_Init+0x94>)
 800137a:	f003 f87b 	bl	8004474 <HAL_TIM_Base_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001384:	f000 f9b4 	bl	80016f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800138e:	f107 0310 	add.w	r3, r7, #16
 8001392:	4619      	mov	r1, r3
 8001394:	480c      	ldr	r0, [pc, #48]	; (80013c8 <MX_TIM3_Init+0x94>)
 8001396:	f003 fccd 	bl	8004d34 <HAL_TIM_ConfigClockSource>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80013a0:	f000 f9a6 	bl	80016f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013a4:	2320      	movs	r3, #32
 80013a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_TIM3_Init+0x94>)
 80013b2:	f004 f96f 	bl	8005694 <HAL_TIMEx_MasterConfigSynchronization>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80013bc:	f000 f998 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	3720      	adds	r7, #32
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	200002bc 	.word	0x200002bc
 80013cc:	40000400 	.word	0x40000400

080013d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <MX_USART3_UART_Init+0x58>)
 80013d6:	4a15      	ldr	r2, [pc, #84]	; (800142c <MX_USART3_UART_Init+0x5c>)
 80013d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <MX_USART3_UART_Init+0x58>)
 80013dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_USART3_UART_Init+0x58>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <MX_USART3_UART_Init+0x58>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <MX_USART3_UART_Init+0x58>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <MX_USART3_UART_Init+0x58>)
 80013f6:	220c      	movs	r2, #12
 80013f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <MX_USART3_UART_Init+0x58>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <MX_USART3_UART_Init+0x58>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <MX_USART3_UART_Init+0x58>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <MX_USART3_UART_Init+0x58>)
 800140e:	2200      	movs	r2, #0
 8001410:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <MX_USART3_UART_Init+0x58>)
 8001414:	f004 fa68 	bl	80058e8 <HAL_UART_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800141e:	f000 f967 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000308 	.word	0x20000308
 800142c:	40004800 	.word	0x40004800

08001430 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001434:	4b14      	ldr	r3, [pc, #80]	; (8001488 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001436:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800143a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800143e:	2206      	movs	r2, #6
 8001440:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001444:	2202      	movs	r2, #2
 8001446:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800144a:	2200      	movs	r2, #0
 800144c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001450:	2202      	movs	r2, #2
 8001452:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001456:	2201      	movs	r2, #1
 8001458:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001468:	2201      	movs	r2, #1
 800146a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800146e:	2200      	movs	r2, #0
 8001470:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001474:	f001 fda9 	bl	8002fca <HAL_PCD_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800147e:	f000 f937 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000390 	.word	0x20000390

0800148c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08c      	sub	sp, #48	; 0x30
 8001490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001492:	f107 031c 	add.w	r3, r7, #28
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a2:	4b6e      	ldr	r3, [pc, #440]	; (800165c <MX_GPIO_Init+0x1d0>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a6d      	ldr	r2, [pc, #436]	; (800165c <MX_GPIO_Init+0x1d0>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b6b      	ldr	r3, [pc, #428]	; (800165c <MX_GPIO_Init+0x1d0>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	61bb      	str	r3, [r7, #24]
 80014b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ba:	4b68      	ldr	r3, [pc, #416]	; (800165c <MX_GPIO_Init+0x1d0>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a67      	ldr	r2, [pc, #412]	; (800165c <MX_GPIO_Init+0x1d0>)
 80014c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b65      	ldr	r3, [pc, #404]	; (800165c <MX_GPIO_Init+0x1d0>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	4b62      	ldr	r3, [pc, #392]	; (800165c <MX_GPIO_Init+0x1d0>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a61      	ldr	r2, [pc, #388]	; (800165c <MX_GPIO_Init+0x1d0>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b5f      	ldr	r3, [pc, #380]	; (800165c <MX_GPIO_Init+0x1d0>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	4b5c      	ldr	r3, [pc, #368]	; (800165c <MX_GPIO_Init+0x1d0>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a5b      	ldr	r2, [pc, #364]	; (800165c <MX_GPIO_Init+0x1d0>)
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b59      	ldr	r3, [pc, #356]	; (800165c <MX_GPIO_Init+0x1d0>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001502:	4b56      	ldr	r3, [pc, #344]	; (800165c <MX_GPIO_Init+0x1d0>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a55      	ldr	r2, [pc, #340]	; (800165c <MX_GPIO_Init+0x1d0>)
 8001508:	f043 0310 	orr.w	r3, r3, #16
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b53      	ldr	r3, [pc, #332]	; (800165c <MX_GPIO_Init+0x1d0>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800151a:	4b50      	ldr	r3, [pc, #320]	; (800165c <MX_GPIO_Init+0x1d0>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a4f      	ldr	r2, [pc, #316]	; (800165c <MX_GPIO_Init+0x1d0>)
 8001520:	f043 0308 	orr.w	r3, r3, #8
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b4d      	ldr	r3, [pc, #308]	; (800165c <MX_GPIO_Init+0x1d0>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001532:	4b4a      	ldr	r3, [pc, #296]	; (800165c <MX_GPIO_Init+0x1d0>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a49      	ldr	r2, [pc, #292]	; (800165c <MX_GPIO_Init+0x1d0>)
 8001538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b47      	ldr	r3, [pc, #284]	; (800165c <MX_GPIO_Init+0x1d0>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LD3_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001550:	4843      	ldr	r0, [pc, #268]	; (8001660 <MX_GPIO_Init+0x1d4>)
 8001552:	f000 ff17 	bl	8002384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	2140      	movs	r1, #64	; 0x40
 800155a:	4842      	ldr	r0, [pc, #264]	; (8001664 <MX_GPIO_Init+0x1d8>)
 800155c:	f000 ff12 	bl	8002384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001560:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001566:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800156a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001570:	f107 031c 	add.w	r3, r7, #28
 8001574:	4619      	mov	r1, r3
 8001576:	483c      	ldr	r0, [pc, #240]	; (8001668 <MX_GPIO_Init+0x1dc>)
 8001578:	f000 fd58 	bl	800202c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800157c:	2332      	movs	r3, #50	; 0x32
 800157e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001588:	2303      	movs	r3, #3
 800158a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800158c:	230b      	movs	r3, #11
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001590:	f107 031c 	add.w	r3, r7, #28
 8001594:	4619      	mov	r1, r3
 8001596:	4834      	ldr	r0, [pc, #208]	; (8001668 <MX_GPIO_Init+0x1dc>)
 8001598:	f000 fd48 	bl	800202c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800159c:	2386      	movs	r3, #134	; 0x86
 800159e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a8:	2303      	movs	r3, #3
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015ac:	230b      	movs	r3, #11
 80015ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	4619      	mov	r1, r3
 80015b6:	482d      	ldr	r0, [pc, #180]	; (800166c <MX_GPIO_Init+0x1e0>)
 80015b8:	f000 fd38 	bl	800202c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LD3_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LD3_Pin|LED_BLUE_Pin;
 80015bc:	f244 0381 	movw	r3, #16513	; 0x4081
 80015c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c2:	2301      	movs	r3, #1
 80015c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ce:	f107 031c 	add.w	r3, r7, #28
 80015d2:	4619      	mov	r1, r3
 80015d4:	4822      	ldr	r0, [pc, #136]	; (8001660 <MX_GPIO_Init+0x1d4>)
 80015d6:	f000 fd29 	bl	800202c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80015da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e8:	2303      	movs	r3, #3
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015ec:	230b      	movs	r3, #11
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	4619      	mov	r1, r3
 80015f6:	481a      	ldr	r0, [pc, #104]	; (8001660 <MX_GPIO_Init+0x1d4>)
 80015f8:	f000 fd18 	bl	800202c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80015fc:	2340      	movs	r3, #64	; 0x40
 80015fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001600:	2301      	movs	r3, #1
 8001602:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	4619      	mov	r1, r3
 8001612:	4814      	ldr	r0, [pc, #80]	; (8001664 <MX_GPIO_Init+0x1d8>)
 8001614:	f000 fd0a 	bl	800202c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161c:	2300      	movs	r3, #0
 800161e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	4619      	mov	r1, r3
 800162a:	480e      	ldr	r0, [pc, #56]	; (8001664 <MX_GPIO_Init+0x1d8>)
 800162c:	f000 fcfe 	bl	800202c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001630:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001642:	230b      	movs	r3, #11
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001646:	f107 031c 	add.w	r3, r7, #28
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_GPIO_Init+0x1d8>)
 800164e:	f000 fced 	bl	800202c <HAL_GPIO_Init>

}
 8001652:	bf00      	nop
 8001654:	3730      	adds	r7, #48	; 0x30
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800
 8001660:	40020400 	.word	0x40020400
 8001664:	40021800 	.word	0x40021800
 8001668:	40020800 	.word	0x40020800
 800166c:	40020000 	.word	0x40020000

08001670 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]

	BMP280_ReadTemperatureAndPressure(&temperature_f, &pressure);
 8001678:	4916      	ldr	r1, [pc, #88]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800167a:	4817      	ldr	r0, [pc, #92]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800167c:	f7ff f9ec 	bl	8000a58 <BMP280_ReadTemperatureAndPressure>
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001680:	2101      	movs	r1, #1
 8001682:	4816      	ldr	r0, [pc, #88]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001684:	f000 fe97 	bl	80023b6 <HAL_GPIO_TogglePin>
	counter++;
 8001688:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	3301      	adds	r3, #1
 800168e:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001690:	6013      	str	r3, [r2, #0]
	if (counter > 100)
 8001692:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2b64      	cmp	r3, #100	; 0x64
 8001698:	dd18      	ble.n	80016cc <HAL_TIM_PeriodElapsedCallback+0x5c>
	{
		sprintf(currentTemperature_ch, "%f \n\r", temperature_f);
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800169c:	edd3 7a00 	vldr	s15, [r3]
 80016a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016a4:	ec53 2b17 	vmov	r2, r3, d7
 80016a8:	490e      	ldr	r1, [pc, #56]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80016aa:	480f      	ldr	r0, [pc, #60]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80016ac:	f005 fd72 	bl	8007194 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t *)currentTemperature_ch, sizeof(currentTemperature_ch)-1, 1000);
 80016b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b4:	220c      	movs	r2, #12
 80016b6:	490c      	ldr	r1, [pc, #48]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80016b8:	480c      	ldr	r0, [pc, #48]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80016ba:	f004 f963 	bl	8005984 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80016be:	2180      	movs	r1, #128	; 0x80
 80016c0:	4806      	ldr	r0, [pc, #24]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80016c2:	f000 fe78 	bl	80023b6 <HAL_GPIO_TogglePin>
		counter = 0;
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
	}

}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200008ac 	.word	0x200008ac
 80016d8:	20000898 	.word	0x20000898
 80016dc:	40020400 	.word	0x40020400
 80016e0:	200008b0 	.word	0x200008b0
 80016e4:	080095a0 	.word	0x080095a0
 80016e8:	2000089c 	.word	0x2000089c
 80016ec:	20000308 	.word	0x20000308

080016f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f4:	b672      	cpsid	i
}
 80016f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <Error_Handler+0x8>
	...

080016fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_MspInit+0x44>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <HAL_MspInit+0x44>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170c:	6413      	str	r3, [r2, #64]	; 0x40
 800170e:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <HAL_MspInit+0x44>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_MspInit+0x44>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	4a08      	ldr	r2, [pc, #32]	; (8001740 <HAL_MspInit+0x44>)
 8001720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001724:	6453      	str	r3, [r2, #68]	; 0x44
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_MspInit+0x44>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800

08001744 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b0ae      	sub	sp, #184	; 0xb8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	2290      	movs	r2, #144	; 0x90
 8001762:	2100      	movs	r1, #0
 8001764:	4618      	mov	r0, r3
 8001766:	f005 f8c9 	bl	80068fc <memset>
  if(hi2c->Instance==I2C1)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a22      	ldr	r2, [pc, #136]	; (80017f8 <HAL_I2C_MspInit+0xb4>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d13c      	bne.n	80017ee <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001774:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001778:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800177a:	2300      	movs	r3, #0
 800177c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	4618      	mov	r0, r3
 8001784:	f002 fa4e 	bl	8003c24 <HAL_RCCEx_PeriphCLKConfig>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800178e:	f7ff ffaf 	bl	80016f0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001792:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <HAL_I2C_MspInit+0xb8>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a19      	ldr	r2, [pc, #100]	; (80017fc <HAL_I2C_MspInit+0xb8>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b17      	ldr	r3, [pc, #92]	; (80017fc <HAL_I2C_MspInit+0xb8>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80017aa:	f44f 7310 	mov.w	r3, #576	; 0x240
 80017ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017b2:	2312      	movs	r3, #18
 80017b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017be:	2303      	movs	r3, #3
 80017c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017c4:	2304      	movs	r3, #4
 80017c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017ce:	4619      	mov	r1, r3
 80017d0:	480b      	ldr	r0, [pc, #44]	; (8001800 <HAL_I2C_MspInit+0xbc>)
 80017d2:	f000 fc2b 	bl	800202c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <HAL_I2C_MspInit+0xb8>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	4a08      	ldr	r2, [pc, #32]	; (80017fc <HAL_I2C_MspInit+0xb8>)
 80017dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017e0:	6413      	str	r3, [r2, #64]	; 0x40
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_I2C_MspInit+0xb8>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017ee:	bf00      	nop
 80017f0:	37b8      	adds	r7, #184	; 0xb8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40005400 	.word	0x40005400
 80017fc:	40023800 	.word	0x40023800
 8001800:	40020400 	.word	0x40020400

08001804 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a16      	ldr	r2, [pc, #88]	; (800186c <HAL_TIM_Base_MspInit+0x68>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d10c      	bne.n	8001830 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001816:	4b16      	ldr	r3, [pc, #88]	; (8001870 <HAL_TIM_Base_MspInit+0x6c>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	4a15      	ldr	r2, [pc, #84]	; (8001870 <HAL_TIM_Base_MspInit+0x6c>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6453      	str	r3, [r2, #68]	; 0x44
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <HAL_TIM_Base_MspInit+0x6c>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800182e:	e018      	b.n	8001862 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0f      	ldr	r2, [pc, #60]	; (8001874 <HAL_TIM_Base_MspInit+0x70>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d113      	bne.n	8001862 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800183a:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <HAL_TIM_Base_MspInit+0x6c>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	4a0c      	ldr	r2, [pc, #48]	; (8001870 <HAL_TIM_Base_MspInit+0x6c>)
 8001840:	f043 0302 	orr.w	r3, r3, #2
 8001844:	6413      	str	r3, [r2, #64]	; 0x40
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_TIM_Base_MspInit+0x6c>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2100      	movs	r1, #0
 8001856:	201d      	movs	r0, #29
 8001858:	f000 fbb1 	bl	8001fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800185c:	201d      	movs	r0, #29
 800185e:	f000 fbca 	bl	8001ff6 <HAL_NVIC_EnableIRQ>
}
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40010000 	.word	0x40010000
 8001870:	40023800 	.word	0x40023800
 8001874:	40000400 	.word	0x40000400

08001878 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 030c 	add.w	r3, r7, #12
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a11      	ldr	r2, [pc, #68]	; (80018dc <HAL_TIM_MspPostInit+0x64>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d11c      	bne.n	80018d4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <HAL_TIM_MspPostInit+0x68>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a10      	ldr	r2, [pc, #64]	; (80018e0 <HAL_TIM_MspPostInit+0x68>)
 80018a0:	f043 0310 	orr.w	r3, r3, #16
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <HAL_TIM_MspPostInit+0x68>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0310 	and.w	r3, r3, #16
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018c4:	2301      	movs	r3, #1
 80018c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018c8:	f107 030c 	add.w	r3, r7, #12
 80018cc:	4619      	mov	r1, r3
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <HAL_TIM_MspPostInit+0x6c>)
 80018d0:	f000 fbac 	bl	800202c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018d4:	bf00      	nop
 80018d6:	3720      	adds	r7, #32
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40010000 	.word	0x40010000
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40021000 	.word	0x40021000

080018e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b0ae      	sub	sp, #184	; 0xb8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	2290      	movs	r2, #144	; 0x90
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f004 fff7 	bl	80068fc <memset>
  if(huart->Instance==USART3)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a22      	ldr	r2, [pc, #136]	; (800199c <HAL_UART_MspInit+0xb4>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d13c      	bne.n	8001992 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001918:	f44f 7380 	mov.w	r3, #256	; 0x100
 800191c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800191e:	2300      	movs	r3, #0
 8001920:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	4618      	mov	r0, r3
 8001928:	f002 f97c 	bl	8003c24 <HAL_RCCEx_PeriphCLKConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001932:	f7ff fedd 	bl	80016f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001936:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <HAL_UART_MspInit+0xb8>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	4a19      	ldr	r2, [pc, #100]	; (80019a0 <HAL_UART_MspInit+0xb8>)
 800193c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001940:	6413      	str	r3, [r2, #64]	; 0x40
 8001942:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <HAL_UART_MspInit+0xb8>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800194e:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <HAL_UART_MspInit+0xb8>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a13      	ldr	r2, [pc, #76]	; (80019a0 <HAL_UART_MspInit+0xb8>)
 8001954:	f043 0308 	orr.w	r3, r3, #8
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <HAL_UART_MspInit+0xb8>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001966:	f44f 7340 	mov.w	r3, #768	; 0x300
 800196a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197a:	2303      	movs	r3, #3
 800197c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001980:	2307      	movs	r3, #7
 8001982:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001986:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800198a:	4619      	mov	r1, r3
 800198c:	4805      	ldr	r0, [pc, #20]	; (80019a4 <HAL_UART_MspInit+0xbc>)
 800198e:	f000 fb4d 	bl	800202c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001992:	bf00      	nop
 8001994:	37b8      	adds	r7, #184	; 0xb8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40004800 	.word	0x40004800
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020c00 	.word	0x40020c00

080019a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b0ae      	sub	sp, #184	; 0xb8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	2290      	movs	r2, #144	; 0x90
 80019c6:	2100      	movs	r1, #0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f004 ff97 	bl	80068fc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019d6:	d159      	bne.n	8001a8c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80019d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019dc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80019de:	2300      	movs	r3, #0
 80019e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4618      	mov	r0, r3
 80019ea:	f002 f91b 	bl	8003c24 <HAL_RCCEx_PeriphCLKConfig>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80019f4:	f7ff fe7c 	bl	80016f0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f8:	4b26      	ldr	r3, [pc, #152]	; (8001a94 <HAL_PCD_MspInit+0xec>)
 80019fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fc:	4a25      	ldr	r2, [pc, #148]	; (8001a94 <HAL_PCD_MspInit+0xec>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	6313      	str	r3, [r2, #48]	; 0x30
 8001a04:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <HAL_PCD_MspInit+0xec>)
 8001a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001a10:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001a14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a24:	2303      	movs	r3, #3
 8001a26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a2a:	230a      	movs	r3, #10
 8001a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a30:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a34:	4619      	mov	r1, r3
 8001a36:	4818      	ldr	r0, [pc, #96]	; (8001a98 <HAL_PCD_MspInit+0xf0>)
 8001a38:	f000 faf8 	bl	800202c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a50:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a54:	4619      	mov	r1, r3
 8001a56:	4810      	ldr	r0, [pc, #64]	; (8001a98 <HAL_PCD_MspInit+0xf0>)
 8001a58:	f000 fae8 	bl	800202c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <HAL_PCD_MspInit+0xec>)
 8001a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a60:	4a0c      	ldr	r2, [pc, #48]	; (8001a94 <HAL_PCD_MspInit+0xec>)
 8001a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a66:	6353      	str	r3, [r2, #52]	; 0x34
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_PCD_MspInit+0xec>)
 8001a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <HAL_PCD_MspInit+0xec>)
 8001a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a78:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <HAL_PCD_MspInit+0xec>)
 8001a7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a7e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <HAL_PCD_MspInit+0xec>)
 8001a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001a8c:	bf00      	nop
 8001a8e:	37b8      	adds	r7, #184	; 0xb8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40020000 	.word	0x40020000

08001a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <NMI_Handler+0x4>

08001aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aa6:	e7fe      	b.n	8001aa6 <HardFault_Handler+0x4>

08001aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aac:	e7fe      	b.n	8001aac <MemManage_Handler+0x4>

08001aae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab2:	e7fe      	b.n	8001ab2 <BusFault_Handler+0x4>

08001ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <UsageFault_Handler+0x4>

08001aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae8:	f000 f94a 	bl	8001d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001af4:	4802      	ldr	r0, [pc, #8]	; (8001b00 <TIM3_IRQHandler+0x10>)
 8001af6:	f002 fee9 	bl	80048cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	200002bc 	.word	0x200002bc

08001b04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return 1;
 8001b08:	2301      	movs	r3, #1
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <_kill>:

int _kill(int pid, int sig)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b1e:	f004 fec3 	bl	80068a8 <__errno>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2216      	movs	r2, #22
 8001b26:	601a      	str	r2, [r3, #0]
  return -1;
 8001b28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <_exit>:

void _exit (int status)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff ffe7 	bl	8001b14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b46:	e7fe      	b.n	8001b46 <_exit+0x12>

08001b48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	e00a      	b.n	8001b70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b5a:	f3af 8000 	nop.w
 8001b5e:	4601      	mov	r1, r0
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	60ba      	str	r2, [r7, #8]
 8001b66:	b2ca      	uxtb	r2, r1
 8001b68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	dbf0      	blt.n	8001b5a <_read+0x12>
  }

  return len;
 8001b78:	687b      	ldr	r3, [r7, #4]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b086      	sub	sp, #24
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	60f8      	str	r0, [r7, #12]
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	e009      	b.n	8001ba8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	60ba      	str	r2, [r7, #8]
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	dbf1      	blt.n	8001b94 <_write+0x12>
  }
  return len;
 8001bb0:	687b      	ldr	r3, [r7, #4]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <_close>:

int _close(int file)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001be2:	605a      	str	r2, [r3, #4]
  return 0;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <_isatty>:

int _isatty(int file)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bfa:	2301      	movs	r3, #1
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c2c:	4a14      	ldr	r2, [pc, #80]	; (8001c80 <_sbrk+0x5c>)
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <_sbrk+0x60>)
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c38:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <_sbrk+0x64>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d102      	bne.n	8001c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c40:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <_sbrk+0x64>)
 8001c42:	4a12      	ldr	r2, [pc, #72]	; (8001c8c <_sbrk+0x68>)
 8001c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c46:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <_sbrk+0x64>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d207      	bcs.n	8001c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c54:	f004 fe28 	bl	80068a8 <__errno>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c62:	e009      	b.n	8001c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <_sbrk+0x64>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <_sbrk+0x64>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	4a05      	ldr	r2, [pc, #20]	; (8001c88 <_sbrk+0x64>)
 8001c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c76:	68fb      	ldr	r3, [r7, #12]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20080000 	.word	0x20080000
 8001c84:	00000400 	.word	0x00000400
 8001c88:	200008b4 	.word	0x200008b4
 8001c8c:	200008d0 	.word	0x200008d0

08001c90 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <SystemInit+0x20>)
 8001c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c9a:	4a05      	ldr	r2, [pc, #20]	; (8001cb0 <SystemInit+0x20>)
 8001c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cb8:	480d      	ldr	r0, [pc, #52]	; (8001cf0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cba:	490e      	ldr	r1, [pc, #56]	; (8001cf4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cbc:	4a0e      	ldr	r2, [pc, #56]	; (8001cf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc0:	e002      	b.n	8001cc8 <LoopCopyDataInit>

08001cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc6:	3304      	adds	r3, #4

08001cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ccc:	d3f9      	bcc.n	8001cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cce:	4a0b      	ldr	r2, [pc, #44]	; (8001cfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cd0:	4c0b      	ldr	r4, [pc, #44]	; (8001d00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd4:	e001      	b.n	8001cda <LoopFillZerobss>

08001cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd8:	3204      	adds	r2, #4

08001cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cdc:	d3fb      	bcc.n	8001cd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cde:	f7ff ffd7 	bl	8001c90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ce2:	f004 fde7 	bl	80068b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ce6:	f7ff f9a1 	bl	800102c <main>
  bx  lr    
 8001cea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cec:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001cf8:	080099ac 	.word	0x080099ac
  ldr r2, =_sbss
 8001cfc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001d00:	200008cc 	.word	0x200008cc

08001d04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d04:	e7fe      	b.n	8001d04 <ADC_IRQHandler>

08001d06 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d0a:	2003      	movs	r0, #3
 8001d0c:	f000 f94c 	bl	8001fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d10:	2000      	movs	r0, #0
 8001d12:	f000 f805 	bl	8001d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d16:	f7ff fcf1 	bl	80016fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d28:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <HAL_InitTick+0x54>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <HAL_InitTick+0x58>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	4619      	mov	r1, r3
 8001d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 f967 	bl	8002012 <HAL_SYSTICK_Config>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e00e      	b.n	8001d6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b0f      	cmp	r3, #15
 8001d52:	d80a      	bhi.n	8001d6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d54:	2200      	movs	r2, #0
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5c:	f000 f92f 	bl	8001fbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d60:	4a06      	ldr	r2, [pc, #24]	; (8001d7c <HAL_InitTick+0x5c>)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	e000      	b.n	8001d6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20000000 	.word	0x20000000
 8001d78:	20000008 	.word	0x20000008
 8001d7c:	20000004 	.word	0x20000004

08001d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_IncTick+0x20>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_IncTick+0x24>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4413      	add	r3, r2
 8001d90:	4a04      	ldr	r2, [pc, #16]	; (8001da4 <HAL_IncTick+0x24>)
 8001d92:	6013      	str	r3, [r2, #0]
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20000008 	.word	0x20000008
 8001da4:	200008b8 	.word	0x200008b8

08001da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return uwTick;
 8001dac:	4b03      	ldr	r3, [pc, #12]	; (8001dbc <HAL_GetTick+0x14>)
 8001dae:	681b      	ldr	r3, [r3, #0]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	200008b8 	.word	0x200008b8

08001dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dc8:	f7ff ffee 	bl	8001da8 <HAL_GetTick>
 8001dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd8:	d005      	beq.n	8001de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_Delay+0x44>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4413      	add	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001de6:	bf00      	nop
 8001de8:	f7ff ffde 	bl	8001da8 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d8f7      	bhi.n	8001de8 <HAL_Delay+0x28>
  {
  }
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000008 	.word	0x20000008

08001e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <__NVIC_SetPriorityGrouping+0x40>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e24:	4013      	ands	r3, r2
 8001e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <__NVIC_SetPriorityGrouping+0x44>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e36:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <__NVIC_SetPriorityGrouping+0x40>)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	60d3      	str	r3, [r2, #12]
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000ed00 	.word	0xe000ed00
 8001e4c:	05fa0000 	.word	0x05fa0000

08001e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e54:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <__NVIC_GetPriorityGrouping+0x18>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	f003 0307 	and.w	r3, r3, #7
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	db0b      	blt.n	8001e96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	f003 021f 	and.w	r2, r3, #31
 8001e84:	4907      	ldr	r1, [pc, #28]	; (8001ea4 <__NVIC_EnableIRQ+0x38>)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000e100 	.word	0xe000e100

08001ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	6039      	str	r1, [r7, #0]
 8001eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	db0a      	blt.n	8001ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	490c      	ldr	r1, [pc, #48]	; (8001ef4 <__NVIC_SetPriority+0x4c>)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	0112      	lsls	r2, r2, #4
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	440b      	add	r3, r1
 8001ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ed0:	e00a      	b.n	8001ee8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	4908      	ldr	r1, [pc, #32]	; (8001ef8 <__NVIC_SetPriority+0x50>)
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	3b04      	subs	r3, #4
 8001ee0:	0112      	lsls	r2, r2, #4
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	761a      	strb	r2, [r3, #24]
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000e100 	.word	0xe000e100
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b089      	sub	sp, #36	; 0x24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f1c3 0307 	rsb	r3, r3, #7
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	bf28      	it	cs
 8001f1a:	2304      	movcs	r3, #4
 8001f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3304      	adds	r3, #4
 8001f22:	2b06      	cmp	r3, #6
 8001f24:	d902      	bls.n	8001f2c <NVIC_EncodePriority+0x30>
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3b03      	subs	r3, #3
 8001f2a:	e000      	b.n	8001f2e <NVIC_EncodePriority+0x32>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f30:	f04f 32ff 	mov.w	r2, #4294967295
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43da      	mvns	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	401a      	ands	r2, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f44:	f04f 31ff 	mov.w	r1, #4294967295
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4e:	43d9      	mvns	r1, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f54:	4313      	orrs	r3, r2
         );
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3724      	adds	r7, #36	; 0x24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f74:	d301      	bcc.n	8001f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f76:	2301      	movs	r3, #1
 8001f78:	e00f      	b.n	8001f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f7a:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <SysTick_Config+0x40>)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f82:	210f      	movs	r1, #15
 8001f84:	f04f 30ff 	mov.w	r0, #4294967295
 8001f88:	f7ff ff8e 	bl	8001ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <SysTick_Config+0x40>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f92:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <SysTick_Config+0x40>)
 8001f94:	2207      	movs	r2, #7
 8001f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	e000e010 	.word	0xe000e010

08001fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff ff29 	bl	8001e08 <__NVIC_SetPriorityGrouping>
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b086      	sub	sp, #24
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
 8001fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd0:	f7ff ff3e 	bl	8001e50 <__NVIC_GetPriorityGrouping>
 8001fd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	68b9      	ldr	r1, [r7, #8]
 8001fda:	6978      	ldr	r0, [r7, #20]
 8001fdc:	f7ff ff8e 	bl	8001efc <NVIC_EncodePriority>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ff5d 	bl	8001ea8 <__NVIC_SetPriority>
}
 8001fee:	bf00      	nop
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff31 	bl	8001e6c <__NVIC_EnableIRQ>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ffa2 	bl	8001f64 <SysTick_Config>
 8002020:	4603      	mov	r3, r0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800202c:	b480      	push	{r7}
 800202e:	b089      	sub	sp, #36	; 0x24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002042:	2300      	movs	r3, #0
 8002044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	e175      	b.n	8002338 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800204c:	2201      	movs	r2, #1
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	429a      	cmp	r2, r3
 8002066:	f040 8164 	bne.w	8002332 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b01      	cmp	r3, #1
 8002074:	d005      	beq.n	8002082 <HAL_GPIO_Init+0x56>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d130      	bne.n	80020e4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	2203      	movs	r2, #3
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b8:	2201      	movs	r2, #1
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	091b      	lsrs	r3, r3, #4
 80020ce:	f003 0201 	and.w	r2, r3, #1
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d017      	beq.n	8002120 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	2203      	movs	r2, #3
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d123      	bne.n	8002174 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	08da      	lsrs	r2, r3, #3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3208      	adds	r2, #8
 8002134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	220f      	movs	r2, #15
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	08da      	lsrs	r2, r3, #3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3208      	adds	r2, #8
 800216e:	69b9      	ldr	r1, [r7, #24]
 8002170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	2203      	movs	r2, #3
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0203 	and.w	r2, r3, #3
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 80be 	beq.w	8002332 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b6:	4b66      	ldr	r3, [pc, #408]	; (8002350 <HAL_GPIO_Init+0x324>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	4a65      	ldr	r2, [pc, #404]	; (8002350 <HAL_GPIO_Init+0x324>)
 80021bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c0:	6453      	str	r3, [r2, #68]	; 0x44
 80021c2:	4b63      	ldr	r3, [pc, #396]	; (8002350 <HAL_GPIO_Init+0x324>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80021ce:	4a61      	ldr	r2, [pc, #388]	; (8002354 <HAL_GPIO_Init+0x328>)
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	089b      	lsrs	r3, r3, #2
 80021d4:	3302      	adds	r3, #2
 80021d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	220f      	movs	r2, #15
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a58      	ldr	r2, [pc, #352]	; (8002358 <HAL_GPIO_Init+0x32c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d037      	beq.n	800226a <HAL_GPIO_Init+0x23e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a57      	ldr	r2, [pc, #348]	; (800235c <HAL_GPIO_Init+0x330>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d031      	beq.n	8002266 <HAL_GPIO_Init+0x23a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a56      	ldr	r2, [pc, #344]	; (8002360 <HAL_GPIO_Init+0x334>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d02b      	beq.n	8002262 <HAL_GPIO_Init+0x236>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a55      	ldr	r2, [pc, #340]	; (8002364 <HAL_GPIO_Init+0x338>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d025      	beq.n	800225e <HAL_GPIO_Init+0x232>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a54      	ldr	r2, [pc, #336]	; (8002368 <HAL_GPIO_Init+0x33c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d01f      	beq.n	800225a <HAL_GPIO_Init+0x22e>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a53      	ldr	r2, [pc, #332]	; (800236c <HAL_GPIO_Init+0x340>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d019      	beq.n	8002256 <HAL_GPIO_Init+0x22a>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a52      	ldr	r2, [pc, #328]	; (8002370 <HAL_GPIO_Init+0x344>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d013      	beq.n	8002252 <HAL_GPIO_Init+0x226>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a51      	ldr	r2, [pc, #324]	; (8002374 <HAL_GPIO_Init+0x348>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d00d      	beq.n	800224e <HAL_GPIO_Init+0x222>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a50      	ldr	r2, [pc, #320]	; (8002378 <HAL_GPIO_Init+0x34c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d007      	beq.n	800224a <HAL_GPIO_Init+0x21e>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a4f      	ldr	r2, [pc, #316]	; (800237c <HAL_GPIO_Init+0x350>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d101      	bne.n	8002246 <HAL_GPIO_Init+0x21a>
 8002242:	2309      	movs	r3, #9
 8002244:	e012      	b.n	800226c <HAL_GPIO_Init+0x240>
 8002246:	230a      	movs	r3, #10
 8002248:	e010      	b.n	800226c <HAL_GPIO_Init+0x240>
 800224a:	2308      	movs	r3, #8
 800224c:	e00e      	b.n	800226c <HAL_GPIO_Init+0x240>
 800224e:	2307      	movs	r3, #7
 8002250:	e00c      	b.n	800226c <HAL_GPIO_Init+0x240>
 8002252:	2306      	movs	r3, #6
 8002254:	e00a      	b.n	800226c <HAL_GPIO_Init+0x240>
 8002256:	2305      	movs	r3, #5
 8002258:	e008      	b.n	800226c <HAL_GPIO_Init+0x240>
 800225a:	2304      	movs	r3, #4
 800225c:	e006      	b.n	800226c <HAL_GPIO_Init+0x240>
 800225e:	2303      	movs	r3, #3
 8002260:	e004      	b.n	800226c <HAL_GPIO_Init+0x240>
 8002262:	2302      	movs	r3, #2
 8002264:	e002      	b.n	800226c <HAL_GPIO_Init+0x240>
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <HAL_GPIO_Init+0x240>
 800226a:	2300      	movs	r3, #0
 800226c:	69fa      	ldr	r2, [r7, #28]
 800226e:	f002 0203 	and.w	r2, r2, #3
 8002272:	0092      	lsls	r2, r2, #2
 8002274:	4093      	lsls	r3, r2
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800227c:	4935      	ldr	r1, [pc, #212]	; (8002354 <HAL_GPIO_Init+0x328>)
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	089b      	lsrs	r3, r3, #2
 8002282:	3302      	adds	r3, #2
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800228a:	4b3d      	ldr	r3, [pc, #244]	; (8002380 <HAL_GPIO_Init+0x354>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ae:	4a34      	ldr	r2, [pc, #208]	; (8002380 <HAL_GPIO_Init+0x354>)
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022b4:	4b32      	ldr	r3, [pc, #200]	; (8002380 <HAL_GPIO_Init+0x354>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022d8:	4a29      	ldr	r2, [pc, #164]	; (8002380 <HAL_GPIO_Init+0x354>)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022de:	4b28      	ldr	r3, [pc, #160]	; (8002380 <HAL_GPIO_Init+0x354>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4013      	ands	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002302:	4a1f      	ldr	r2, [pc, #124]	; (8002380 <HAL_GPIO_Init+0x354>)
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002308:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <HAL_GPIO_Init+0x354>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800232c:	4a14      	ldr	r2, [pc, #80]	; (8002380 <HAL_GPIO_Init+0x354>)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3301      	adds	r3, #1
 8002336:	61fb      	str	r3, [r7, #28]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	2b0f      	cmp	r3, #15
 800233c:	f67f ae86 	bls.w	800204c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002340:	bf00      	nop
 8002342:	bf00      	nop
 8002344:	3724      	adds	r7, #36	; 0x24
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40023800 	.word	0x40023800
 8002354:	40013800 	.word	0x40013800
 8002358:	40020000 	.word	0x40020000
 800235c:	40020400 	.word	0x40020400
 8002360:	40020800 	.word	0x40020800
 8002364:	40020c00 	.word	0x40020c00
 8002368:	40021000 	.word	0x40021000
 800236c:	40021400 	.word	0x40021400
 8002370:	40021800 	.word	0x40021800
 8002374:	40021c00 	.word	0x40021c00
 8002378:	40022000 	.word	0x40022000
 800237c:	40022400 	.word	0x40022400
 8002380:	40013c00 	.word	0x40013c00

08002384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	807b      	strh	r3, [r7, #2]
 8002390:	4613      	mov	r3, r2
 8002392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002394:	787b      	ldrb	r3, [r7, #1]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800239a:	887a      	ldrh	r2, [r7, #2]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80023a0:	e003      	b.n	80023aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80023a2:	887b      	ldrh	r3, [r7, #2]
 80023a4:	041a      	lsls	r2, r3, #16
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	619a      	str	r2, [r3, #24]
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b085      	sub	sp, #20
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	460b      	mov	r3, r1
 80023c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023c8:	887a      	ldrh	r2, [r7, #2]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4013      	ands	r3, r2
 80023ce:	041a      	lsls	r2, r3, #16
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	43d9      	mvns	r1, r3
 80023d4:	887b      	ldrh	r3, [r7, #2]
 80023d6:	400b      	ands	r3, r1
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	619a      	str	r2, [r3, #24]
}
 80023de:	bf00      	nop
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e07f      	b.n	80024fe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d106      	bne.n	8002418 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff f996 	bl	8001744 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2224      	movs	r2, #36	; 0x24
 800241c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0201 	bic.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800243c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800244c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d107      	bne.n	8002466 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	e006      	b.n	8002474 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002472:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	2b02      	cmp	r3, #2
 800247a:	d104      	bne.n	8002486 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002484:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6859      	ldr	r1, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <HAL_I2C_Init+0x11c>)
 8002492:	430b      	orrs	r3, r1
 8002494:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68da      	ldr	r2, [r3, #12]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691a      	ldr	r2, [r3, #16]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69d9      	ldr	r1, [r3, #28]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1a      	ldr	r2, [r3, #32]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2220      	movs	r2, #32
 80024ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	02008000 	.word	0x02008000

0800250c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b088      	sub	sp, #32
 8002510:	af02      	add	r7, sp, #8
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	4608      	mov	r0, r1
 8002516:	4611      	mov	r1, r2
 8002518:	461a      	mov	r2, r3
 800251a:	4603      	mov	r3, r0
 800251c:	817b      	strh	r3, [r7, #10]
 800251e:	460b      	mov	r3, r1
 8002520:	813b      	strh	r3, [r7, #8]
 8002522:	4613      	mov	r3, r2
 8002524:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b20      	cmp	r3, #32
 8002530:	f040 80f9 	bne.w	8002726 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <HAL_I2C_Mem_Write+0x34>
 800253a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800253c:	2b00      	cmp	r3, #0
 800253e:	d105      	bne.n	800254c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002546:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0ed      	b.n	8002728 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_I2C_Mem_Write+0x4e>
 8002556:	2302      	movs	r3, #2
 8002558:	e0e6      	b.n	8002728 <HAL_I2C_Mem_Write+0x21c>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002562:	f7ff fc21 	bl	8001da8 <HAL_GetTick>
 8002566:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	2319      	movs	r3, #25
 800256e:	2201      	movs	r2, #1
 8002570:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 fac3 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0d1      	b.n	8002728 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2221      	movs	r2, #33	; 0x21
 8002588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2240      	movs	r2, #64	; 0x40
 8002590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6a3a      	ldr	r2, [r7, #32]
 800259e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025ac:	88f8      	ldrh	r0, [r7, #6]
 80025ae:	893a      	ldrh	r2, [r7, #8]
 80025b0:	8979      	ldrh	r1, [r7, #10]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	9301      	str	r3, [sp, #4]
 80025b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	4603      	mov	r3, r0
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 f9d3 	bl	8002968 <I2C_RequestMemoryWrite>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e0a9      	b.n	8002728 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2bff      	cmp	r3, #255	; 0xff
 80025dc:	d90e      	bls.n	80025fc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	22ff      	movs	r2, #255	; 0xff
 80025e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	8979      	ldrh	r1, [r7, #10]
 80025ec:	2300      	movs	r3, #0
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 fc1f 	bl	8002e38 <I2C_TransferConfig>
 80025fa:	e00f      	b.n	800261c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260a:	b2da      	uxtb	r2, r3
 800260c:	8979      	ldrh	r1, [r7, #10]
 800260e:	2300      	movs	r3, #0
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 fc0e 	bl	8002e38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 faad 	bl	8002b80 <I2C_WaitOnTXISFlagUntilTimeout>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e07b      	b.n	8002728 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	781a      	ldrb	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	1c5a      	adds	r2, r3, #1
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264a:	b29b      	uxth	r3, r3
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002664:	b29b      	uxth	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d034      	beq.n	80026d4 <HAL_I2C_Mem_Write+0x1c8>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266e:	2b00      	cmp	r3, #0
 8002670:	d130      	bne.n	80026d4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002678:	2200      	movs	r2, #0
 800267a:	2180      	movs	r1, #128	; 0x80
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 fa3f 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e04d      	b.n	8002728 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002690:	b29b      	uxth	r3, r3
 8002692:	2bff      	cmp	r3, #255	; 0xff
 8002694:	d90e      	bls.n	80026b4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	22ff      	movs	r2, #255	; 0xff
 800269a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	8979      	ldrh	r1, [r7, #10]
 80026a4:	2300      	movs	r3, #0
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 fbc3 	bl	8002e38 <I2C_TransferConfig>
 80026b2:	e00f      	b.n	80026d4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	8979      	ldrh	r1, [r7, #10]
 80026c6:	2300      	movs	r3, #0
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 fbb2 	bl	8002e38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d8:	b29b      	uxth	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d19e      	bne.n	800261c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 fa8c 	bl	8002c00 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e01a      	b.n	8002728 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2220      	movs	r2, #32
 80026f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6859      	ldr	r1, [r3, #4]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <HAL_I2C_Mem_Write+0x224>)
 8002706:	400b      	ands	r3, r1
 8002708:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2220      	movs	r2, #32
 800270e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	e000      	b.n	8002728 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002726:	2302      	movs	r3, #2
  }
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	fe00e800 	.word	0xfe00e800

08002734 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af02      	add	r7, sp, #8
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	4608      	mov	r0, r1
 800273e:	4611      	mov	r1, r2
 8002740:	461a      	mov	r2, r3
 8002742:	4603      	mov	r3, r0
 8002744:	817b      	strh	r3, [r7, #10]
 8002746:	460b      	mov	r3, r1
 8002748:	813b      	strh	r3, [r7, #8]
 800274a:	4613      	mov	r3, r2
 800274c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b20      	cmp	r3, #32
 8002758:	f040 80fd 	bne.w	8002956 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d002      	beq.n	8002768 <HAL_I2C_Mem_Read+0x34>
 8002762:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002764:	2b00      	cmp	r3, #0
 8002766:	d105      	bne.n	8002774 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800276e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e0f1      	b.n	8002958 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_I2C_Mem_Read+0x4e>
 800277e:	2302      	movs	r3, #2
 8002780:	e0ea      	b.n	8002958 <HAL_I2C_Mem_Read+0x224>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800278a:	f7ff fb0d 	bl	8001da8 <HAL_GetTick>
 800278e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	2319      	movs	r3, #25
 8002796:	2201      	movs	r2, #1
 8002798:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 f9af 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0d5      	b.n	8002958 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2222      	movs	r2, #34	; 0x22
 80027b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2240      	movs	r2, #64	; 0x40
 80027b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a3a      	ldr	r2, [r7, #32]
 80027c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027d4:	88f8      	ldrh	r0, [r7, #6]
 80027d6:	893a      	ldrh	r2, [r7, #8]
 80027d8:	8979      	ldrh	r1, [r7, #10]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	9301      	str	r3, [sp, #4]
 80027de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	4603      	mov	r3, r0
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 f913 	bl	8002a10 <I2C_RequestMemoryRead>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d005      	beq.n	80027fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0ad      	b.n	8002958 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002800:	b29b      	uxth	r3, r3
 8002802:	2bff      	cmp	r3, #255	; 0xff
 8002804:	d90e      	bls.n	8002824 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	22ff      	movs	r2, #255	; 0xff
 800280a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002810:	b2da      	uxtb	r2, r3
 8002812:	8979      	ldrh	r1, [r7, #10]
 8002814:	4b52      	ldr	r3, [pc, #328]	; (8002960 <HAL_I2C_Mem_Read+0x22c>)
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 fb0b 	bl	8002e38 <I2C_TransferConfig>
 8002822:	e00f      	b.n	8002844 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002828:	b29a      	uxth	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002832:	b2da      	uxtb	r2, r3
 8002834:	8979      	ldrh	r1, [r7, #10]
 8002836:	4b4a      	ldr	r3, [pc, #296]	; (8002960 <HAL_I2C_Mem_Read+0x22c>)
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 fafa 	bl	8002e38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284a:	2200      	movs	r2, #0
 800284c:	2104      	movs	r1, #4
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 f956 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e07c      	b.n	8002958 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287a:	3b01      	subs	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002886:	b29b      	uxth	r3, r3
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002894:	b29b      	uxth	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d034      	beq.n	8002904 <HAL_I2C_Mem_Read+0x1d0>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d130      	bne.n	8002904 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a8:	2200      	movs	r2, #0
 80028aa:	2180      	movs	r1, #128	; 0x80
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 f927 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e04d      	b.n	8002958 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	2bff      	cmp	r3, #255	; 0xff
 80028c4:	d90e      	bls.n	80028e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	22ff      	movs	r2, #255	; 0xff
 80028ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	8979      	ldrh	r1, [r7, #10]
 80028d4:	2300      	movs	r3, #0
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 faab 	bl	8002e38 <I2C_TransferConfig>
 80028e2:	e00f      	b.n	8002904 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	8979      	ldrh	r1, [r7, #10]
 80028f6:	2300      	movs	r3, #0
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 fa9a 	bl	8002e38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002908:	b29b      	uxth	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d19a      	bne.n	8002844 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f974 	bl	8002c00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e01a      	b.n	8002958 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2220      	movs	r2, #32
 8002928:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6859      	ldr	r1, [r3, #4]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <HAL_I2C_Mem_Read+0x230>)
 8002936:	400b      	ands	r3, r1
 8002938:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2220      	movs	r2, #32
 800293e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	e000      	b.n	8002958 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002956:	2302      	movs	r3, #2
  }
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	80002400 	.word	0x80002400
 8002964:	fe00e800 	.word	0xfe00e800

08002968 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af02      	add	r7, sp, #8
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	4608      	mov	r0, r1
 8002972:	4611      	mov	r1, r2
 8002974:	461a      	mov	r2, r3
 8002976:	4603      	mov	r3, r0
 8002978:	817b      	strh	r3, [r7, #10]
 800297a:	460b      	mov	r3, r1
 800297c:	813b      	strh	r3, [r7, #8]
 800297e:	4613      	mov	r3, r2
 8002980:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002982:	88fb      	ldrh	r3, [r7, #6]
 8002984:	b2da      	uxtb	r2, r3
 8002986:	8979      	ldrh	r1, [r7, #10]
 8002988:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <I2C_RequestMemoryWrite+0xa4>)
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 fa51 	bl	8002e38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002996:	69fa      	ldr	r2, [r7, #28]
 8002998:	69b9      	ldr	r1, [r7, #24]
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 f8f0 	bl	8002b80 <I2C_WaitOnTXISFlagUntilTimeout>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e02c      	b.n	8002a04 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029aa:	88fb      	ldrh	r3, [r7, #6]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d105      	bne.n	80029bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029b0:	893b      	ldrh	r3, [r7, #8]
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	629a      	str	r2, [r3, #40]	; 0x28
 80029ba:	e015      	b.n	80029e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029bc:	893b      	ldrh	r3, [r7, #8]
 80029be:	0a1b      	lsrs	r3, r3, #8
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	69b9      	ldr	r1, [r7, #24]
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f8d6 	bl	8002b80 <I2C_WaitOnTXISFlagUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e012      	b.n	8002a04 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029de:	893b      	ldrh	r3, [r7, #8]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	2200      	movs	r2, #0
 80029f0:	2180      	movs	r1, #128	; 0x80
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 f884 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	80002000 	.word	0x80002000

08002a10 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	4608      	mov	r0, r1
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4603      	mov	r3, r0
 8002a20:	817b      	strh	r3, [r7, #10]
 8002a22:	460b      	mov	r3, r1
 8002a24:	813b      	strh	r3, [r7, #8]
 8002a26:	4613      	mov	r3, r2
 8002a28:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a2a:	88fb      	ldrh	r3, [r7, #6]
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	8979      	ldrh	r1, [r7, #10]
 8002a30:	4b20      	ldr	r3, [pc, #128]	; (8002ab4 <I2C_RequestMemoryRead+0xa4>)
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	2300      	movs	r3, #0
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 f9fe 	bl	8002e38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a3c:	69fa      	ldr	r2, [r7, #28]
 8002a3e:	69b9      	ldr	r1, [r7, #24]
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 f89d 	bl	8002b80 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e02c      	b.n	8002aaa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d105      	bne.n	8002a62 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a56:	893b      	ldrh	r3, [r7, #8]
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a60:	e015      	b.n	8002a8e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a62:	893b      	ldrh	r3, [r7, #8]
 8002a64:	0a1b      	lsrs	r3, r3, #8
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a70:	69fa      	ldr	r2, [r7, #28]
 8002a72:	69b9      	ldr	r1, [r7, #24]
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 f883 	bl	8002b80 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e012      	b.n	8002aaa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a84:	893b      	ldrh	r3, [r7, #8]
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	2200      	movs	r2, #0
 8002a96:	2140      	movs	r1, #64	; 0x40
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 f831 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	80002000 	.word	0x80002000

08002ab8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d103      	bne.n	8002ad6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d007      	beq.n	8002af4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699a      	ldr	r2, [r3, #24]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0201 	orr.w	r2, r2, #1
 8002af2:	619a      	str	r2, [r3, #24]
  }
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b10:	e022      	b.n	8002b58 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b18:	d01e      	beq.n	8002b58 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1a:	f7ff f945 	bl	8001da8 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d302      	bcc.n	8002b30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d113      	bne.n	8002b58 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b34:	f043 0220 	orr.w	r2, r3, #32
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e00f      	b.n	8002b78 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699a      	ldr	r2, [r3, #24]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	4013      	ands	r3, r2
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	bf0c      	ite	eq
 8002b68:	2301      	moveq	r3, #1
 8002b6a:	2300      	movne	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	461a      	mov	r2, r3
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d0cd      	beq.n	8002b12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b8c:	e02c      	b.n	8002be8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68b9      	ldr	r1, [r7, #8]
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 f870 	bl	8002c78 <I2C_IsErrorOccurred>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e02a      	b.n	8002bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba8:	d01e      	beq.n	8002be8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002baa:	f7ff f8fd 	bl	8001da8 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d302      	bcc.n	8002bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d113      	bne.n	8002be8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc4:	f043 0220 	orr.w	r2, r3, #32
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e007      	b.n	8002bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d1cb      	bne.n	8002b8e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c0c:	e028      	b.n	8002c60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68b9      	ldr	r1, [r7, #8]
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f830 	bl	8002c78 <I2C_IsErrorOccurred>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e026      	b.n	8002c70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c22:	f7ff f8c1 	bl	8001da8 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d302      	bcc.n	8002c38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d113      	bne.n	8002c60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3c:	f043 0220 	orr.w	r2, r3, #32
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2220      	movs	r2, #32
 8002c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e007      	b.n	8002c70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	f003 0320 	and.w	r3, r3, #32
 8002c6a:	2b20      	cmp	r3, #32
 8002c6c:	d1cf      	bne.n	8002c0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08a      	sub	sp, #40	; 0x28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c92:	2300      	movs	r3, #0
 8002c94:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d068      	beq.n	8002d76 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2210      	movs	r2, #16
 8002caa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cac:	e049      	b.n	8002d42 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb4:	d045      	beq.n	8002d42 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cb6:	f7ff f877 	bl	8001da8 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d302      	bcc.n	8002ccc <I2C_IsErrorOccurred+0x54>
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d13a      	bne.n	8002d42 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cde:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cee:	d121      	bne.n	8002d34 <I2C_IsErrorOccurred+0xbc>
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cf6:	d01d      	beq.n	8002d34 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002cf8:	7cfb      	ldrb	r3, [r7, #19]
 8002cfa:	2b20      	cmp	r3, #32
 8002cfc:	d01a      	beq.n	8002d34 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d0c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d0e:	f7ff f84b 	bl	8001da8 <HAL_GetTick>
 8002d12:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d14:	e00e      	b.n	8002d34 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d16:	f7ff f847 	bl	8001da8 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b19      	cmp	r3, #25
 8002d22:	d907      	bls.n	8002d34 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	f043 0320 	orr.w	r3, r3, #32
 8002d2a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002d32:	e006      	b.n	8002d42 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b20      	cmp	r3, #32
 8002d40:	d1e9      	bne.n	8002d16 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	2b20      	cmp	r3, #32
 8002d4e:	d003      	beq.n	8002d58 <I2C_IsErrorOccurred+0xe0>
 8002d50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0aa      	beq.n	8002cae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d103      	bne.n	8002d68 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2220      	movs	r2, #32
 8002d66:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	f043 0304 	orr.w	r3, r3, #4
 8002d6e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00b      	beq.n	8002da0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00b      	beq.n	8002dc2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	f043 0308 	orr.w	r3, r3, #8
 8002db0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00b      	beq.n	8002de4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	f043 0302 	orr.w	r3, r3, #2
 8002dd2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ddc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d01c      	beq.n	8002e26 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f7ff fe63 	bl	8002ab8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6859      	ldr	r1, [r3, #4]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4b0d      	ldr	r3, [pc, #52]	; (8002e34 <I2C_IsErrorOccurred+0x1bc>)
 8002dfe:	400b      	ands	r3, r1
 8002e00:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002e26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3728      	adds	r7, #40	; 0x28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	fe00e800 	.word	0xfe00e800

08002e38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	607b      	str	r3, [r7, #4]
 8002e42:	460b      	mov	r3, r1
 8002e44:	817b      	strh	r3, [r7, #10]
 8002e46:	4613      	mov	r3, r2
 8002e48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e4a:	897b      	ldrh	r3, [r7, #10]
 8002e4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e50:	7a7b      	ldrb	r3, [r7, #9]
 8002e52:	041b      	lsls	r3, r3, #16
 8002e54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e58:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e66:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	0d5b      	lsrs	r3, r3, #21
 8002e72:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002e76:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <I2C_TransferConfig+0x60>)
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	ea02 0103 	and.w	r1, r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e8a:	bf00      	nop
 8002e8c:	371c      	adds	r7, #28
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	03ff63ff 	.word	0x03ff63ff

08002e9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b20      	cmp	r3, #32
 8002eb0:	d138      	bne.n	8002f24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e032      	b.n	8002f26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2224      	movs	r2, #36	; 0x24
 8002ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0201 	bic.w	r2, r2, #1
 8002ede:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002eee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6819      	ldr	r1, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	e000      	b.n	8002f26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f24:	2302      	movs	r3, #2
  }
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b085      	sub	sp, #20
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b20      	cmp	r3, #32
 8002f46:	d139      	bne.n	8002fbc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f52:	2302      	movs	r3, #2
 8002f54:	e033      	b.n	8002fbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2224      	movs	r2, #36	; 0x24
 8002f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0201 	bic.w	r2, r2, #1
 8002f74:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f84:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	021b      	lsls	r3, r3, #8
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	e000      	b.n	8002fbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002fbc:	2302      	movs	r3, #2
  }
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fcc:	b08f      	sub	sp, #60	; 0x3c
 8002fce:	af0a      	add	r7, sp, #40	; 0x28
 8002fd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e116      	b.n	800320a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d106      	bne.n	8002ffc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7fe fcd6 	bl	80019a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2203      	movs	r2, #3
 8003000:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300c:	2b00      	cmp	r3, #0
 800300e:	d102      	bne.n	8003016 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f003 f9a8 	bl	8006370 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	603b      	str	r3, [r7, #0]
 8003026:	687e      	ldr	r6, [r7, #4]
 8003028:	466d      	mov	r5, sp
 800302a:	f106 0410 	add.w	r4, r6, #16
 800302e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003030:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003032:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003034:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003036:	e894 0003 	ldmia.w	r4, {r0, r1}
 800303a:	e885 0003 	stmia.w	r5, {r0, r1}
 800303e:	1d33      	adds	r3, r6, #4
 8003040:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003042:	6838      	ldr	r0, [r7, #0]
 8003044:	f003 f93c 	bl	80062c0 <USB_CoreInit>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d005      	beq.n	800305a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2202      	movs	r2, #2
 8003052:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e0d7      	b.n	800320a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2100      	movs	r1, #0
 8003060:	4618      	mov	r0, r3
 8003062:	f003 f996 	bl	8006392 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003066:	2300      	movs	r3, #0
 8003068:	73fb      	strb	r3, [r7, #15]
 800306a:	e04a      	b.n	8003102 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800306c:	7bfa      	ldrb	r2, [r7, #15]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	333d      	adds	r3, #61	; 0x3d
 800307c:	2201      	movs	r2, #1
 800307e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003080:	7bfa      	ldrb	r2, [r7, #15]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	333c      	adds	r3, #60	; 0x3c
 8003090:	7bfa      	ldrb	r2, [r7, #15]
 8003092:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003094:	7bfa      	ldrb	r2, [r7, #15]
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	b298      	uxth	r0, r3
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	4613      	mov	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	3344      	adds	r3, #68	; 0x44
 80030a8:	4602      	mov	r2, r0
 80030aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030ac:	7bfa      	ldrb	r2, [r7, #15]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	4413      	add	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	3340      	adds	r3, #64	; 0x40
 80030bc:	2200      	movs	r2, #0
 80030be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030c0:	7bfa      	ldrb	r2, [r7, #15]
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	4613      	mov	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	4413      	add	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	3348      	adds	r3, #72	; 0x48
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030d4:	7bfa      	ldrb	r2, [r7, #15]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	334c      	adds	r3, #76	; 0x4c
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030e8:	7bfa      	ldrb	r2, [r7, #15]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	3354      	adds	r3, #84	; 0x54
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
 80030fe:	3301      	adds	r3, #1
 8003100:	73fb      	strb	r3, [r7, #15]
 8003102:	7bfa      	ldrb	r2, [r7, #15]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	429a      	cmp	r2, r3
 800310a:	d3af      	bcc.n	800306c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800310c:	2300      	movs	r3, #0
 800310e:	73fb      	strb	r3, [r7, #15]
 8003110:	e044      	b.n	800319c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003112:	7bfa      	ldrb	r2, [r7, #15]
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	4613      	mov	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003124:	2200      	movs	r2, #0
 8003126:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003128:	7bfa      	ldrb	r2, [r7, #15]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4413      	add	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800313a:	7bfa      	ldrb	r2, [r7, #15]
 800313c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800313e:	7bfa      	ldrb	r2, [r7, #15]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4413      	add	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	440b      	add	r3, r1
 800314c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003150:	2200      	movs	r2, #0
 8003152:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003154:	7bfa      	ldrb	r2, [r7, #15]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	4413      	add	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800316a:	7bfa      	ldrb	r2, [r7, #15]
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4413      	add	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003180:	7bfa      	ldrb	r2, [r7, #15]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003196:	7bfb      	ldrb	r3, [r7, #15]
 8003198:	3301      	adds	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]
 800319c:	7bfa      	ldrb	r2, [r7, #15]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d3b5      	bcc.n	8003112 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	687e      	ldr	r6, [r7, #4]
 80031ae:	466d      	mov	r5, sp
 80031b0:	f106 0410 	add.w	r4, r6, #16
 80031b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80031c4:	1d33      	adds	r3, r6, #4
 80031c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031c8:	6838      	ldr	r0, [r7, #0]
 80031ca:	f003 f92f 	bl	800642c <USB_DevInit>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d005      	beq.n	80031e0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e014      	b.n	800320a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d102      	bne.n	80031fe <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f80b 	bl	8003214 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f003 faed 	bl	80067e2 <USB_DevDisconnect>

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003214 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003242:	4b05      	ldr	r3, [pc, #20]	; (8003258 <HAL_PCDEx_ActivateLPM+0x44>)
 8003244:	4313      	orrs	r3, r2
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	10000003 	.word	0x10000003

0800325c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003260:	4b05      	ldr	r3, [pc, #20]	; (8003278 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a04      	ldr	r2, [pc, #16]	; (8003278 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800326a:	6013      	str	r3, [r2, #0]
}
 800326c:	bf00      	nop
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40007000 	.word	0x40007000

0800327c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003284:	2300      	movs	r3, #0
 8003286:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e29b      	b.n	80037ca <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 8087 	beq.w	80033ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032a0:	4b96      	ldr	r3, [pc, #600]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 030c 	and.w	r3, r3, #12
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d00c      	beq.n	80032c6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ac:	4b93      	ldr	r3, [pc, #588]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 030c 	and.w	r3, r3, #12
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d112      	bne.n	80032de <HAL_RCC_OscConfig+0x62>
 80032b8:	4b90      	ldr	r3, [pc, #576]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032c4:	d10b      	bne.n	80032de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c6:	4b8d      	ldr	r3, [pc, #564]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d06c      	beq.n	80033ac <HAL_RCC_OscConfig+0x130>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d168      	bne.n	80033ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e275      	b.n	80037ca <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e6:	d106      	bne.n	80032f6 <HAL_RCC_OscConfig+0x7a>
 80032e8:	4b84      	ldr	r3, [pc, #528]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a83      	ldr	r2, [pc, #524]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 80032ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f2:	6013      	str	r3, [r2, #0]
 80032f4:	e02e      	b.n	8003354 <HAL_RCC_OscConfig+0xd8>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10c      	bne.n	8003318 <HAL_RCC_OscConfig+0x9c>
 80032fe:	4b7f      	ldr	r3, [pc, #508]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a7e      	ldr	r2, [pc, #504]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 8003304:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	4b7c      	ldr	r3, [pc, #496]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a7b      	ldr	r2, [pc, #492]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 8003310:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	e01d      	b.n	8003354 <HAL_RCC_OscConfig+0xd8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003320:	d10c      	bne.n	800333c <HAL_RCC_OscConfig+0xc0>
 8003322:	4b76      	ldr	r3, [pc, #472]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a75      	ldr	r2, [pc, #468]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 8003328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	4b73      	ldr	r3, [pc, #460]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a72      	ldr	r2, [pc, #456]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 8003334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	e00b      	b.n	8003354 <HAL_RCC_OscConfig+0xd8>
 800333c:	4b6f      	ldr	r3, [pc, #444]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a6e      	ldr	r2, [pc, #440]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 8003342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003346:	6013      	str	r3, [r2, #0]
 8003348:	4b6c      	ldr	r3, [pc, #432]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a6b      	ldr	r2, [pc, #428]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 800334e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d013      	beq.n	8003384 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335c:	f7fe fd24 	bl	8001da8 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003364:	f7fe fd20 	bl	8001da8 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b64      	cmp	r3, #100	; 0x64
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e229      	b.n	80037ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003376:	4b61      	ldr	r3, [pc, #388]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0f0      	beq.n	8003364 <HAL_RCC_OscConfig+0xe8>
 8003382:	e014      	b.n	80033ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003384:	f7fe fd10 	bl	8001da8 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800338c:	f7fe fd0c 	bl	8001da8 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b64      	cmp	r3, #100	; 0x64
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e215      	b.n	80037ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800339e:	4b57      	ldr	r3, [pc, #348]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1f0      	bne.n	800338c <HAL_RCC_OscConfig+0x110>
 80033aa:	e000      	b.n	80033ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d069      	beq.n	800348e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033ba:	4b50      	ldr	r3, [pc, #320]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 030c 	and.w	r3, r3, #12
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00b      	beq.n	80033de <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033c6:	4b4d      	ldr	r3, [pc, #308]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 030c 	and.w	r3, r3, #12
 80033ce:	2b08      	cmp	r3, #8
 80033d0:	d11c      	bne.n	800340c <HAL_RCC_OscConfig+0x190>
 80033d2:	4b4a      	ldr	r3, [pc, #296]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d116      	bne.n	800340c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033de:	4b47      	ldr	r3, [pc, #284]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d005      	beq.n	80033f6 <HAL_RCC_OscConfig+0x17a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d001      	beq.n	80033f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e1e9      	b.n	80037ca <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f6:	4b41      	ldr	r3, [pc, #260]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	493d      	ldr	r1, [pc, #244]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 8003406:	4313      	orrs	r3, r2
 8003408:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800340a:	e040      	b.n	800348e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d023      	beq.n	800345c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003414:	4b39      	ldr	r3, [pc, #228]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a38      	ldr	r2, [pc, #224]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003420:	f7fe fcc2 	bl	8001da8 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003428:	f7fe fcbe 	bl	8001da8 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e1c7      	b.n	80037ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343a:	4b30      	ldr	r3, [pc, #192]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f0      	beq.n	8003428 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003446:	4b2d      	ldr	r3, [pc, #180]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4929      	ldr	r1, [pc, #164]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 8003456:	4313      	orrs	r3, r2
 8003458:	600b      	str	r3, [r1, #0]
 800345a:	e018      	b.n	800348e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800345c:	4b27      	ldr	r3, [pc, #156]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a26      	ldr	r2, [pc, #152]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 8003462:	f023 0301 	bic.w	r3, r3, #1
 8003466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003468:	f7fe fc9e 	bl	8001da8 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003470:	f7fe fc9a 	bl	8001da8 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e1a3      	b.n	80037ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003482:	4b1e      	ldr	r3, [pc, #120]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d038      	beq.n	800350c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d019      	beq.n	80034d6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034a2:	4b16      	ldr	r3, [pc, #88]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 80034a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a6:	4a15      	ldr	r2, [pc, #84]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ae:	f7fe fc7b 	bl	8001da8 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b6:	f7fe fc77 	bl	8001da8 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e180      	b.n	80037ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c8:	4b0c      	ldr	r3, [pc, #48]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 80034ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0f0      	beq.n	80034b6 <HAL_RCC_OscConfig+0x23a>
 80034d4:	e01a      	b.n	800350c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034d6:	4b09      	ldr	r3, [pc, #36]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 80034d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034da:	4a08      	ldr	r2, [pc, #32]	; (80034fc <HAL_RCC_OscConfig+0x280>)
 80034dc:	f023 0301 	bic.w	r3, r3, #1
 80034e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e2:	f7fe fc61 	bl	8001da8 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e8:	e00a      	b.n	8003500 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ea:	f7fe fc5d 	bl	8001da8 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d903      	bls.n	8003500 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e166      	b.n	80037ca <HAL_RCC_OscConfig+0x54e>
 80034fc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003500:	4b92      	ldr	r3, [pc, #584]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 8003502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1ee      	bne.n	80034ea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 80a4 	beq.w	8003662 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800351a:	4b8c      	ldr	r3, [pc, #560]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10d      	bne.n	8003542 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003526:	4b89      	ldr	r3, [pc, #548]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	4a88      	ldr	r2, [pc, #544]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 800352c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003530:	6413      	str	r3, [r2, #64]	; 0x40
 8003532:	4b86      	ldr	r3, [pc, #536]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353a:	60bb      	str	r3, [r7, #8]
 800353c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800353e:	2301      	movs	r3, #1
 8003540:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003542:	4b83      	ldr	r3, [pc, #524]	; (8003750 <HAL_RCC_OscConfig+0x4d4>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354a:	2b00      	cmp	r3, #0
 800354c:	d118      	bne.n	8003580 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800354e:	4b80      	ldr	r3, [pc, #512]	; (8003750 <HAL_RCC_OscConfig+0x4d4>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a7f      	ldr	r2, [pc, #508]	; (8003750 <HAL_RCC_OscConfig+0x4d4>)
 8003554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800355a:	f7fe fc25 	bl	8001da8 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003562:	f7fe fc21 	bl	8001da8 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b64      	cmp	r3, #100	; 0x64
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e12a      	b.n	80037ca <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003574:	4b76      	ldr	r3, [pc, #472]	; (8003750 <HAL_RCC_OscConfig+0x4d4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d106      	bne.n	8003596 <HAL_RCC_OscConfig+0x31a>
 8003588:	4b70      	ldr	r3, [pc, #448]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 800358a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358c:	4a6f      	ldr	r2, [pc, #444]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	6713      	str	r3, [r2, #112]	; 0x70
 8003594:	e02d      	b.n	80035f2 <HAL_RCC_OscConfig+0x376>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10c      	bne.n	80035b8 <HAL_RCC_OscConfig+0x33c>
 800359e:	4b6b      	ldr	r3, [pc, #428]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 80035a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a2:	4a6a      	ldr	r2, [pc, #424]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 80035a4:	f023 0301 	bic.w	r3, r3, #1
 80035a8:	6713      	str	r3, [r2, #112]	; 0x70
 80035aa:	4b68      	ldr	r3, [pc, #416]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 80035ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ae:	4a67      	ldr	r2, [pc, #412]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 80035b0:	f023 0304 	bic.w	r3, r3, #4
 80035b4:	6713      	str	r3, [r2, #112]	; 0x70
 80035b6:	e01c      	b.n	80035f2 <HAL_RCC_OscConfig+0x376>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2b05      	cmp	r3, #5
 80035be:	d10c      	bne.n	80035da <HAL_RCC_OscConfig+0x35e>
 80035c0:	4b62      	ldr	r3, [pc, #392]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 80035c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c4:	4a61      	ldr	r2, [pc, #388]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 80035c6:	f043 0304 	orr.w	r3, r3, #4
 80035ca:	6713      	str	r3, [r2, #112]	; 0x70
 80035cc:	4b5f      	ldr	r3, [pc, #380]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 80035ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d0:	4a5e      	ldr	r2, [pc, #376]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	6713      	str	r3, [r2, #112]	; 0x70
 80035d8:	e00b      	b.n	80035f2 <HAL_RCC_OscConfig+0x376>
 80035da:	4b5c      	ldr	r3, [pc, #368]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 80035dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035de:	4a5b      	ldr	r2, [pc, #364]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 80035e0:	f023 0301 	bic.w	r3, r3, #1
 80035e4:	6713      	str	r3, [r2, #112]	; 0x70
 80035e6:	4b59      	ldr	r3, [pc, #356]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 80035e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ea:	4a58      	ldr	r2, [pc, #352]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 80035ec:	f023 0304 	bic.w	r3, r3, #4
 80035f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d015      	beq.n	8003626 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fa:	f7fe fbd5 	bl	8001da8 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003600:	e00a      	b.n	8003618 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003602:	f7fe fbd1 	bl	8001da8 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003610:	4293      	cmp	r3, r2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e0d8      	b.n	80037ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003618:	4b4c      	ldr	r3, [pc, #304]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0ee      	beq.n	8003602 <HAL_RCC_OscConfig+0x386>
 8003624:	e014      	b.n	8003650 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003626:	f7fe fbbf 	bl	8001da8 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800362c:	e00a      	b.n	8003644 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800362e:	f7fe fbbb 	bl	8001da8 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	f241 3288 	movw	r2, #5000	; 0x1388
 800363c:	4293      	cmp	r3, r2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e0c2      	b.n	80037ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003644:	4b41      	ldr	r3, [pc, #260]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 8003646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1ee      	bne.n	800362e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003650:	7dfb      	ldrb	r3, [r7, #23]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d105      	bne.n	8003662 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003656:	4b3d      	ldr	r3, [pc, #244]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	4a3c      	ldr	r2, [pc, #240]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 800365c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003660:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 80ae 	beq.w	80037c8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800366c:	4b37      	ldr	r3, [pc, #220]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f003 030c 	and.w	r3, r3, #12
 8003674:	2b08      	cmp	r3, #8
 8003676:	d06d      	beq.n	8003754 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d14b      	bne.n	8003718 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003680:	4b32      	ldr	r3, [pc, #200]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a31      	ldr	r2, [pc, #196]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 8003686:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800368a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368c:	f7fe fb8c 	bl	8001da8 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003694:	f7fe fb88 	bl	8001da8 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e091      	b.n	80037ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a6:	4b29      	ldr	r3, [pc, #164]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f0      	bne.n	8003694 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	69da      	ldr	r2, [r3, #28]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	019b      	lsls	r3, r3, #6
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c8:	085b      	lsrs	r3, r3, #1
 80036ca:	3b01      	subs	r3, #1
 80036cc:	041b      	lsls	r3, r3, #16
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	061b      	lsls	r3, r3, #24
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	071b      	lsls	r3, r3, #28
 80036de:	491b      	ldr	r1, [pc, #108]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e4:	4b19      	ldr	r3, [pc, #100]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a18      	ldr	r2, [pc, #96]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 80036ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f0:	f7fe fb5a 	bl	8001da8 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f8:	f7fe fb56 	bl	8001da8 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e05f      	b.n	80037ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800370a:	4b10      	ldr	r3, [pc, #64]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0f0      	beq.n	80036f8 <HAL_RCC_OscConfig+0x47c>
 8003716:	e057      	b.n	80037c8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003718:	4b0c      	ldr	r3, [pc, #48]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a0b      	ldr	r2, [pc, #44]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 800371e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003724:	f7fe fb40 	bl	8001da8 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372c:	f7fe fb3c 	bl	8001da8 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e045      	b.n	80037ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373e:	4b03      	ldr	r3, [pc, #12]	; (800374c <HAL_RCC_OscConfig+0x4d0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f0      	bne.n	800372c <HAL_RCC_OscConfig+0x4b0>
 800374a:	e03d      	b.n	80037c8 <HAL_RCC_OscConfig+0x54c>
 800374c:	40023800 	.word	0x40023800
 8003750:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003754:	4b1f      	ldr	r3, [pc, #124]	; (80037d4 <HAL_RCC_OscConfig+0x558>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d030      	beq.n	80037c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800376c:	429a      	cmp	r2, r3
 800376e:	d129      	bne.n	80037c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800377a:	429a      	cmp	r2, r3
 800377c:	d122      	bne.n	80037c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003784:	4013      	ands	r3, r2
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800378a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800378c:	4293      	cmp	r3, r2
 800378e:	d119      	bne.n	80037c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379a:	085b      	lsrs	r3, r3, #1
 800379c:	3b01      	subs	r3, #1
 800379e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d10f      	bne.n	80037c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d107      	bne.n	80037c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d001      	beq.n	80037c8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e000      	b.n	80037ca <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	40023800 	.word	0x40023800

080037d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80037e2:	2300      	movs	r3, #0
 80037e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0d0      	b.n	8003992 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037f0:	4b6a      	ldr	r3, [pc, #424]	; (800399c <HAL_RCC_ClockConfig+0x1c4>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 030f 	and.w	r3, r3, #15
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d910      	bls.n	8003820 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fe:	4b67      	ldr	r3, [pc, #412]	; (800399c <HAL_RCC_ClockConfig+0x1c4>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f023 020f 	bic.w	r2, r3, #15
 8003806:	4965      	ldr	r1, [pc, #404]	; (800399c <HAL_RCC_ClockConfig+0x1c4>)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	4313      	orrs	r3, r2
 800380c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800380e:	4b63      	ldr	r3, [pc, #396]	; (800399c <HAL_RCC_ClockConfig+0x1c4>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	d001      	beq.n	8003820 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e0b8      	b.n	8003992 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d020      	beq.n	800386e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003838:	4b59      	ldr	r3, [pc, #356]	; (80039a0 <HAL_RCC_ClockConfig+0x1c8>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	4a58      	ldr	r2, [pc, #352]	; (80039a0 <HAL_RCC_ClockConfig+0x1c8>)
 800383e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003842:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003850:	4b53      	ldr	r3, [pc, #332]	; (80039a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	4a52      	ldr	r2, [pc, #328]	; (80039a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003856:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800385a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800385c:	4b50      	ldr	r3, [pc, #320]	; (80039a0 <HAL_RCC_ClockConfig+0x1c8>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	494d      	ldr	r1, [pc, #308]	; (80039a0 <HAL_RCC_ClockConfig+0x1c8>)
 800386a:	4313      	orrs	r3, r2
 800386c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d040      	beq.n	80038fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d107      	bne.n	8003892 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003882:	4b47      	ldr	r3, [pc, #284]	; (80039a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d115      	bne.n	80038ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e07f      	b.n	8003992 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b02      	cmp	r3, #2
 8003898:	d107      	bne.n	80038aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800389a:	4b41      	ldr	r3, [pc, #260]	; (80039a0 <HAL_RCC_ClockConfig+0x1c8>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d109      	bne.n	80038ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e073      	b.n	8003992 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038aa:	4b3d      	ldr	r3, [pc, #244]	; (80039a0 <HAL_RCC_ClockConfig+0x1c8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e06b      	b.n	8003992 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ba:	4b39      	ldr	r3, [pc, #228]	; (80039a0 <HAL_RCC_ClockConfig+0x1c8>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f023 0203 	bic.w	r2, r3, #3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	4936      	ldr	r1, [pc, #216]	; (80039a0 <HAL_RCC_ClockConfig+0x1c8>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038cc:	f7fe fa6c 	bl	8001da8 <HAL_GetTick>
 80038d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d2:	e00a      	b.n	80038ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d4:	f7fe fa68 	bl	8001da8 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e053      	b.n	8003992 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ea:	4b2d      	ldr	r3, [pc, #180]	; (80039a0 <HAL_RCC_ClockConfig+0x1c8>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 020c 	and.w	r2, r3, #12
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d1eb      	bne.n	80038d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038fc:	4b27      	ldr	r3, [pc, #156]	; (800399c <HAL_RCC_ClockConfig+0x1c4>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 030f 	and.w	r3, r3, #15
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d210      	bcs.n	800392c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390a:	4b24      	ldr	r3, [pc, #144]	; (800399c <HAL_RCC_ClockConfig+0x1c4>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f023 020f 	bic.w	r2, r3, #15
 8003912:	4922      	ldr	r1, [pc, #136]	; (800399c <HAL_RCC_ClockConfig+0x1c4>)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	4313      	orrs	r3, r2
 8003918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800391a:	4b20      	ldr	r3, [pc, #128]	; (800399c <HAL_RCC_ClockConfig+0x1c4>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	429a      	cmp	r2, r3
 8003926:	d001      	beq.n	800392c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e032      	b.n	8003992 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	d008      	beq.n	800394a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003938:	4b19      	ldr	r3, [pc, #100]	; (80039a0 <HAL_RCC_ClockConfig+0x1c8>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	4916      	ldr	r1, [pc, #88]	; (80039a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003946:	4313      	orrs	r3, r2
 8003948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d009      	beq.n	800396a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003956:	4b12      	ldr	r3, [pc, #72]	; (80039a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	490e      	ldr	r1, [pc, #56]	; (80039a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003966:	4313      	orrs	r3, r2
 8003968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800396a:	f000 f821 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 800396e:	4602      	mov	r2, r0
 8003970:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	091b      	lsrs	r3, r3, #4
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	490a      	ldr	r1, [pc, #40]	; (80039a4 <HAL_RCC_ClockConfig+0x1cc>)
 800397c:	5ccb      	ldrb	r3, [r1, r3]
 800397e:	fa22 f303 	lsr.w	r3, r2, r3
 8003982:	4a09      	ldr	r2, [pc, #36]	; (80039a8 <HAL_RCC_ClockConfig+0x1d0>)
 8003984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003986:	4b09      	ldr	r3, [pc, #36]	; (80039ac <HAL_RCC_ClockConfig+0x1d4>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe f9c8 	bl	8001d20 <HAL_InitTick>

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	40023c00 	.word	0x40023c00
 80039a0:	40023800 	.word	0x40023800
 80039a4:	080095a8 	.word	0x080095a8
 80039a8:	20000000 	.word	0x20000000
 80039ac:	20000004 	.word	0x20000004

080039b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039b4:	b094      	sub	sp, #80	; 0x50
 80039b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80039b8:	2300      	movs	r3, #0
 80039ba:	647b      	str	r3, [r7, #68]	; 0x44
 80039bc:	2300      	movs	r3, #0
 80039be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039c0:	2300      	movs	r3, #0
 80039c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80039c4:	2300      	movs	r3, #0
 80039c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039c8:	4b79      	ldr	r3, [pc, #484]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 030c 	and.w	r3, r3, #12
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d00d      	beq.n	80039f0 <HAL_RCC_GetSysClockFreq+0x40>
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	f200 80e1 	bhi.w	8003b9c <HAL_RCC_GetSysClockFreq+0x1ec>
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <HAL_RCC_GetSysClockFreq+0x34>
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d003      	beq.n	80039ea <HAL_RCC_GetSysClockFreq+0x3a>
 80039e2:	e0db      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039e4:	4b73      	ldr	r3, [pc, #460]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x204>)
 80039e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039e8:	e0db      	b.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039ea:	4b73      	ldr	r3, [pc, #460]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x208>)
 80039ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039ee:	e0d8      	b.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039f0:	4b6f      	ldr	r3, [pc, #444]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039f8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80039fa:	4b6d      	ldr	r3, [pc, #436]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d063      	beq.n	8003ace <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a06:	4b6a      	ldr	r3, [pc, #424]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	099b      	lsrs	r3, r3, #6
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a18:	633b      	str	r3, [r7, #48]	; 0x30
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a22:	4622      	mov	r2, r4
 8003a24:	462b      	mov	r3, r5
 8003a26:	f04f 0000 	mov.w	r0, #0
 8003a2a:	f04f 0100 	mov.w	r1, #0
 8003a2e:	0159      	lsls	r1, r3, #5
 8003a30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a34:	0150      	lsls	r0, r2, #5
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4621      	mov	r1, r4
 8003a3c:	1a51      	subs	r1, r2, r1
 8003a3e:	6139      	str	r1, [r7, #16]
 8003a40:	4629      	mov	r1, r5
 8003a42:	eb63 0301 	sbc.w	r3, r3, r1
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a54:	4659      	mov	r1, fp
 8003a56:	018b      	lsls	r3, r1, #6
 8003a58:	4651      	mov	r1, sl
 8003a5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a5e:	4651      	mov	r1, sl
 8003a60:	018a      	lsls	r2, r1, #6
 8003a62:	4651      	mov	r1, sl
 8003a64:	ebb2 0801 	subs.w	r8, r2, r1
 8003a68:	4659      	mov	r1, fp
 8003a6a:	eb63 0901 	sbc.w	r9, r3, r1
 8003a6e:	f04f 0200 	mov.w	r2, #0
 8003a72:	f04f 0300 	mov.w	r3, #0
 8003a76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a82:	4690      	mov	r8, r2
 8003a84:	4699      	mov	r9, r3
 8003a86:	4623      	mov	r3, r4
 8003a88:	eb18 0303 	adds.w	r3, r8, r3
 8003a8c:	60bb      	str	r3, [r7, #8]
 8003a8e:	462b      	mov	r3, r5
 8003a90:	eb49 0303 	adc.w	r3, r9, r3
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003aa2:	4629      	mov	r1, r5
 8003aa4:	024b      	lsls	r3, r1, #9
 8003aa6:	4621      	mov	r1, r4
 8003aa8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003aac:	4621      	mov	r1, r4
 8003aae:	024a      	lsls	r2, r1, #9
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003abc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ac0:	f7fc fc66 	bl	8000390 <__aeabi_uldivmod>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4613      	mov	r3, r2
 8003aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003acc:	e058      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ace:	4b38      	ldr	r3, [pc, #224]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	099b      	lsrs	r3, r3, #6
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	4611      	mov	r1, r2
 8003ada:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ade:	623b      	str	r3, [r7, #32]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ae8:	4642      	mov	r2, r8
 8003aea:	464b      	mov	r3, r9
 8003aec:	f04f 0000 	mov.w	r0, #0
 8003af0:	f04f 0100 	mov.w	r1, #0
 8003af4:	0159      	lsls	r1, r3, #5
 8003af6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003afa:	0150      	lsls	r0, r2, #5
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4641      	mov	r1, r8
 8003b02:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b06:	4649      	mov	r1, r9
 8003b08:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b20:	ebb2 040a 	subs.w	r4, r2, sl
 8003b24:	eb63 050b 	sbc.w	r5, r3, fp
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	00eb      	lsls	r3, r5, #3
 8003b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b36:	00e2      	lsls	r2, r4, #3
 8003b38:	4614      	mov	r4, r2
 8003b3a:	461d      	mov	r5, r3
 8003b3c:	4643      	mov	r3, r8
 8003b3e:	18e3      	adds	r3, r4, r3
 8003b40:	603b      	str	r3, [r7, #0]
 8003b42:	464b      	mov	r3, r9
 8003b44:	eb45 0303 	adc.w	r3, r5, r3
 8003b48:	607b      	str	r3, [r7, #4]
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b56:	4629      	mov	r1, r5
 8003b58:	028b      	lsls	r3, r1, #10
 8003b5a:	4621      	mov	r1, r4
 8003b5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b60:	4621      	mov	r1, r4
 8003b62:	028a      	lsls	r2, r1, #10
 8003b64:	4610      	mov	r0, r2
 8003b66:	4619      	mov	r1, r3
 8003b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	61bb      	str	r3, [r7, #24]
 8003b6e:	61fa      	str	r2, [r7, #28]
 8003b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b74:	f7fc fc0c 	bl	8000390 <__aeabi_uldivmod>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b80:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	0c1b      	lsrs	r3, r3, #16
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003b90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b9a:	e002      	b.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3750      	adds	r7, #80	; 0x50
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bae:	bf00      	nop
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	00f42400 	.word	0x00f42400
 8003bb8:	007a1200 	.word	0x007a1200

08003bbc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc0:	4b03      	ldr	r3, [pc, #12]	; (8003bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	20000000 	.word	0x20000000

08003bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bd8:	f7ff fff0 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	0a9b      	lsrs	r3, r3, #10
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	4903      	ldr	r1, [pc, #12]	; (8003bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bea:	5ccb      	ldrb	r3, [r1, r3]
 8003bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	080095b8 	.word	0x080095b8

08003bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c00:	f7ff ffdc 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 8003c04:	4602      	mov	r2, r0
 8003c06:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	0b5b      	lsrs	r3, r3, #13
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	4903      	ldr	r1, [pc, #12]	; (8003c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c12:	5ccb      	ldrb	r3, [r1, r3]
 8003c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	080095b8 	.word	0x080095b8

08003c24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003c30:	2300      	movs	r3, #0
 8003c32:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d012      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c4c:	4b69      	ldr	r3, [pc, #420]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	4a68      	ldr	r2, [pc, #416]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c52:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c56:	6093      	str	r3, [r2, #8]
 8003c58:	4b66      	ldr	r3, [pc, #408]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c60:	4964      	ldr	r1, [pc, #400]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d017      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c7e:	4b5d      	ldr	r3, [pc, #372]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8c:	4959      	ldr	r1, [pc, #356]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c9c:	d101      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003caa:	2301      	movs	r3, #1
 8003cac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d017      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cba:	4b4e      	ldr	r3, [pc, #312]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cc0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	494a      	ldr	r1, [pc, #296]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cd8:	d101      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 808b 	beq.w	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d08:	4b3a      	ldr	r3, [pc, #232]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	4a39      	ldr	r2, [pc, #228]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d12:	6413      	str	r3, [r2, #64]	; 0x40
 8003d14:	4b37      	ldr	r3, [pc, #220]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1c:	60bb      	str	r3, [r7, #8]
 8003d1e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d20:	4b35      	ldr	r3, [pc, #212]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a34      	ldr	r2, [pc, #208]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d2c:	f7fe f83c 	bl	8001da8 <HAL_GetTick>
 8003d30:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d34:	f7fe f838 	bl	8001da8 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b64      	cmp	r3, #100	; 0x64
 8003d40:	d901      	bls.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e38f      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d46:	4b2c      	ldr	r3, [pc, #176]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d52:	4b28      	ldr	r3, [pc, #160]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d5a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d035      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d02e      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d70:	4b20      	ldr	r3, [pc, #128]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d78:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d7a:	4b1e      	ldr	r3, [pc, #120]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7e:	4a1d      	ldr	r2, [pc, #116]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d84:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d86:	4b1b      	ldr	r3, [pc, #108]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8a:	4a1a      	ldr	r2, [pc, #104]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d92:	4a18      	ldr	r2, [pc, #96]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d98:	4b16      	ldr	r3, [pc, #88]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d114      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da4:	f7fe f800 	bl	8001da8 <HAL_GetTick>
 8003da8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003daa:	e00a      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dac:	f7fd fffc 	bl	8001da8 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e351      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc2:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0ee      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dda:	d111      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ddc:	4b05      	ldr	r3, [pc, #20]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003de8:	4b04      	ldr	r3, [pc, #16]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003dea:	400b      	ands	r3, r1
 8003dec:	4901      	ldr	r1, [pc, #4]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	608b      	str	r3, [r1, #8]
 8003df2:	e00b      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003df4:	40023800 	.word	0x40023800
 8003df8:	40007000 	.word	0x40007000
 8003dfc:	0ffffcff 	.word	0x0ffffcff
 8003e00:	4bac      	ldr	r3, [pc, #688]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	4aab      	ldr	r2, [pc, #684]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e06:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e0a:	6093      	str	r3, [r2, #8]
 8003e0c:	4ba9      	ldr	r3, [pc, #676]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e18:	49a6      	ldr	r1, [pc, #664]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0310 	and.w	r3, r3, #16
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d010      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e2a:	4ba2      	ldr	r3, [pc, #648]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e30:	4aa0      	ldr	r2, [pc, #640]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003e3a:	4b9e      	ldr	r3, [pc, #632]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e3c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e44:	499b      	ldr	r1, [pc, #620]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e58:	4b96      	ldr	r3, [pc, #600]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e66:	4993      	ldr	r1, [pc, #588]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e7a:	4b8e      	ldr	r3, [pc, #568]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e88:	498a      	ldr	r1, [pc, #552]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e9c:	4b85      	ldr	r3, [pc, #532]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eaa:	4982      	ldr	r1, [pc, #520]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ebe:	4b7d      	ldr	r3, [pc, #500]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ecc:	4979      	ldr	r1, [pc, #484]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ee0:	4b74      	ldr	r3, [pc, #464]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee6:	f023 0203 	bic.w	r2, r3, #3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eee:	4971      	ldr	r1, [pc, #452]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f02:	4b6c      	ldr	r3, [pc, #432]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f08:	f023 020c 	bic.w	r2, r3, #12
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f10:	4968      	ldr	r1, [pc, #416]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f24:	4b63      	ldr	r3, [pc, #396]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f32:	4960      	ldr	r1, [pc, #384]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f46:	4b5b      	ldr	r3, [pc, #364]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f54:	4957      	ldr	r1, [pc, #348]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00a      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f68:	4b52      	ldr	r3, [pc, #328]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f76:	494f      	ldr	r1, [pc, #316]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f8a:	4b4a      	ldr	r3, [pc, #296]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f90:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f98:	4946      	ldr	r1, [pc, #280]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003fac:	4b41      	ldr	r3, [pc, #260]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fba:	493e      	ldr	r1, [pc, #248]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003fce:	4b39      	ldr	r3, [pc, #228]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fdc:	4935      	ldr	r1, [pc, #212]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ff0:	4b30      	ldr	r3, [pc, #192]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ffe:	492d      	ldr	r1, [pc, #180]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d011      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004012:	4b28      	ldr	r3, [pc, #160]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004018:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004020:	4924      	ldr	r1, [pc, #144]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004022:	4313      	orrs	r3, r2
 8004024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800402c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004030:	d101      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004032:	2301      	movs	r3, #1
 8004034:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004042:	2301      	movs	r3, #1
 8004044:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004052:	4b18      	ldr	r3, [pc, #96]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004058:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004060:	4914      	ldr	r1, [pc, #80]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00b      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004074:	4b0f      	ldr	r3, [pc, #60]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004084:	490b      	ldr	r1, [pc, #44]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00f      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004098:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040a8:	4902      	ldr	r1, [pc, #8]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040b0:	e002      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80040b2:	bf00      	nop
 80040b4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00b      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040c4:	4b8a      	ldr	r3, [pc, #552]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d4:	4986      	ldr	r1, [pc, #536]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00b      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80040e8:	4b81      	ldr	r3, [pc, #516]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040f8:	497d      	ldr	r1, [pc, #500]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d006      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 80d6 	beq.w	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004114:	4b76      	ldr	r3, [pc, #472]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a75      	ldr	r2, [pc, #468]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800411a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800411e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004120:	f7fd fe42 	bl	8001da8 <HAL_GetTick>
 8004124:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004126:	e008      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004128:	f7fd fe3e 	bl	8001da8 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b64      	cmp	r3, #100	; 0x64
 8004134:	d901      	bls.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e195      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800413a:	4b6d      	ldr	r3, [pc, #436]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f0      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d021      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004156:	2b00      	cmp	r3, #0
 8004158:	d11d      	bne.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800415a:	4b65      	ldr	r3, [pc, #404]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800415c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004160:	0c1b      	lsrs	r3, r3, #16
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004168:	4b61      	ldr	r3, [pc, #388]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800416a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800416e:	0e1b      	lsrs	r3, r3, #24
 8004170:	f003 030f 	and.w	r3, r3, #15
 8004174:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	019a      	lsls	r2, r3, #6
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	041b      	lsls	r3, r3, #16
 8004180:	431a      	orrs	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	061b      	lsls	r3, r3, #24
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	071b      	lsls	r3, r3, #28
 800418e:	4958      	ldr	r1, [pc, #352]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d004      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x588>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041aa:	d00a      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d02e      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041c0:	d129      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041c2:	4b4b      	ldr	r3, [pc, #300]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041c8:	0c1b      	lsrs	r3, r3, #16
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041d0:	4b47      	ldr	r3, [pc, #284]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041d6:	0f1b      	lsrs	r3, r3, #28
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	019a      	lsls	r2, r3, #6
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	041b      	lsls	r3, r3, #16
 80041e8:	431a      	orrs	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	061b      	lsls	r3, r3, #24
 80041f0:	431a      	orrs	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	071b      	lsls	r3, r3, #28
 80041f6:	493e      	ldr	r1, [pc, #248]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80041fe:	4b3c      	ldr	r3, [pc, #240]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004204:	f023 021f 	bic.w	r2, r3, #31
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	3b01      	subs	r3, #1
 800420e:	4938      	ldr	r1, [pc, #224]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d01d      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004222:	4b33      	ldr	r3, [pc, #204]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004228:	0e1b      	lsrs	r3, r3, #24
 800422a:	f003 030f 	and.w	r3, r3, #15
 800422e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004230:	4b2f      	ldr	r3, [pc, #188]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004236:	0f1b      	lsrs	r3, r3, #28
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	019a      	lsls	r2, r3, #6
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	041b      	lsls	r3, r3, #16
 800424a:	431a      	orrs	r2, r3
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	061b      	lsls	r3, r3, #24
 8004250:	431a      	orrs	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	071b      	lsls	r3, r3, #28
 8004256:	4926      	ldr	r1, [pc, #152]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d011      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	019a      	lsls	r2, r3, #6
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	041b      	lsls	r3, r3, #16
 8004276:	431a      	orrs	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	061b      	lsls	r3, r3, #24
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	071b      	lsls	r3, r3, #28
 8004286:	491a      	ldr	r1, [pc, #104]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004288:	4313      	orrs	r3, r2
 800428a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800428e:	4b18      	ldr	r3, [pc, #96]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a17      	ldr	r2, [pc, #92]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004294:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004298:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800429a:	f7fd fd85 	bl	8001da8 <HAL_GetTick>
 800429e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042a0:	e008      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042a2:	f7fd fd81 	bl	8001da8 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b64      	cmp	r3, #100	; 0x64
 80042ae:	d901      	bls.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e0d8      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042b4:	4b0e      	ldr	r3, [pc, #56]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0f0      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	f040 80ce 	bne.w	8004464 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80042c8:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a08      	ldr	r2, [pc, #32]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d4:	f7fd fd68 	bl	8001da8 <HAL_GetTick>
 80042d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042da:	e00b      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042dc:	f7fd fd64 	bl	8001da8 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b64      	cmp	r3, #100	; 0x64
 80042e8:	d904      	bls.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e0bb      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80042ee:	bf00      	nop
 80042f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042f4:	4b5e      	ldr	r3, [pc, #376]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004300:	d0ec      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004312:	2b00      	cmp	r3, #0
 8004314:	d009      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800431e:	2b00      	cmp	r3, #0
 8004320:	d02e      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	2b00      	cmp	r3, #0
 8004328:	d12a      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800432a:	4b51      	ldr	r3, [pc, #324]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800432c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004330:	0c1b      	lsrs	r3, r3, #16
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004338:	4b4d      	ldr	r3, [pc, #308]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800433a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433e:	0f1b      	lsrs	r3, r3, #28
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	019a      	lsls	r2, r3, #6
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	041b      	lsls	r3, r3, #16
 8004350:	431a      	orrs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	061b      	lsls	r3, r3, #24
 8004358:	431a      	orrs	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	071b      	lsls	r3, r3, #28
 800435e:	4944      	ldr	r1, [pc, #272]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004366:	4b42      	ldr	r3, [pc, #264]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800436c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	3b01      	subs	r3, #1
 8004376:	021b      	lsls	r3, r3, #8
 8004378:	493d      	ldr	r1, [pc, #244]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800437a:	4313      	orrs	r3, r2
 800437c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d022      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004390:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004394:	d11d      	bne.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004396:	4b36      	ldr	r3, [pc, #216]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439c:	0e1b      	lsrs	r3, r3, #24
 800439e:	f003 030f 	and.w	r3, r3, #15
 80043a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043a4:	4b32      	ldr	r3, [pc, #200]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043aa:	0f1b      	lsrs	r3, r3, #28
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	019a      	lsls	r2, r3, #6
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	041b      	lsls	r3, r3, #16
 80043be:	431a      	orrs	r2, r3
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	061b      	lsls	r3, r3, #24
 80043c4:	431a      	orrs	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	071b      	lsls	r3, r3, #28
 80043ca:	4929      	ldr	r1, [pc, #164]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d028      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043de:	4b24      	ldr	r3, [pc, #144]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e4:	0e1b      	lsrs	r3, r3, #24
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043ec:	4b20      	ldr	r3, [pc, #128]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f2:	0c1b      	lsrs	r3, r3, #16
 80043f4:	f003 0303 	and.w	r3, r3, #3
 80043f8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	019a      	lsls	r2, r3, #6
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	041b      	lsls	r3, r3, #16
 8004404:	431a      	orrs	r2, r3
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	061b      	lsls	r3, r3, #24
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	071b      	lsls	r3, r3, #28
 8004412:	4917      	ldr	r1, [pc, #92]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004414:	4313      	orrs	r3, r2
 8004416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800441a:	4b15      	ldr	r3, [pc, #84]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800441c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004420:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	4911      	ldr	r1, [pc, #68]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800442a:	4313      	orrs	r3, r2
 800442c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004430:	4b0f      	ldr	r3, [pc, #60]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a0e      	ldr	r2, [pc, #56]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800443c:	f7fd fcb4 	bl	8001da8 <HAL_GetTick>
 8004440:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004444:	f7fd fcb0 	bl	8001da8 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b64      	cmp	r3, #100	; 0x64
 8004450:	d901      	bls.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e007      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004456:	4b06      	ldr	r3, [pc, #24]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800445e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004462:	d1ef      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3720      	adds	r7, #32
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40023800 	.word	0x40023800

08004474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e049      	b.n	800451a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d106      	bne.n	80044a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7fd f9b2 	bl	8001804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3304      	adds	r3, #4
 80044b0:	4619      	mov	r1, r3
 80044b2:	4610      	mov	r0, r2
 80044b4:	f000 fd30 	bl	8004f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
	...

08004524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b01      	cmp	r3, #1
 8004536:	d001      	beq.n	800453c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e054      	b.n	80045e6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68da      	ldr	r2, [r3, #12]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a26      	ldr	r2, [pc, #152]	; (80045f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d022      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004566:	d01d      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a22      	ldr	r2, [pc, #136]	; (80045f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d018      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a21      	ldr	r2, [pc, #132]	; (80045fc <HAL_TIM_Base_Start_IT+0xd8>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d013      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a1f      	ldr	r2, [pc, #124]	; (8004600 <HAL_TIM_Base_Start_IT+0xdc>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d00e      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a1e      	ldr	r2, [pc, #120]	; (8004604 <HAL_TIM_Base_Start_IT+0xe0>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d009      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a1c      	ldr	r2, [pc, #112]	; (8004608 <HAL_TIM_Base_Start_IT+0xe4>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d004      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a1b      	ldr	r2, [pc, #108]	; (800460c <HAL_TIM_Base_Start_IT+0xe8>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d115      	bne.n	80045d0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	4b19      	ldr	r3, [pc, #100]	; (8004610 <HAL_TIM_Base_Start_IT+0xec>)
 80045ac:	4013      	ands	r3, r2
 80045ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2b06      	cmp	r3, #6
 80045b4:	d015      	beq.n	80045e2 <HAL_TIM_Base_Start_IT+0xbe>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045bc:	d011      	beq.n	80045e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f042 0201 	orr.w	r2, r2, #1
 80045cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ce:	e008      	b.n	80045e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0201 	orr.w	r2, r2, #1
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	e000      	b.n	80045e4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40010000 	.word	0x40010000
 80045f8:	40000400 	.word	0x40000400
 80045fc:	40000800 	.word	0x40000800
 8004600:	40000c00 	.word	0x40000c00
 8004604:	40010400 	.word	0x40010400
 8004608:	40014000 	.word	0x40014000
 800460c:	40001800 	.word	0x40001800
 8004610:	00010007 	.word	0x00010007

08004614 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e049      	b.n	80046ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d106      	bne.n	8004640 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f841 	bl	80046c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3304      	adds	r3, #4
 8004650:	4619      	mov	r1, r3
 8004652:	4610      	mov	r0, r2
 8004654:	f000 fc60 	bl	8004f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
	...

080046d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d109      	bne.n	80046fc <HAL_TIM_PWM_Start+0x24>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	bf14      	ite	ne
 80046f4:	2301      	movne	r3, #1
 80046f6:	2300      	moveq	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	e03c      	b.n	8004776 <HAL_TIM_PWM_Start+0x9e>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d109      	bne.n	8004716 <HAL_TIM_PWM_Start+0x3e>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b01      	cmp	r3, #1
 800470c:	bf14      	ite	ne
 800470e:	2301      	movne	r3, #1
 8004710:	2300      	moveq	r3, #0
 8004712:	b2db      	uxtb	r3, r3
 8004714:	e02f      	b.n	8004776 <HAL_TIM_PWM_Start+0x9e>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b08      	cmp	r3, #8
 800471a:	d109      	bne.n	8004730 <HAL_TIM_PWM_Start+0x58>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b01      	cmp	r3, #1
 8004726:	bf14      	ite	ne
 8004728:	2301      	movne	r3, #1
 800472a:	2300      	moveq	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	e022      	b.n	8004776 <HAL_TIM_PWM_Start+0x9e>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	2b0c      	cmp	r3, #12
 8004734:	d109      	bne.n	800474a <HAL_TIM_PWM_Start+0x72>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b01      	cmp	r3, #1
 8004740:	bf14      	ite	ne
 8004742:	2301      	movne	r3, #1
 8004744:	2300      	moveq	r3, #0
 8004746:	b2db      	uxtb	r3, r3
 8004748:	e015      	b.n	8004776 <HAL_TIM_PWM_Start+0x9e>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b10      	cmp	r3, #16
 800474e:	d109      	bne.n	8004764 <HAL_TIM_PWM_Start+0x8c>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b01      	cmp	r3, #1
 800475a:	bf14      	ite	ne
 800475c:	2301      	movne	r3, #1
 800475e:	2300      	moveq	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	e008      	b.n	8004776 <HAL_TIM_PWM_Start+0x9e>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	bf14      	ite	ne
 8004770:	2301      	movne	r3, #1
 8004772:	2300      	moveq	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e092      	b.n	80048a4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d104      	bne.n	800478e <HAL_TIM_PWM_Start+0xb6>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800478c:	e023      	b.n	80047d6 <HAL_TIM_PWM_Start+0xfe>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b04      	cmp	r3, #4
 8004792:	d104      	bne.n	800479e <HAL_TIM_PWM_Start+0xc6>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800479c:	e01b      	b.n	80047d6 <HAL_TIM_PWM_Start+0xfe>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d104      	bne.n	80047ae <HAL_TIM_PWM_Start+0xd6>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047ac:	e013      	b.n	80047d6 <HAL_TIM_PWM_Start+0xfe>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b0c      	cmp	r3, #12
 80047b2:	d104      	bne.n	80047be <HAL_TIM_PWM_Start+0xe6>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047bc:	e00b      	b.n	80047d6 <HAL_TIM_PWM_Start+0xfe>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d104      	bne.n	80047ce <HAL_TIM_PWM_Start+0xf6>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047cc:	e003      	b.n	80047d6 <HAL_TIM_PWM_Start+0xfe>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2202      	movs	r2, #2
 80047d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2201      	movs	r2, #1
 80047dc:	6839      	ldr	r1, [r7, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 ff32 	bl	8005648 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a30      	ldr	r2, [pc, #192]	; (80048ac <HAL_TIM_PWM_Start+0x1d4>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d004      	beq.n	80047f8 <HAL_TIM_PWM_Start+0x120>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a2f      	ldr	r2, [pc, #188]	; (80048b0 <HAL_TIM_PWM_Start+0x1d8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d101      	bne.n	80047fc <HAL_TIM_PWM_Start+0x124>
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <HAL_TIM_PWM_Start+0x126>
 80047fc:	2300      	movs	r3, #0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d007      	beq.n	8004812 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004810:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a25      	ldr	r2, [pc, #148]	; (80048ac <HAL_TIM_PWM_Start+0x1d4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d022      	beq.n	8004862 <HAL_TIM_PWM_Start+0x18a>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004824:	d01d      	beq.n	8004862 <HAL_TIM_PWM_Start+0x18a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a22      	ldr	r2, [pc, #136]	; (80048b4 <HAL_TIM_PWM_Start+0x1dc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d018      	beq.n	8004862 <HAL_TIM_PWM_Start+0x18a>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a20      	ldr	r2, [pc, #128]	; (80048b8 <HAL_TIM_PWM_Start+0x1e0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d013      	beq.n	8004862 <HAL_TIM_PWM_Start+0x18a>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a1f      	ldr	r2, [pc, #124]	; (80048bc <HAL_TIM_PWM_Start+0x1e4>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d00e      	beq.n	8004862 <HAL_TIM_PWM_Start+0x18a>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a19      	ldr	r2, [pc, #100]	; (80048b0 <HAL_TIM_PWM_Start+0x1d8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d009      	beq.n	8004862 <HAL_TIM_PWM_Start+0x18a>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a1b      	ldr	r2, [pc, #108]	; (80048c0 <HAL_TIM_PWM_Start+0x1e8>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d004      	beq.n	8004862 <HAL_TIM_PWM_Start+0x18a>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a19      	ldr	r2, [pc, #100]	; (80048c4 <HAL_TIM_PWM_Start+0x1ec>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d115      	bne.n	800488e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	4b17      	ldr	r3, [pc, #92]	; (80048c8 <HAL_TIM_PWM_Start+0x1f0>)
 800486a:	4013      	ands	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2b06      	cmp	r3, #6
 8004872:	d015      	beq.n	80048a0 <HAL_TIM_PWM_Start+0x1c8>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800487a:	d011      	beq.n	80048a0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800488c:	e008      	b.n	80048a0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f042 0201 	orr.w	r2, r2, #1
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	e000      	b.n	80048a2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40010000 	.word	0x40010000
 80048b0:	40010400 	.word	0x40010400
 80048b4:	40000400 	.word	0x40000400
 80048b8:	40000800 	.word	0x40000800
 80048bc:	40000c00 	.word	0x40000c00
 80048c0:	40014000 	.word	0x40014000
 80048c4:	40001800 	.word	0x40001800
 80048c8:	00010007 	.word	0x00010007

080048cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d122      	bne.n	8004928 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d11b      	bne.n	8004928 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0202 	mvn.w	r2, #2
 80048f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fae4 	bl	8004edc <HAL_TIM_IC_CaptureCallback>
 8004914:	e005      	b.n	8004922 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fad6 	bl	8004ec8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 fae7 	bl	8004ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	2b04      	cmp	r3, #4
 8004934:	d122      	bne.n	800497c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b04      	cmp	r3, #4
 8004942:	d11b      	bne.n	800497c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0204 	mvn.w	r2, #4
 800494c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2202      	movs	r2, #2
 8004952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 faba 	bl	8004edc <HAL_TIM_IC_CaptureCallback>
 8004968:	e005      	b.n	8004976 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 faac 	bl	8004ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fabd 	bl	8004ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b08      	cmp	r3, #8
 8004988:	d122      	bne.n	80049d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f003 0308 	and.w	r3, r3, #8
 8004994:	2b08      	cmp	r3, #8
 8004996:	d11b      	bne.n	80049d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f06f 0208 	mvn.w	r2, #8
 80049a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2204      	movs	r2, #4
 80049a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fa90 	bl	8004edc <HAL_TIM_IC_CaptureCallback>
 80049bc:	e005      	b.n	80049ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fa82 	bl	8004ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 fa93 	bl	8004ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f003 0310 	and.w	r3, r3, #16
 80049da:	2b10      	cmp	r3, #16
 80049dc:	d122      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f003 0310 	and.w	r3, r3, #16
 80049e8:	2b10      	cmp	r3, #16
 80049ea:	d11b      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f06f 0210 	mvn.w	r2, #16
 80049f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2208      	movs	r2, #8
 80049fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fa66 	bl	8004edc <HAL_TIM_IC_CaptureCallback>
 8004a10:	e005      	b.n	8004a1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fa58 	bl	8004ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 fa69 	bl	8004ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d10e      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d107      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0201 	mvn.w	r2, #1
 8004a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7fc fe10 	bl	8001670 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5a:	2b80      	cmp	r3, #128	; 0x80
 8004a5c:	d10e      	bne.n	8004a7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a68:	2b80      	cmp	r3, #128	; 0x80
 8004a6a:	d107      	bne.n	8004a7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 ff22 	bl	80058c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a8a:	d10e      	bne.n	8004aaa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a96:	2b80      	cmp	r3, #128	; 0x80
 8004a98:	d107      	bne.n	8004aaa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 ff15 	bl	80058d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab4:	2b40      	cmp	r3, #64	; 0x40
 8004ab6:	d10e      	bne.n	8004ad6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac2:	2b40      	cmp	r3, #64	; 0x40
 8004ac4:	d107      	bne.n	8004ad6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 fa17 	bl	8004f04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	2b20      	cmp	r3, #32
 8004ae2:	d10e      	bne.n	8004b02 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f003 0320 	and.w	r3, r3, #32
 8004aee:	2b20      	cmp	r3, #32
 8004af0:	d107      	bne.n	8004b02 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f06f 0220 	mvn.w	r2, #32
 8004afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 fed5 	bl	80058ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b02:	bf00      	nop
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
	...

08004b0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d101      	bne.n	8004b2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b26:	2302      	movs	r3, #2
 8004b28:	e0ff      	b.n	8004d2a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b14      	cmp	r3, #20
 8004b36:	f200 80f0 	bhi.w	8004d1a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b3a:	a201      	add	r2, pc, #4	; (adr r2, 8004b40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b40:	08004b95 	.word	0x08004b95
 8004b44:	08004d1b 	.word	0x08004d1b
 8004b48:	08004d1b 	.word	0x08004d1b
 8004b4c:	08004d1b 	.word	0x08004d1b
 8004b50:	08004bd5 	.word	0x08004bd5
 8004b54:	08004d1b 	.word	0x08004d1b
 8004b58:	08004d1b 	.word	0x08004d1b
 8004b5c:	08004d1b 	.word	0x08004d1b
 8004b60:	08004c17 	.word	0x08004c17
 8004b64:	08004d1b 	.word	0x08004d1b
 8004b68:	08004d1b 	.word	0x08004d1b
 8004b6c:	08004d1b 	.word	0x08004d1b
 8004b70:	08004c57 	.word	0x08004c57
 8004b74:	08004d1b 	.word	0x08004d1b
 8004b78:	08004d1b 	.word	0x08004d1b
 8004b7c:	08004d1b 	.word	0x08004d1b
 8004b80:	08004c99 	.word	0x08004c99
 8004b84:	08004d1b 	.word	0x08004d1b
 8004b88:	08004d1b 	.word	0x08004d1b
 8004b8c:	08004d1b 	.word	0x08004d1b
 8004b90:	08004cd9 	.word	0x08004cd9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68b9      	ldr	r1, [r7, #8]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 fa5c 	bl	8005058 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699a      	ldr	r2, [r3, #24]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0208 	orr.w	r2, r2, #8
 8004bae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	699a      	ldr	r2, [r3, #24]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0204 	bic.w	r2, r2, #4
 8004bbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6999      	ldr	r1, [r3, #24]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	691a      	ldr	r2, [r3, #16]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	619a      	str	r2, [r3, #24]
      break;
 8004bd2:	e0a5      	b.n	8004d20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68b9      	ldr	r1, [r7, #8]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 faae 	bl	800513c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699a      	ldr	r2, [r3, #24]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699a      	ldr	r2, [r3, #24]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6999      	ldr	r1, [r3, #24]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	021a      	lsls	r2, r3, #8
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	619a      	str	r2, [r3, #24]
      break;
 8004c14:	e084      	b.n	8004d20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68b9      	ldr	r1, [r7, #8]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 fb05 	bl	800522c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69da      	ldr	r2, [r3, #28]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f042 0208 	orr.w	r2, r2, #8
 8004c30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	69da      	ldr	r2, [r3, #28]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0204 	bic.w	r2, r2, #4
 8004c40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	69d9      	ldr	r1, [r3, #28]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	691a      	ldr	r2, [r3, #16]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	61da      	str	r2, [r3, #28]
      break;
 8004c54:	e064      	b.n	8004d20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68b9      	ldr	r1, [r7, #8]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f000 fb5b 	bl	8005318 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	69da      	ldr	r2, [r3, #28]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	69da      	ldr	r2, [r3, #28]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69d9      	ldr	r1, [r3, #28]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	021a      	lsls	r2, r3, #8
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	61da      	str	r2, [r3, #28]
      break;
 8004c96:	e043      	b.n	8004d20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68b9      	ldr	r1, [r7, #8]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 fb92 	bl	80053c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0208 	orr.w	r2, r2, #8
 8004cb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0204 	bic.w	r2, r2, #4
 8004cc2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	691a      	ldr	r2, [r3, #16]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004cd6:	e023      	b.n	8004d20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68b9      	ldr	r1, [r7, #8]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fbc4 	bl	800546c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cf2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	021a      	lsls	r2, r3, #8
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d18:	e002      	b.n	8004d20 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d1e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d28:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop

08004d34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d101      	bne.n	8004d50 <HAL_TIM_ConfigClockSource+0x1c>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e0b4      	b.n	8004eba <HAL_TIM_ConfigClockSource+0x186>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	4b56      	ldr	r3, [pc, #344]	; (8004ec4 <HAL_TIM_ConfigClockSource+0x190>)
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d88:	d03e      	beq.n	8004e08 <HAL_TIM_ConfigClockSource+0xd4>
 8004d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d8e:	f200 8087 	bhi.w	8004ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8004d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d96:	f000 8086 	beq.w	8004ea6 <HAL_TIM_ConfigClockSource+0x172>
 8004d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d9e:	d87f      	bhi.n	8004ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8004da0:	2b70      	cmp	r3, #112	; 0x70
 8004da2:	d01a      	beq.n	8004dda <HAL_TIM_ConfigClockSource+0xa6>
 8004da4:	2b70      	cmp	r3, #112	; 0x70
 8004da6:	d87b      	bhi.n	8004ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8004da8:	2b60      	cmp	r3, #96	; 0x60
 8004daa:	d050      	beq.n	8004e4e <HAL_TIM_ConfigClockSource+0x11a>
 8004dac:	2b60      	cmp	r3, #96	; 0x60
 8004dae:	d877      	bhi.n	8004ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8004db0:	2b50      	cmp	r3, #80	; 0x50
 8004db2:	d03c      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0xfa>
 8004db4:	2b50      	cmp	r3, #80	; 0x50
 8004db6:	d873      	bhi.n	8004ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8004db8:	2b40      	cmp	r3, #64	; 0x40
 8004dba:	d058      	beq.n	8004e6e <HAL_TIM_ConfigClockSource+0x13a>
 8004dbc:	2b40      	cmp	r3, #64	; 0x40
 8004dbe:	d86f      	bhi.n	8004ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8004dc0:	2b30      	cmp	r3, #48	; 0x30
 8004dc2:	d064      	beq.n	8004e8e <HAL_TIM_ConfigClockSource+0x15a>
 8004dc4:	2b30      	cmp	r3, #48	; 0x30
 8004dc6:	d86b      	bhi.n	8004ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8004dc8:	2b20      	cmp	r3, #32
 8004dca:	d060      	beq.n	8004e8e <HAL_TIM_ConfigClockSource+0x15a>
 8004dcc:	2b20      	cmp	r3, #32
 8004dce:	d867      	bhi.n	8004ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d05c      	beq.n	8004e8e <HAL_TIM_ConfigClockSource+0x15a>
 8004dd4:	2b10      	cmp	r3, #16
 8004dd6:	d05a      	beq.n	8004e8e <HAL_TIM_ConfigClockSource+0x15a>
 8004dd8:	e062      	b.n	8004ea0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6818      	ldr	r0, [r3, #0]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	6899      	ldr	r1, [r3, #8]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f000 fc0d 	bl	8005608 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004dfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	609a      	str	r2, [r3, #8]
      break;
 8004e06:	e04f      	b.n	8004ea8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6818      	ldr	r0, [r3, #0]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	6899      	ldr	r1, [r3, #8]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f000 fbf6 	bl	8005608 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689a      	ldr	r2, [r3, #8]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e2a:	609a      	str	r2, [r3, #8]
      break;
 8004e2c:	e03c      	b.n	8004ea8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6818      	ldr	r0, [r3, #0]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	6859      	ldr	r1, [r3, #4]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f000 fb6a 	bl	8005514 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2150      	movs	r1, #80	; 0x50
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 fbc3 	bl	80055d2 <TIM_ITRx_SetConfig>
      break;
 8004e4c:	e02c      	b.n	8004ea8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6818      	ldr	r0, [r3, #0]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	6859      	ldr	r1, [r3, #4]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	f000 fb89 	bl	8005572 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2160      	movs	r1, #96	; 0x60
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fbb3 	bl	80055d2 <TIM_ITRx_SetConfig>
      break;
 8004e6c:	e01c      	b.n	8004ea8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6818      	ldr	r0, [r3, #0]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	6859      	ldr	r1, [r3, #4]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	f000 fb4a 	bl	8005514 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2140      	movs	r1, #64	; 0x40
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 fba3 	bl	80055d2 <TIM_ITRx_SetConfig>
      break;
 8004e8c:	e00c      	b.n	8004ea8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4619      	mov	r1, r3
 8004e98:	4610      	mov	r0, r2
 8004e9a:	f000 fb9a 	bl	80055d2 <TIM_ITRx_SetConfig>
      break;
 8004e9e:	e003      	b.n	8004ea8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ea4:	e000      	b.n	8004ea8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ea6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	fffeff88 	.word	0xfffeff88

08004ec8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a40      	ldr	r2, [pc, #256]	; (800502c <TIM_Base_SetConfig+0x114>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d013      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f36:	d00f      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a3d      	ldr	r2, [pc, #244]	; (8005030 <TIM_Base_SetConfig+0x118>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00b      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a3c      	ldr	r2, [pc, #240]	; (8005034 <TIM_Base_SetConfig+0x11c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d007      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a3b      	ldr	r2, [pc, #236]	; (8005038 <TIM_Base_SetConfig+0x120>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d003      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a3a      	ldr	r2, [pc, #232]	; (800503c <TIM_Base_SetConfig+0x124>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d108      	bne.n	8004f6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a2f      	ldr	r2, [pc, #188]	; (800502c <TIM_Base_SetConfig+0x114>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d02b      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f78:	d027      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a2c      	ldr	r2, [pc, #176]	; (8005030 <TIM_Base_SetConfig+0x118>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d023      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a2b      	ldr	r2, [pc, #172]	; (8005034 <TIM_Base_SetConfig+0x11c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d01f      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a2a      	ldr	r2, [pc, #168]	; (8005038 <TIM_Base_SetConfig+0x120>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d01b      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a29      	ldr	r2, [pc, #164]	; (800503c <TIM_Base_SetConfig+0x124>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d017      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a28      	ldr	r2, [pc, #160]	; (8005040 <TIM_Base_SetConfig+0x128>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d013      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a27      	ldr	r2, [pc, #156]	; (8005044 <TIM_Base_SetConfig+0x12c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00f      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a26      	ldr	r2, [pc, #152]	; (8005048 <TIM_Base_SetConfig+0x130>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00b      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a25      	ldr	r2, [pc, #148]	; (800504c <TIM_Base_SetConfig+0x134>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d007      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a24      	ldr	r2, [pc, #144]	; (8005050 <TIM_Base_SetConfig+0x138>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d003      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a23      	ldr	r2, [pc, #140]	; (8005054 <TIM_Base_SetConfig+0x13c>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d108      	bne.n	8004fdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a0a      	ldr	r2, [pc, #40]	; (800502c <TIM_Base_SetConfig+0x114>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d003      	beq.n	8005010 <TIM_Base_SetConfig+0xf8>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a0c      	ldr	r2, [pc, #48]	; (800503c <TIM_Base_SetConfig+0x124>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d103      	bne.n	8005018 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	691a      	ldr	r2, [r3, #16]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	615a      	str	r2, [r3, #20]
}
 800501e:	bf00      	nop
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40010000 	.word	0x40010000
 8005030:	40000400 	.word	0x40000400
 8005034:	40000800 	.word	0x40000800
 8005038:	40000c00 	.word	0x40000c00
 800503c:	40010400 	.word	0x40010400
 8005040:	40014000 	.word	0x40014000
 8005044:	40014400 	.word	0x40014400
 8005048:	40014800 	.word	0x40014800
 800504c:	40001800 	.word	0x40001800
 8005050:	40001c00 	.word	0x40001c00
 8005054:	40002000 	.word	0x40002000

08005058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	f023 0201 	bic.w	r2, r3, #1
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	4b2b      	ldr	r3, [pc, #172]	; (8005130 <TIM_OC1_SetConfig+0xd8>)
 8005084:	4013      	ands	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0303 	bic.w	r3, r3, #3
 800508e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f023 0302 	bic.w	r3, r3, #2
 80050a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a21      	ldr	r2, [pc, #132]	; (8005134 <TIM_OC1_SetConfig+0xdc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d003      	beq.n	80050bc <TIM_OC1_SetConfig+0x64>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a20      	ldr	r2, [pc, #128]	; (8005138 <TIM_OC1_SetConfig+0xe0>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d10c      	bne.n	80050d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f023 0308 	bic.w	r3, r3, #8
 80050c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f023 0304 	bic.w	r3, r3, #4
 80050d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a16      	ldr	r2, [pc, #88]	; (8005134 <TIM_OC1_SetConfig+0xdc>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d003      	beq.n	80050e6 <TIM_OC1_SetConfig+0x8e>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a15      	ldr	r2, [pc, #84]	; (8005138 <TIM_OC1_SetConfig+0xe0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d111      	bne.n	800510a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	4313      	orrs	r3, r2
 8005108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	621a      	str	r2, [r3, #32]
}
 8005124:	bf00      	nop
 8005126:	371c      	adds	r7, #28
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	fffeff8f 	.word	0xfffeff8f
 8005134:	40010000 	.word	0x40010000
 8005138:	40010400 	.word	0x40010400

0800513c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	f023 0210 	bic.w	r2, r3, #16
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	4b2e      	ldr	r3, [pc, #184]	; (8005220 <TIM_OC2_SetConfig+0xe4>)
 8005168:	4013      	ands	r3, r2
 800516a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	021b      	lsls	r3, r3, #8
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	4313      	orrs	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f023 0320 	bic.w	r3, r3, #32
 8005186:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	011b      	lsls	r3, r3, #4
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	4313      	orrs	r3, r2
 8005192:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a23      	ldr	r2, [pc, #140]	; (8005224 <TIM_OC2_SetConfig+0xe8>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d003      	beq.n	80051a4 <TIM_OC2_SetConfig+0x68>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a22      	ldr	r2, [pc, #136]	; (8005228 <TIM_OC2_SetConfig+0xec>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d10d      	bne.n	80051c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a18      	ldr	r2, [pc, #96]	; (8005224 <TIM_OC2_SetConfig+0xe8>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d003      	beq.n	80051d0 <TIM_OC2_SetConfig+0x94>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a17      	ldr	r2, [pc, #92]	; (8005228 <TIM_OC2_SetConfig+0xec>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d113      	bne.n	80051f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	621a      	str	r2, [r3, #32]
}
 8005212:	bf00      	nop
 8005214:	371c      	adds	r7, #28
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	feff8fff 	.word	0xfeff8fff
 8005224:	40010000 	.word	0x40010000
 8005228:	40010400 	.word	0x40010400

0800522c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	4b2d      	ldr	r3, [pc, #180]	; (800530c <TIM_OC3_SetConfig+0xe0>)
 8005258:	4013      	ands	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f023 0303 	bic.w	r3, r3, #3
 8005262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	4313      	orrs	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	021b      	lsls	r3, r3, #8
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	4313      	orrs	r3, r2
 8005280:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a22      	ldr	r2, [pc, #136]	; (8005310 <TIM_OC3_SetConfig+0xe4>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d003      	beq.n	8005292 <TIM_OC3_SetConfig+0x66>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a21      	ldr	r2, [pc, #132]	; (8005314 <TIM_OC3_SetConfig+0xe8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d10d      	bne.n	80052ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005298:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	021b      	lsls	r3, r3, #8
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a17      	ldr	r2, [pc, #92]	; (8005310 <TIM_OC3_SetConfig+0xe4>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d003      	beq.n	80052be <TIM_OC3_SetConfig+0x92>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a16      	ldr	r2, [pc, #88]	; (8005314 <TIM_OC3_SetConfig+0xe8>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d113      	bne.n	80052e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	621a      	str	r2, [r3, #32]
}
 8005300:	bf00      	nop
 8005302:	371c      	adds	r7, #28
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	fffeff8f 	.word	0xfffeff8f
 8005310:	40010000 	.word	0x40010000
 8005314:	40010400 	.word	0x40010400

08005318 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	4b1e      	ldr	r3, [pc, #120]	; (80053bc <TIM_OC4_SetConfig+0xa4>)
 8005344:	4013      	ands	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800534e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	021b      	lsls	r3, r3, #8
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4313      	orrs	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005362:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	031b      	lsls	r3, r3, #12
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	4313      	orrs	r3, r2
 800536e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a13      	ldr	r2, [pc, #76]	; (80053c0 <TIM_OC4_SetConfig+0xa8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d003      	beq.n	8005380 <TIM_OC4_SetConfig+0x68>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a12      	ldr	r2, [pc, #72]	; (80053c4 <TIM_OC4_SetConfig+0xac>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d109      	bne.n	8005394 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005386:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	019b      	lsls	r3, r3, #6
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	4313      	orrs	r3, r2
 8005392:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	621a      	str	r2, [r3, #32]
}
 80053ae:	bf00      	nop
 80053b0:	371c      	adds	r7, #28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	feff8fff 	.word	0xfeff8fff
 80053c0:	40010000 	.word	0x40010000
 80053c4:	40010400 	.word	0x40010400

080053c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4b1b      	ldr	r3, [pc, #108]	; (8005460 <TIM_OC5_SetConfig+0x98>)
 80053f4:	4013      	ands	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	4313      	orrs	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005408:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	041b      	lsls	r3, r3, #16
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	4313      	orrs	r3, r2
 8005414:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a12      	ldr	r2, [pc, #72]	; (8005464 <TIM_OC5_SetConfig+0x9c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d003      	beq.n	8005426 <TIM_OC5_SetConfig+0x5e>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a11      	ldr	r2, [pc, #68]	; (8005468 <TIM_OC5_SetConfig+0xa0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d109      	bne.n	800543a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800542c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	021b      	lsls	r3, r3, #8
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	4313      	orrs	r3, r2
 8005438:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	621a      	str	r2, [r3, #32]
}
 8005454:	bf00      	nop
 8005456:	371c      	adds	r7, #28
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	fffeff8f 	.word	0xfffeff8f
 8005464:	40010000 	.word	0x40010000
 8005468:	40010400 	.word	0x40010400

0800546c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800546c:	b480      	push	{r7}
 800546e:	b087      	sub	sp, #28
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	4b1c      	ldr	r3, [pc, #112]	; (8005508 <TIM_OC6_SetConfig+0x9c>)
 8005498:	4013      	ands	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	021b      	lsls	r3, r3, #8
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	051b      	lsls	r3, r3, #20
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a13      	ldr	r2, [pc, #76]	; (800550c <TIM_OC6_SetConfig+0xa0>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d003      	beq.n	80054cc <TIM_OC6_SetConfig+0x60>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a12      	ldr	r2, [pc, #72]	; (8005510 <TIM_OC6_SetConfig+0xa4>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d109      	bne.n	80054e0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	029b      	lsls	r3, r3, #10
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	4313      	orrs	r3, r2
 80054de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	621a      	str	r2, [r3, #32]
}
 80054fa:	bf00      	nop
 80054fc:	371c      	adds	r7, #28
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	feff8fff 	.word	0xfeff8fff
 800550c:	40010000 	.word	0x40010000
 8005510:	40010400 	.word	0x40010400

08005514 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	f023 0201 	bic.w	r2, r3, #1
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800553e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	4313      	orrs	r3, r2
 8005548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f023 030a 	bic.w	r3, r3, #10
 8005550:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	4313      	orrs	r3, r2
 8005558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	621a      	str	r2, [r3, #32]
}
 8005566:	bf00      	nop
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005572:	b480      	push	{r7}
 8005574:	b087      	sub	sp, #28
 8005576:	af00      	add	r7, sp, #0
 8005578:	60f8      	str	r0, [r7, #12]
 800557a:	60b9      	str	r1, [r7, #8]
 800557c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	f023 0210 	bic.w	r2, r3, #16
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800559c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	031b      	lsls	r3, r3, #12
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	621a      	str	r2, [r3, #32]
}
 80055c6:	bf00      	nop
 80055c8:	371c      	adds	r7, #28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b085      	sub	sp, #20
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
 80055da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	f043 0307 	orr.w	r3, r3, #7
 80055f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	609a      	str	r2, [r3, #8]
}
 80055fc:	bf00      	nop
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
 8005614:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005622:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	021a      	lsls	r2, r3, #8
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	431a      	orrs	r2, r3
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4313      	orrs	r3, r2
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	4313      	orrs	r3, r2
 8005634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	609a      	str	r2, [r3, #8]
}
 800563c:	bf00      	nop
 800563e:	371c      	adds	r7, #28
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f003 031f 	and.w	r3, r3, #31
 800565a:	2201      	movs	r2, #1
 800565c:	fa02 f303 	lsl.w	r3, r2, r3
 8005660:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6a1a      	ldr	r2, [r3, #32]
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	43db      	mvns	r3, r3
 800566a:	401a      	ands	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6a1a      	ldr	r2, [r3, #32]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f003 031f 	and.w	r3, r3, #31
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	fa01 f303 	lsl.w	r3, r1, r3
 8005680:	431a      	orrs	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	621a      	str	r2, [r3, #32]
}
 8005686:	bf00      	nop
 8005688:	371c      	adds	r7, #28
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
	...

08005694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d101      	bne.n	80056ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056a8:	2302      	movs	r3, #2
 80056aa:	e06d      	b.n	8005788 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a30      	ldr	r2, [pc, #192]	; (8005794 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d004      	beq.n	80056e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a2f      	ldr	r2, [pc, #188]	; (8005798 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d108      	bne.n	80056f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80056e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	4313      	orrs	r3, r2
 8005702:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a20      	ldr	r2, [pc, #128]	; (8005794 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d022      	beq.n	800575c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800571e:	d01d      	beq.n	800575c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a1d      	ldr	r2, [pc, #116]	; (800579c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d018      	beq.n	800575c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a1c      	ldr	r2, [pc, #112]	; (80057a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d013      	beq.n	800575c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a1a      	ldr	r2, [pc, #104]	; (80057a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00e      	beq.n	800575c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a15      	ldr	r2, [pc, #84]	; (8005798 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d009      	beq.n	800575c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a16      	ldr	r2, [pc, #88]	; (80057a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d004      	beq.n	800575c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a15      	ldr	r2, [pc, #84]	; (80057ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d10c      	bne.n	8005776 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005762:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	4313      	orrs	r3, r2
 800576c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	40010000 	.word	0x40010000
 8005798:	40010400 	.word	0x40010400
 800579c:	40000400 	.word	0x40000400
 80057a0:	40000800 	.word	0x40000800
 80057a4:	40000c00 	.word	0x40000c00
 80057a8:	40014000 	.word	0x40014000
 80057ac:	40001800 	.word	0x40001800

080057b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057ba:	2300      	movs	r3, #0
 80057bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d101      	bne.n	80057cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057c8:	2302      	movs	r3, #2
 80057ca:	e065      	b.n	8005898 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4313      	orrs	r3, r2
 800580a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	4313      	orrs	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	4313      	orrs	r3, r2
 8005826:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005832:	4313      	orrs	r3, r2
 8005834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	041b      	lsls	r3, r3, #16
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a16      	ldr	r2, [pc, #88]	; (80058a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d004      	beq.n	800585a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a14      	ldr	r2, [pc, #80]	; (80058a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d115      	bne.n	8005886 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	051b      	lsls	r3, r3, #20
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	69db      	ldr	r3, [r3, #28]
 8005874:	4313      	orrs	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	4313      	orrs	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	40010000 	.word	0x40010000
 80058a8:	40010400 	.word	0x40010400

080058ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e040      	b.n	800597c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d106      	bne.n	8005910 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7fb ffec 	bl	80018e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2224      	movs	r2, #36	; 0x24
 8005914:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0201 	bic.w	r2, r2, #1
 8005924:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f8b0 	bl	8005a8c <UART_SetConfig>
 800592c:	4603      	mov	r3, r0
 800592e:	2b01      	cmp	r3, #1
 8005930:	d101      	bne.n	8005936 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e022      	b.n	800597c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	2b00      	cmp	r3, #0
 800593c:	d002      	beq.n	8005944 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fb08 	bl	8005f54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005952:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689a      	ldr	r2, [r3, #8]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005962:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0201 	orr.w	r2, r2, #1
 8005972:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 fb8f 	bl	8006098 <UART_CheckIdleState>
 800597a:	4603      	mov	r3, r0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b08a      	sub	sp, #40	; 0x28
 8005988:	af02      	add	r7, sp, #8
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	603b      	str	r3, [r7, #0]
 8005990:	4613      	mov	r3, r2
 8005992:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005998:	2b20      	cmp	r3, #32
 800599a:	d171      	bne.n	8005a80 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <HAL_UART_Transmit+0x24>
 80059a2:	88fb      	ldrh	r3, [r7, #6]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d101      	bne.n	80059ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e06a      	b.n	8005a82 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2221      	movs	r2, #33	; 0x21
 80059b8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059ba:	f7fc f9f5 	bl	8001da8 <HAL_GetTick>
 80059be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	88fa      	ldrh	r2, [r7, #6]
 80059c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	88fa      	ldrh	r2, [r7, #6]
 80059cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059d8:	d108      	bne.n	80059ec <HAL_UART_Transmit+0x68>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d104      	bne.n	80059ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80059e2:	2300      	movs	r3, #0
 80059e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	61bb      	str	r3, [r7, #24]
 80059ea:	e003      	b.n	80059f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059f0:	2300      	movs	r3, #0
 80059f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80059f4:	e02c      	b.n	8005a50 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2200      	movs	r2, #0
 80059fe:	2180      	movs	r1, #128	; 0x80
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 fb96 	bl	8006132 <UART_WaitOnFlagUntilTimeout>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e038      	b.n	8005a82 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10b      	bne.n	8005a2e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	3302      	adds	r3, #2
 8005a2a:	61bb      	str	r3, [r7, #24]
 8005a2c:	e007      	b.n	8005a3e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	781a      	ldrb	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1cc      	bne.n	80059f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	9300      	str	r3, [sp, #0]
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	2200      	movs	r2, #0
 8005a64:	2140      	movs	r1, #64	; 0x40
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 fb63 	bl	8006132 <UART_WaitOnFlagUntilTimeout>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e005      	b.n	8005a82 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2220      	movs	r2, #32
 8005a7a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	e000      	b.n	8005a82 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005a80:	2302      	movs	r3, #2
  }
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3720      	adds	r7, #32
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
	...

08005a8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b088      	sub	sp, #32
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a94:	2300      	movs	r3, #0
 8005a96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	4ba6      	ldr	r3, [pc, #664]	; (8005d50 <UART_SetConfig+0x2c4>)
 8005ab8:	4013      	ands	r3, r2
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6812      	ldr	r2, [r2, #0]
 8005abe:	6979      	ldr	r1, [r7, #20]
 8005ac0:	430b      	orrs	r3, r1
 8005ac2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68da      	ldr	r2, [r3, #12]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a94      	ldr	r2, [pc, #592]	; (8005d54 <UART_SetConfig+0x2c8>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d120      	bne.n	8005b4a <UART_SetConfig+0xbe>
 8005b08:	4b93      	ldr	r3, [pc, #588]	; (8005d58 <UART_SetConfig+0x2cc>)
 8005b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b0e:	f003 0303 	and.w	r3, r3, #3
 8005b12:	2b03      	cmp	r3, #3
 8005b14:	d816      	bhi.n	8005b44 <UART_SetConfig+0xb8>
 8005b16:	a201      	add	r2, pc, #4	; (adr r2, 8005b1c <UART_SetConfig+0x90>)
 8005b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1c:	08005b2d 	.word	0x08005b2d
 8005b20:	08005b39 	.word	0x08005b39
 8005b24:	08005b33 	.word	0x08005b33
 8005b28:	08005b3f 	.word	0x08005b3f
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	77fb      	strb	r3, [r7, #31]
 8005b30:	e150      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005b32:	2302      	movs	r3, #2
 8005b34:	77fb      	strb	r3, [r7, #31]
 8005b36:	e14d      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005b38:	2304      	movs	r3, #4
 8005b3a:	77fb      	strb	r3, [r7, #31]
 8005b3c:	e14a      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005b3e:	2308      	movs	r3, #8
 8005b40:	77fb      	strb	r3, [r7, #31]
 8005b42:	e147      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005b44:	2310      	movs	r3, #16
 8005b46:	77fb      	strb	r3, [r7, #31]
 8005b48:	e144      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a83      	ldr	r2, [pc, #524]	; (8005d5c <UART_SetConfig+0x2d0>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d132      	bne.n	8005bba <UART_SetConfig+0x12e>
 8005b54:	4b80      	ldr	r3, [pc, #512]	; (8005d58 <UART_SetConfig+0x2cc>)
 8005b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b5a:	f003 030c 	and.w	r3, r3, #12
 8005b5e:	2b0c      	cmp	r3, #12
 8005b60:	d828      	bhi.n	8005bb4 <UART_SetConfig+0x128>
 8005b62:	a201      	add	r2, pc, #4	; (adr r2, 8005b68 <UART_SetConfig+0xdc>)
 8005b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b68:	08005b9d 	.word	0x08005b9d
 8005b6c:	08005bb5 	.word	0x08005bb5
 8005b70:	08005bb5 	.word	0x08005bb5
 8005b74:	08005bb5 	.word	0x08005bb5
 8005b78:	08005ba9 	.word	0x08005ba9
 8005b7c:	08005bb5 	.word	0x08005bb5
 8005b80:	08005bb5 	.word	0x08005bb5
 8005b84:	08005bb5 	.word	0x08005bb5
 8005b88:	08005ba3 	.word	0x08005ba3
 8005b8c:	08005bb5 	.word	0x08005bb5
 8005b90:	08005bb5 	.word	0x08005bb5
 8005b94:	08005bb5 	.word	0x08005bb5
 8005b98:	08005baf 	.word	0x08005baf
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	77fb      	strb	r3, [r7, #31]
 8005ba0:	e118      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	77fb      	strb	r3, [r7, #31]
 8005ba6:	e115      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005ba8:	2304      	movs	r3, #4
 8005baa:	77fb      	strb	r3, [r7, #31]
 8005bac:	e112      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005bae:	2308      	movs	r3, #8
 8005bb0:	77fb      	strb	r3, [r7, #31]
 8005bb2:	e10f      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005bb4:	2310      	movs	r3, #16
 8005bb6:	77fb      	strb	r3, [r7, #31]
 8005bb8:	e10c      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a68      	ldr	r2, [pc, #416]	; (8005d60 <UART_SetConfig+0x2d4>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d120      	bne.n	8005c06 <UART_SetConfig+0x17a>
 8005bc4:	4b64      	ldr	r3, [pc, #400]	; (8005d58 <UART_SetConfig+0x2cc>)
 8005bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005bce:	2b30      	cmp	r3, #48	; 0x30
 8005bd0:	d013      	beq.n	8005bfa <UART_SetConfig+0x16e>
 8005bd2:	2b30      	cmp	r3, #48	; 0x30
 8005bd4:	d814      	bhi.n	8005c00 <UART_SetConfig+0x174>
 8005bd6:	2b20      	cmp	r3, #32
 8005bd8:	d009      	beq.n	8005bee <UART_SetConfig+0x162>
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	d810      	bhi.n	8005c00 <UART_SetConfig+0x174>
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d002      	beq.n	8005be8 <UART_SetConfig+0x15c>
 8005be2:	2b10      	cmp	r3, #16
 8005be4:	d006      	beq.n	8005bf4 <UART_SetConfig+0x168>
 8005be6:	e00b      	b.n	8005c00 <UART_SetConfig+0x174>
 8005be8:	2300      	movs	r3, #0
 8005bea:	77fb      	strb	r3, [r7, #31]
 8005bec:	e0f2      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	77fb      	strb	r3, [r7, #31]
 8005bf2:	e0ef      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005bf4:	2304      	movs	r3, #4
 8005bf6:	77fb      	strb	r3, [r7, #31]
 8005bf8:	e0ec      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005bfa:	2308      	movs	r3, #8
 8005bfc:	77fb      	strb	r3, [r7, #31]
 8005bfe:	e0e9      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005c00:	2310      	movs	r3, #16
 8005c02:	77fb      	strb	r3, [r7, #31]
 8005c04:	e0e6      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a56      	ldr	r2, [pc, #344]	; (8005d64 <UART_SetConfig+0x2d8>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d120      	bne.n	8005c52 <UART_SetConfig+0x1c6>
 8005c10:	4b51      	ldr	r3, [pc, #324]	; (8005d58 <UART_SetConfig+0x2cc>)
 8005c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c1a:	2bc0      	cmp	r3, #192	; 0xc0
 8005c1c:	d013      	beq.n	8005c46 <UART_SetConfig+0x1ba>
 8005c1e:	2bc0      	cmp	r3, #192	; 0xc0
 8005c20:	d814      	bhi.n	8005c4c <UART_SetConfig+0x1c0>
 8005c22:	2b80      	cmp	r3, #128	; 0x80
 8005c24:	d009      	beq.n	8005c3a <UART_SetConfig+0x1ae>
 8005c26:	2b80      	cmp	r3, #128	; 0x80
 8005c28:	d810      	bhi.n	8005c4c <UART_SetConfig+0x1c0>
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d002      	beq.n	8005c34 <UART_SetConfig+0x1a8>
 8005c2e:	2b40      	cmp	r3, #64	; 0x40
 8005c30:	d006      	beq.n	8005c40 <UART_SetConfig+0x1b4>
 8005c32:	e00b      	b.n	8005c4c <UART_SetConfig+0x1c0>
 8005c34:	2300      	movs	r3, #0
 8005c36:	77fb      	strb	r3, [r7, #31]
 8005c38:	e0cc      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	77fb      	strb	r3, [r7, #31]
 8005c3e:	e0c9      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005c40:	2304      	movs	r3, #4
 8005c42:	77fb      	strb	r3, [r7, #31]
 8005c44:	e0c6      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005c46:	2308      	movs	r3, #8
 8005c48:	77fb      	strb	r3, [r7, #31]
 8005c4a:	e0c3      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005c4c:	2310      	movs	r3, #16
 8005c4e:	77fb      	strb	r3, [r7, #31]
 8005c50:	e0c0      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a44      	ldr	r2, [pc, #272]	; (8005d68 <UART_SetConfig+0x2dc>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d125      	bne.n	8005ca8 <UART_SetConfig+0x21c>
 8005c5c:	4b3e      	ldr	r3, [pc, #248]	; (8005d58 <UART_SetConfig+0x2cc>)
 8005c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c6a:	d017      	beq.n	8005c9c <UART_SetConfig+0x210>
 8005c6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c70:	d817      	bhi.n	8005ca2 <UART_SetConfig+0x216>
 8005c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c76:	d00b      	beq.n	8005c90 <UART_SetConfig+0x204>
 8005c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c7c:	d811      	bhi.n	8005ca2 <UART_SetConfig+0x216>
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <UART_SetConfig+0x1fe>
 8005c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c86:	d006      	beq.n	8005c96 <UART_SetConfig+0x20a>
 8005c88:	e00b      	b.n	8005ca2 <UART_SetConfig+0x216>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	77fb      	strb	r3, [r7, #31]
 8005c8e:	e0a1      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005c90:	2302      	movs	r3, #2
 8005c92:	77fb      	strb	r3, [r7, #31]
 8005c94:	e09e      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005c96:	2304      	movs	r3, #4
 8005c98:	77fb      	strb	r3, [r7, #31]
 8005c9a:	e09b      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005c9c:	2308      	movs	r3, #8
 8005c9e:	77fb      	strb	r3, [r7, #31]
 8005ca0:	e098      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005ca2:	2310      	movs	r3, #16
 8005ca4:	77fb      	strb	r3, [r7, #31]
 8005ca6:	e095      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a2f      	ldr	r2, [pc, #188]	; (8005d6c <UART_SetConfig+0x2e0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d125      	bne.n	8005cfe <UART_SetConfig+0x272>
 8005cb2:	4b29      	ldr	r3, [pc, #164]	; (8005d58 <UART_SetConfig+0x2cc>)
 8005cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005cbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cc0:	d017      	beq.n	8005cf2 <UART_SetConfig+0x266>
 8005cc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cc6:	d817      	bhi.n	8005cf8 <UART_SetConfig+0x26c>
 8005cc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ccc:	d00b      	beq.n	8005ce6 <UART_SetConfig+0x25a>
 8005cce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cd2:	d811      	bhi.n	8005cf8 <UART_SetConfig+0x26c>
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d003      	beq.n	8005ce0 <UART_SetConfig+0x254>
 8005cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cdc:	d006      	beq.n	8005cec <UART_SetConfig+0x260>
 8005cde:	e00b      	b.n	8005cf8 <UART_SetConfig+0x26c>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	77fb      	strb	r3, [r7, #31]
 8005ce4:	e076      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	77fb      	strb	r3, [r7, #31]
 8005cea:	e073      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005cec:	2304      	movs	r3, #4
 8005cee:	77fb      	strb	r3, [r7, #31]
 8005cf0:	e070      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005cf2:	2308      	movs	r3, #8
 8005cf4:	77fb      	strb	r3, [r7, #31]
 8005cf6:	e06d      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005cf8:	2310      	movs	r3, #16
 8005cfa:	77fb      	strb	r3, [r7, #31]
 8005cfc:	e06a      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a1b      	ldr	r2, [pc, #108]	; (8005d70 <UART_SetConfig+0x2e4>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d138      	bne.n	8005d7a <UART_SetConfig+0x2ee>
 8005d08:	4b13      	ldr	r3, [pc, #76]	; (8005d58 <UART_SetConfig+0x2cc>)
 8005d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d0e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005d12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d16:	d017      	beq.n	8005d48 <UART_SetConfig+0x2bc>
 8005d18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d1c:	d82a      	bhi.n	8005d74 <UART_SetConfig+0x2e8>
 8005d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d22:	d00b      	beq.n	8005d3c <UART_SetConfig+0x2b0>
 8005d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d28:	d824      	bhi.n	8005d74 <UART_SetConfig+0x2e8>
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <UART_SetConfig+0x2aa>
 8005d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d32:	d006      	beq.n	8005d42 <UART_SetConfig+0x2b6>
 8005d34:	e01e      	b.n	8005d74 <UART_SetConfig+0x2e8>
 8005d36:	2300      	movs	r3, #0
 8005d38:	77fb      	strb	r3, [r7, #31]
 8005d3a:	e04b      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	77fb      	strb	r3, [r7, #31]
 8005d40:	e048      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005d42:	2304      	movs	r3, #4
 8005d44:	77fb      	strb	r3, [r7, #31]
 8005d46:	e045      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005d48:	2308      	movs	r3, #8
 8005d4a:	77fb      	strb	r3, [r7, #31]
 8005d4c:	e042      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005d4e:	bf00      	nop
 8005d50:	efff69f3 	.word	0xefff69f3
 8005d54:	40011000 	.word	0x40011000
 8005d58:	40023800 	.word	0x40023800
 8005d5c:	40004400 	.word	0x40004400
 8005d60:	40004800 	.word	0x40004800
 8005d64:	40004c00 	.word	0x40004c00
 8005d68:	40005000 	.word	0x40005000
 8005d6c:	40011400 	.word	0x40011400
 8005d70:	40007800 	.word	0x40007800
 8005d74:	2310      	movs	r3, #16
 8005d76:	77fb      	strb	r3, [r7, #31]
 8005d78:	e02c      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a72      	ldr	r2, [pc, #456]	; (8005f48 <UART_SetConfig+0x4bc>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d125      	bne.n	8005dd0 <UART_SetConfig+0x344>
 8005d84:	4b71      	ldr	r3, [pc, #452]	; (8005f4c <UART_SetConfig+0x4c0>)
 8005d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d8a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d8e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005d92:	d017      	beq.n	8005dc4 <UART_SetConfig+0x338>
 8005d94:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005d98:	d817      	bhi.n	8005dca <UART_SetConfig+0x33e>
 8005d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d9e:	d00b      	beq.n	8005db8 <UART_SetConfig+0x32c>
 8005da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005da4:	d811      	bhi.n	8005dca <UART_SetConfig+0x33e>
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <UART_SetConfig+0x326>
 8005daa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dae:	d006      	beq.n	8005dbe <UART_SetConfig+0x332>
 8005db0:	e00b      	b.n	8005dca <UART_SetConfig+0x33e>
 8005db2:	2300      	movs	r3, #0
 8005db4:	77fb      	strb	r3, [r7, #31]
 8005db6:	e00d      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005db8:	2302      	movs	r3, #2
 8005dba:	77fb      	strb	r3, [r7, #31]
 8005dbc:	e00a      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005dbe:	2304      	movs	r3, #4
 8005dc0:	77fb      	strb	r3, [r7, #31]
 8005dc2:	e007      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005dc4:	2308      	movs	r3, #8
 8005dc6:	77fb      	strb	r3, [r7, #31]
 8005dc8:	e004      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005dca:	2310      	movs	r3, #16
 8005dcc:	77fb      	strb	r3, [r7, #31]
 8005dce:	e001      	b.n	8005dd4 <UART_SetConfig+0x348>
 8005dd0:	2310      	movs	r3, #16
 8005dd2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	69db      	ldr	r3, [r3, #28]
 8005dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ddc:	d15b      	bne.n	8005e96 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005dde:	7ffb      	ldrb	r3, [r7, #31]
 8005de0:	2b08      	cmp	r3, #8
 8005de2:	d828      	bhi.n	8005e36 <UART_SetConfig+0x3aa>
 8005de4:	a201      	add	r2, pc, #4	; (adr r2, 8005dec <UART_SetConfig+0x360>)
 8005de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dea:	bf00      	nop
 8005dec:	08005e11 	.word	0x08005e11
 8005df0:	08005e19 	.word	0x08005e19
 8005df4:	08005e21 	.word	0x08005e21
 8005df8:	08005e37 	.word	0x08005e37
 8005dfc:	08005e27 	.word	0x08005e27
 8005e00:	08005e37 	.word	0x08005e37
 8005e04:	08005e37 	.word	0x08005e37
 8005e08:	08005e37 	.word	0x08005e37
 8005e0c:	08005e2f 	.word	0x08005e2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e10:	f7fd fee0 	bl	8003bd4 <HAL_RCC_GetPCLK1Freq>
 8005e14:	61b8      	str	r0, [r7, #24]
        break;
 8005e16:	e013      	b.n	8005e40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e18:	f7fd fef0 	bl	8003bfc <HAL_RCC_GetPCLK2Freq>
 8005e1c:	61b8      	str	r0, [r7, #24]
        break;
 8005e1e:	e00f      	b.n	8005e40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e20:	4b4b      	ldr	r3, [pc, #300]	; (8005f50 <UART_SetConfig+0x4c4>)
 8005e22:	61bb      	str	r3, [r7, #24]
        break;
 8005e24:	e00c      	b.n	8005e40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e26:	f7fd fdc3 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 8005e2a:	61b8      	str	r0, [r7, #24]
        break;
 8005e2c:	e008      	b.n	8005e40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e32:	61bb      	str	r3, [r7, #24]
        break;
 8005e34:	e004      	b.n	8005e40 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	77bb      	strb	r3, [r7, #30]
        break;
 8005e3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d074      	beq.n	8005f30 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	005a      	lsls	r2, r3, #1
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	085b      	lsrs	r3, r3, #1
 8005e50:	441a      	add	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	2b0f      	cmp	r3, #15
 8005e60:	d916      	bls.n	8005e90 <UART_SetConfig+0x404>
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e68:	d212      	bcs.n	8005e90 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	f023 030f 	bic.w	r3, r3, #15
 8005e72:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	085b      	lsrs	r3, r3, #1
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	f003 0307 	and.w	r3, r3, #7
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	89fb      	ldrh	r3, [r7, #14]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	89fa      	ldrh	r2, [r7, #14]
 8005e8c:	60da      	str	r2, [r3, #12]
 8005e8e:	e04f      	b.n	8005f30 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	77bb      	strb	r3, [r7, #30]
 8005e94:	e04c      	b.n	8005f30 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e96:	7ffb      	ldrb	r3, [r7, #31]
 8005e98:	2b08      	cmp	r3, #8
 8005e9a:	d828      	bhi.n	8005eee <UART_SetConfig+0x462>
 8005e9c:	a201      	add	r2, pc, #4	; (adr r2, 8005ea4 <UART_SetConfig+0x418>)
 8005e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea2:	bf00      	nop
 8005ea4:	08005ec9 	.word	0x08005ec9
 8005ea8:	08005ed1 	.word	0x08005ed1
 8005eac:	08005ed9 	.word	0x08005ed9
 8005eb0:	08005eef 	.word	0x08005eef
 8005eb4:	08005edf 	.word	0x08005edf
 8005eb8:	08005eef 	.word	0x08005eef
 8005ebc:	08005eef 	.word	0x08005eef
 8005ec0:	08005eef 	.word	0x08005eef
 8005ec4:	08005ee7 	.word	0x08005ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ec8:	f7fd fe84 	bl	8003bd4 <HAL_RCC_GetPCLK1Freq>
 8005ecc:	61b8      	str	r0, [r7, #24]
        break;
 8005ece:	e013      	b.n	8005ef8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ed0:	f7fd fe94 	bl	8003bfc <HAL_RCC_GetPCLK2Freq>
 8005ed4:	61b8      	str	r0, [r7, #24]
        break;
 8005ed6:	e00f      	b.n	8005ef8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ed8:	4b1d      	ldr	r3, [pc, #116]	; (8005f50 <UART_SetConfig+0x4c4>)
 8005eda:	61bb      	str	r3, [r7, #24]
        break;
 8005edc:	e00c      	b.n	8005ef8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ede:	f7fd fd67 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 8005ee2:	61b8      	str	r0, [r7, #24]
        break;
 8005ee4:	e008      	b.n	8005ef8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eea:	61bb      	str	r3, [r7, #24]
        break;
 8005eec:	e004      	b.n	8005ef8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	77bb      	strb	r3, [r7, #30]
        break;
 8005ef6:	bf00      	nop
    }

    if (pclk != 0U)
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d018      	beq.n	8005f30 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	085a      	lsrs	r2, r3, #1
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	441a      	add	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	2b0f      	cmp	r3, #15
 8005f16:	d909      	bls.n	8005f2c <UART_SetConfig+0x4a0>
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f1e:	d205      	bcs.n	8005f2c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	60da      	str	r2, [r3, #12]
 8005f2a:	e001      	b.n	8005f30 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005f3c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3720      	adds	r7, #32
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	40007c00 	.word	0x40007c00
 8005f4c:	40023800 	.word	0x40023800
 8005f50:	00f42400 	.word	0x00f42400

08005f54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00a      	beq.n	8005f7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa4:	f003 0304 	and.w	r3, r3, #4
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00a      	beq.n	8005fc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc6:	f003 0308 	and.w	r3, r3, #8
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00a      	beq.n	8005fe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	f003 0310 	and.w	r3, r3, #16
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00a      	beq.n	8006006 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600a:	f003 0320 	and.w	r3, r3, #32
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	430a      	orrs	r2, r1
 8006026:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006030:	2b00      	cmp	r3, #0
 8006032:	d01a      	beq.n	800606a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006052:	d10a      	bne.n	800606a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00a      	beq.n	800608c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	430a      	orrs	r2, r1
 800608a:	605a      	str	r2, [r3, #4]
  }
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af02      	add	r7, sp, #8
 800609e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060a8:	f7fb fe7e 	bl	8001da8 <HAL_GetTick>
 80060ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0308 	and.w	r3, r3, #8
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	d10e      	bne.n	80060da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f831 	bl	8006132 <UART_WaitOnFlagUntilTimeout>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e027      	b.n	800612a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	2b04      	cmp	r3, #4
 80060e6:	d10e      	bne.n	8006106 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f81b 	bl	8006132 <UART_WaitOnFlagUntilTimeout>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e011      	b.n	800612a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2220      	movs	r2, #32
 800610a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2220      	movs	r2, #32
 8006110:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b09c      	sub	sp, #112	; 0x70
 8006136:	af00      	add	r7, sp, #0
 8006138:	60f8      	str	r0, [r7, #12]
 800613a:	60b9      	str	r1, [r7, #8]
 800613c:	603b      	str	r3, [r7, #0]
 800613e:	4613      	mov	r3, r2
 8006140:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006142:	e0a7      	b.n	8006294 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006144:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614a:	f000 80a3 	beq.w	8006294 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800614e:	f7fb fe2b 	bl	8001da8 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800615a:	429a      	cmp	r2, r3
 800615c:	d302      	bcc.n	8006164 <UART_WaitOnFlagUntilTimeout+0x32>
 800615e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006160:	2b00      	cmp	r3, #0
 8006162:	d13f      	bne.n	80061e4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800616c:	e853 3f00 	ldrex	r3, [r3]
 8006170:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006174:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006178:	667b      	str	r3, [r7, #100]	; 0x64
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	461a      	mov	r2, r3
 8006180:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006182:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006184:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006186:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006188:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800618a:	e841 2300 	strex	r3, r2, [r1]
 800618e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1e6      	bne.n	8006164 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	3308      	adds	r3, #8
 800619c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061a0:	e853 3f00 	ldrex	r3, [r3]
 80061a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a8:	f023 0301 	bic.w	r3, r3, #1
 80061ac:	663b      	str	r3, [r7, #96]	; 0x60
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3308      	adds	r3, #8
 80061b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80061b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80061b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80061c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1e5      	bne.n	8006196 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2220      	movs	r2, #32
 80061ce:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2220      	movs	r2, #32
 80061d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e068      	b.n	80062b6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0304 	and.w	r3, r3, #4
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d050      	beq.n	8006294 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	69db      	ldr	r3, [r3, #28]
 80061f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006200:	d148      	bne.n	8006294 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800620a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006220:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800622a:	637b      	str	r3, [r7, #52]	; 0x34
 800622c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006230:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e6      	bne.n	800620c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3308      	adds	r3, #8
 8006244:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	e853 3f00 	ldrex	r3, [r3]
 800624c:	613b      	str	r3, [r7, #16]
   return(result);
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f023 0301 	bic.w	r3, r3, #1
 8006254:	66bb      	str	r3, [r7, #104]	; 0x68
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	3308      	adds	r3, #8
 800625c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800625e:	623a      	str	r2, [r7, #32]
 8006260:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006262:	69f9      	ldr	r1, [r7, #28]
 8006264:	6a3a      	ldr	r2, [r7, #32]
 8006266:	e841 2300 	strex	r3, r2, [r1]
 800626a:	61bb      	str	r3, [r7, #24]
   return(result);
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1e5      	bne.n	800623e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2220      	movs	r2, #32
 8006276:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2220      	movs	r2, #32
 800627c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2220      	movs	r2, #32
 8006284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e010      	b.n	80062b6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	69da      	ldr	r2, [r3, #28]
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	4013      	ands	r3, r2
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	bf0c      	ite	eq
 80062a4:	2301      	moveq	r3, #1
 80062a6:	2300      	movne	r3, #0
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	461a      	mov	r2, r3
 80062ac:	79fb      	ldrb	r3, [r7, #7]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	f43f af48 	beq.w	8006144 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3770      	adds	r7, #112	; 0x70
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
	...

080062c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062c0:	b084      	sub	sp, #16
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b084      	sub	sp, #16
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	f107 001c 	add.w	r0, r7, #28
 80062ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d120      	bne.n	800631a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68da      	ldr	r2, [r3, #12]
 80062e8:	4b20      	ldr	r3, [pc, #128]	; (800636c <USB_CoreInit+0xac>)
 80062ea:	4013      	ands	r3, r2
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80062fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d105      	bne.n	800630e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 fa96 	bl	8006840 <USB_CoreReset>
 8006314:	4603      	mov	r3, r0
 8006316:	73fb      	strb	r3, [r7, #15]
 8006318:	e010      	b.n	800633c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fa8a 	bl	8006840 <USB_CoreReset>
 800632c:	4603      	mov	r3, r0
 800632e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006334:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800633c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633e:	2b01      	cmp	r3, #1
 8006340:	d10b      	bne.n	800635a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f043 0206 	orr.w	r2, r3, #6
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f043 0220 	orr.w	r2, r3, #32
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800635a:	7bfb      	ldrb	r3, [r7, #15]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006366:	b004      	add	sp, #16
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	ffbdffbf 	.word	0xffbdffbf

08006370 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f023 0201 	bic.w	r2, r3, #1
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	460b      	mov	r3, r1
 800639c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800639e:	2300      	movs	r3, #0
 80063a0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80063ae:	78fb      	ldrb	r3, [r7, #3]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d115      	bne.n	80063e0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80063c0:	2001      	movs	r0, #1
 80063c2:	f7fb fcfd 	bl	8001dc0 <HAL_Delay>
      ms++;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	3301      	adds	r3, #1
 80063ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fa29 	bl	8006824 <USB_GetMode>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d01e      	beq.n	8006416 <USB_SetCurrentMode+0x84>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2b31      	cmp	r3, #49	; 0x31
 80063dc:	d9f0      	bls.n	80063c0 <USB_SetCurrentMode+0x2e>
 80063de:	e01a      	b.n	8006416 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80063e0:	78fb      	ldrb	r3, [r7, #3]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d115      	bne.n	8006412 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80063f2:	2001      	movs	r0, #1
 80063f4:	f7fb fce4 	bl	8001dc0 <HAL_Delay>
      ms++;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	3301      	adds	r3, #1
 80063fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fa10 	bl	8006824 <USB_GetMode>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d005      	beq.n	8006416 <USB_SetCurrentMode+0x84>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2b31      	cmp	r3, #49	; 0x31
 800640e:	d9f0      	bls.n	80063f2 <USB_SetCurrentMode+0x60>
 8006410:	e001      	b.n	8006416 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e005      	b.n	8006422 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2b32      	cmp	r3, #50	; 0x32
 800641a:	d101      	bne.n	8006420 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e000      	b.n	8006422 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
	...

0800642c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800642c:	b084      	sub	sp, #16
 800642e:	b580      	push	{r7, lr}
 8006430:	b086      	sub	sp, #24
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800643a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800643e:	2300      	movs	r3, #0
 8006440:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006446:	2300      	movs	r3, #0
 8006448:	613b      	str	r3, [r7, #16]
 800644a:	e009      	b.n	8006460 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	3340      	adds	r3, #64	; 0x40
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	2200      	movs	r2, #0
 8006458:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	3301      	adds	r3, #1
 800645e:	613b      	str	r3, [r7, #16]
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	2b0e      	cmp	r3, #14
 8006464:	d9f2      	bls.n	800644c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006468:	2b00      	cmp	r3, #0
 800646a:	d11c      	bne.n	80064a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800647a:	f043 0302 	orr.w	r3, r3, #2
 800647e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006484:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	601a      	str	r2, [r3, #0]
 80064a4:	e005      	b.n	80064b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064b8:	461a      	mov	r2, r3
 80064ba:	2300      	movs	r3, #0
 80064bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c4:	4619      	mov	r1, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064cc:	461a      	mov	r2, r3
 80064ce:	680b      	ldr	r3, [r1, #0]
 80064d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d10c      	bne.n	80064f2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80064d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d104      	bne.n	80064e8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80064de:	2100      	movs	r1, #0
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f965 	bl	80067b0 <USB_SetDevSpeed>
 80064e6:	e008      	b.n	80064fa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80064e8:	2101      	movs	r1, #1
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f960 	bl	80067b0 <USB_SetDevSpeed>
 80064f0:	e003      	b.n	80064fa <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80064f2:	2103      	movs	r1, #3
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 f95b 	bl	80067b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064fa:	2110      	movs	r1, #16
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 f8f3 	bl	80066e8 <USB_FlushTxFifo>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f91f 	bl	8006750 <USB_FlushRxFifo>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006522:	461a      	mov	r2, r3
 8006524:	2300      	movs	r3, #0
 8006526:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800652e:	461a      	mov	r2, r3
 8006530:	2300      	movs	r3, #0
 8006532:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800653a:	461a      	mov	r2, r3
 800653c:	2300      	movs	r3, #0
 800653e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006540:	2300      	movs	r3, #0
 8006542:	613b      	str	r3, [r7, #16]
 8006544:	e043      	b.n	80065ce <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	015a      	lsls	r2, r3, #5
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	4413      	add	r3, r2
 800654e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006558:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800655c:	d118      	bne.n	8006590 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10a      	bne.n	800657a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	4413      	add	r3, r2
 800656c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006570:	461a      	mov	r2, r3
 8006572:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006576:	6013      	str	r3, [r2, #0]
 8006578:	e013      	b.n	80065a2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	4413      	add	r3, r2
 8006582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006586:	461a      	mov	r2, r3
 8006588:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800658c:	6013      	str	r3, [r2, #0]
 800658e:	e008      	b.n	80065a2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	4413      	add	r3, r2
 8006598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800659c:	461a      	mov	r2, r3
 800659e:	2300      	movs	r3, #0
 80065a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	015a      	lsls	r2, r3, #5
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ae:	461a      	mov	r2, r3
 80065b0:	2300      	movs	r3, #0
 80065b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c0:	461a      	mov	r2, r3
 80065c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	3301      	adds	r3, #1
 80065cc:	613b      	str	r3, [r7, #16]
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d3b7      	bcc.n	8006546 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065d6:	2300      	movs	r3, #0
 80065d8:	613b      	str	r3, [r7, #16]
 80065da:	e043      	b.n	8006664 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065f2:	d118      	bne.n	8006626 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10a      	bne.n	8006610 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	4413      	add	r3, r2
 8006602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006606:	461a      	mov	r2, r3
 8006608:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	e013      	b.n	8006638 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661c:	461a      	mov	r2, r3
 800661e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006622:	6013      	str	r3, [r2, #0]
 8006624:	e008      	b.n	8006638 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	4413      	add	r3, r2
 800662e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006632:	461a      	mov	r2, r3
 8006634:	2300      	movs	r3, #0
 8006636:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006644:	461a      	mov	r2, r3
 8006646:	2300      	movs	r3, #0
 8006648:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	4413      	add	r3, r2
 8006652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006656:	461a      	mov	r2, r3
 8006658:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800665c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	3301      	adds	r3, #1
 8006662:	613b      	str	r3, [r7, #16]
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	429a      	cmp	r2, r3
 800666a:	d3b7      	bcc.n	80065dc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800667a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800667e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800668c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006690:	2b00      	cmp	r3, #0
 8006692:	d105      	bne.n	80066a0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	f043 0210 	orr.w	r2, r3, #16
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	699a      	ldr	r2, [r3, #24]
 80066a4:	4b0e      	ldr	r3, [pc, #56]	; (80066e0 <USB_DevInit+0x2b4>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80066ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d005      	beq.n	80066be <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	f043 0208 	orr.w	r2, r3, #8
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80066be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d105      	bne.n	80066d0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	699a      	ldr	r2, [r3, #24]
 80066c8:	4b06      	ldr	r3, [pc, #24]	; (80066e4 <USB_DevInit+0x2b8>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80066d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3718      	adds	r7, #24
 80066d6:	46bd      	mov	sp, r7
 80066d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066dc:	b004      	add	sp, #16
 80066de:	4770      	bx	lr
 80066e0:	803c3800 	.word	0x803c3800
 80066e4:	40000004 	.word	0x40000004

080066e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	3301      	adds	r3, #1
 80066fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	4a13      	ldr	r2, [pc, #76]	; (800674c <USB_FlushTxFifo+0x64>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d901      	bls.n	8006708 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e01b      	b.n	8006740 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	daf2      	bge.n	80066f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	019b      	lsls	r3, r3, #6
 8006718:	f043 0220 	orr.w	r2, r3, #32
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	3301      	adds	r3, #1
 8006724:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	4a08      	ldr	r2, [pc, #32]	; (800674c <USB_FlushTxFifo+0x64>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d901      	bls.n	8006732 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e006      	b.n	8006740 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	f003 0320 	and.w	r3, r3, #32
 800673a:	2b20      	cmp	r3, #32
 800673c:	d0f0      	beq.n	8006720 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3714      	adds	r7, #20
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr
 800674c:	00030d40 	.word	0x00030d40

08006750 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006758:	2300      	movs	r3, #0
 800675a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	3301      	adds	r3, #1
 8006760:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	4a11      	ldr	r2, [pc, #68]	; (80067ac <USB_FlushRxFifo+0x5c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d901      	bls.n	800676e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e018      	b.n	80067a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	2b00      	cmp	r3, #0
 8006774:	daf2      	bge.n	800675c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006776:	2300      	movs	r3, #0
 8006778:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2210      	movs	r2, #16
 800677e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	3301      	adds	r3, #1
 8006784:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	4a08      	ldr	r2, [pc, #32]	; (80067ac <USB_FlushRxFifo+0x5c>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d901      	bls.n	8006792 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e006      	b.n	80067a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	f003 0310 	and.w	r3, r3, #16
 800679a:	2b10      	cmp	r3, #16
 800679c:	d0f0      	beq.n	8006780 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3714      	adds	r7, #20
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr
 80067ac:	00030d40 	.word	0x00030d40

080067b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	460b      	mov	r3, r1
 80067ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	78fb      	ldrb	r3, [r7, #3]
 80067ca:	68f9      	ldr	r1, [r7, #12]
 80067cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067d0:	4313      	orrs	r3, r2
 80067d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b085      	sub	sp, #20
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80067fc:	f023 0303 	bic.w	r3, r3, #3
 8006800:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006810:	f043 0302 	orr.w	r3, r3, #2
 8006814:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	f003 0301 	and.w	r3, r3, #1
}
 8006834:	4618      	mov	r0, r3
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006848:	2300      	movs	r3, #0
 800684a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3301      	adds	r3, #1
 8006850:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4a13      	ldr	r2, [pc, #76]	; (80068a4 <USB_CoreReset+0x64>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d901      	bls.n	800685e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e01b      	b.n	8006896 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	daf2      	bge.n	800684c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006866:	2300      	movs	r3, #0
 8006868:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	f043 0201 	orr.w	r2, r3, #1
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	3301      	adds	r3, #1
 800687a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4a09      	ldr	r2, [pc, #36]	; (80068a4 <USB_CoreReset+0x64>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d901      	bls.n	8006888 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e006      	b.n	8006896 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	2b01      	cmp	r3, #1
 8006892:	d0f0      	beq.n	8006876 <USB_CoreReset+0x36>

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	00030d40 	.word	0x00030d40

080068a8 <__errno>:
 80068a8:	4b01      	ldr	r3, [pc, #4]	; (80068b0 <__errno+0x8>)
 80068aa:	6818      	ldr	r0, [r3, #0]
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	2000000c 	.word	0x2000000c

080068b4 <__libc_init_array>:
 80068b4:	b570      	push	{r4, r5, r6, lr}
 80068b6:	4d0d      	ldr	r5, [pc, #52]	; (80068ec <__libc_init_array+0x38>)
 80068b8:	4c0d      	ldr	r4, [pc, #52]	; (80068f0 <__libc_init_array+0x3c>)
 80068ba:	1b64      	subs	r4, r4, r5
 80068bc:	10a4      	asrs	r4, r4, #2
 80068be:	2600      	movs	r6, #0
 80068c0:	42a6      	cmp	r6, r4
 80068c2:	d109      	bne.n	80068d8 <__libc_init_array+0x24>
 80068c4:	4d0b      	ldr	r5, [pc, #44]	; (80068f4 <__libc_init_array+0x40>)
 80068c6:	4c0c      	ldr	r4, [pc, #48]	; (80068f8 <__libc_init_array+0x44>)
 80068c8:	f002 fe5e 	bl	8009588 <_init>
 80068cc:	1b64      	subs	r4, r4, r5
 80068ce:	10a4      	asrs	r4, r4, #2
 80068d0:	2600      	movs	r6, #0
 80068d2:	42a6      	cmp	r6, r4
 80068d4:	d105      	bne.n	80068e2 <__libc_init_array+0x2e>
 80068d6:	bd70      	pop	{r4, r5, r6, pc}
 80068d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80068dc:	4798      	blx	r3
 80068de:	3601      	adds	r6, #1
 80068e0:	e7ee      	b.n	80068c0 <__libc_init_array+0xc>
 80068e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80068e6:	4798      	blx	r3
 80068e8:	3601      	adds	r6, #1
 80068ea:	e7f2      	b.n	80068d2 <__libc_init_array+0x1e>
 80068ec:	080099a4 	.word	0x080099a4
 80068f0:	080099a4 	.word	0x080099a4
 80068f4:	080099a4 	.word	0x080099a4
 80068f8:	080099a8 	.word	0x080099a8

080068fc <memset>:
 80068fc:	4402      	add	r2, r0
 80068fe:	4603      	mov	r3, r0
 8006900:	4293      	cmp	r3, r2
 8006902:	d100      	bne.n	8006906 <memset+0xa>
 8006904:	4770      	bx	lr
 8006906:	f803 1b01 	strb.w	r1, [r3], #1
 800690a:	e7f9      	b.n	8006900 <memset+0x4>

0800690c <__cvt>:
 800690c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800690e:	ed2d 8b02 	vpush	{d8}
 8006912:	eeb0 8b40 	vmov.f64	d8, d0
 8006916:	b085      	sub	sp, #20
 8006918:	4617      	mov	r7, r2
 800691a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800691c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800691e:	ee18 2a90 	vmov	r2, s17
 8006922:	f025 0520 	bic.w	r5, r5, #32
 8006926:	2a00      	cmp	r2, #0
 8006928:	bfb6      	itet	lt
 800692a:	222d      	movlt	r2, #45	; 0x2d
 800692c:	2200      	movge	r2, #0
 800692e:	eeb1 8b40 	vneglt.f64	d8, d0
 8006932:	2d46      	cmp	r5, #70	; 0x46
 8006934:	460c      	mov	r4, r1
 8006936:	701a      	strb	r2, [r3, #0]
 8006938:	d004      	beq.n	8006944 <__cvt+0x38>
 800693a:	2d45      	cmp	r5, #69	; 0x45
 800693c:	d100      	bne.n	8006940 <__cvt+0x34>
 800693e:	3401      	adds	r4, #1
 8006940:	2102      	movs	r1, #2
 8006942:	e000      	b.n	8006946 <__cvt+0x3a>
 8006944:	2103      	movs	r1, #3
 8006946:	ab03      	add	r3, sp, #12
 8006948:	9301      	str	r3, [sp, #4]
 800694a:	ab02      	add	r3, sp, #8
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	4622      	mov	r2, r4
 8006950:	4633      	mov	r3, r6
 8006952:	eeb0 0b48 	vmov.f64	d0, d8
 8006956:	f000 fccb 	bl	80072f0 <_dtoa_r>
 800695a:	2d47      	cmp	r5, #71	; 0x47
 800695c:	d101      	bne.n	8006962 <__cvt+0x56>
 800695e:	07fb      	lsls	r3, r7, #31
 8006960:	d51a      	bpl.n	8006998 <__cvt+0x8c>
 8006962:	2d46      	cmp	r5, #70	; 0x46
 8006964:	eb00 0204 	add.w	r2, r0, r4
 8006968:	d10c      	bne.n	8006984 <__cvt+0x78>
 800696a:	7803      	ldrb	r3, [r0, #0]
 800696c:	2b30      	cmp	r3, #48	; 0x30
 800696e:	d107      	bne.n	8006980 <__cvt+0x74>
 8006970:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006978:	bf1c      	itt	ne
 800697a:	f1c4 0401 	rsbne	r4, r4, #1
 800697e:	6034      	strne	r4, [r6, #0]
 8006980:	6833      	ldr	r3, [r6, #0]
 8006982:	441a      	add	r2, r3
 8006984:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800698c:	bf08      	it	eq
 800698e:	9203      	streq	r2, [sp, #12]
 8006990:	2130      	movs	r1, #48	; 0x30
 8006992:	9b03      	ldr	r3, [sp, #12]
 8006994:	4293      	cmp	r3, r2
 8006996:	d307      	bcc.n	80069a8 <__cvt+0x9c>
 8006998:	9b03      	ldr	r3, [sp, #12]
 800699a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800699c:	1a1b      	subs	r3, r3, r0
 800699e:	6013      	str	r3, [r2, #0]
 80069a0:	b005      	add	sp, #20
 80069a2:	ecbd 8b02 	vpop	{d8}
 80069a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069a8:	1c5c      	adds	r4, r3, #1
 80069aa:	9403      	str	r4, [sp, #12]
 80069ac:	7019      	strb	r1, [r3, #0]
 80069ae:	e7f0      	b.n	8006992 <__cvt+0x86>

080069b0 <__exponent>:
 80069b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069b2:	4603      	mov	r3, r0
 80069b4:	2900      	cmp	r1, #0
 80069b6:	bfb8      	it	lt
 80069b8:	4249      	neglt	r1, r1
 80069ba:	f803 2b02 	strb.w	r2, [r3], #2
 80069be:	bfb4      	ite	lt
 80069c0:	222d      	movlt	r2, #45	; 0x2d
 80069c2:	222b      	movge	r2, #43	; 0x2b
 80069c4:	2909      	cmp	r1, #9
 80069c6:	7042      	strb	r2, [r0, #1]
 80069c8:	dd2a      	ble.n	8006a20 <__exponent+0x70>
 80069ca:	f10d 0407 	add.w	r4, sp, #7
 80069ce:	46a4      	mov	ip, r4
 80069d0:	270a      	movs	r7, #10
 80069d2:	46a6      	mov	lr, r4
 80069d4:	460a      	mov	r2, r1
 80069d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80069da:	fb07 1516 	mls	r5, r7, r6, r1
 80069de:	3530      	adds	r5, #48	; 0x30
 80069e0:	2a63      	cmp	r2, #99	; 0x63
 80069e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80069e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80069ea:	4631      	mov	r1, r6
 80069ec:	dcf1      	bgt.n	80069d2 <__exponent+0x22>
 80069ee:	3130      	adds	r1, #48	; 0x30
 80069f0:	f1ae 0502 	sub.w	r5, lr, #2
 80069f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80069f8:	1c44      	adds	r4, r0, #1
 80069fa:	4629      	mov	r1, r5
 80069fc:	4561      	cmp	r1, ip
 80069fe:	d30a      	bcc.n	8006a16 <__exponent+0x66>
 8006a00:	f10d 0209 	add.w	r2, sp, #9
 8006a04:	eba2 020e 	sub.w	r2, r2, lr
 8006a08:	4565      	cmp	r5, ip
 8006a0a:	bf88      	it	hi
 8006a0c:	2200      	movhi	r2, #0
 8006a0e:	4413      	add	r3, r2
 8006a10:	1a18      	subs	r0, r3, r0
 8006a12:	b003      	add	sp, #12
 8006a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a1a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006a1e:	e7ed      	b.n	80069fc <__exponent+0x4c>
 8006a20:	2330      	movs	r3, #48	; 0x30
 8006a22:	3130      	adds	r1, #48	; 0x30
 8006a24:	7083      	strb	r3, [r0, #2]
 8006a26:	70c1      	strb	r1, [r0, #3]
 8006a28:	1d03      	adds	r3, r0, #4
 8006a2a:	e7f1      	b.n	8006a10 <__exponent+0x60>
 8006a2c:	0000      	movs	r0, r0
	...

08006a30 <_printf_float>:
 8006a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a34:	b08b      	sub	sp, #44	; 0x2c
 8006a36:	460c      	mov	r4, r1
 8006a38:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006a3c:	4616      	mov	r6, r2
 8006a3e:	461f      	mov	r7, r3
 8006a40:	4605      	mov	r5, r0
 8006a42:	f001 f9c3 	bl	8007dcc <_localeconv_r>
 8006a46:	f8d0 b000 	ldr.w	fp, [r0]
 8006a4a:	4658      	mov	r0, fp
 8006a4c:	f7f9 fbf8 	bl	8000240 <strlen>
 8006a50:	2300      	movs	r3, #0
 8006a52:	9308      	str	r3, [sp, #32]
 8006a54:	f8d8 3000 	ldr.w	r3, [r8]
 8006a58:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006a5c:	6822      	ldr	r2, [r4, #0]
 8006a5e:	3307      	adds	r3, #7
 8006a60:	f023 0307 	bic.w	r3, r3, #7
 8006a64:	f103 0108 	add.w	r1, r3, #8
 8006a68:	f8c8 1000 	str.w	r1, [r8]
 8006a6c:	4682      	mov	sl, r0
 8006a6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006a72:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8006a76:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006cd8 <_printf_float+0x2a8>
 8006a7a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8006a7e:	eeb0 6bc0 	vabs.f64	d6, d0
 8006a82:	eeb4 6b47 	vcmp.f64	d6, d7
 8006a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a8a:	dd24      	ble.n	8006ad6 <_printf_float+0xa6>
 8006a8c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a94:	d502      	bpl.n	8006a9c <_printf_float+0x6c>
 8006a96:	232d      	movs	r3, #45	; 0x2d
 8006a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a9c:	4b90      	ldr	r3, [pc, #576]	; (8006ce0 <_printf_float+0x2b0>)
 8006a9e:	4891      	ldr	r0, [pc, #580]	; (8006ce4 <_printf_float+0x2b4>)
 8006aa0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006aa4:	bf94      	ite	ls
 8006aa6:	4698      	movls	r8, r3
 8006aa8:	4680      	movhi	r8, r0
 8006aaa:	2303      	movs	r3, #3
 8006aac:	6123      	str	r3, [r4, #16]
 8006aae:	f022 0204 	bic.w	r2, r2, #4
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	6022      	str	r2, [r4, #0]
 8006ab6:	9304      	str	r3, [sp, #16]
 8006ab8:	9700      	str	r7, [sp, #0]
 8006aba:	4633      	mov	r3, r6
 8006abc:	aa09      	add	r2, sp, #36	; 0x24
 8006abe:	4621      	mov	r1, r4
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	f000 f9d3 	bl	8006e6c <_printf_common>
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	f040 808a 	bne.w	8006be0 <_printf_float+0x1b0>
 8006acc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad0:	b00b      	add	sp, #44	; 0x2c
 8006ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad6:	eeb4 0b40 	vcmp.f64	d0, d0
 8006ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ade:	d709      	bvc.n	8006af4 <_printf_float+0xc4>
 8006ae0:	ee10 3a90 	vmov	r3, s1
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	bfbc      	itt	lt
 8006ae8:	232d      	movlt	r3, #45	; 0x2d
 8006aea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006aee:	487e      	ldr	r0, [pc, #504]	; (8006ce8 <_printf_float+0x2b8>)
 8006af0:	4b7e      	ldr	r3, [pc, #504]	; (8006cec <_printf_float+0x2bc>)
 8006af2:	e7d5      	b.n	8006aa0 <_printf_float+0x70>
 8006af4:	6863      	ldr	r3, [r4, #4]
 8006af6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006afa:	9104      	str	r1, [sp, #16]
 8006afc:	1c59      	adds	r1, r3, #1
 8006afe:	d13c      	bne.n	8006b7a <_printf_float+0x14a>
 8006b00:	2306      	movs	r3, #6
 8006b02:	6063      	str	r3, [r4, #4]
 8006b04:	2300      	movs	r3, #0
 8006b06:	9303      	str	r3, [sp, #12]
 8006b08:	ab08      	add	r3, sp, #32
 8006b0a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006b0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b12:	ab07      	add	r3, sp, #28
 8006b14:	6861      	ldr	r1, [r4, #4]
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	6022      	str	r2, [r4, #0]
 8006b1a:	f10d 031b 	add.w	r3, sp, #27
 8006b1e:	4628      	mov	r0, r5
 8006b20:	f7ff fef4 	bl	800690c <__cvt>
 8006b24:	9b04      	ldr	r3, [sp, #16]
 8006b26:	9907      	ldr	r1, [sp, #28]
 8006b28:	2b47      	cmp	r3, #71	; 0x47
 8006b2a:	4680      	mov	r8, r0
 8006b2c:	d108      	bne.n	8006b40 <_printf_float+0x110>
 8006b2e:	1cc8      	adds	r0, r1, #3
 8006b30:	db02      	blt.n	8006b38 <_printf_float+0x108>
 8006b32:	6863      	ldr	r3, [r4, #4]
 8006b34:	4299      	cmp	r1, r3
 8006b36:	dd41      	ble.n	8006bbc <_printf_float+0x18c>
 8006b38:	f1a9 0902 	sub.w	r9, r9, #2
 8006b3c:	fa5f f989 	uxtb.w	r9, r9
 8006b40:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006b44:	d820      	bhi.n	8006b88 <_printf_float+0x158>
 8006b46:	3901      	subs	r1, #1
 8006b48:	464a      	mov	r2, r9
 8006b4a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006b4e:	9107      	str	r1, [sp, #28]
 8006b50:	f7ff ff2e 	bl	80069b0 <__exponent>
 8006b54:	9a08      	ldr	r2, [sp, #32]
 8006b56:	9004      	str	r0, [sp, #16]
 8006b58:	1813      	adds	r3, r2, r0
 8006b5a:	2a01      	cmp	r2, #1
 8006b5c:	6123      	str	r3, [r4, #16]
 8006b5e:	dc02      	bgt.n	8006b66 <_printf_float+0x136>
 8006b60:	6822      	ldr	r2, [r4, #0]
 8006b62:	07d2      	lsls	r2, r2, #31
 8006b64:	d501      	bpl.n	8006b6a <_printf_float+0x13a>
 8006b66:	3301      	adds	r3, #1
 8006b68:	6123      	str	r3, [r4, #16]
 8006b6a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d0a2      	beq.n	8006ab8 <_printf_float+0x88>
 8006b72:	232d      	movs	r3, #45	; 0x2d
 8006b74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b78:	e79e      	b.n	8006ab8 <_printf_float+0x88>
 8006b7a:	9904      	ldr	r1, [sp, #16]
 8006b7c:	2947      	cmp	r1, #71	; 0x47
 8006b7e:	d1c1      	bne.n	8006b04 <_printf_float+0xd4>
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1bf      	bne.n	8006b04 <_printf_float+0xd4>
 8006b84:	2301      	movs	r3, #1
 8006b86:	e7bc      	b.n	8006b02 <_printf_float+0xd2>
 8006b88:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006b8c:	d118      	bne.n	8006bc0 <_printf_float+0x190>
 8006b8e:	2900      	cmp	r1, #0
 8006b90:	6863      	ldr	r3, [r4, #4]
 8006b92:	dd0b      	ble.n	8006bac <_printf_float+0x17c>
 8006b94:	6121      	str	r1, [r4, #16]
 8006b96:	b913      	cbnz	r3, 8006b9e <_printf_float+0x16e>
 8006b98:	6822      	ldr	r2, [r4, #0]
 8006b9a:	07d0      	lsls	r0, r2, #31
 8006b9c:	d502      	bpl.n	8006ba4 <_printf_float+0x174>
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	440b      	add	r3, r1
 8006ba2:	6123      	str	r3, [r4, #16]
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	65a1      	str	r1, [r4, #88]	; 0x58
 8006ba8:	9304      	str	r3, [sp, #16]
 8006baa:	e7de      	b.n	8006b6a <_printf_float+0x13a>
 8006bac:	b913      	cbnz	r3, 8006bb4 <_printf_float+0x184>
 8006bae:	6822      	ldr	r2, [r4, #0]
 8006bb0:	07d2      	lsls	r2, r2, #31
 8006bb2:	d501      	bpl.n	8006bb8 <_printf_float+0x188>
 8006bb4:	3302      	adds	r3, #2
 8006bb6:	e7f4      	b.n	8006ba2 <_printf_float+0x172>
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e7f2      	b.n	8006ba2 <_printf_float+0x172>
 8006bbc:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006bc0:	9b08      	ldr	r3, [sp, #32]
 8006bc2:	4299      	cmp	r1, r3
 8006bc4:	db05      	blt.n	8006bd2 <_printf_float+0x1a2>
 8006bc6:	6823      	ldr	r3, [r4, #0]
 8006bc8:	6121      	str	r1, [r4, #16]
 8006bca:	07d8      	lsls	r0, r3, #31
 8006bcc:	d5ea      	bpl.n	8006ba4 <_printf_float+0x174>
 8006bce:	1c4b      	adds	r3, r1, #1
 8006bd0:	e7e7      	b.n	8006ba2 <_printf_float+0x172>
 8006bd2:	2900      	cmp	r1, #0
 8006bd4:	bfd4      	ite	le
 8006bd6:	f1c1 0202 	rsble	r2, r1, #2
 8006bda:	2201      	movgt	r2, #1
 8006bdc:	4413      	add	r3, r2
 8006bde:	e7e0      	b.n	8006ba2 <_printf_float+0x172>
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	055a      	lsls	r2, r3, #21
 8006be4:	d407      	bmi.n	8006bf6 <_printf_float+0x1c6>
 8006be6:	6923      	ldr	r3, [r4, #16]
 8006be8:	4642      	mov	r2, r8
 8006bea:	4631      	mov	r1, r6
 8006bec:	4628      	mov	r0, r5
 8006bee:	47b8      	blx	r7
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	d12a      	bne.n	8006c4a <_printf_float+0x21a>
 8006bf4:	e76a      	b.n	8006acc <_printf_float+0x9c>
 8006bf6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006bfa:	f240 80e2 	bls.w	8006dc2 <_printf_float+0x392>
 8006bfe:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006c02:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c0a:	d133      	bne.n	8006c74 <_printf_float+0x244>
 8006c0c:	4a38      	ldr	r2, [pc, #224]	; (8006cf0 <_printf_float+0x2c0>)
 8006c0e:	2301      	movs	r3, #1
 8006c10:	4631      	mov	r1, r6
 8006c12:	4628      	mov	r0, r5
 8006c14:	47b8      	blx	r7
 8006c16:	3001      	adds	r0, #1
 8006c18:	f43f af58 	beq.w	8006acc <_printf_float+0x9c>
 8006c1c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	db02      	blt.n	8006c2a <_printf_float+0x1fa>
 8006c24:	6823      	ldr	r3, [r4, #0]
 8006c26:	07d8      	lsls	r0, r3, #31
 8006c28:	d50f      	bpl.n	8006c4a <_printf_float+0x21a>
 8006c2a:	4653      	mov	r3, sl
 8006c2c:	465a      	mov	r2, fp
 8006c2e:	4631      	mov	r1, r6
 8006c30:	4628      	mov	r0, r5
 8006c32:	47b8      	blx	r7
 8006c34:	3001      	adds	r0, #1
 8006c36:	f43f af49 	beq.w	8006acc <_printf_float+0x9c>
 8006c3a:	f04f 0800 	mov.w	r8, #0
 8006c3e:	f104 091a 	add.w	r9, r4, #26
 8006c42:	9b08      	ldr	r3, [sp, #32]
 8006c44:	3b01      	subs	r3, #1
 8006c46:	4543      	cmp	r3, r8
 8006c48:	dc09      	bgt.n	8006c5e <_printf_float+0x22e>
 8006c4a:	6823      	ldr	r3, [r4, #0]
 8006c4c:	079b      	lsls	r3, r3, #30
 8006c4e:	f100 8108 	bmi.w	8006e62 <_printf_float+0x432>
 8006c52:	68e0      	ldr	r0, [r4, #12]
 8006c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c56:	4298      	cmp	r0, r3
 8006c58:	bfb8      	it	lt
 8006c5a:	4618      	movlt	r0, r3
 8006c5c:	e738      	b.n	8006ad0 <_printf_float+0xa0>
 8006c5e:	2301      	movs	r3, #1
 8006c60:	464a      	mov	r2, r9
 8006c62:	4631      	mov	r1, r6
 8006c64:	4628      	mov	r0, r5
 8006c66:	47b8      	blx	r7
 8006c68:	3001      	adds	r0, #1
 8006c6a:	f43f af2f 	beq.w	8006acc <_printf_float+0x9c>
 8006c6e:	f108 0801 	add.w	r8, r8, #1
 8006c72:	e7e6      	b.n	8006c42 <_printf_float+0x212>
 8006c74:	9b07      	ldr	r3, [sp, #28]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	dc3c      	bgt.n	8006cf4 <_printf_float+0x2c4>
 8006c7a:	4a1d      	ldr	r2, [pc, #116]	; (8006cf0 <_printf_float+0x2c0>)
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	4631      	mov	r1, r6
 8006c80:	4628      	mov	r0, r5
 8006c82:	47b8      	blx	r7
 8006c84:	3001      	adds	r0, #1
 8006c86:	f43f af21 	beq.w	8006acc <_printf_float+0x9c>
 8006c8a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	d102      	bne.n	8006c98 <_printf_float+0x268>
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	07d9      	lsls	r1, r3, #31
 8006c96:	d5d8      	bpl.n	8006c4a <_printf_float+0x21a>
 8006c98:	4653      	mov	r3, sl
 8006c9a:	465a      	mov	r2, fp
 8006c9c:	4631      	mov	r1, r6
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	47b8      	blx	r7
 8006ca2:	3001      	adds	r0, #1
 8006ca4:	f43f af12 	beq.w	8006acc <_printf_float+0x9c>
 8006ca8:	f04f 0900 	mov.w	r9, #0
 8006cac:	f104 0a1a 	add.w	sl, r4, #26
 8006cb0:	9b07      	ldr	r3, [sp, #28]
 8006cb2:	425b      	negs	r3, r3
 8006cb4:	454b      	cmp	r3, r9
 8006cb6:	dc01      	bgt.n	8006cbc <_printf_float+0x28c>
 8006cb8:	9b08      	ldr	r3, [sp, #32]
 8006cba:	e795      	b.n	8006be8 <_printf_float+0x1b8>
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	4652      	mov	r2, sl
 8006cc0:	4631      	mov	r1, r6
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	47b8      	blx	r7
 8006cc6:	3001      	adds	r0, #1
 8006cc8:	f43f af00 	beq.w	8006acc <_printf_float+0x9c>
 8006ccc:	f109 0901 	add.w	r9, r9, #1
 8006cd0:	e7ee      	b.n	8006cb0 <_printf_float+0x280>
 8006cd2:	bf00      	nop
 8006cd4:	f3af 8000 	nop.w
 8006cd8:	ffffffff 	.word	0xffffffff
 8006cdc:	7fefffff 	.word	0x7fefffff
 8006ce0:	080095c4 	.word	0x080095c4
 8006ce4:	080095c8 	.word	0x080095c8
 8006ce8:	080095d0 	.word	0x080095d0
 8006cec:	080095cc 	.word	0x080095cc
 8006cf0:	080095d4 	.word	0x080095d4
 8006cf4:	9a08      	ldr	r2, [sp, #32]
 8006cf6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	bfa8      	it	ge
 8006cfc:	461a      	movge	r2, r3
 8006cfe:	2a00      	cmp	r2, #0
 8006d00:	4691      	mov	r9, r2
 8006d02:	dc38      	bgt.n	8006d76 <_printf_float+0x346>
 8006d04:	2300      	movs	r3, #0
 8006d06:	9305      	str	r3, [sp, #20]
 8006d08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d0c:	f104 021a 	add.w	r2, r4, #26
 8006d10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d12:	9905      	ldr	r1, [sp, #20]
 8006d14:	9304      	str	r3, [sp, #16]
 8006d16:	eba3 0309 	sub.w	r3, r3, r9
 8006d1a:	428b      	cmp	r3, r1
 8006d1c:	dc33      	bgt.n	8006d86 <_printf_float+0x356>
 8006d1e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	db3c      	blt.n	8006da0 <_printf_float+0x370>
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	07da      	lsls	r2, r3, #31
 8006d2a:	d439      	bmi.n	8006da0 <_printf_float+0x370>
 8006d2c:	9b08      	ldr	r3, [sp, #32]
 8006d2e:	9a04      	ldr	r2, [sp, #16]
 8006d30:	9907      	ldr	r1, [sp, #28]
 8006d32:	1a9a      	subs	r2, r3, r2
 8006d34:	eba3 0901 	sub.w	r9, r3, r1
 8006d38:	4591      	cmp	r9, r2
 8006d3a:	bfa8      	it	ge
 8006d3c:	4691      	movge	r9, r2
 8006d3e:	f1b9 0f00 	cmp.w	r9, #0
 8006d42:	dc35      	bgt.n	8006db0 <_printf_float+0x380>
 8006d44:	f04f 0800 	mov.w	r8, #0
 8006d48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d4c:	f104 0a1a 	add.w	sl, r4, #26
 8006d50:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006d54:	1a9b      	subs	r3, r3, r2
 8006d56:	eba3 0309 	sub.w	r3, r3, r9
 8006d5a:	4543      	cmp	r3, r8
 8006d5c:	f77f af75 	ble.w	8006c4a <_printf_float+0x21a>
 8006d60:	2301      	movs	r3, #1
 8006d62:	4652      	mov	r2, sl
 8006d64:	4631      	mov	r1, r6
 8006d66:	4628      	mov	r0, r5
 8006d68:	47b8      	blx	r7
 8006d6a:	3001      	adds	r0, #1
 8006d6c:	f43f aeae 	beq.w	8006acc <_printf_float+0x9c>
 8006d70:	f108 0801 	add.w	r8, r8, #1
 8006d74:	e7ec      	b.n	8006d50 <_printf_float+0x320>
 8006d76:	4613      	mov	r3, r2
 8006d78:	4631      	mov	r1, r6
 8006d7a:	4642      	mov	r2, r8
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	47b8      	blx	r7
 8006d80:	3001      	adds	r0, #1
 8006d82:	d1bf      	bne.n	8006d04 <_printf_float+0x2d4>
 8006d84:	e6a2      	b.n	8006acc <_printf_float+0x9c>
 8006d86:	2301      	movs	r3, #1
 8006d88:	4631      	mov	r1, r6
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	9204      	str	r2, [sp, #16]
 8006d8e:	47b8      	blx	r7
 8006d90:	3001      	adds	r0, #1
 8006d92:	f43f ae9b 	beq.w	8006acc <_printf_float+0x9c>
 8006d96:	9b05      	ldr	r3, [sp, #20]
 8006d98:	9a04      	ldr	r2, [sp, #16]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	9305      	str	r3, [sp, #20]
 8006d9e:	e7b7      	b.n	8006d10 <_printf_float+0x2e0>
 8006da0:	4653      	mov	r3, sl
 8006da2:	465a      	mov	r2, fp
 8006da4:	4631      	mov	r1, r6
 8006da6:	4628      	mov	r0, r5
 8006da8:	47b8      	blx	r7
 8006daa:	3001      	adds	r0, #1
 8006dac:	d1be      	bne.n	8006d2c <_printf_float+0x2fc>
 8006dae:	e68d      	b.n	8006acc <_printf_float+0x9c>
 8006db0:	9a04      	ldr	r2, [sp, #16]
 8006db2:	464b      	mov	r3, r9
 8006db4:	4442      	add	r2, r8
 8006db6:	4631      	mov	r1, r6
 8006db8:	4628      	mov	r0, r5
 8006dba:	47b8      	blx	r7
 8006dbc:	3001      	adds	r0, #1
 8006dbe:	d1c1      	bne.n	8006d44 <_printf_float+0x314>
 8006dc0:	e684      	b.n	8006acc <_printf_float+0x9c>
 8006dc2:	9a08      	ldr	r2, [sp, #32]
 8006dc4:	2a01      	cmp	r2, #1
 8006dc6:	dc01      	bgt.n	8006dcc <_printf_float+0x39c>
 8006dc8:	07db      	lsls	r3, r3, #31
 8006dca:	d537      	bpl.n	8006e3c <_printf_float+0x40c>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	4642      	mov	r2, r8
 8006dd0:	4631      	mov	r1, r6
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	47b8      	blx	r7
 8006dd6:	3001      	adds	r0, #1
 8006dd8:	f43f ae78 	beq.w	8006acc <_printf_float+0x9c>
 8006ddc:	4653      	mov	r3, sl
 8006dde:	465a      	mov	r2, fp
 8006de0:	4631      	mov	r1, r6
 8006de2:	4628      	mov	r0, r5
 8006de4:	47b8      	blx	r7
 8006de6:	3001      	adds	r0, #1
 8006de8:	f43f ae70 	beq.w	8006acc <_printf_float+0x9c>
 8006dec:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006df0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006df8:	d01b      	beq.n	8006e32 <_printf_float+0x402>
 8006dfa:	9b08      	ldr	r3, [sp, #32]
 8006dfc:	f108 0201 	add.w	r2, r8, #1
 8006e00:	3b01      	subs	r3, #1
 8006e02:	4631      	mov	r1, r6
 8006e04:	4628      	mov	r0, r5
 8006e06:	47b8      	blx	r7
 8006e08:	3001      	adds	r0, #1
 8006e0a:	d10e      	bne.n	8006e2a <_printf_float+0x3fa>
 8006e0c:	e65e      	b.n	8006acc <_printf_float+0x9c>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	464a      	mov	r2, r9
 8006e12:	4631      	mov	r1, r6
 8006e14:	4628      	mov	r0, r5
 8006e16:	47b8      	blx	r7
 8006e18:	3001      	adds	r0, #1
 8006e1a:	f43f ae57 	beq.w	8006acc <_printf_float+0x9c>
 8006e1e:	f108 0801 	add.w	r8, r8, #1
 8006e22:	9b08      	ldr	r3, [sp, #32]
 8006e24:	3b01      	subs	r3, #1
 8006e26:	4543      	cmp	r3, r8
 8006e28:	dcf1      	bgt.n	8006e0e <_printf_float+0x3de>
 8006e2a:	9b04      	ldr	r3, [sp, #16]
 8006e2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006e30:	e6db      	b.n	8006bea <_printf_float+0x1ba>
 8006e32:	f04f 0800 	mov.w	r8, #0
 8006e36:	f104 091a 	add.w	r9, r4, #26
 8006e3a:	e7f2      	b.n	8006e22 <_printf_float+0x3f2>
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	4642      	mov	r2, r8
 8006e40:	e7df      	b.n	8006e02 <_printf_float+0x3d2>
 8006e42:	2301      	movs	r3, #1
 8006e44:	464a      	mov	r2, r9
 8006e46:	4631      	mov	r1, r6
 8006e48:	4628      	mov	r0, r5
 8006e4a:	47b8      	blx	r7
 8006e4c:	3001      	adds	r0, #1
 8006e4e:	f43f ae3d 	beq.w	8006acc <_printf_float+0x9c>
 8006e52:	f108 0801 	add.w	r8, r8, #1
 8006e56:	68e3      	ldr	r3, [r4, #12]
 8006e58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e5a:	1a5b      	subs	r3, r3, r1
 8006e5c:	4543      	cmp	r3, r8
 8006e5e:	dcf0      	bgt.n	8006e42 <_printf_float+0x412>
 8006e60:	e6f7      	b.n	8006c52 <_printf_float+0x222>
 8006e62:	f04f 0800 	mov.w	r8, #0
 8006e66:	f104 0919 	add.w	r9, r4, #25
 8006e6a:	e7f4      	b.n	8006e56 <_printf_float+0x426>

08006e6c <_printf_common>:
 8006e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e70:	4616      	mov	r6, r2
 8006e72:	4699      	mov	r9, r3
 8006e74:	688a      	ldr	r2, [r1, #8]
 8006e76:	690b      	ldr	r3, [r1, #16]
 8006e78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	bfb8      	it	lt
 8006e80:	4613      	movlt	r3, r2
 8006e82:	6033      	str	r3, [r6, #0]
 8006e84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e88:	4607      	mov	r7, r0
 8006e8a:	460c      	mov	r4, r1
 8006e8c:	b10a      	cbz	r2, 8006e92 <_printf_common+0x26>
 8006e8e:	3301      	adds	r3, #1
 8006e90:	6033      	str	r3, [r6, #0]
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	0699      	lsls	r1, r3, #26
 8006e96:	bf42      	ittt	mi
 8006e98:	6833      	ldrmi	r3, [r6, #0]
 8006e9a:	3302      	addmi	r3, #2
 8006e9c:	6033      	strmi	r3, [r6, #0]
 8006e9e:	6825      	ldr	r5, [r4, #0]
 8006ea0:	f015 0506 	ands.w	r5, r5, #6
 8006ea4:	d106      	bne.n	8006eb4 <_printf_common+0x48>
 8006ea6:	f104 0a19 	add.w	sl, r4, #25
 8006eaa:	68e3      	ldr	r3, [r4, #12]
 8006eac:	6832      	ldr	r2, [r6, #0]
 8006eae:	1a9b      	subs	r3, r3, r2
 8006eb0:	42ab      	cmp	r3, r5
 8006eb2:	dc26      	bgt.n	8006f02 <_printf_common+0x96>
 8006eb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006eb8:	1e13      	subs	r3, r2, #0
 8006eba:	6822      	ldr	r2, [r4, #0]
 8006ebc:	bf18      	it	ne
 8006ebe:	2301      	movne	r3, #1
 8006ec0:	0692      	lsls	r2, r2, #26
 8006ec2:	d42b      	bmi.n	8006f1c <_printf_common+0xb0>
 8006ec4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ec8:	4649      	mov	r1, r9
 8006eca:	4638      	mov	r0, r7
 8006ecc:	47c0      	blx	r8
 8006ece:	3001      	adds	r0, #1
 8006ed0:	d01e      	beq.n	8006f10 <_printf_common+0xa4>
 8006ed2:	6823      	ldr	r3, [r4, #0]
 8006ed4:	68e5      	ldr	r5, [r4, #12]
 8006ed6:	6832      	ldr	r2, [r6, #0]
 8006ed8:	f003 0306 	and.w	r3, r3, #6
 8006edc:	2b04      	cmp	r3, #4
 8006ede:	bf08      	it	eq
 8006ee0:	1aad      	subeq	r5, r5, r2
 8006ee2:	68a3      	ldr	r3, [r4, #8]
 8006ee4:	6922      	ldr	r2, [r4, #16]
 8006ee6:	bf0c      	ite	eq
 8006ee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006eec:	2500      	movne	r5, #0
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	bfc4      	itt	gt
 8006ef2:	1a9b      	subgt	r3, r3, r2
 8006ef4:	18ed      	addgt	r5, r5, r3
 8006ef6:	2600      	movs	r6, #0
 8006ef8:	341a      	adds	r4, #26
 8006efa:	42b5      	cmp	r5, r6
 8006efc:	d11a      	bne.n	8006f34 <_printf_common+0xc8>
 8006efe:	2000      	movs	r0, #0
 8006f00:	e008      	b.n	8006f14 <_printf_common+0xa8>
 8006f02:	2301      	movs	r3, #1
 8006f04:	4652      	mov	r2, sl
 8006f06:	4649      	mov	r1, r9
 8006f08:	4638      	mov	r0, r7
 8006f0a:	47c0      	blx	r8
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	d103      	bne.n	8006f18 <_printf_common+0xac>
 8006f10:	f04f 30ff 	mov.w	r0, #4294967295
 8006f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f18:	3501      	adds	r5, #1
 8006f1a:	e7c6      	b.n	8006eaa <_printf_common+0x3e>
 8006f1c:	18e1      	adds	r1, r4, r3
 8006f1e:	1c5a      	adds	r2, r3, #1
 8006f20:	2030      	movs	r0, #48	; 0x30
 8006f22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f26:	4422      	add	r2, r4
 8006f28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f30:	3302      	adds	r3, #2
 8006f32:	e7c7      	b.n	8006ec4 <_printf_common+0x58>
 8006f34:	2301      	movs	r3, #1
 8006f36:	4622      	mov	r2, r4
 8006f38:	4649      	mov	r1, r9
 8006f3a:	4638      	mov	r0, r7
 8006f3c:	47c0      	blx	r8
 8006f3e:	3001      	adds	r0, #1
 8006f40:	d0e6      	beq.n	8006f10 <_printf_common+0xa4>
 8006f42:	3601      	adds	r6, #1
 8006f44:	e7d9      	b.n	8006efa <_printf_common+0x8e>
	...

08006f48 <_printf_i>:
 8006f48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f4c:	7e0f      	ldrb	r7, [r1, #24]
 8006f4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f50:	2f78      	cmp	r7, #120	; 0x78
 8006f52:	4691      	mov	r9, r2
 8006f54:	4680      	mov	r8, r0
 8006f56:	460c      	mov	r4, r1
 8006f58:	469a      	mov	sl, r3
 8006f5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f5e:	d807      	bhi.n	8006f70 <_printf_i+0x28>
 8006f60:	2f62      	cmp	r7, #98	; 0x62
 8006f62:	d80a      	bhi.n	8006f7a <_printf_i+0x32>
 8006f64:	2f00      	cmp	r7, #0
 8006f66:	f000 80d8 	beq.w	800711a <_printf_i+0x1d2>
 8006f6a:	2f58      	cmp	r7, #88	; 0x58
 8006f6c:	f000 80a3 	beq.w	80070b6 <_printf_i+0x16e>
 8006f70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f78:	e03a      	b.n	8006ff0 <_printf_i+0xa8>
 8006f7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f7e:	2b15      	cmp	r3, #21
 8006f80:	d8f6      	bhi.n	8006f70 <_printf_i+0x28>
 8006f82:	a101      	add	r1, pc, #4	; (adr r1, 8006f88 <_printf_i+0x40>)
 8006f84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f88:	08006fe1 	.word	0x08006fe1
 8006f8c:	08006ff5 	.word	0x08006ff5
 8006f90:	08006f71 	.word	0x08006f71
 8006f94:	08006f71 	.word	0x08006f71
 8006f98:	08006f71 	.word	0x08006f71
 8006f9c:	08006f71 	.word	0x08006f71
 8006fa0:	08006ff5 	.word	0x08006ff5
 8006fa4:	08006f71 	.word	0x08006f71
 8006fa8:	08006f71 	.word	0x08006f71
 8006fac:	08006f71 	.word	0x08006f71
 8006fb0:	08006f71 	.word	0x08006f71
 8006fb4:	08007101 	.word	0x08007101
 8006fb8:	08007025 	.word	0x08007025
 8006fbc:	080070e3 	.word	0x080070e3
 8006fc0:	08006f71 	.word	0x08006f71
 8006fc4:	08006f71 	.word	0x08006f71
 8006fc8:	08007123 	.word	0x08007123
 8006fcc:	08006f71 	.word	0x08006f71
 8006fd0:	08007025 	.word	0x08007025
 8006fd4:	08006f71 	.word	0x08006f71
 8006fd8:	08006f71 	.word	0x08006f71
 8006fdc:	080070eb 	.word	0x080070eb
 8006fe0:	682b      	ldr	r3, [r5, #0]
 8006fe2:	1d1a      	adds	r2, r3, #4
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	602a      	str	r2, [r5, #0]
 8006fe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e0a3      	b.n	800713c <_printf_i+0x1f4>
 8006ff4:	6820      	ldr	r0, [r4, #0]
 8006ff6:	6829      	ldr	r1, [r5, #0]
 8006ff8:	0606      	lsls	r6, r0, #24
 8006ffa:	f101 0304 	add.w	r3, r1, #4
 8006ffe:	d50a      	bpl.n	8007016 <_printf_i+0xce>
 8007000:	680e      	ldr	r6, [r1, #0]
 8007002:	602b      	str	r3, [r5, #0]
 8007004:	2e00      	cmp	r6, #0
 8007006:	da03      	bge.n	8007010 <_printf_i+0xc8>
 8007008:	232d      	movs	r3, #45	; 0x2d
 800700a:	4276      	negs	r6, r6
 800700c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007010:	485e      	ldr	r0, [pc, #376]	; (800718c <_printf_i+0x244>)
 8007012:	230a      	movs	r3, #10
 8007014:	e019      	b.n	800704a <_printf_i+0x102>
 8007016:	680e      	ldr	r6, [r1, #0]
 8007018:	602b      	str	r3, [r5, #0]
 800701a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800701e:	bf18      	it	ne
 8007020:	b236      	sxthne	r6, r6
 8007022:	e7ef      	b.n	8007004 <_printf_i+0xbc>
 8007024:	682b      	ldr	r3, [r5, #0]
 8007026:	6820      	ldr	r0, [r4, #0]
 8007028:	1d19      	adds	r1, r3, #4
 800702a:	6029      	str	r1, [r5, #0]
 800702c:	0601      	lsls	r1, r0, #24
 800702e:	d501      	bpl.n	8007034 <_printf_i+0xec>
 8007030:	681e      	ldr	r6, [r3, #0]
 8007032:	e002      	b.n	800703a <_printf_i+0xf2>
 8007034:	0646      	lsls	r6, r0, #25
 8007036:	d5fb      	bpl.n	8007030 <_printf_i+0xe8>
 8007038:	881e      	ldrh	r6, [r3, #0]
 800703a:	4854      	ldr	r0, [pc, #336]	; (800718c <_printf_i+0x244>)
 800703c:	2f6f      	cmp	r7, #111	; 0x6f
 800703e:	bf0c      	ite	eq
 8007040:	2308      	moveq	r3, #8
 8007042:	230a      	movne	r3, #10
 8007044:	2100      	movs	r1, #0
 8007046:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800704a:	6865      	ldr	r5, [r4, #4]
 800704c:	60a5      	str	r5, [r4, #8]
 800704e:	2d00      	cmp	r5, #0
 8007050:	bfa2      	ittt	ge
 8007052:	6821      	ldrge	r1, [r4, #0]
 8007054:	f021 0104 	bicge.w	r1, r1, #4
 8007058:	6021      	strge	r1, [r4, #0]
 800705a:	b90e      	cbnz	r6, 8007060 <_printf_i+0x118>
 800705c:	2d00      	cmp	r5, #0
 800705e:	d04d      	beq.n	80070fc <_printf_i+0x1b4>
 8007060:	4615      	mov	r5, r2
 8007062:	fbb6 f1f3 	udiv	r1, r6, r3
 8007066:	fb03 6711 	mls	r7, r3, r1, r6
 800706a:	5dc7      	ldrb	r7, [r0, r7]
 800706c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007070:	4637      	mov	r7, r6
 8007072:	42bb      	cmp	r3, r7
 8007074:	460e      	mov	r6, r1
 8007076:	d9f4      	bls.n	8007062 <_printf_i+0x11a>
 8007078:	2b08      	cmp	r3, #8
 800707a:	d10b      	bne.n	8007094 <_printf_i+0x14c>
 800707c:	6823      	ldr	r3, [r4, #0]
 800707e:	07de      	lsls	r6, r3, #31
 8007080:	d508      	bpl.n	8007094 <_printf_i+0x14c>
 8007082:	6923      	ldr	r3, [r4, #16]
 8007084:	6861      	ldr	r1, [r4, #4]
 8007086:	4299      	cmp	r1, r3
 8007088:	bfde      	ittt	le
 800708a:	2330      	movle	r3, #48	; 0x30
 800708c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007090:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007094:	1b52      	subs	r2, r2, r5
 8007096:	6122      	str	r2, [r4, #16]
 8007098:	f8cd a000 	str.w	sl, [sp]
 800709c:	464b      	mov	r3, r9
 800709e:	aa03      	add	r2, sp, #12
 80070a0:	4621      	mov	r1, r4
 80070a2:	4640      	mov	r0, r8
 80070a4:	f7ff fee2 	bl	8006e6c <_printf_common>
 80070a8:	3001      	adds	r0, #1
 80070aa:	d14c      	bne.n	8007146 <_printf_i+0x1fe>
 80070ac:	f04f 30ff 	mov.w	r0, #4294967295
 80070b0:	b004      	add	sp, #16
 80070b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b6:	4835      	ldr	r0, [pc, #212]	; (800718c <_printf_i+0x244>)
 80070b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80070bc:	6829      	ldr	r1, [r5, #0]
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80070c4:	6029      	str	r1, [r5, #0]
 80070c6:	061d      	lsls	r5, r3, #24
 80070c8:	d514      	bpl.n	80070f4 <_printf_i+0x1ac>
 80070ca:	07df      	lsls	r7, r3, #31
 80070cc:	bf44      	itt	mi
 80070ce:	f043 0320 	orrmi.w	r3, r3, #32
 80070d2:	6023      	strmi	r3, [r4, #0]
 80070d4:	b91e      	cbnz	r6, 80070de <_printf_i+0x196>
 80070d6:	6823      	ldr	r3, [r4, #0]
 80070d8:	f023 0320 	bic.w	r3, r3, #32
 80070dc:	6023      	str	r3, [r4, #0]
 80070de:	2310      	movs	r3, #16
 80070e0:	e7b0      	b.n	8007044 <_printf_i+0xfc>
 80070e2:	6823      	ldr	r3, [r4, #0]
 80070e4:	f043 0320 	orr.w	r3, r3, #32
 80070e8:	6023      	str	r3, [r4, #0]
 80070ea:	2378      	movs	r3, #120	; 0x78
 80070ec:	4828      	ldr	r0, [pc, #160]	; (8007190 <_printf_i+0x248>)
 80070ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070f2:	e7e3      	b.n	80070bc <_printf_i+0x174>
 80070f4:	0659      	lsls	r1, r3, #25
 80070f6:	bf48      	it	mi
 80070f8:	b2b6      	uxthmi	r6, r6
 80070fa:	e7e6      	b.n	80070ca <_printf_i+0x182>
 80070fc:	4615      	mov	r5, r2
 80070fe:	e7bb      	b.n	8007078 <_printf_i+0x130>
 8007100:	682b      	ldr	r3, [r5, #0]
 8007102:	6826      	ldr	r6, [r4, #0]
 8007104:	6961      	ldr	r1, [r4, #20]
 8007106:	1d18      	adds	r0, r3, #4
 8007108:	6028      	str	r0, [r5, #0]
 800710a:	0635      	lsls	r5, r6, #24
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	d501      	bpl.n	8007114 <_printf_i+0x1cc>
 8007110:	6019      	str	r1, [r3, #0]
 8007112:	e002      	b.n	800711a <_printf_i+0x1d2>
 8007114:	0670      	lsls	r0, r6, #25
 8007116:	d5fb      	bpl.n	8007110 <_printf_i+0x1c8>
 8007118:	8019      	strh	r1, [r3, #0]
 800711a:	2300      	movs	r3, #0
 800711c:	6123      	str	r3, [r4, #16]
 800711e:	4615      	mov	r5, r2
 8007120:	e7ba      	b.n	8007098 <_printf_i+0x150>
 8007122:	682b      	ldr	r3, [r5, #0]
 8007124:	1d1a      	adds	r2, r3, #4
 8007126:	602a      	str	r2, [r5, #0]
 8007128:	681d      	ldr	r5, [r3, #0]
 800712a:	6862      	ldr	r2, [r4, #4]
 800712c:	2100      	movs	r1, #0
 800712e:	4628      	mov	r0, r5
 8007130:	f7f9 f88e 	bl	8000250 <memchr>
 8007134:	b108      	cbz	r0, 800713a <_printf_i+0x1f2>
 8007136:	1b40      	subs	r0, r0, r5
 8007138:	6060      	str	r0, [r4, #4]
 800713a:	6863      	ldr	r3, [r4, #4]
 800713c:	6123      	str	r3, [r4, #16]
 800713e:	2300      	movs	r3, #0
 8007140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007144:	e7a8      	b.n	8007098 <_printf_i+0x150>
 8007146:	6923      	ldr	r3, [r4, #16]
 8007148:	462a      	mov	r2, r5
 800714a:	4649      	mov	r1, r9
 800714c:	4640      	mov	r0, r8
 800714e:	47d0      	blx	sl
 8007150:	3001      	adds	r0, #1
 8007152:	d0ab      	beq.n	80070ac <_printf_i+0x164>
 8007154:	6823      	ldr	r3, [r4, #0]
 8007156:	079b      	lsls	r3, r3, #30
 8007158:	d413      	bmi.n	8007182 <_printf_i+0x23a>
 800715a:	68e0      	ldr	r0, [r4, #12]
 800715c:	9b03      	ldr	r3, [sp, #12]
 800715e:	4298      	cmp	r0, r3
 8007160:	bfb8      	it	lt
 8007162:	4618      	movlt	r0, r3
 8007164:	e7a4      	b.n	80070b0 <_printf_i+0x168>
 8007166:	2301      	movs	r3, #1
 8007168:	4632      	mov	r2, r6
 800716a:	4649      	mov	r1, r9
 800716c:	4640      	mov	r0, r8
 800716e:	47d0      	blx	sl
 8007170:	3001      	adds	r0, #1
 8007172:	d09b      	beq.n	80070ac <_printf_i+0x164>
 8007174:	3501      	adds	r5, #1
 8007176:	68e3      	ldr	r3, [r4, #12]
 8007178:	9903      	ldr	r1, [sp, #12]
 800717a:	1a5b      	subs	r3, r3, r1
 800717c:	42ab      	cmp	r3, r5
 800717e:	dcf2      	bgt.n	8007166 <_printf_i+0x21e>
 8007180:	e7eb      	b.n	800715a <_printf_i+0x212>
 8007182:	2500      	movs	r5, #0
 8007184:	f104 0619 	add.w	r6, r4, #25
 8007188:	e7f5      	b.n	8007176 <_printf_i+0x22e>
 800718a:	bf00      	nop
 800718c:	080095d6 	.word	0x080095d6
 8007190:	080095e7 	.word	0x080095e7

08007194 <siprintf>:
 8007194:	b40e      	push	{r1, r2, r3}
 8007196:	b500      	push	{lr}
 8007198:	b09c      	sub	sp, #112	; 0x70
 800719a:	ab1d      	add	r3, sp, #116	; 0x74
 800719c:	9002      	str	r0, [sp, #8]
 800719e:	9006      	str	r0, [sp, #24]
 80071a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071a4:	4809      	ldr	r0, [pc, #36]	; (80071cc <siprintf+0x38>)
 80071a6:	9107      	str	r1, [sp, #28]
 80071a8:	9104      	str	r1, [sp, #16]
 80071aa:	4909      	ldr	r1, [pc, #36]	; (80071d0 <siprintf+0x3c>)
 80071ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80071b0:	9105      	str	r1, [sp, #20]
 80071b2:	6800      	ldr	r0, [r0, #0]
 80071b4:	9301      	str	r3, [sp, #4]
 80071b6:	a902      	add	r1, sp, #8
 80071b8:	f001 faf8 	bl	80087ac <_svfiprintf_r>
 80071bc:	9b02      	ldr	r3, [sp, #8]
 80071be:	2200      	movs	r2, #0
 80071c0:	701a      	strb	r2, [r3, #0]
 80071c2:	b01c      	add	sp, #112	; 0x70
 80071c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80071c8:	b003      	add	sp, #12
 80071ca:	4770      	bx	lr
 80071cc:	2000000c 	.word	0x2000000c
 80071d0:	ffff0208 	.word	0xffff0208

080071d4 <quorem>:
 80071d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071d8:	6903      	ldr	r3, [r0, #16]
 80071da:	690c      	ldr	r4, [r1, #16]
 80071dc:	42a3      	cmp	r3, r4
 80071de:	4607      	mov	r7, r0
 80071e0:	f2c0 8081 	blt.w	80072e6 <quorem+0x112>
 80071e4:	3c01      	subs	r4, #1
 80071e6:	f101 0814 	add.w	r8, r1, #20
 80071ea:	f100 0514 	add.w	r5, r0, #20
 80071ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071f2:	9301      	str	r3, [sp, #4]
 80071f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80071f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071fc:	3301      	adds	r3, #1
 80071fe:	429a      	cmp	r2, r3
 8007200:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007204:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007208:	fbb2 f6f3 	udiv	r6, r2, r3
 800720c:	d331      	bcc.n	8007272 <quorem+0x9e>
 800720e:	f04f 0e00 	mov.w	lr, #0
 8007212:	4640      	mov	r0, r8
 8007214:	46ac      	mov	ip, r5
 8007216:	46f2      	mov	sl, lr
 8007218:	f850 2b04 	ldr.w	r2, [r0], #4
 800721c:	b293      	uxth	r3, r2
 800721e:	fb06 e303 	mla	r3, r6, r3, lr
 8007222:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007226:	b29b      	uxth	r3, r3
 8007228:	ebaa 0303 	sub.w	r3, sl, r3
 800722c:	f8dc a000 	ldr.w	sl, [ip]
 8007230:	0c12      	lsrs	r2, r2, #16
 8007232:	fa13 f38a 	uxtah	r3, r3, sl
 8007236:	fb06 e202 	mla	r2, r6, r2, lr
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	9b00      	ldr	r3, [sp, #0]
 800723e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007242:	b292      	uxth	r2, r2
 8007244:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007248:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800724c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007250:	4581      	cmp	r9, r0
 8007252:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007256:	f84c 3b04 	str.w	r3, [ip], #4
 800725a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800725e:	d2db      	bcs.n	8007218 <quorem+0x44>
 8007260:	f855 300b 	ldr.w	r3, [r5, fp]
 8007264:	b92b      	cbnz	r3, 8007272 <quorem+0x9e>
 8007266:	9b01      	ldr	r3, [sp, #4]
 8007268:	3b04      	subs	r3, #4
 800726a:	429d      	cmp	r5, r3
 800726c:	461a      	mov	r2, r3
 800726e:	d32e      	bcc.n	80072ce <quorem+0xfa>
 8007270:	613c      	str	r4, [r7, #16]
 8007272:	4638      	mov	r0, r7
 8007274:	f001 f846 	bl	8008304 <__mcmp>
 8007278:	2800      	cmp	r0, #0
 800727a:	db24      	blt.n	80072c6 <quorem+0xf2>
 800727c:	3601      	adds	r6, #1
 800727e:	4628      	mov	r0, r5
 8007280:	f04f 0c00 	mov.w	ip, #0
 8007284:	f858 2b04 	ldr.w	r2, [r8], #4
 8007288:	f8d0 e000 	ldr.w	lr, [r0]
 800728c:	b293      	uxth	r3, r2
 800728e:	ebac 0303 	sub.w	r3, ip, r3
 8007292:	0c12      	lsrs	r2, r2, #16
 8007294:	fa13 f38e 	uxtah	r3, r3, lr
 8007298:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800729c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072a6:	45c1      	cmp	r9, r8
 80072a8:	f840 3b04 	str.w	r3, [r0], #4
 80072ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80072b0:	d2e8      	bcs.n	8007284 <quorem+0xb0>
 80072b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072ba:	b922      	cbnz	r2, 80072c6 <quorem+0xf2>
 80072bc:	3b04      	subs	r3, #4
 80072be:	429d      	cmp	r5, r3
 80072c0:	461a      	mov	r2, r3
 80072c2:	d30a      	bcc.n	80072da <quorem+0x106>
 80072c4:	613c      	str	r4, [r7, #16]
 80072c6:	4630      	mov	r0, r6
 80072c8:	b003      	add	sp, #12
 80072ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ce:	6812      	ldr	r2, [r2, #0]
 80072d0:	3b04      	subs	r3, #4
 80072d2:	2a00      	cmp	r2, #0
 80072d4:	d1cc      	bne.n	8007270 <quorem+0x9c>
 80072d6:	3c01      	subs	r4, #1
 80072d8:	e7c7      	b.n	800726a <quorem+0x96>
 80072da:	6812      	ldr	r2, [r2, #0]
 80072dc:	3b04      	subs	r3, #4
 80072de:	2a00      	cmp	r2, #0
 80072e0:	d1f0      	bne.n	80072c4 <quorem+0xf0>
 80072e2:	3c01      	subs	r4, #1
 80072e4:	e7eb      	b.n	80072be <quorem+0xea>
 80072e6:	2000      	movs	r0, #0
 80072e8:	e7ee      	b.n	80072c8 <quorem+0xf4>
 80072ea:	0000      	movs	r0, r0
 80072ec:	0000      	movs	r0, r0
	...

080072f0 <_dtoa_r>:
 80072f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f4:	ed2d 8b02 	vpush	{d8}
 80072f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80072fa:	b091      	sub	sp, #68	; 0x44
 80072fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007300:	ec59 8b10 	vmov	r8, r9, d0
 8007304:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007306:	9106      	str	r1, [sp, #24]
 8007308:	4606      	mov	r6, r0
 800730a:	9208      	str	r2, [sp, #32]
 800730c:	930c      	str	r3, [sp, #48]	; 0x30
 800730e:	b975      	cbnz	r5, 800732e <_dtoa_r+0x3e>
 8007310:	2010      	movs	r0, #16
 8007312:	f000 fd5f 	bl	8007dd4 <malloc>
 8007316:	4602      	mov	r2, r0
 8007318:	6270      	str	r0, [r6, #36]	; 0x24
 800731a:	b920      	cbnz	r0, 8007326 <_dtoa_r+0x36>
 800731c:	4baa      	ldr	r3, [pc, #680]	; (80075c8 <_dtoa_r+0x2d8>)
 800731e:	21ea      	movs	r1, #234	; 0xea
 8007320:	48aa      	ldr	r0, [pc, #680]	; (80075cc <_dtoa_r+0x2dc>)
 8007322:	f001 fb53 	bl	80089cc <__assert_func>
 8007326:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800732a:	6005      	str	r5, [r0, #0]
 800732c:	60c5      	str	r5, [r0, #12]
 800732e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007330:	6819      	ldr	r1, [r3, #0]
 8007332:	b151      	cbz	r1, 800734a <_dtoa_r+0x5a>
 8007334:	685a      	ldr	r2, [r3, #4]
 8007336:	604a      	str	r2, [r1, #4]
 8007338:	2301      	movs	r3, #1
 800733a:	4093      	lsls	r3, r2
 800733c:	608b      	str	r3, [r1, #8]
 800733e:	4630      	mov	r0, r6
 8007340:	f000 fd9e 	bl	8007e80 <_Bfree>
 8007344:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007346:	2200      	movs	r2, #0
 8007348:	601a      	str	r2, [r3, #0]
 800734a:	f1b9 0300 	subs.w	r3, r9, #0
 800734e:	bfbb      	ittet	lt
 8007350:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007354:	9303      	strlt	r3, [sp, #12]
 8007356:	2300      	movge	r3, #0
 8007358:	2201      	movlt	r2, #1
 800735a:	bfac      	ite	ge
 800735c:	6023      	strge	r3, [r4, #0]
 800735e:	6022      	strlt	r2, [r4, #0]
 8007360:	4b9b      	ldr	r3, [pc, #620]	; (80075d0 <_dtoa_r+0x2e0>)
 8007362:	9c03      	ldr	r4, [sp, #12]
 8007364:	43a3      	bics	r3, r4
 8007366:	d11c      	bne.n	80073a2 <_dtoa_r+0xb2>
 8007368:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800736a:	f242 730f 	movw	r3, #9999	; 0x270f
 800736e:	6013      	str	r3, [r2, #0]
 8007370:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007374:	ea53 0308 	orrs.w	r3, r3, r8
 8007378:	f000 84fd 	beq.w	8007d76 <_dtoa_r+0xa86>
 800737c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800737e:	b963      	cbnz	r3, 800739a <_dtoa_r+0xaa>
 8007380:	4b94      	ldr	r3, [pc, #592]	; (80075d4 <_dtoa_r+0x2e4>)
 8007382:	e01f      	b.n	80073c4 <_dtoa_r+0xd4>
 8007384:	4b94      	ldr	r3, [pc, #592]	; (80075d8 <_dtoa_r+0x2e8>)
 8007386:	9301      	str	r3, [sp, #4]
 8007388:	3308      	adds	r3, #8
 800738a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800738c:	6013      	str	r3, [r2, #0]
 800738e:	9801      	ldr	r0, [sp, #4]
 8007390:	b011      	add	sp, #68	; 0x44
 8007392:	ecbd 8b02 	vpop	{d8}
 8007396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800739a:	4b8e      	ldr	r3, [pc, #568]	; (80075d4 <_dtoa_r+0x2e4>)
 800739c:	9301      	str	r3, [sp, #4]
 800739e:	3303      	adds	r3, #3
 80073a0:	e7f3      	b.n	800738a <_dtoa_r+0x9a>
 80073a2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80073a6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80073aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ae:	d10b      	bne.n	80073c8 <_dtoa_r+0xd8>
 80073b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073b2:	2301      	movs	r3, #1
 80073b4:	6013      	str	r3, [r2, #0]
 80073b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f000 84d9 	beq.w	8007d70 <_dtoa_r+0xa80>
 80073be:	4887      	ldr	r0, [pc, #540]	; (80075dc <_dtoa_r+0x2ec>)
 80073c0:	6018      	str	r0, [r3, #0]
 80073c2:	1e43      	subs	r3, r0, #1
 80073c4:	9301      	str	r3, [sp, #4]
 80073c6:	e7e2      	b.n	800738e <_dtoa_r+0x9e>
 80073c8:	a90f      	add	r1, sp, #60	; 0x3c
 80073ca:	aa0e      	add	r2, sp, #56	; 0x38
 80073cc:	4630      	mov	r0, r6
 80073ce:	eeb0 0b48 	vmov.f64	d0, d8
 80073d2:	f001 f83d 	bl	8008450 <__d2b>
 80073d6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80073da:	4605      	mov	r5, r0
 80073dc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80073de:	2900      	cmp	r1, #0
 80073e0:	d046      	beq.n	8007470 <_dtoa_r+0x180>
 80073e2:	ee18 4a90 	vmov	r4, s17
 80073e6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80073ea:	ec53 2b18 	vmov	r2, r3, d8
 80073ee:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80073f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80073f6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80073fa:	2400      	movs	r4, #0
 80073fc:	ec43 2b16 	vmov	d6, r2, r3
 8007400:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007404:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80075b0 <_dtoa_r+0x2c0>
 8007408:	ee36 7b47 	vsub.f64	d7, d6, d7
 800740c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80075b8 <_dtoa_r+0x2c8>
 8007410:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007414:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80075c0 <_dtoa_r+0x2d0>
 8007418:	ee07 1a90 	vmov	s15, r1
 800741c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007420:	eeb0 7b46 	vmov.f64	d7, d6
 8007424:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007428:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800742c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007434:	ee16 ba90 	vmov	fp, s13
 8007438:	940a      	str	r4, [sp, #40]	; 0x28
 800743a:	d508      	bpl.n	800744e <_dtoa_r+0x15e>
 800743c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007440:	eeb4 6b47 	vcmp.f64	d6, d7
 8007444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007448:	bf18      	it	ne
 800744a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800744e:	f1bb 0f16 	cmp.w	fp, #22
 8007452:	d82f      	bhi.n	80074b4 <_dtoa_r+0x1c4>
 8007454:	4b62      	ldr	r3, [pc, #392]	; (80075e0 <_dtoa_r+0x2f0>)
 8007456:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800745a:	ed93 7b00 	vldr	d7, [r3]
 800745e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007466:	d501      	bpl.n	800746c <_dtoa_r+0x17c>
 8007468:	f10b 3bff 	add.w	fp, fp, #4294967295
 800746c:	2300      	movs	r3, #0
 800746e:	e022      	b.n	80074b6 <_dtoa_r+0x1c6>
 8007470:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007472:	4401      	add	r1, r0
 8007474:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007478:	2b20      	cmp	r3, #32
 800747a:	bfc1      	itttt	gt
 800747c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007480:	fa04 f303 	lslgt.w	r3, r4, r3
 8007484:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007488:	fa28 f804 	lsrgt.w	r8, r8, r4
 800748c:	bfd6      	itet	le
 800748e:	f1c3 0320 	rsble	r3, r3, #32
 8007492:	ea43 0808 	orrgt.w	r8, r3, r8
 8007496:	fa08 f803 	lslle.w	r8, r8, r3
 800749a:	ee07 8a90 	vmov	s15, r8
 800749e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80074a2:	3901      	subs	r1, #1
 80074a4:	ee17 4a90 	vmov	r4, s15
 80074a8:	ec53 2b17 	vmov	r2, r3, d7
 80074ac:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80074b0:	2401      	movs	r4, #1
 80074b2:	e7a3      	b.n	80073fc <_dtoa_r+0x10c>
 80074b4:	2301      	movs	r3, #1
 80074b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80074b8:	1a43      	subs	r3, r0, r1
 80074ba:	1e5a      	subs	r2, r3, #1
 80074bc:	bf45      	ittet	mi
 80074be:	f1c3 0301 	rsbmi	r3, r3, #1
 80074c2:	9304      	strmi	r3, [sp, #16]
 80074c4:	2300      	movpl	r3, #0
 80074c6:	2300      	movmi	r3, #0
 80074c8:	9205      	str	r2, [sp, #20]
 80074ca:	bf54      	ite	pl
 80074cc:	9304      	strpl	r3, [sp, #16]
 80074ce:	9305      	strmi	r3, [sp, #20]
 80074d0:	f1bb 0f00 	cmp.w	fp, #0
 80074d4:	db18      	blt.n	8007508 <_dtoa_r+0x218>
 80074d6:	9b05      	ldr	r3, [sp, #20]
 80074d8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80074dc:	445b      	add	r3, fp
 80074de:	9305      	str	r3, [sp, #20]
 80074e0:	2300      	movs	r3, #0
 80074e2:	9a06      	ldr	r2, [sp, #24]
 80074e4:	2a09      	cmp	r2, #9
 80074e6:	d849      	bhi.n	800757c <_dtoa_r+0x28c>
 80074e8:	2a05      	cmp	r2, #5
 80074ea:	bfc4      	itt	gt
 80074ec:	3a04      	subgt	r2, #4
 80074ee:	9206      	strgt	r2, [sp, #24]
 80074f0:	9a06      	ldr	r2, [sp, #24]
 80074f2:	f1a2 0202 	sub.w	r2, r2, #2
 80074f6:	bfcc      	ite	gt
 80074f8:	2400      	movgt	r4, #0
 80074fa:	2401      	movle	r4, #1
 80074fc:	2a03      	cmp	r2, #3
 80074fe:	d848      	bhi.n	8007592 <_dtoa_r+0x2a2>
 8007500:	e8df f002 	tbb	[pc, r2]
 8007504:	3a2c2e0b 	.word	0x3a2c2e0b
 8007508:	9b04      	ldr	r3, [sp, #16]
 800750a:	2200      	movs	r2, #0
 800750c:	eba3 030b 	sub.w	r3, r3, fp
 8007510:	9304      	str	r3, [sp, #16]
 8007512:	9209      	str	r2, [sp, #36]	; 0x24
 8007514:	f1cb 0300 	rsb	r3, fp, #0
 8007518:	e7e3      	b.n	80074e2 <_dtoa_r+0x1f2>
 800751a:	2200      	movs	r2, #0
 800751c:	9207      	str	r2, [sp, #28]
 800751e:	9a08      	ldr	r2, [sp, #32]
 8007520:	2a00      	cmp	r2, #0
 8007522:	dc39      	bgt.n	8007598 <_dtoa_r+0x2a8>
 8007524:	f04f 0a01 	mov.w	sl, #1
 8007528:	46d1      	mov	r9, sl
 800752a:	4652      	mov	r2, sl
 800752c:	f8cd a020 	str.w	sl, [sp, #32]
 8007530:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8007532:	2100      	movs	r1, #0
 8007534:	6079      	str	r1, [r7, #4]
 8007536:	2004      	movs	r0, #4
 8007538:	f100 0c14 	add.w	ip, r0, #20
 800753c:	4594      	cmp	ip, r2
 800753e:	6879      	ldr	r1, [r7, #4]
 8007540:	d92f      	bls.n	80075a2 <_dtoa_r+0x2b2>
 8007542:	4630      	mov	r0, r6
 8007544:	930d      	str	r3, [sp, #52]	; 0x34
 8007546:	f000 fc5b 	bl	8007e00 <_Balloc>
 800754a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800754c:	9001      	str	r0, [sp, #4]
 800754e:	4602      	mov	r2, r0
 8007550:	2800      	cmp	r0, #0
 8007552:	d149      	bne.n	80075e8 <_dtoa_r+0x2f8>
 8007554:	4b23      	ldr	r3, [pc, #140]	; (80075e4 <_dtoa_r+0x2f4>)
 8007556:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800755a:	e6e1      	b.n	8007320 <_dtoa_r+0x30>
 800755c:	2201      	movs	r2, #1
 800755e:	e7dd      	b.n	800751c <_dtoa_r+0x22c>
 8007560:	2200      	movs	r2, #0
 8007562:	9207      	str	r2, [sp, #28]
 8007564:	9a08      	ldr	r2, [sp, #32]
 8007566:	eb0b 0a02 	add.w	sl, fp, r2
 800756a:	f10a 0901 	add.w	r9, sl, #1
 800756e:	464a      	mov	r2, r9
 8007570:	2a01      	cmp	r2, #1
 8007572:	bfb8      	it	lt
 8007574:	2201      	movlt	r2, #1
 8007576:	e7db      	b.n	8007530 <_dtoa_r+0x240>
 8007578:	2201      	movs	r2, #1
 800757a:	e7f2      	b.n	8007562 <_dtoa_r+0x272>
 800757c:	2401      	movs	r4, #1
 800757e:	2200      	movs	r2, #0
 8007580:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007584:	f04f 3aff 	mov.w	sl, #4294967295
 8007588:	2100      	movs	r1, #0
 800758a:	46d1      	mov	r9, sl
 800758c:	2212      	movs	r2, #18
 800758e:	9108      	str	r1, [sp, #32]
 8007590:	e7ce      	b.n	8007530 <_dtoa_r+0x240>
 8007592:	2201      	movs	r2, #1
 8007594:	9207      	str	r2, [sp, #28]
 8007596:	e7f5      	b.n	8007584 <_dtoa_r+0x294>
 8007598:	f8dd a020 	ldr.w	sl, [sp, #32]
 800759c:	46d1      	mov	r9, sl
 800759e:	4652      	mov	r2, sl
 80075a0:	e7c6      	b.n	8007530 <_dtoa_r+0x240>
 80075a2:	3101      	adds	r1, #1
 80075a4:	6079      	str	r1, [r7, #4]
 80075a6:	0040      	lsls	r0, r0, #1
 80075a8:	e7c6      	b.n	8007538 <_dtoa_r+0x248>
 80075aa:	bf00      	nop
 80075ac:	f3af 8000 	nop.w
 80075b0:	636f4361 	.word	0x636f4361
 80075b4:	3fd287a7 	.word	0x3fd287a7
 80075b8:	8b60c8b3 	.word	0x8b60c8b3
 80075bc:	3fc68a28 	.word	0x3fc68a28
 80075c0:	509f79fb 	.word	0x509f79fb
 80075c4:	3fd34413 	.word	0x3fd34413
 80075c8:	08009605 	.word	0x08009605
 80075cc:	0800961c 	.word	0x0800961c
 80075d0:	7ff00000 	.word	0x7ff00000
 80075d4:	08009601 	.word	0x08009601
 80075d8:	080095f8 	.word	0x080095f8
 80075dc:	080095d5 	.word	0x080095d5
 80075e0:	08009710 	.word	0x08009710
 80075e4:	08009677 	.word	0x08009677
 80075e8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80075ea:	9901      	ldr	r1, [sp, #4]
 80075ec:	6011      	str	r1, [r2, #0]
 80075ee:	f1b9 0f0e 	cmp.w	r9, #14
 80075f2:	d86c      	bhi.n	80076ce <_dtoa_r+0x3de>
 80075f4:	2c00      	cmp	r4, #0
 80075f6:	d06a      	beq.n	80076ce <_dtoa_r+0x3de>
 80075f8:	f1bb 0f00 	cmp.w	fp, #0
 80075fc:	f340 80a0 	ble.w	8007740 <_dtoa_r+0x450>
 8007600:	49c1      	ldr	r1, [pc, #772]	; (8007908 <_dtoa_r+0x618>)
 8007602:	f00b 020f 	and.w	r2, fp, #15
 8007606:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800760a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800760e:	ed92 7b00 	vldr	d7, [r2]
 8007612:	ea4f 112b 	mov.w	r1, fp, asr #4
 8007616:	f000 8087 	beq.w	8007728 <_dtoa_r+0x438>
 800761a:	4abc      	ldr	r2, [pc, #752]	; (800790c <_dtoa_r+0x61c>)
 800761c:	ed92 6b08 	vldr	d6, [r2, #32]
 8007620:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007624:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007628:	f001 010f 	and.w	r1, r1, #15
 800762c:	2203      	movs	r2, #3
 800762e:	48b7      	ldr	r0, [pc, #732]	; (800790c <_dtoa_r+0x61c>)
 8007630:	2900      	cmp	r1, #0
 8007632:	d17b      	bne.n	800772c <_dtoa_r+0x43c>
 8007634:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007638:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800763c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007640:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007642:	2900      	cmp	r1, #0
 8007644:	f000 80a2 	beq.w	800778c <_dtoa_r+0x49c>
 8007648:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800764c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007650:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007658:	f140 8098 	bpl.w	800778c <_dtoa_r+0x49c>
 800765c:	f1b9 0f00 	cmp.w	r9, #0
 8007660:	f000 8094 	beq.w	800778c <_dtoa_r+0x49c>
 8007664:	f1ba 0f00 	cmp.w	sl, #0
 8007668:	dd2f      	ble.n	80076ca <_dtoa_r+0x3da>
 800766a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800766e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007672:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007676:	f10b 37ff 	add.w	r7, fp, #4294967295
 800767a:	3201      	adds	r2, #1
 800767c:	4650      	mov	r0, sl
 800767e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007682:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007686:	ee07 2a90 	vmov	s15, r2
 800768a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800768e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007692:	ee15 4a90 	vmov	r4, s11
 8007696:	ec52 1b15 	vmov	r1, r2, d5
 800769a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800769e:	2800      	cmp	r0, #0
 80076a0:	d177      	bne.n	8007792 <_dtoa_r+0x4a2>
 80076a2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80076a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80076aa:	ec42 1b17 	vmov	d7, r1, r2
 80076ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80076b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076b6:	f300 8263 	bgt.w	8007b80 <_dtoa_r+0x890>
 80076ba:	eeb1 7b47 	vneg.f64	d7, d7
 80076be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80076c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076c6:	f100 8258 	bmi.w	8007b7a <_dtoa_r+0x88a>
 80076ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80076ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80076d0:	2a00      	cmp	r2, #0
 80076d2:	f2c0 811d 	blt.w	8007910 <_dtoa_r+0x620>
 80076d6:	f1bb 0f0e 	cmp.w	fp, #14
 80076da:	f300 8119 	bgt.w	8007910 <_dtoa_r+0x620>
 80076de:	4b8a      	ldr	r3, [pc, #552]	; (8007908 <_dtoa_r+0x618>)
 80076e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80076e4:	ed93 6b00 	vldr	d6, [r3]
 80076e8:	9b08      	ldr	r3, [sp, #32]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f280 80b7 	bge.w	800785e <_dtoa_r+0x56e>
 80076f0:	f1b9 0f00 	cmp.w	r9, #0
 80076f4:	f300 80b3 	bgt.w	800785e <_dtoa_r+0x56e>
 80076f8:	f040 823f 	bne.w	8007b7a <_dtoa_r+0x88a>
 80076fc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007700:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007704:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007708:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800770c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007710:	464c      	mov	r4, r9
 8007712:	464f      	mov	r7, r9
 8007714:	f280 8215 	bge.w	8007b42 <_dtoa_r+0x852>
 8007718:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800771c:	2331      	movs	r3, #49	; 0x31
 800771e:	f808 3b01 	strb.w	r3, [r8], #1
 8007722:	f10b 0b01 	add.w	fp, fp, #1
 8007726:	e211      	b.n	8007b4c <_dtoa_r+0x85c>
 8007728:	2202      	movs	r2, #2
 800772a:	e780      	b.n	800762e <_dtoa_r+0x33e>
 800772c:	07cc      	lsls	r4, r1, #31
 800772e:	d504      	bpl.n	800773a <_dtoa_r+0x44a>
 8007730:	ed90 6b00 	vldr	d6, [r0]
 8007734:	3201      	adds	r2, #1
 8007736:	ee27 7b06 	vmul.f64	d7, d7, d6
 800773a:	1049      	asrs	r1, r1, #1
 800773c:	3008      	adds	r0, #8
 800773e:	e777      	b.n	8007630 <_dtoa_r+0x340>
 8007740:	d022      	beq.n	8007788 <_dtoa_r+0x498>
 8007742:	f1cb 0100 	rsb	r1, fp, #0
 8007746:	4a70      	ldr	r2, [pc, #448]	; (8007908 <_dtoa_r+0x618>)
 8007748:	f001 000f 	and.w	r0, r1, #15
 800774c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007750:	ed92 7b00 	vldr	d7, [r2]
 8007754:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007758:	ed8d 7b02 	vstr	d7, [sp, #8]
 800775c:	486b      	ldr	r0, [pc, #428]	; (800790c <_dtoa_r+0x61c>)
 800775e:	1109      	asrs	r1, r1, #4
 8007760:	2400      	movs	r4, #0
 8007762:	2202      	movs	r2, #2
 8007764:	b929      	cbnz	r1, 8007772 <_dtoa_r+0x482>
 8007766:	2c00      	cmp	r4, #0
 8007768:	f43f af6a 	beq.w	8007640 <_dtoa_r+0x350>
 800776c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007770:	e766      	b.n	8007640 <_dtoa_r+0x350>
 8007772:	07cf      	lsls	r7, r1, #31
 8007774:	d505      	bpl.n	8007782 <_dtoa_r+0x492>
 8007776:	ed90 6b00 	vldr	d6, [r0]
 800777a:	3201      	adds	r2, #1
 800777c:	2401      	movs	r4, #1
 800777e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007782:	1049      	asrs	r1, r1, #1
 8007784:	3008      	adds	r0, #8
 8007786:	e7ed      	b.n	8007764 <_dtoa_r+0x474>
 8007788:	2202      	movs	r2, #2
 800778a:	e759      	b.n	8007640 <_dtoa_r+0x350>
 800778c:	465f      	mov	r7, fp
 800778e:	4648      	mov	r0, r9
 8007790:	e775      	b.n	800767e <_dtoa_r+0x38e>
 8007792:	ec42 1b17 	vmov	d7, r1, r2
 8007796:	4a5c      	ldr	r2, [pc, #368]	; (8007908 <_dtoa_r+0x618>)
 8007798:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800779c:	ed12 4b02 	vldr	d4, [r2, #-8]
 80077a0:	9a01      	ldr	r2, [sp, #4]
 80077a2:	1814      	adds	r4, r2, r0
 80077a4:	9a07      	ldr	r2, [sp, #28]
 80077a6:	b352      	cbz	r2, 80077fe <_dtoa_r+0x50e>
 80077a8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80077ac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80077b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80077b4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80077b8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80077bc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80077c0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80077c4:	ee14 2a90 	vmov	r2, s9
 80077c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80077cc:	3230      	adds	r2, #48	; 0x30
 80077ce:	ee36 6b45 	vsub.f64	d6, d6, d5
 80077d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80077d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077da:	f808 2b01 	strb.w	r2, [r8], #1
 80077de:	d439      	bmi.n	8007854 <_dtoa_r+0x564>
 80077e0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80077e4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80077e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ec:	d472      	bmi.n	80078d4 <_dtoa_r+0x5e4>
 80077ee:	45a0      	cmp	r8, r4
 80077f0:	f43f af6b 	beq.w	80076ca <_dtoa_r+0x3da>
 80077f4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80077f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80077fc:	e7e0      	b.n	80077c0 <_dtoa_r+0x4d0>
 80077fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007802:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007806:	4621      	mov	r1, r4
 8007808:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800780c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007810:	ee14 2a90 	vmov	r2, s9
 8007814:	3230      	adds	r2, #48	; 0x30
 8007816:	f808 2b01 	strb.w	r2, [r8], #1
 800781a:	45a0      	cmp	r8, r4
 800781c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007820:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007824:	d118      	bne.n	8007858 <_dtoa_r+0x568>
 8007826:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800782a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800782e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007836:	dc4d      	bgt.n	80078d4 <_dtoa_r+0x5e4>
 8007838:	ee35 7b47 	vsub.f64	d7, d5, d7
 800783c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007844:	f57f af41 	bpl.w	80076ca <_dtoa_r+0x3da>
 8007848:	4688      	mov	r8, r1
 800784a:	3901      	subs	r1, #1
 800784c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007850:	2b30      	cmp	r3, #48	; 0x30
 8007852:	d0f9      	beq.n	8007848 <_dtoa_r+0x558>
 8007854:	46bb      	mov	fp, r7
 8007856:	e02a      	b.n	80078ae <_dtoa_r+0x5be>
 8007858:	ee26 6b03 	vmul.f64	d6, d6, d3
 800785c:	e7d6      	b.n	800780c <_dtoa_r+0x51c>
 800785e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007862:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007866:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800786a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800786e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007872:	ee15 3a10 	vmov	r3, s10
 8007876:	3330      	adds	r3, #48	; 0x30
 8007878:	f808 3b01 	strb.w	r3, [r8], #1
 800787c:	9b01      	ldr	r3, [sp, #4]
 800787e:	eba8 0303 	sub.w	r3, r8, r3
 8007882:	4599      	cmp	r9, r3
 8007884:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007888:	eea3 7b46 	vfms.f64	d7, d3, d6
 800788c:	d133      	bne.n	80078f6 <_dtoa_r+0x606>
 800788e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007892:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800789a:	dc1a      	bgt.n	80078d2 <_dtoa_r+0x5e2>
 800789c:	eeb4 7b46 	vcmp.f64	d7, d6
 80078a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078a4:	d103      	bne.n	80078ae <_dtoa_r+0x5be>
 80078a6:	ee15 3a10 	vmov	r3, s10
 80078aa:	07d9      	lsls	r1, r3, #31
 80078ac:	d411      	bmi.n	80078d2 <_dtoa_r+0x5e2>
 80078ae:	4629      	mov	r1, r5
 80078b0:	4630      	mov	r0, r6
 80078b2:	f000 fae5 	bl	8007e80 <_Bfree>
 80078b6:	2300      	movs	r3, #0
 80078b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078ba:	f888 3000 	strb.w	r3, [r8]
 80078be:	f10b 0301 	add.w	r3, fp, #1
 80078c2:	6013      	str	r3, [r2, #0]
 80078c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f43f ad61 	beq.w	800738e <_dtoa_r+0x9e>
 80078cc:	f8c3 8000 	str.w	r8, [r3]
 80078d0:	e55d      	b.n	800738e <_dtoa_r+0x9e>
 80078d2:	465f      	mov	r7, fp
 80078d4:	4643      	mov	r3, r8
 80078d6:	4698      	mov	r8, r3
 80078d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078dc:	2a39      	cmp	r2, #57	; 0x39
 80078de:	d106      	bne.n	80078ee <_dtoa_r+0x5fe>
 80078e0:	9a01      	ldr	r2, [sp, #4]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d1f7      	bne.n	80078d6 <_dtoa_r+0x5e6>
 80078e6:	9901      	ldr	r1, [sp, #4]
 80078e8:	2230      	movs	r2, #48	; 0x30
 80078ea:	3701      	adds	r7, #1
 80078ec:	700a      	strb	r2, [r1, #0]
 80078ee:	781a      	ldrb	r2, [r3, #0]
 80078f0:	3201      	adds	r2, #1
 80078f2:	701a      	strb	r2, [r3, #0]
 80078f4:	e7ae      	b.n	8007854 <_dtoa_r+0x564>
 80078f6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80078fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80078fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007902:	d1b2      	bne.n	800786a <_dtoa_r+0x57a>
 8007904:	e7d3      	b.n	80078ae <_dtoa_r+0x5be>
 8007906:	bf00      	nop
 8007908:	08009710 	.word	0x08009710
 800790c:	080096e8 	.word	0x080096e8
 8007910:	9907      	ldr	r1, [sp, #28]
 8007912:	2900      	cmp	r1, #0
 8007914:	f000 80d0 	beq.w	8007ab8 <_dtoa_r+0x7c8>
 8007918:	9906      	ldr	r1, [sp, #24]
 800791a:	2901      	cmp	r1, #1
 800791c:	f300 80b4 	bgt.w	8007a88 <_dtoa_r+0x798>
 8007920:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007922:	2900      	cmp	r1, #0
 8007924:	f000 80ac 	beq.w	8007a80 <_dtoa_r+0x790>
 8007928:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800792c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007930:	461c      	mov	r4, r3
 8007932:	930a      	str	r3, [sp, #40]	; 0x28
 8007934:	9b04      	ldr	r3, [sp, #16]
 8007936:	4413      	add	r3, r2
 8007938:	9304      	str	r3, [sp, #16]
 800793a:	9b05      	ldr	r3, [sp, #20]
 800793c:	2101      	movs	r1, #1
 800793e:	4413      	add	r3, r2
 8007940:	4630      	mov	r0, r6
 8007942:	9305      	str	r3, [sp, #20]
 8007944:	f000 fb54 	bl	8007ff0 <__i2b>
 8007948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800794a:	4607      	mov	r7, r0
 800794c:	f1b8 0f00 	cmp.w	r8, #0
 8007950:	dd0d      	ble.n	800796e <_dtoa_r+0x67e>
 8007952:	9a05      	ldr	r2, [sp, #20]
 8007954:	2a00      	cmp	r2, #0
 8007956:	dd0a      	ble.n	800796e <_dtoa_r+0x67e>
 8007958:	4542      	cmp	r2, r8
 800795a:	9904      	ldr	r1, [sp, #16]
 800795c:	bfa8      	it	ge
 800795e:	4642      	movge	r2, r8
 8007960:	1a89      	subs	r1, r1, r2
 8007962:	9104      	str	r1, [sp, #16]
 8007964:	9905      	ldr	r1, [sp, #20]
 8007966:	eba8 0802 	sub.w	r8, r8, r2
 800796a:	1a8a      	subs	r2, r1, r2
 800796c:	9205      	str	r2, [sp, #20]
 800796e:	b303      	cbz	r3, 80079b2 <_dtoa_r+0x6c2>
 8007970:	9a07      	ldr	r2, [sp, #28]
 8007972:	2a00      	cmp	r2, #0
 8007974:	f000 80a5 	beq.w	8007ac2 <_dtoa_r+0x7d2>
 8007978:	2c00      	cmp	r4, #0
 800797a:	dd13      	ble.n	80079a4 <_dtoa_r+0x6b4>
 800797c:	4639      	mov	r1, r7
 800797e:	4622      	mov	r2, r4
 8007980:	4630      	mov	r0, r6
 8007982:	930d      	str	r3, [sp, #52]	; 0x34
 8007984:	f000 fbf4 	bl	8008170 <__pow5mult>
 8007988:	462a      	mov	r2, r5
 800798a:	4601      	mov	r1, r0
 800798c:	4607      	mov	r7, r0
 800798e:	4630      	mov	r0, r6
 8007990:	f000 fb44 	bl	800801c <__multiply>
 8007994:	4629      	mov	r1, r5
 8007996:	900a      	str	r0, [sp, #40]	; 0x28
 8007998:	4630      	mov	r0, r6
 800799a:	f000 fa71 	bl	8007e80 <_Bfree>
 800799e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079a2:	4615      	mov	r5, r2
 80079a4:	1b1a      	subs	r2, r3, r4
 80079a6:	d004      	beq.n	80079b2 <_dtoa_r+0x6c2>
 80079a8:	4629      	mov	r1, r5
 80079aa:	4630      	mov	r0, r6
 80079ac:	f000 fbe0 	bl	8008170 <__pow5mult>
 80079b0:	4605      	mov	r5, r0
 80079b2:	2101      	movs	r1, #1
 80079b4:	4630      	mov	r0, r6
 80079b6:	f000 fb1b 	bl	8007ff0 <__i2b>
 80079ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079bc:	2b00      	cmp	r3, #0
 80079be:	4604      	mov	r4, r0
 80079c0:	f340 8081 	ble.w	8007ac6 <_dtoa_r+0x7d6>
 80079c4:	461a      	mov	r2, r3
 80079c6:	4601      	mov	r1, r0
 80079c8:	4630      	mov	r0, r6
 80079ca:	f000 fbd1 	bl	8008170 <__pow5mult>
 80079ce:	9b06      	ldr	r3, [sp, #24]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	4604      	mov	r4, r0
 80079d4:	dd7a      	ble.n	8007acc <_dtoa_r+0x7dc>
 80079d6:	2300      	movs	r3, #0
 80079d8:	930a      	str	r3, [sp, #40]	; 0x28
 80079da:	6922      	ldr	r2, [r4, #16]
 80079dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80079e0:	6910      	ldr	r0, [r2, #16]
 80079e2:	f000 fab5 	bl	8007f50 <__hi0bits>
 80079e6:	f1c0 0020 	rsb	r0, r0, #32
 80079ea:	9b05      	ldr	r3, [sp, #20]
 80079ec:	4418      	add	r0, r3
 80079ee:	f010 001f 	ands.w	r0, r0, #31
 80079f2:	f000 808c 	beq.w	8007b0e <_dtoa_r+0x81e>
 80079f6:	f1c0 0220 	rsb	r2, r0, #32
 80079fa:	2a04      	cmp	r2, #4
 80079fc:	f340 8085 	ble.w	8007b0a <_dtoa_r+0x81a>
 8007a00:	f1c0 001c 	rsb	r0, r0, #28
 8007a04:	9b04      	ldr	r3, [sp, #16]
 8007a06:	4403      	add	r3, r0
 8007a08:	9304      	str	r3, [sp, #16]
 8007a0a:	9b05      	ldr	r3, [sp, #20]
 8007a0c:	4403      	add	r3, r0
 8007a0e:	4480      	add	r8, r0
 8007a10:	9305      	str	r3, [sp, #20]
 8007a12:	9b04      	ldr	r3, [sp, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	dd05      	ble.n	8007a24 <_dtoa_r+0x734>
 8007a18:	4629      	mov	r1, r5
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	4630      	mov	r0, r6
 8007a1e:	f000 fc01 	bl	8008224 <__lshift>
 8007a22:	4605      	mov	r5, r0
 8007a24:	9b05      	ldr	r3, [sp, #20]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	dd05      	ble.n	8007a36 <_dtoa_r+0x746>
 8007a2a:	4621      	mov	r1, r4
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	4630      	mov	r0, r6
 8007a30:	f000 fbf8 	bl	8008224 <__lshift>
 8007a34:	4604      	mov	r4, r0
 8007a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d06a      	beq.n	8007b12 <_dtoa_r+0x822>
 8007a3c:	4621      	mov	r1, r4
 8007a3e:	4628      	mov	r0, r5
 8007a40:	f000 fc60 	bl	8008304 <__mcmp>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	da64      	bge.n	8007b12 <_dtoa_r+0x822>
 8007a48:	2300      	movs	r3, #0
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	220a      	movs	r2, #10
 8007a4e:	4630      	mov	r0, r6
 8007a50:	f000 fa38 	bl	8007ec4 <__multadd>
 8007a54:	9b07      	ldr	r3, [sp, #28]
 8007a56:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a5a:	4605      	mov	r5, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f000 8191 	beq.w	8007d84 <_dtoa_r+0xa94>
 8007a62:	4639      	mov	r1, r7
 8007a64:	2300      	movs	r3, #0
 8007a66:	220a      	movs	r2, #10
 8007a68:	4630      	mov	r0, r6
 8007a6a:	f000 fa2b 	bl	8007ec4 <__multadd>
 8007a6e:	f1ba 0f00 	cmp.w	sl, #0
 8007a72:	4607      	mov	r7, r0
 8007a74:	f300 808d 	bgt.w	8007b92 <_dtoa_r+0x8a2>
 8007a78:	9b06      	ldr	r3, [sp, #24]
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	dc50      	bgt.n	8007b20 <_dtoa_r+0x830>
 8007a7e:	e088      	b.n	8007b92 <_dtoa_r+0x8a2>
 8007a80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a82:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007a86:	e751      	b.n	800792c <_dtoa_r+0x63c>
 8007a88:	f109 34ff 	add.w	r4, r9, #4294967295
 8007a8c:	42a3      	cmp	r3, r4
 8007a8e:	bfbf      	itttt	lt
 8007a90:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8007a92:	1ae3      	sublt	r3, r4, r3
 8007a94:	18d2      	addlt	r2, r2, r3
 8007a96:	9209      	strlt	r2, [sp, #36]	; 0x24
 8007a98:	bfb6      	itet	lt
 8007a9a:	4623      	movlt	r3, r4
 8007a9c:	1b1c      	subge	r4, r3, r4
 8007a9e:	2400      	movlt	r4, #0
 8007aa0:	f1b9 0f00 	cmp.w	r9, #0
 8007aa4:	bfb5      	itete	lt
 8007aa6:	9a04      	ldrlt	r2, [sp, #16]
 8007aa8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8007aac:	eba2 0809 	sublt.w	r8, r2, r9
 8007ab0:	464a      	movge	r2, r9
 8007ab2:	bfb8      	it	lt
 8007ab4:	2200      	movlt	r2, #0
 8007ab6:	e73c      	b.n	8007932 <_dtoa_r+0x642>
 8007ab8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007abc:	9f07      	ldr	r7, [sp, #28]
 8007abe:	461c      	mov	r4, r3
 8007ac0:	e744      	b.n	800794c <_dtoa_r+0x65c>
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	e770      	b.n	80079a8 <_dtoa_r+0x6b8>
 8007ac6:	9b06      	ldr	r3, [sp, #24]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	dc18      	bgt.n	8007afe <_dtoa_r+0x80e>
 8007acc:	9b02      	ldr	r3, [sp, #8]
 8007ace:	b9b3      	cbnz	r3, 8007afe <_dtoa_r+0x80e>
 8007ad0:	9b03      	ldr	r3, [sp, #12]
 8007ad2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007ad6:	b9a2      	cbnz	r2, 8007b02 <_dtoa_r+0x812>
 8007ad8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007adc:	0d12      	lsrs	r2, r2, #20
 8007ade:	0512      	lsls	r2, r2, #20
 8007ae0:	b18a      	cbz	r2, 8007b06 <_dtoa_r+0x816>
 8007ae2:	9b04      	ldr	r3, [sp, #16]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	9304      	str	r3, [sp, #16]
 8007ae8:	9b05      	ldr	r3, [sp, #20]
 8007aea:	3301      	adds	r3, #1
 8007aec:	9305      	str	r3, [sp, #20]
 8007aee:	2301      	movs	r3, #1
 8007af0:	930a      	str	r3, [sp, #40]	; 0x28
 8007af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f47f af70 	bne.w	80079da <_dtoa_r+0x6ea>
 8007afa:	2001      	movs	r0, #1
 8007afc:	e775      	b.n	80079ea <_dtoa_r+0x6fa>
 8007afe:	2300      	movs	r3, #0
 8007b00:	e7f6      	b.n	8007af0 <_dtoa_r+0x800>
 8007b02:	9b02      	ldr	r3, [sp, #8]
 8007b04:	e7f4      	b.n	8007af0 <_dtoa_r+0x800>
 8007b06:	920a      	str	r2, [sp, #40]	; 0x28
 8007b08:	e7f3      	b.n	8007af2 <_dtoa_r+0x802>
 8007b0a:	d082      	beq.n	8007a12 <_dtoa_r+0x722>
 8007b0c:	4610      	mov	r0, r2
 8007b0e:	301c      	adds	r0, #28
 8007b10:	e778      	b.n	8007a04 <_dtoa_r+0x714>
 8007b12:	f1b9 0f00 	cmp.w	r9, #0
 8007b16:	dc37      	bgt.n	8007b88 <_dtoa_r+0x898>
 8007b18:	9b06      	ldr	r3, [sp, #24]
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	dd34      	ble.n	8007b88 <_dtoa_r+0x898>
 8007b1e:	46ca      	mov	sl, r9
 8007b20:	f1ba 0f00 	cmp.w	sl, #0
 8007b24:	d10d      	bne.n	8007b42 <_dtoa_r+0x852>
 8007b26:	4621      	mov	r1, r4
 8007b28:	4653      	mov	r3, sl
 8007b2a:	2205      	movs	r2, #5
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	f000 f9c9 	bl	8007ec4 <__multadd>
 8007b32:	4601      	mov	r1, r0
 8007b34:	4604      	mov	r4, r0
 8007b36:	4628      	mov	r0, r5
 8007b38:	f000 fbe4 	bl	8008304 <__mcmp>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	f73f adeb 	bgt.w	8007718 <_dtoa_r+0x428>
 8007b42:	9b08      	ldr	r3, [sp, #32]
 8007b44:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007b48:	ea6f 0b03 	mvn.w	fp, r3
 8007b4c:	f04f 0900 	mov.w	r9, #0
 8007b50:	4621      	mov	r1, r4
 8007b52:	4630      	mov	r0, r6
 8007b54:	f000 f994 	bl	8007e80 <_Bfree>
 8007b58:	2f00      	cmp	r7, #0
 8007b5a:	f43f aea8 	beq.w	80078ae <_dtoa_r+0x5be>
 8007b5e:	f1b9 0f00 	cmp.w	r9, #0
 8007b62:	d005      	beq.n	8007b70 <_dtoa_r+0x880>
 8007b64:	45b9      	cmp	r9, r7
 8007b66:	d003      	beq.n	8007b70 <_dtoa_r+0x880>
 8007b68:	4649      	mov	r1, r9
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	f000 f988 	bl	8007e80 <_Bfree>
 8007b70:	4639      	mov	r1, r7
 8007b72:	4630      	mov	r0, r6
 8007b74:	f000 f984 	bl	8007e80 <_Bfree>
 8007b78:	e699      	b.n	80078ae <_dtoa_r+0x5be>
 8007b7a:	2400      	movs	r4, #0
 8007b7c:	4627      	mov	r7, r4
 8007b7e:	e7e0      	b.n	8007b42 <_dtoa_r+0x852>
 8007b80:	46bb      	mov	fp, r7
 8007b82:	4604      	mov	r4, r0
 8007b84:	4607      	mov	r7, r0
 8007b86:	e5c7      	b.n	8007718 <_dtoa_r+0x428>
 8007b88:	9b07      	ldr	r3, [sp, #28]
 8007b8a:	46ca      	mov	sl, r9
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 8100 	beq.w	8007d92 <_dtoa_r+0xaa2>
 8007b92:	f1b8 0f00 	cmp.w	r8, #0
 8007b96:	dd05      	ble.n	8007ba4 <_dtoa_r+0x8b4>
 8007b98:	4639      	mov	r1, r7
 8007b9a:	4642      	mov	r2, r8
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	f000 fb41 	bl	8008224 <__lshift>
 8007ba2:	4607      	mov	r7, r0
 8007ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d05d      	beq.n	8007c66 <_dtoa_r+0x976>
 8007baa:	6879      	ldr	r1, [r7, #4]
 8007bac:	4630      	mov	r0, r6
 8007bae:	f000 f927 	bl	8007e00 <_Balloc>
 8007bb2:	4680      	mov	r8, r0
 8007bb4:	b928      	cbnz	r0, 8007bc2 <_dtoa_r+0x8d2>
 8007bb6:	4b82      	ldr	r3, [pc, #520]	; (8007dc0 <_dtoa_r+0xad0>)
 8007bb8:	4602      	mov	r2, r0
 8007bba:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007bbe:	f7ff bbaf 	b.w	8007320 <_dtoa_r+0x30>
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	3202      	adds	r2, #2
 8007bc6:	0092      	lsls	r2, r2, #2
 8007bc8:	f107 010c 	add.w	r1, r7, #12
 8007bcc:	300c      	adds	r0, #12
 8007bce:	f000 f909 	bl	8007de4 <memcpy>
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	4641      	mov	r1, r8
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	f000 fb24 	bl	8008224 <__lshift>
 8007bdc:	9b01      	ldr	r3, [sp, #4]
 8007bde:	3301      	adds	r3, #1
 8007be0:	9304      	str	r3, [sp, #16]
 8007be2:	9b01      	ldr	r3, [sp, #4]
 8007be4:	4453      	add	r3, sl
 8007be6:	9308      	str	r3, [sp, #32]
 8007be8:	9b02      	ldr	r3, [sp, #8]
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	46b9      	mov	r9, r7
 8007bf0:	9307      	str	r3, [sp, #28]
 8007bf2:	4607      	mov	r7, r0
 8007bf4:	9b04      	ldr	r3, [sp, #16]
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	9302      	str	r3, [sp, #8]
 8007bfe:	f7ff fae9 	bl	80071d4 <quorem>
 8007c02:	4603      	mov	r3, r0
 8007c04:	3330      	adds	r3, #48	; 0x30
 8007c06:	9005      	str	r0, [sp, #20]
 8007c08:	4649      	mov	r1, r9
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c0e:	f000 fb79 	bl	8008304 <__mcmp>
 8007c12:	463a      	mov	r2, r7
 8007c14:	4682      	mov	sl, r0
 8007c16:	4621      	mov	r1, r4
 8007c18:	4630      	mov	r0, r6
 8007c1a:	f000 fb8f 	bl	800833c <__mdiff>
 8007c1e:	68c2      	ldr	r2, [r0, #12]
 8007c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c22:	4680      	mov	r8, r0
 8007c24:	bb0a      	cbnz	r2, 8007c6a <_dtoa_r+0x97a>
 8007c26:	4601      	mov	r1, r0
 8007c28:	4628      	mov	r0, r5
 8007c2a:	f000 fb6b 	bl	8008304 <__mcmp>
 8007c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c30:	4602      	mov	r2, r0
 8007c32:	4641      	mov	r1, r8
 8007c34:	4630      	mov	r0, r6
 8007c36:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8007c3a:	f000 f921 	bl	8007e80 <_Bfree>
 8007c3e:	9b06      	ldr	r3, [sp, #24]
 8007c40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c42:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007c46:	ea43 0102 	orr.w	r1, r3, r2
 8007c4a:	9b07      	ldr	r3, [sp, #28]
 8007c4c:	430b      	orrs	r3, r1
 8007c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c50:	d10d      	bne.n	8007c6e <_dtoa_r+0x97e>
 8007c52:	2b39      	cmp	r3, #57	; 0x39
 8007c54:	d029      	beq.n	8007caa <_dtoa_r+0x9ba>
 8007c56:	f1ba 0f00 	cmp.w	sl, #0
 8007c5a:	dd01      	ble.n	8007c60 <_dtoa_r+0x970>
 8007c5c:	9b05      	ldr	r3, [sp, #20]
 8007c5e:	3331      	adds	r3, #49	; 0x31
 8007c60:	9a02      	ldr	r2, [sp, #8]
 8007c62:	7013      	strb	r3, [r2, #0]
 8007c64:	e774      	b.n	8007b50 <_dtoa_r+0x860>
 8007c66:	4638      	mov	r0, r7
 8007c68:	e7b8      	b.n	8007bdc <_dtoa_r+0x8ec>
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	e7e1      	b.n	8007c32 <_dtoa_r+0x942>
 8007c6e:	f1ba 0f00 	cmp.w	sl, #0
 8007c72:	db06      	blt.n	8007c82 <_dtoa_r+0x992>
 8007c74:	9906      	ldr	r1, [sp, #24]
 8007c76:	ea41 0a0a 	orr.w	sl, r1, sl
 8007c7a:	9907      	ldr	r1, [sp, #28]
 8007c7c:	ea5a 0101 	orrs.w	r1, sl, r1
 8007c80:	d120      	bne.n	8007cc4 <_dtoa_r+0x9d4>
 8007c82:	2a00      	cmp	r2, #0
 8007c84:	ddec      	ble.n	8007c60 <_dtoa_r+0x970>
 8007c86:	4629      	mov	r1, r5
 8007c88:	2201      	movs	r2, #1
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	9304      	str	r3, [sp, #16]
 8007c8e:	f000 fac9 	bl	8008224 <__lshift>
 8007c92:	4621      	mov	r1, r4
 8007c94:	4605      	mov	r5, r0
 8007c96:	f000 fb35 	bl	8008304 <__mcmp>
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	9b04      	ldr	r3, [sp, #16]
 8007c9e:	dc02      	bgt.n	8007ca6 <_dtoa_r+0x9b6>
 8007ca0:	d1de      	bne.n	8007c60 <_dtoa_r+0x970>
 8007ca2:	07da      	lsls	r2, r3, #31
 8007ca4:	d5dc      	bpl.n	8007c60 <_dtoa_r+0x970>
 8007ca6:	2b39      	cmp	r3, #57	; 0x39
 8007ca8:	d1d8      	bne.n	8007c5c <_dtoa_r+0x96c>
 8007caa:	9a02      	ldr	r2, [sp, #8]
 8007cac:	2339      	movs	r3, #57	; 0x39
 8007cae:	7013      	strb	r3, [r2, #0]
 8007cb0:	4643      	mov	r3, r8
 8007cb2:	4698      	mov	r8, r3
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007cba:	2a39      	cmp	r2, #57	; 0x39
 8007cbc:	d051      	beq.n	8007d62 <_dtoa_r+0xa72>
 8007cbe:	3201      	adds	r2, #1
 8007cc0:	701a      	strb	r2, [r3, #0]
 8007cc2:	e745      	b.n	8007b50 <_dtoa_r+0x860>
 8007cc4:	2a00      	cmp	r2, #0
 8007cc6:	dd03      	ble.n	8007cd0 <_dtoa_r+0x9e0>
 8007cc8:	2b39      	cmp	r3, #57	; 0x39
 8007cca:	d0ee      	beq.n	8007caa <_dtoa_r+0x9ba>
 8007ccc:	3301      	adds	r3, #1
 8007cce:	e7c7      	b.n	8007c60 <_dtoa_r+0x970>
 8007cd0:	9a04      	ldr	r2, [sp, #16]
 8007cd2:	9908      	ldr	r1, [sp, #32]
 8007cd4:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007cd8:	428a      	cmp	r2, r1
 8007cda:	d02b      	beq.n	8007d34 <_dtoa_r+0xa44>
 8007cdc:	4629      	mov	r1, r5
 8007cde:	2300      	movs	r3, #0
 8007ce0:	220a      	movs	r2, #10
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	f000 f8ee 	bl	8007ec4 <__multadd>
 8007ce8:	45b9      	cmp	r9, r7
 8007cea:	4605      	mov	r5, r0
 8007cec:	f04f 0300 	mov.w	r3, #0
 8007cf0:	f04f 020a 	mov.w	r2, #10
 8007cf4:	4649      	mov	r1, r9
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	d107      	bne.n	8007d0a <_dtoa_r+0xa1a>
 8007cfa:	f000 f8e3 	bl	8007ec4 <__multadd>
 8007cfe:	4681      	mov	r9, r0
 8007d00:	4607      	mov	r7, r0
 8007d02:	9b04      	ldr	r3, [sp, #16]
 8007d04:	3301      	adds	r3, #1
 8007d06:	9304      	str	r3, [sp, #16]
 8007d08:	e774      	b.n	8007bf4 <_dtoa_r+0x904>
 8007d0a:	f000 f8db 	bl	8007ec4 <__multadd>
 8007d0e:	4639      	mov	r1, r7
 8007d10:	4681      	mov	r9, r0
 8007d12:	2300      	movs	r3, #0
 8007d14:	220a      	movs	r2, #10
 8007d16:	4630      	mov	r0, r6
 8007d18:	f000 f8d4 	bl	8007ec4 <__multadd>
 8007d1c:	4607      	mov	r7, r0
 8007d1e:	e7f0      	b.n	8007d02 <_dtoa_r+0xa12>
 8007d20:	f1ba 0f00 	cmp.w	sl, #0
 8007d24:	9a01      	ldr	r2, [sp, #4]
 8007d26:	bfcc      	ite	gt
 8007d28:	46d0      	movgt	r8, sl
 8007d2a:	f04f 0801 	movle.w	r8, #1
 8007d2e:	4490      	add	r8, r2
 8007d30:	f04f 0900 	mov.w	r9, #0
 8007d34:	4629      	mov	r1, r5
 8007d36:	2201      	movs	r2, #1
 8007d38:	4630      	mov	r0, r6
 8007d3a:	9302      	str	r3, [sp, #8]
 8007d3c:	f000 fa72 	bl	8008224 <__lshift>
 8007d40:	4621      	mov	r1, r4
 8007d42:	4605      	mov	r5, r0
 8007d44:	f000 fade 	bl	8008304 <__mcmp>
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	dcb1      	bgt.n	8007cb0 <_dtoa_r+0x9c0>
 8007d4c:	d102      	bne.n	8007d54 <_dtoa_r+0xa64>
 8007d4e:	9b02      	ldr	r3, [sp, #8]
 8007d50:	07db      	lsls	r3, r3, #31
 8007d52:	d4ad      	bmi.n	8007cb0 <_dtoa_r+0x9c0>
 8007d54:	4643      	mov	r3, r8
 8007d56:	4698      	mov	r8, r3
 8007d58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d5c:	2a30      	cmp	r2, #48	; 0x30
 8007d5e:	d0fa      	beq.n	8007d56 <_dtoa_r+0xa66>
 8007d60:	e6f6      	b.n	8007b50 <_dtoa_r+0x860>
 8007d62:	9a01      	ldr	r2, [sp, #4]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d1a4      	bne.n	8007cb2 <_dtoa_r+0x9c2>
 8007d68:	f10b 0b01 	add.w	fp, fp, #1
 8007d6c:	2331      	movs	r3, #49	; 0x31
 8007d6e:	e778      	b.n	8007c62 <_dtoa_r+0x972>
 8007d70:	4b14      	ldr	r3, [pc, #80]	; (8007dc4 <_dtoa_r+0xad4>)
 8007d72:	f7ff bb27 	b.w	80073c4 <_dtoa_r+0xd4>
 8007d76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f47f ab03 	bne.w	8007384 <_dtoa_r+0x94>
 8007d7e:	4b12      	ldr	r3, [pc, #72]	; (8007dc8 <_dtoa_r+0xad8>)
 8007d80:	f7ff bb20 	b.w	80073c4 <_dtoa_r+0xd4>
 8007d84:	f1ba 0f00 	cmp.w	sl, #0
 8007d88:	dc03      	bgt.n	8007d92 <_dtoa_r+0xaa2>
 8007d8a:	9b06      	ldr	r3, [sp, #24]
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	f73f aec7 	bgt.w	8007b20 <_dtoa_r+0x830>
 8007d92:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007d96:	4621      	mov	r1, r4
 8007d98:	4628      	mov	r0, r5
 8007d9a:	f7ff fa1b 	bl	80071d4 <quorem>
 8007d9e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007da2:	f808 3b01 	strb.w	r3, [r8], #1
 8007da6:	9a01      	ldr	r2, [sp, #4]
 8007da8:	eba8 0202 	sub.w	r2, r8, r2
 8007dac:	4592      	cmp	sl, r2
 8007dae:	ddb7      	ble.n	8007d20 <_dtoa_r+0xa30>
 8007db0:	4629      	mov	r1, r5
 8007db2:	2300      	movs	r3, #0
 8007db4:	220a      	movs	r2, #10
 8007db6:	4630      	mov	r0, r6
 8007db8:	f000 f884 	bl	8007ec4 <__multadd>
 8007dbc:	4605      	mov	r5, r0
 8007dbe:	e7ea      	b.n	8007d96 <_dtoa_r+0xaa6>
 8007dc0:	08009677 	.word	0x08009677
 8007dc4:	080095d4 	.word	0x080095d4
 8007dc8:	080095f8 	.word	0x080095f8

08007dcc <_localeconv_r>:
 8007dcc:	4800      	ldr	r0, [pc, #0]	; (8007dd0 <_localeconv_r+0x4>)
 8007dce:	4770      	bx	lr
 8007dd0:	20000160 	.word	0x20000160

08007dd4 <malloc>:
 8007dd4:	4b02      	ldr	r3, [pc, #8]	; (8007de0 <malloc+0xc>)
 8007dd6:	4601      	mov	r1, r0
 8007dd8:	6818      	ldr	r0, [r3, #0]
 8007dda:	f000 bc17 	b.w	800860c <_malloc_r>
 8007dde:	bf00      	nop
 8007de0:	2000000c 	.word	0x2000000c

08007de4 <memcpy>:
 8007de4:	440a      	add	r2, r1
 8007de6:	4291      	cmp	r1, r2
 8007de8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007dec:	d100      	bne.n	8007df0 <memcpy+0xc>
 8007dee:	4770      	bx	lr
 8007df0:	b510      	push	{r4, lr}
 8007df2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007df6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dfa:	4291      	cmp	r1, r2
 8007dfc:	d1f9      	bne.n	8007df2 <memcpy+0xe>
 8007dfe:	bd10      	pop	{r4, pc}

08007e00 <_Balloc>:
 8007e00:	b570      	push	{r4, r5, r6, lr}
 8007e02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e04:	4604      	mov	r4, r0
 8007e06:	460d      	mov	r5, r1
 8007e08:	b976      	cbnz	r6, 8007e28 <_Balloc+0x28>
 8007e0a:	2010      	movs	r0, #16
 8007e0c:	f7ff ffe2 	bl	8007dd4 <malloc>
 8007e10:	4602      	mov	r2, r0
 8007e12:	6260      	str	r0, [r4, #36]	; 0x24
 8007e14:	b920      	cbnz	r0, 8007e20 <_Balloc+0x20>
 8007e16:	4b18      	ldr	r3, [pc, #96]	; (8007e78 <_Balloc+0x78>)
 8007e18:	4818      	ldr	r0, [pc, #96]	; (8007e7c <_Balloc+0x7c>)
 8007e1a:	2166      	movs	r1, #102	; 0x66
 8007e1c:	f000 fdd6 	bl	80089cc <__assert_func>
 8007e20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e24:	6006      	str	r6, [r0, #0]
 8007e26:	60c6      	str	r6, [r0, #12]
 8007e28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007e2a:	68f3      	ldr	r3, [r6, #12]
 8007e2c:	b183      	cbz	r3, 8007e50 <_Balloc+0x50>
 8007e2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e36:	b9b8      	cbnz	r0, 8007e68 <_Balloc+0x68>
 8007e38:	2101      	movs	r1, #1
 8007e3a:	fa01 f605 	lsl.w	r6, r1, r5
 8007e3e:	1d72      	adds	r2, r6, #5
 8007e40:	0092      	lsls	r2, r2, #2
 8007e42:	4620      	mov	r0, r4
 8007e44:	f000 fb60 	bl	8008508 <_calloc_r>
 8007e48:	b160      	cbz	r0, 8007e64 <_Balloc+0x64>
 8007e4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e4e:	e00e      	b.n	8007e6e <_Balloc+0x6e>
 8007e50:	2221      	movs	r2, #33	; 0x21
 8007e52:	2104      	movs	r1, #4
 8007e54:	4620      	mov	r0, r4
 8007e56:	f000 fb57 	bl	8008508 <_calloc_r>
 8007e5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e5c:	60f0      	str	r0, [r6, #12]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1e4      	bne.n	8007e2e <_Balloc+0x2e>
 8007e64:	2000      	movs	r0, #0
 8007e66:	bd70      	pop	{r4, r5, r6, pc}
 8007e68:	6802      	ldr	r2, [r0, #0]
 8007e6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e6e:	2300      	movs	r3, #0
 8007e70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e74:	e7f7      	b.n	8007e66 <_Balloc+0x66>
 8007e76:	bf00      	nop
 8007e78:	08009605 	.word	0x08009605
 8007e7c:	08009688 	.word	0x08009688

08007e80 <_Bfree>:
 8007e80:	b570      	push	{r4, r5, r6, lr}
 8007e82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e84:	4605      	mov	r5, r0
 8007e86:	460c      	mov	r4, r1
 8007e88:	b976      	cbnz	r6, 8007ea8 <_Bfree+0x28>
 8007e8a:	2010      	movs	r0, #16
 8007e8c:	f7ff ffa2 	bl	8007dd4 <malloc>
 8007e90:	4602      	mov	r2, r0
 8007e92:	6268      	str	r0, [r5, #36]	; 0x24
 8007e94:	b920      	cbnz	r0, 8007ea0 <_Bfree+0x20>
 8007e96:	4b09      	ldr	r3, [pc, #36]	; (8007ebc <_Bfree+0x3c>)
 8007e98:	4809      	ldr	r0, [pc, #36]	; (8007ec0 <_Bfree+0x40>)
 8007e9a:	218a      	movs	r1, #138	; 0x8a
 8007e9c:	f000 fd96 	bl	80089cc <__assert_func>
 8007ea0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ea4:	6006      	str	r6, [r0, #0]
 8007ea6:	60c6      	str	r6, [r0, #12]
 8007ea8:	b13c      	cbz	r4, 8007eba <_Bfree+0x3a>
 8007eaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007eac:	6862      	ldr	r2, [r4, #4]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007eb4:	6021      	str	r1, [r4, #0]
 8007eb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007eba:	bd70      	pop	{r4, r5, r6, pc}
 8007ebc:	08009605 	.word	0x08009605
 8007ec0:	08009688 	.word	0x08009688

08007ec4 <__multadd>:
 8007ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec8:	690d      	ldr	r5, [r1, #16]
 8007eca:	4607      	mov	r7, r0
 8007ecc:	460c      	mov	r4, r1
 8007ece:	461e      	mov	r6, r3
 8007ed0:	f101 0c14 	add.w	ip, r1, #20
 8007ed4:	2000      	movs	r0, #0
 8007ed6:	f8dc 3000 	ldr.w	r3, [ip]
 8007eda:	b299      	uxth	r1, r3
 8007edc:	fb02 6101 	mla	r1, r2, r1, r6
 8007ee0:	0c1e      	lsrs	r6, r3, #16
 8007ee2:	0c0b      	lsrs	r3, r1, #16
 8007ee4:	fb02 3306 	mla	r3, r2, r6, r3
 8007ee8:	b289      	uxth	r1, r1
 8007eea:	3001      	adds	r0, #1
 8007eec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ef0:	4285      	cmp	r5, r0
 8007ef2:	f84c 1b04 	str.w	r1, [ip], #4
 8007ef6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007efa:	dcec      	bgt.n	8007ed6 <__multadd+0x12>
 8007efc:	b30e      	cbz	r6, 8007f42 <__multadd+0x7e>
 8007efe:	68a3      	ldr	r3, [r4, #8]
 8007f00:	42ab      	cmp	r3, r5
 8007f02:	dc19      	bgt.n	8007f38 <__multadd+0x74>
 8007f04:	6861      	ldr	r1, [r4, #4]
 8007f06:	4638      	mov	r0, r7
 8007f08:	3101      	adds	r1, #1
 8007f0a:	f7ff ff79 	bl	8007e00 <_Balloc>
 8007f0e:	4680      	mov	r8, r0
 8007f10:	b928      	cbnz	r0, 8007f1e <__multadd+0x5a>
 8007f12:	4602      	mov	r2, r0
 8007f14:	4b0c      	ldr	r3, [pc, #48]	; (8007f48 <__multadd+0x84>)
 8007f16:	480d      	ldr	r0, [pc, #52]	; (8007f4c <__multadd+0x88>)
 8007f18:	21b5      	movs	r1, #181	; 0xb5
 8007f1a:	f000 fd57 	bl	80089cc <__assert_func>
 8007f1e:	6922      	ldr	r2, [r4, #16]
 8007f20:	3202      	adds	r2, #2
 8007f22:	f104 010c 	add.w	r1, r4, #12
 8007f26:	0092      	lsls	r2, r2, #2
 8007f28:	300c      	adds	r0, #12
 8007f2a:	f7ff ff5b 	bl	8007de4 <memcpy>
 8007f2e:	4621      	mov	r1, r4
 8007f30:	4638      	mov	r0, r7
 8007f32:	f7ff ffa5 	bl	8007e80 <_Bfree>
 8007f36:	4644      	mov	r4, r8
 8007f38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f3c:	3501      	adds	r5, #1
 8007f3e:	615e      	str	r6, [r3, #20]
 8007f40:	6125      	str	r5, [r4, #16]
 8007f42:	4620      	mov	r0, r4
 8007f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f48:	08009677 	.word	0x08009677
 8007f4c:	08009688 	.word	0x08009688

08007f50 <__hi0bits>:
 8007f50:	0c03      	lsrs	r3, r0, #16
 8007f52:	041b      	lsls	r3, r3, #16
 8007f54:	b9d3      	cbnz	r3, 8007f8c <__hi0bits+0x3c>
 8007f56:	0400      	lsls	r0, r0, #16
 8007f58:	2310      	movs	r3, #16
 8007f5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007f5e:	bf04      	itt	eq
 8007f60:	0200      	lsleq	r0, r0, #8
 8007f62:	3308      	addeq	r3, #8
 8007f64:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007f68:	bf04      	itt	eq
 8007f6a:	0100      	lsleq	r0, r0, #4
 8007f6c:	3304      	addeq	r3, #4
 8007f6e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007f72:	bf04      	itt	eq
 8007f74:	0080      	lsleq	r0, r0, #2
 8007f76:	3302      	addeq	r3, #2
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	db05      	blt.n	8007f88 <__hi0bits+0x38>
 8007f7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007f80:	f103 0301 	add.w	r3, r3, #1
 8007f84:	bf08      	it	eq
 8007f86:	2320      	moveq	r3, #32
 8007f88:	4618      	mov	r0, r3
 8007f8a:	4770      	bx	lr
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	e7e4      	b.n	8007f5a <__hi0bits+0xa>

08007f90 <__lo0bits>:
 8007f90:	6803      	ldr	r3, [r0, #0]
 8007f92:	f013 0207 	ands.w	r2, r3, #7
 8007f96:	4601      	mov	r1, r0
 8007f98:	d00b      	beq.n	8007fb2 <__lo0bits+0x22>
 8007f9a:	07da      	lsls	r2, r3, #31
 8007f9c:	d423      	bmi.n	8007fe6 <__lo0bits+0x56>
 8007f9e:	0798      	lsls	r0, r3, #30
 8007fa0:	bf49      	itett	mi
 8007fa2:	085b      	lsrmi	r3, r3, #1
 8007fa4:	089b      	lsrpl	r3, r3, #2
 8007fa6:	2001      	movmi	r0, #1
 8007fa8:	600b      	strmi	r3, [r1, #0]
 8007faa:	bf5c      	itt	pl
 8007fac:	600b      	strpl	r3, [r1, #0]
 8007fae:	2002      	movpl	r0, #2
 8007fb0:	4770      	bx	lr
 8007fb2:	b298      	uxth	r0, r3
 8007fb4:	b9a8      	cbnz	r0, 8007fe2 <__lo0bits+0x52>
 8007fb6:	0c1b      	lsrs	r3, r3, #16
 8007fb8:	2010      	movs	r0, #16
 8007fba:	b2da      	uxtb	r2, r3
 8007fbc:	b90a      	cbnz	r2, 8007fc2 <__lo0bits+0x32>
 8007fbe:	3008      	adds	r0, #8
 8007fc0:	0a1b      	lsrs	r3, r3, #8
 8007fc2:	071a      	lsls	r2, r3, #28
 8007fc4:	bf04      	itt	eq
 8007fc6:	091b      	lsreq	r3, r3, #4
 8007fc8:	3004      	addeq	r0, #4
 8007fca:	079a      	lsls	r2, r3, #30
 8007fcc:	bf04      	itt	eq
 8007fce:	089b      	lsreq	r3, r3, #2
 8007fd0:	3002      	addeq	r0, #2
 8007fd2:	07da      	lsls	r2, r3, #31
 8007fd4:	d403      	bmi.n	8007fde <__lo0bits+0x4e>
 8007fd6:	085b      	lsrs	r3, r3, #1
 8007fd8:	f100 0001 	add.w	r0, r0, #1
 8007fdc:	d005      	beq.n	8007fea <__lo0bits+0x5a>
 8007fde:	600b      	str	r3, [r1, #0]
 8007fe0:	4770      	bx	lr
 8007fe2:	4610      	mov	r0, r2
 8007fe4:	e7e9      	b.n	8007fba <__lo0bits+0x2a>
 8007fe6:	2000      	movs	r0, #0
 8007fe8:	4770      	bx	lr
 8007fea:	2020      	movs	r0, #32
 8007fec:	4770      	bx	lr
	...

08007ff0 <__i2b>:
 8007ff0:	b510      	push	{r4, lr}
 8007ff2:	460c      	mov	r4, r1
 8007ff4:	2101      	movs	r1, #1
 8007ff6:	f7ff ff03 	bl	8007e00 <_Balloc>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	b928      	cbnz	r0, 800800a <__i2b+0x1a>
 8007ffe:	4b05      	ldr	r3, [pc, #20]	; (8008014 <__i2b+0x24>)
 8008000:	4805      	ldr	r0, [pc, #20]	; (8008018 <__i2b+0x28>)
 8008002:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008006:	f000 fce1 	bl	80089cc <__assert_func>
 800800a:	2301      	movs	r3, #1
 800800c:	6144      	str	r4, [r0, #20]
 800800e:	6103      	str	r3, [r0, #16]
 8008010:	bd10      	pop	{r4, pc}
 8008012:	bf00      	nop
 8008014:	08009677 	.word	0x08009677
 8008018:	08009688 	.word	0x08009688

0800801c <__multiply>:
 800801c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008020:	4691      	mov	r9, r2
 8008022:	690a      	ldr	r2, [r1, #16]
 8008024:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008028:	429a      	cmp	r2, r3
 800802a:	bfb8      	it	lt
 800802c:	460b      	movlt	r3, r1
 800802e:	460c      	mov	r4, r1
 8008030:	bfbc      	itt	lt
 8008032:	464c      	movlt	r4, r9
 8008034:	4699      	movlt	r9, r3
 8008036:	6927      	ldr	r7, [r4, #16]
 8008038:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800803c:	68a3      	ldr	r3, [r4, #8]
 800803e:	6861      	ldr	r1, [r4, #4]
 8008040:	eb07 060a 	add.w	r6, r7, sl
 8008044:	42b3      	cmp	r3, r6
 8008046:	b085      	sub	sp, #20
 8008048:	bfb8      	it	lt
 800804a:	3101      	addlt	r1, #1
 800804c:	f7ff fed8 	bl	8007e00 <_Balloc>
 8008050:	b930      	cbnz	r0, 8008060 <__multiply+0x44>
 8008052:	4602      	mov	r2, r0
 8008054:	4b44      	ldr	r3, [pc, #272]	; (8008168 <__multiply+0x14c>)
 8008056:	4845      	ldr	r0, [pc, #276]	; (800816c <__multiply+0x150>)
 8008058:	f240 115d 	movw	r1, #349	; 0x15d
 800805c:	f000 fcb6 	bl	80089cc <__assert_func>
 8008060:	f100 0514 	add.w	r5, r0, #20
 8008064:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008068:	462b      	mov	r3, r5
 800806a:	2200      	movs	r2, #0
 800806c:	4543      	cmp	r3, r8
 800806e:	d321      	bcc.n	80080b4 <__multiply+0x98>
 8008070:	f104 0314 	add.w	r3, r4, #20
 8008074:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008078:	f109 0314 	add.w	r3, r9, #20
 800807c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008080:	9202      	str	r2, [sp, #8]
 8008082:	1b3a      	subs	r2, r7, r4
 8008084:	3a15      	subs	r2, #21
 8008086:	f022 0203 	bic.w	r2, r2, #3
 800808a:	3204      	adds	r2, #4
 800808c:	f104 0115 	add.w	r1, r4, #21
 8008090:	428f      	cmp	r7, r1
 8008092:	bf38      	it	cc
 8008094:	2204      	movcc	r2, #4
 8008096:	9201      	str	r2, [sp, #4]
 8008098:	9a02      	ldr	r2, [sp, #8]
 800809a:	9303      	str	r3, [sp, #12]
 800809c:	429a      	cmp	r2, r3
 800809e:	d80c      	bhi.n	80080ba <__multiply+0x9e>
 80080a0:	2e00      	cmp	r6, #0
 80080a2:	dd03      	ble.n	80080ac <__multiply+0x90>
 80080a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d05a      	beq.n	8008162 <__multiply+0x146>
 80080ac:	6106      	str	r6, [r0, #16]
 80080ae:	b005      	add	sp, #20
 80080b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b4:	f843 2b04 	str.w	r2, [r3], #4
 80080b8:	e7d8      	b.n	800806c <__multiply+0x50>
 80080ba:	f8b3 a000 	ldrh.w	sl, [r3]
 80080be:	f1ba 0f00 	cmp.w	sl, #0
 80080c2:	d024      	beq.n	800810e <__multiply+0xf2>
 80080c4:	f104 0e14 	add.w	lr, r4, #20
 80080c8:	46a9      	mov	r9, r5
 80080ca:	f04f 0c00 	mov.w	ip, #0
 80080ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 80080d2:	f8d9 1000 	ldr.w	r1, [r9]
 80080d6:	fa1f fb82 	uxth.w	fp, r2
 80080da:	b289      	uxth	r1, r1
 80080dc:	fb0a 110b 	mla	r1, sl, fp, r1
 80080e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80080e4:	f8d9 2000 	ldr.w	r2, [r9]
 80080e8:	4461      	add	r1, ip
 80080ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80080ee:	fb0a c20b 	mla	r2, sl, fp, ip
 80080f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80080f6:	b289      	uxth	r1, r1
 80080f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80080fc:	4577      	cmp	r7, lr
 80080fe:	f849 1b04 	str.w	r1, [r9], #4
 8008102:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008106:	d8e2      	bhi.n	80080ce <__multiply+0xb2>
 8008108:	9a01      	ldr	r2, [sp, #4]
 800810a:	f845 c002 	str.w	ip, [r5, r2]
 800810e:	9a03      	ldr	r2, [sp, #12]
 8008110:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008114:	3304      	adds	r3, #4
 8008116:	f1b9 0f00 	cmp.w	r9, #0
 800811a:	d020      	beq.n	800815e <__multiply+0x142>
 800811c:	6829      	ldr	r1, [r5, #0]
 800811e:	f104 0c14 	add.w	ip, r4, #20
 8008122:	46ae      	mov	lr, r5
 8008124:	f04f 0a00 	mov.w	sl, #0
 8008128:	f8bc b000 	ldrh.w	fp, [ip]
 800812c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008130:	fb09 220b 	mla	r2, r9, fp, r2
 8008134:	4492      	add	sl, r2
 8008136:	b289      	uxth	r1, r1
 8008138:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800813c:	f84e 1b04 	str.w	r1, [lr], #4
 8008140:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008144:	f8be 1000 	ldrh.w	r1, [lr]
 8008148:	0c12      	lsrs	r2, r2, #16
 800814a:	fb09 1102 	mla	r1, r9, r2, r1
 800814e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008152:	4567      	cmp	r7, ip
 8008154:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008158:	d8e6      	bhi.n	8008128 <__multiply+0x10c>
 800815a:	9a01      	ldr	r2, [sp, #4]
 800815c:	50a9      	str	r1, [r5, r2]
 800815e:	3504      	adds	r5, #4
 8008160:	e79a      	b.n	8008098 <__multiply+0x7c>
 8008162:	3e01      	subs	r6, #1
 8008164:	e79c      	b.n	80080a0 <__multiply+0x84>
 8008166:	bf00      	nop
 8008168:	08009677 	.word	0x08009677
 800816c:	08009688 	.word	0x08009688

08008170 <__pow5mult>:
 8008170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008174:	4615      	mov	r5, r2
 8008176:	f012 0203 	ands.w	r2, r2, #3
 800817a:	4606      	mov	r6, r0
 800817c:	460f      	mov	r7, r1
 800817e:	d007      	beq.n	8008190 <__pow5mult+0x20>
 8008180:	4c25      	ldr	r4, [pc, #148]	; (8008218 <__pow5mult+0xa8>)
 8008182:	3a01      	subs	r2, #1
 8008184:	2300      	movs	r3, #0
 8008186:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800818a:	f7ff fe9b 	bl	8007ec4 <__multadd>
 800818e:	4607      	mov	r7, r0
 8008190:	10ad      	asrs	r5, r5, #2
 8008192:	d03d      	beq.n	8008210 <__pow5mult+0xa0>
 8008194:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008196:	b97c      	cbnz	r4, 80081b8 <__pow5mult+0x48>
 8008198:	2010      	movs	r0, #16
 800819a:	f7ff fe1b 	bl	8007dd4 <malloc>
 800819e:	4602      	mov	r2, r0
 80081a0:	6270      	str	r0, [r6, #36]	; 0x24
 80081a2:	b928      	cbnz	r0, 80081b0 <__pow5mult+0x40>
 80081a4:	4b1d      	ldr	r3, [pc, #116]	; (800821c <__pow5mult+0xac>)
 80081a6:	481e      	ldr	r0, [pc, #120]	; (8008220 <__pow5mult+0xb0>)
 80081a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80081ac:	f000 fc0e 	bl	80089cc <__assert_func>
 80081b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80081b4:	6004      	str	r4, [r0, #0]
 80081b6:	60c4      	str	r4, [r0, #12]
 80081b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80081bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80081c0:	b94c      	cbnz	r4, 80081d6 <__pow5mult+0x66>
 80081c2:	f240 2171 	movw	r1, #625	; 0x271
 80081c6:	4630      	mov	r0, r6
 80081c8:	f7ff ff12 	bl	8007ff0 <__i2b>
 80081cc:	2300      	movs	r3, #0
 80081ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80081d2:	4604      	mov	r4, r0
 80081d4:	6003      	str	r3, [r0, #0]
 80081d6:	f04f 0900 	mov.w	r9, #0
 80081da:	07eb      	lsls	r3, r5, #31
 80081dc:	d50a      	bpl.n	80081f4 <__pow5mult+0x84>
 80081de:	4639      	mov	r1, r7
 80081e0:	4622      	mov	r2, r4
 80081e2:	4630      	mov	r0, r6
 80081e4:	f7ff ff1a 	bl	800801c <__multiply>
 80081e8:	4639      	mov	r1, r7
 80081ea:	4680      	mov	r8, r0
 80081ec:	4630      	mov	r0, r6
 80081ee:	f7ff fe47 	bl	8007e80 <_Bfree>
 80081f2:	4647      	mov	r7, r8
 80081f4:	106d      	asrs	r5, r5, #1
 80081f6:	d00b      	beq.n	8008210 <__pow5mult+0xa0>
 80081f8:	6820      	ldr	r0, [r4, #0]
 80081fa:	b938      	cbnz	r0, 800820c <__pow5mult+0x9c>
 80081fc:	4622      	mov	r2, r4
 80081fe:	4621      	mov	r1, r4
 8008200:	4630      	mov	r0, r6
 8008202:	f7ff ff0b 	bl	800801c <__multiply>
 8008206:	6020      	str	r0, [r4, #0]
 8008208:	f8c0 9000 	str.w	r9, [r0]
 800820c:	4604      	mov	r4, r0
 800820e:	e7e4      	b.n	80081da <__pow5mult+0x6a>
 8008210:	4638      	mov	r0, r7
 8008212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008216:	bf00      	nop
 8008218:	080097d8 	.word	0x080097d8
 800821c:	08009605 	.word	0x08009605
 8008220:	08009688 	.word	0x08009688

08008224 <__lshift>:
 8008224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008228:	460c      	mov	r4, r1
 800822a:	6849      	ldr	r1, [r1, #4]
 800822c:	6923      	ldr	r3, [r4, #16]
 800822e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008232:	68a3      	ldr	r3, [r4, #8]
 8008234:	4607      	mov	r7, r0
 8008236:	4691      	mov	r9, r2
 8008238:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800823c:	f108 0601 	add.w	r6, r8, #1
 8008240:	42b3      	cmp	r3, r6
 8008242:	db0b      	blt.n	800825c <__lshift+0x38>
 8008244:	4638      	mov	r0, r7
 8008246:	f7ff fddb 	bl	8007e00 <_Balloc>
 800824a:	4605      	mov	r5, r0
 800824c:	b948      	cbnz	r0, 8008262 <__lshift+0x3e>
 800824e:	4602      	mov	r2, r0
 8008250:	4b2a      	ldr	r3, [pc, #168]	; (80082fc <__lshift+0xd8>)
 8008252:	482b      	ldr	r0, [pc, #172]	; (8008300 <__lshift+0xdc>)
 8008254:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008258:	f000 fbb8 	bl	80089cc <__assert_func>
 800825c:	3101      	adds	r1, #1
 800825e:	005b      	lsls	r3, r3, #1
 8008260:	e7ee      	b.n	8008240 <__lshift+0x1c>
 8008262:	2300      	movs	r3, #0
 8008264:	f100 0114 	add.w	r1, r0, #20
 8008268:	f100 0210 	add.w	r2, r0, #16
 800826c:	4618      	mov	r0, r3
 800826e:	4553      	cmp	r3, sl
 8008270:	db37      	blt.n	80082e2 <__lshift+0xbe>
 8008272:	6920      	ldr	r0, [r4, #16]
 8008274:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008278:	f104 0314 	add.w	r3, r4, #20
 800827c:	f019 091f 	ands.w	r9, r9, #31
 8008280:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008284:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008288:	d02f      	beq.n	80082ea <__lshift+0xc6>
 800828a:	f1c9 0e20 	rsb	lr, r9, #32
 800828e:	468a      	mov	sl, r1
 8008290:	f04f 0c00 	mov.w	ip, #0
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	fa02 f209 	lsl.w	r2, r2, r9
 800829a:	ea42 020c 	orr.w	r2, r2, ip
 800829e:	f84a 2b04 	str.w	r2, [sl], #4
 80082a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80082a6:	4298      	cmp	r0, r3
 80082a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80082ac:	d8f2      	bhi.n	8008294 <__lshift+0x70>
 80082ae:	1b03      	subs	r3, r0, r4
 80082b0:	3b15      	subs	r3, #21
 80082b2:	f023 0303 	bic.w	r3, r3, #3
 80082b6:	3304      	adds	r3, #4
 80082b8:	f104 0215 	add.w	r2, r4, #21
 80082bc:	4290      	cmp	r0, r2
 80082be:	bf38      	it	cc
 80082c0:	2304      	movcc	r3, #4
 80082c2:	f841 c003 	str.w	ip, [r1, r3]
 80082c6:	f1bc 0f00 	cmp.w	ip, #0
 80082ca:	d001      	beq.n	80082d0 <__lshift+0xac>
 80082cc:	f108 0602 	add.w	r6, r8, #2
 80082d0:	3e01      	subs	r6, #1
 80082d2:	4638      	mov	r0, r7
 80082d4:	612e      	str	r6, [r5, #16]
 80082d6:	4621      	mov	r1, r4
 80082d8:	f7ff fdd2 	bl	8007e80 <_Bfree>
 80082dc:	4628      	mov	r0, r5
 80082de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80082e6:	3301      	adds	r3, #1
 80082e8:	e7c1      	b.n	800826e <__lshift+0x4a>
 80082ea:	3904      	subs	r1, #4
 80082ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80082f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80082f4:	4298      	cmp	r0, r3
 80082f6:	d8f9      	bhi.n	80082ec <__lshift+0xc8>
 80082f8:	e7ea      	b.n	80082d0 <__lshift+0xac>
 80082fa:	bf00      	nop
 80082fc:	08009677 	.word	0x08009677
 8008300:	08009688 	.word	0x08009688

08008304 <__mcmp>:
 8008304:	b530      	push	{r4, r5, lr}
 8008306:	6902      	ldr	r2, [r0, #16]
 8008308:	690c      	ldr	r4, [r1, #16]
 800830a:	1b12      	subs	r2, r2, r4
 800830c:	d10e      	bne.n	800832c <__mcmp+0x28>
 800830e:	f100 0314 	add.w	r3, r0, #20
 8008312:	3114      	adds	r1, #20
 8008314:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008318:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800831c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008320:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008324:	42a5      	cmp	r5, r4
 8008326:	d003      	beq.n	8008330 <__mcmp+0x2c>
 8008328:	d305      	bcc.n	8008336 <__mcmp+0x32>
 800832a:	2201      	movs	r2, #1
 800832c:	4610      	mov	r0, r2
 800832e:	bd30      	pop	{r4, r5, pc}
 8008330:	4283      	cmp	r3, r0
 8008332:	d3f3      	bcc.n	800831c <__mcmp+0x18>
 8008334:	e7fa      	b.n	800832c <__mcmp+0x28>
 8008336:	f04f 32ff 	mov.w	r2, #4294967295
 800833a:	e7f7      	b.n	800832c <__mcmp+0x28>

0800833c <__mdiff>:
 800833c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008340:	460c      	mov	r4, r1
 8008342:	4606      	mov	r6, r0
 8008344:	4611      	mov	r1, r2
 8008346:	4620      	mov	r0, r4
 8008348:	4690      	mov	r8, r2
 800834a:	f7ff ffdb 	bl	8008304 <__mcmp>
 800834e:	1e05      	subs	r5, r0, #0
 8008350:	d110      	bne.n	8008374 <__mdiff+0x38>
 8008352:	4629      	mov	r1, r5
 8008354:	4630      	mov	r0, r6
 8008356:	f7ff fd53 	bl	8007e00 <_Balloc>
 800835a:	b930      	cbnz	r0, 800836a <__mdiff+0x2e>
 800835c:	4b3a      	ldr	r3, [pc, #232]	; (8008448 <__mdiff+0x10c>)
 800835e:	4602      	mov	r2, r0
 8008360:	f240 2132 	movw	r1, #562	; 0x232
 8008364:	4839      	ldr	r0, [pc, #228]	; (800844c <__mdiff+0x110>)
 8008366:	f000 fb31 	bl	80089cc <__assert_func>
 800836a:	2301      	movs	r3, #1
 800836c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008370:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008374:	bfa4      	itt	ge
 8008376:	4643      	movge	r3, r8
 8008378:	46a0      	movge	r8, r4
 800837a:	4630      	mov	r0, r6
 800837c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008380:	bfa6      	itte	ge
 8008382:	461c      	movge	r4, r3
 8008384:	2500      	movge	r5, #0
 8008386:	2501      	movlt	r5, #1
 8008388:	f7ff fd3a 	bl	8007e00 <_Balloc>
 800838c:	b920      	cbnz	r0, 8008398 <__mdiff+0x5c>
 800838e:	4b2e      	ldr	r3, [pc, #184]	; (8008448 <__mdiff+0x10c>)
 8008390:	4602      	mov	r2, r0
 8008392:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008396:	e7e5      	b.n	8008364 <__mdiff+0x28>
 8008398:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800839c:	6926      	ldr	r6, [r4, #16]
 800839e:	60c5      	str	r5, [r0, #12]
 80083a0:	f104 0914 	add.w	r9, r4, #20
 80083a4:	f108 0514 	add.w	r5, r8, #20
 80083a8:	f100 0e14 	add.w	lr, r0, #20
 80083ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80083b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80083b4:	f108 0210 	add.w	r2, r8, #16
 80083b8:	46f2      	mov	sl, lr
 80083ba:	2100      	movs	r1, #0
 80083bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80083c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80083c4:	fa1f f883 	uxth.w	r8, r3
 80083c8:	fa11 f18b 	uxtah	r1, r1, fp
 80083cc:	0c1b      	lsrs	r3, r3, #16
 80083ce:	eba1 0808 	sub.w	r8, r1, r8
 80083d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80083d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80083da:	fa1f f888 	uxth.w	r8, r8
 80083de:	1419      	asrs	r1, r3, #16
 80083e0:	454e      	cmp	r6, r9
 80083e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80083e6:	f84a 3b04 	str.w	r3, [sl], #4
 80083ea:	d8e7      	bhi.n	80083bc <__mdiff+0x80>
 80083ec:	1b33      	subs	r3, r6, r4
 80083ee:	3b15      	subs	r3, #21
 80083f0:	f023 0303 	bic.w	r3, r3, #3
 80083f4:	3304      	adds	r3, #4
 80083f6:	3415      	adds	r4, #21
 80083f8:	42a6      	cmp	r6, r4
 80083fa:	bf38      	it	cc
 80083fc:	2304      	movcc	r3, #4
 80083fe:	441d      	add	r5, r3
 8008400:	4473      	add	r3, lr
 8008402:	469e      	mov	lr, r3
 8008404:	462e      	mov	r6, r5
 8008406:	4566      	cmp	r6, ip
 8008408:	d30e      	bcc.n	8008428 <__mdiff+0xec>
 800840a:	f10c 0203 	add.w	r2, ip, #3
 800840e:	1b52      	subs	r2, r2, r5
 8008410:	f022 0203 	bic.w	r2, r2, #3
 8008414:	3d03      	subs	r5, #3
 8008416:	45ac      	cmp	ip, r5
 8008418:	bf38      	it	cc
 800841a:	2200      	movcc	r2, #0
 800841c:	441a      	add	r2, r3
 800841e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008422:	b17b      	cbz	r3, 8008444 <__mdiff+0x108>
 8008424:	6107      	str	r7, [r0, #16]
 8008426:	e7a3      	b.n	8008370 <__mdiff+0x34>
 8008428:	f856 8b04 	ldr.w	r8, [r6], #4
 800842c:	fa11 f288 	uxtah	r2, r1, r8
 8008430:	1414      	asrs	r4, r2, #16
 8008432:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008436:	b292      	uxth	r2, r2
 8008438:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800843c:	f84e 2b04 	str.w	r2, [lr], #4
 8008440:	1421      	asrs	r1, r4, #16
 8008442:	e7e0      	b.n	8008406 <__mdiff+0xca>
 8008444:	3f01      	subs	r7, #1
 8008446:	e7ea      	b.n	800841e <__mdiff+0xe2>
 8008448:	08009677 	.word	0x08009677
 800844c:	08009688 	.word	0x08009688

08008450 <__d2b>:
 8008450:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008454:	4689      	mov	r9, r1
 8008456:	2101      	movs	r1, #1
 8008458:	ec57 6b10 	vmov	r6, r7, d0
 800845c:	4690      	mov	r8, r2
 800845e:	f7ff fccf 	bl	8007e00 <_Balloc>
 8008462:	4604      	mov	r4, r0
 8008464:	b930      	cbnz	r0, 8008474 <__d2b+0x24>
 8008466:	4602      	mov	r2, r0
 8008468:	4b25      	ldr	r3, [pc, #148]	; (8008500 <__d2b+0xb0>)
 800846a:	4826      	ldr	r0, [pc, #152]	; (8008504 <__d2b+0xb4>)
 800846c:	f240 310a 	movw	r1, #778	; 0x30a
 8008470:	f000 faac 	bl	80089cc <__assert_func>
 8008474:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008478:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800847c:	bb35      	cbnz	r5, 80084cc <__d2b+0x7c>
 800847e:	2e00      	cmp	r6, #0
 8008480:	9301      	str	r3, [sp, #4]
 8008482:	d028      	beq.n	80084d6 <__d2b+0x86>
 8008484:	4668      	mov	r0, sp
 8008486:	9600      	str	r6, [sp, #0]
 8008488:	f7ff fd82 	bl	8007f90 <__lo0bits>
 800848c:	9900      	ldr	r1, [sp, #0]
 800848e:	b300      	cbz	r0, 80084d2 <__d2b+0x82>
 8008490:	9a01      	ldr	r2, [sp, #4]
 8008492:	f1c0 0320 	rsb	r3, r0, #32
 8008496:	fa02 f303 	lsl.w	r3, r2, r3
 800849a:	430b      	orrs	r3, r1
 800849c:	40c2      	lsrs	r2, r0
 800849e:	6163      	str	r3, [r4, #20]
 80084a0:	9201      	str	r2, [sp, #4]
 80084a2:	9b01      	ldr	r3, [sp, #4]
 80084a4:	61a3      	str	r3, [r4, #24]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	bf14      	ite	ne
 80084aa:	2202      	movne	r2, #2
 80084ac:	2201      	moveq	r2, #1
 80084ae:	6122      	str	r2, [r4, #16]
 80084b0:	b1d5      	cbz	r5, 80084e8 <__d2b+0x98>
 80084b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80084b6:	4405      	add	r5, r0
 80084b8:	f8c9 5000 	str.w	r5, [r9]
 80084bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80084c0:	f8c8 0000 	str.w	r0, [r8]
 80084c4:	4620      	mov	r0, r4
 80084c6:	b003      	add	sp, #12
 80084c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084d0:	e7d5      	b.n	800847e <__d2b+0x2e>
 80084d2:	6161      	str	r1, [r4, #20]
 80084d4:	e7e5      	b.n	80084a2 <__d2b+0x52>
 80084d6:	a801      	add	r0, sp, #4
 80084d8:	f7ff fd5a 	bl	8007f90 <__lo0bits>
 80084dc:	9b01      	ldr	r3, [sp, #4]
 80084de:	6163      	str	r3, [r4, #20]
 80084e0:	2201      	movs	r2, #1
 80084e2:	6122      	str	r2, [r4, #16]
 80084e4:	3020      	adds	r0, #32
 80084e6:	e7e3      	b.n	80084b0 <__d2b+0x60>
 80084e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80084ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80084f0:	f8c9 0000 	str.w	r0, [r9]
 80084f4:	6918      	ldr	r0, [r3, #16]
 80084f6:	f7ff fd2b 	bl	8007f50 <__hi0bits>
 80084fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80084fe:	e7df      	b.n	80084c0 <__d2b+0x70>
 8008500:	08009677 	.word	0x08009677
 8008504:	08009688 	.word	0x08009688

08008508 <_calloc_r>:
 8008508:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800850a:	fba1 2402 	umull	r2, r4, r1, r2
 800850e:	b94c      	cbnz	r4, 8008524 <_calloc_r+0x1c>
 8008510:	4611      	mov	r1, r2
 8008512:	9201      	str	r2, [sp, #4]
 8008514:	f000 f87a 	bl	800860c <_malloc_r>
 8008518:	9a01      	ldr	r2, [sp, #4]
 800851a:	4605      	mov	r5, r0
 800851c:	b930      	cbnz	r0, 800852c <_calloc_r+0x24>
 800851e:	4628      	mov	r0, r5
 8008520:	b003      	add	sp, #12
 8008522:	bd30      	pop	{r4, r5, pc}
 8008524:	220c      	movs	r2, #12
 8008526:	6002      	str	r2, [r0, #0]
 8008528:	2500      	movs	r5, #0
 800852a:	e7f8      	b.n	800851e <_calloc_r+0x16>
 800852c:	4621      	mov	r1, r4
 800852e:	f7fe f9e5 	bl	80068fc <memset>
 8008532:	e7f4      	b.n	800851e <_calloc_r+0x16>

08008534 <_free_r>:
 8008534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008536:	2900      	cmp	r1, #0
 8008538:	d044      	beq.n	80085c4 <_free_r+0x90>
 800853a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800853e:	9001      	str	r0, [sp, #4]
 8008540:	2b00      	cmp	r3, #0
 8008542:	f1a1 0404 	sub.w	r4, r1, #4
 8008546:	bfb8      	it	lt
 8008548:	18e4      	addlt	r4, r4, r3
 800854a:	f000 fa9b 	bl	8008a84 <__malloc_lock>
 800854e:	4a1e      	ldr	r2, [pc, #120]	; (80085c8 <_free_r+0x94>)
 8008550:	9801      	ldr	r0, [sp, #4]
 8008552:	6813      	ldr	r3, [r2, #0]
 8008554:	b933      	cbnz	r3, 8008564 <_free_r+0x30>
 8008556:	6063      	str	r3, [r4, #4]
 8008558:	6014      	str	r4, [r2, #0]
 800855a:	b003      	add	sp, #12
 800855c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008560:	f000 ba96 	b.w	8008a90 <__malloc_unlock>
 8008564:	42a3      	cmp	r3, r4
 8008566:	d908      	bls.n	800857a <_free_r+0x46>
 8008568:	6825      	ldr	r5, [r4, #0]
 800856a:	1961      	adds	r1, r4, r5
 800856c:	428b      	cmp	r3, r1
 800856e:	bf01      	itttt	eq
 8008570:	6819      	ldreq	r1, [r3, #0]
 8008572:	685b      	ldreq	r3, [r3, #4]
 8008574:	1949      	addeq	r1, r1, r5
 8008576:	6021      	streq	r1, [r4, #0]
 8008578:	e7ed      	b.n	8008556 <_free_r+0x22>
 800857a:	461a      	mov	r2, r3
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	b10b      	cbz	r3, 8008584 <_free_r+0x50>
 8008580:	42a3      	cmp	r3, r4
 8008582:	d9fa      	bls.n	800857a <_free_r+0x46>
 8008584:	6811      	ldr	r1, [r2, #0]
 8008586:	1855      	adds	r5, r2, r1
 8008588:	42a5      	cmp	r5, r4
 800858a:	d10b      	bne.n	80085a4 <_free_r+0x70>
 800858c:	6824      	ldr	r4, [r4, #0]
 800858e:	4421      	add	r1, r4
 8008590:	1854      	adds	r4, r2, r1
 8008592:	42a3      	cmp	r3, r4
 8008594:	6011      	str	r1, [r2, #0]
 8008596:	d1e0      	bne.n	800855a <_free_r+0x26>
 8008598:	681c      	ldr	r4, [r3, #0]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	6053      	str	r3, [r2, #4]
 800859e:	4421      	add	r1, r4
 80085a0:	6011      	str	r1, [r2, #0]
 80085a2:	e7da      	b.n	800855a <_free_r+0x26>
 80085a4:	d902      	bls.n	80085ac <_free_r+0x78>
 80085a6:	230c      	movs	r3, #12
 80085a8:	6003      	str	r3, [r0, #0]
 80085aa:	e7d6      	b.n	800855a <_free_r+0x26>
 80085ac:	6825      	ldr	r5, [r4, #0]
 80085ae:	1961      	adds	r1, r4, r5
 80085b0:	428b      	cmp	r3, r1
 80085b2:	bf04      	itt	eq
 80085b4:	6819      	ldreq	r1, [r3, #0]
 80085b6:	685b      	ldreq	r3, [r3, #4]
 80085b8:	6063      	str	r3, [r4, #4]
 80085ba:	bf04      	itt	eq
 80085bc:	1949      	addeq	r1, r1, r5
 80085be:	6021      	streq	r1, [r4, #0]
 80085c0:	6054      	str	r4, [r2, #4]
 80085c2:	e7ca      	b.n	800855a <_free_r+0x26>
 80085c4:	b003      	add	sp, #12
 80085c6:	bd30      	pop	{r4, r5, pc}
 80085c8:	200008bc 	.word	0x200008bc

080085cc <sbrk_aligned>:
 80085cc:	b570      	push	{r4, r5, r6, lr}
 80085ce:	4e0e      	ldr	r6, [pc, #56]	; (8008608 <sbrk_aligned+0x3c>)
 80085d0:	460c      	mov	r4, r1
 80085d2:	6831      	ldr	r1, [r6, #0]
 80085d4:	4605      	mov	r5, r0
 80085d6:	b911      	cbnz	r1, 80085de <sbrk_aligned+0x12>
 80085d8:	f000 f9e8 	bl	80089ac <_sbrk_r>
 80085dc:	6030      	str	r0, [r6, #0]
 80085de:	4621      	mov	r1, r4
 80085e0:	4628      	mov	r0, r5
 80085e2:	f000 f9e3 	bl	80089ac <_sbrk_r>
 80085e6:	1c43      	adds	r3, r0, #1
 80085e8:	d00a      	beq.n	8008600 <sbrk_aligned+0x34>
 80085ea:	1cc4      	adds	r4, r0, #3
 80085ec:	f024 0403 	bic.w	r4, r4, #3
 80085f0:	42a0      	cmp	r0, r4
 80085f2:	d007      	beq.n	8008604 <sbrk_aligned+0x38>
 80085f4:	1a21      	subs	r1, r4, r0
 80085f6:	4628      	mov	r0, r5
 80085f8:	f000 f9d8 	bl	80089ac <_sbrk_r>
 80085fc:	3001      	adds	r0, #1
 80085fe:	d101      	bne.n	8008604 <sbrk_aligned+0x38>
 8008600:	f04f 34ff 	mov.w	r4, #4294967295
 8008604:	4620      	mov	r0, r4
 8008606:	bd70      	pop	{r4, r5, r6, pc}
 8008608:	200008c0 	.word	0x200008c0

0800860c <_malloc_r>:
 800860c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008610:	1ccd      	adds	r5, r1, #3
 8008612:	f025 0503 	bic.w	r5, r5, #3
 8008616:	3508      	adds	r5, #8
 8008618:	2d0c      	cmp	r5, #12
 800861a:	bf38      	it	cc
 800861c:	250c      	movcc	r5, #12
 800861e:	2d00      	cmp	r5, #0
 8008620:	4607      	mov	r7, r0
 8008622:	db01      	blt.n	8008628 <_malloc_r+0x1c>
 8008624:	42a9      	cmp	r1, r5
 8008626:	d905      	bls.n	8008634 <_malloc_r+0x28>
 8008628:	230c      	movs	r3, #12
 800862a:	603b      	str	r3, [r7, #0]
 800862c:	2600      	movs	r6, #0
 800862e:	4630      	mov	r0, r6
 8008630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008634:	4e2e      	ldr	r6, [pc, #184]	; (80086f0 <_malloc_r+0xe4>)
 8008636:	f000 fa25 	bl	8008a84 <__malloc_lock>
 800863a:	6833      	ldr	r3, [r6, #0]
 800863c:	461c      	mov	r4, r3
 800863e:	bb34      	cbnz	r4, 800868e <_malloc_r+0x82>
 8008640:	4629      	mov	r1, r5
 8008642:	4638      	mov	r0, r7
 8008644:	f7ff ffc2 	bl	80085cc <sbrk_aligned>
 8008648:	1c43      	adds	r3, r0, #1
 800864a:	4604      	mov	r4, r0
 800864c:	d14d      	bne.n	80086ea <_malloc_r+0xde>
 800864e:	6834      	ldr	r4, [r6, #0]
 8008650:	4626      	mov	r6, r4
 8008652:	2e00      	cmp	r6, #0
 8008654:	d140      	bne.n	80086d8 <_malloc_r+0xcc>
 8008656:	6823      	ldr	r3, [r4, #0]
 8008658:	4631      	mov	r1, r6
 800865a:	4638      	mov	r0, r7
 800865c:	eb04 0803 	add.w	r8, r4, r3
 8008660:	f000 f9a4 	bl	80089ac <_sbrk_r>
 8008664:	4580      	cmp	r8, r0
 8008666:	d13a      	bne.n	80086de <_malloc_r+0xd2>
 8008668:	6821      	ldr	r1, [r4, #0]
 800866a:	3503      	adds	r5, #3
 800866c:	1a6d      	subs	r5, r5, r1
 800866e:	f025 0503 	bic.w	r5, r5, #3
 8008672:	3508      	adds	r5, #8
 8008674:	2d0c      	cmp	r5, #12
 8008676:	bf38      	it	cc
 8008678:	250c      	movcc	r5, #12
 800867a:	4629      	mov	r1, r5
 800867c:	4638      	mov	r0, r7
 800867e:	f7ff ffa5 	bl	80085cc <sbrk_aligned>
 8008682:	3001      	adds	r0, #1
 8008684:	d02b      	beq.n	80086de <_malloc_r+0xd2>
 8008686:	6823      	ldr	r3, [r4, #0]
 8008688:	442b      	add	r3, r5
 800868a:	6023      	str	r3, [r4, #0]
 800868c:	e00e      	b.n	80086ac <_malloc_r+0xa0>
 800868e:	6822      	ldr	r2, [r4, #0]
 8008690:	1b52      	subs	r2, r2, r5
 8008692:	d41e      	bmi.n	80086d2 <_malloc_r+0xc6>
 8008694:	2a0b      	cmp	r2, #11
 8008696:	d916      	bls.n	80086c6 <_malloc_r+0xba>
 8008698:	1961      	adds	r1, r4, r5
 800869a:	42a3      	cmp	r3, r4
 800869c:	6025      	str	r5, [r4, #0]
 800869e:	bf18      	it	ne
 80086a0:	6059      	strne	r1, [r3, #4]
 80086a2:	6863      	ldr	r3, [r4, #4]
 80086a4:	bf08      	it	eq
 80086a6:	6031      	streq	r1, [r6, #0]
 80086a8:	5162      	str	r2, [r4, r5]
 80086aa:	604b      	str	r3, [r1, #4]
 80086ac:	4638      	mov	r0, r7
 80086ae:	f104 060b 	add.w	r6, r4, #11
 80086b2:	f000 f9ed 	bl	8008a90 <__malloc_unlock>
 80086b6:	f026 0607 	bic.w	r6, r6, #7
 80086ba:	1d23      	adds	r3, r4, #4
 80086bc:	1af2      	subs	r2, r6, r3
 80086be:	d0b6      	beq.n	800862e <_malloc_r+0x22>
 80086c0:	1b9b      	subs	r3, r3, r6
 80086c2:	50a3      	str	r3, [r4, r2]
 80086c4:	e7b3      	b.n	800862e <_malloc_r+0x22>
 80086c6:	6862      	ldr	r2, [r4, #4]
 80086c8:	42a3      	cmp	r3, r4
 80086ca:	bf0c      	ite	eq
 80086cc:	6032      	streq	r2, [r6, #0]
 80086ce:	605a      	strne	r2, [r3, #4]
 80086d0:	e7ec      	b.n	80086ac <_malloc_r+0xa0>
 80086d2:	4623      	mov	r3, r4
 80086d4:	6864      	ldr	r4, [r4, #4]
 80086d6:	e7b2      	b.n	800863e <_malloc_r+0x32>
 80086d8:	4634      	mov	r4, r6
 80086da:	6876      	ldr	r6, [r6, #4]
 80086dc:	e7b9      	b.n	8008652 <_malloc_r+0x46>
 80086de:	230c      	movs	r3, #12
 80086e0:	603b      	str	r3, [r7, #0]
 80086e2:	4638      	mov	r0, r7
 80086e4:	f000 f9d4 	bl	8008a90 <__malloc_unlock>
 80086e8:	e7a1      	b.n	800862e <_malloc_r+0x22>
 80086ea:	6025      	str	r5, [r4, #0]
 80086ec:	e7de      	b.n	80086ac <_malloc_r+0xa0>
 80086ee:	bf00      	nop
 80086f0:	200008bc 	.word	0x200008bc

080086f4 <__ssputs_r>:
 80086f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086f8:	688e      	ldr	r6, [r1, #8]
 80086fa:	429e      	cmp	r6, r3
 80086fc:	4682      	mov	sl, r0
 80086fe:	460c      	mov	r4, r1
 8008700:	4690      	mov	r8, r2
 8008702:	461f      	mov	r7, r3
 8008704:	d838      	bhi.n	8008778 <__ssputs_r+0x84>
 8008706:	898a      	ldrh	r2, [r1, #12]
 8008708:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800870c:	d032      	beq.n	8008774 <__ssputs_r+0x80>
 800870e:	6825      	ldr	r5, [r4, #0]
 8008710:	6909      	ldr	r1, [r1, #16]
 8008712:	eba5 0901 	sub.w	r9, r5, r1
 8008716:	6965      	ldr	r5, [r4, #20]
 8008718:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800871c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008720:	3301      	adds	r3, #1
 8008722:	444b      	add	r3, r9
 8008724:	106d      	asrs	r5, r5, #1
 8008726:	429d      	cmp	r5, r3
 8008728:	bf38      	it	cc
 800872a:	461d      	movcc	r5, r3
 800872c:	0553      	lsls	r3, r2, #21
 800872e:	d531      	bpl.n	8008794 <__ssputs_r+0xa0>
 8008730:	4629      	mov	r1, r5
 8008732:	f7ff ff6b 	bl	800860c <_malloc_r>
 8008736:	4606      	mov	r6, r0
 8008738:	b950      	cbnz	r0, 8008750 <__ssputs_r+0x5c>
 800873a:	230c      	movs	r3, #12
 800873c:	f8ca 3000 	str.w	r3, [sl]
 8008740:	89a3      	ldrh	r3, [r4, #12]
 8008742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008746:	81a3      	strh	r3, [r4, #12]
 8008748:	f04f 30ff 	mov.w	r0, #4294967295
 800874c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008750:	6921      	ldr	r1, [r4, #16]
 8008752:	464a      	mov	r2, r9
 8008754:	f7ff fb46 	bl	8007de4 <memcpy>
 8008758:	89a3      	ldrh	r3, [r4, #12]
 800875a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800875e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008762:	81a3      	strh	r3, [r4, #12]
 8008764:	6126      	str	r6, [r4, #16]
 8008766:	6165      	str	r5, [r4, #20]
 8008768:	444e      	add	r6, r9
 800876a:	eba5 0509 	sub.w	r5, r5, r9
 800876e:	6026      	str	r6, [r4, #0]
 8008770:	60a5      	str	r5, [r4, #8]
 8008772:	463e      	mov	r6, r7
 8008774:	42be      	cmp	r6, r7
 8008776:	d900      	bls.n	800877a <__ssputs_r+0x86>
 8008778:	463e      	mov	r6, r7
 800877a:	6820      	ldr	r0, [r4, #0]
 800877c:	4632      	mov	r2, r6
 800877e:	4641      	mov	r1, r8
 8008780:	f000 f966 	bl	8008a50 <memmove>
 8008784:	68a3      	ldr	r3, [r4, #8]
 8008786:	1b9b      	subs	r3, r3, r6
 8008788:	60a3      	str	r3, [r4, #8]
 800878a:	6823      	ldr	r3, [r4, #0]
 800878c:	4433      	add	r3, r6
 800878e:	6023      	str	r3, [r4, #0]
 8008790:	2000      	movs	r0, #0
 8008792:	e7db      	b.n	800874c <__ssputs_r+0x58>
 8008794:	462a      	mov	r2, r5
 8008796:	f000 f981 	bl	8008a9c <_realloc_r>
 800879a:	4606      	mov	r6, r0
 800879c:	2800      	cmp	r0, #0
 800879e:	d1e1      	bne.n	8008764 <__ssputs_r+0x70>
 80087a0:	6921      	ldr	r1, [r4, #16]
 80087a2:	4650      	mov	r0, sl
 80087a4:	f7ff fec6 	bl	8008534 <_free_r>
 80087a8:	e7c7      	b.n	800873a <__ssputs_r+0x46>
	...

080087ac <_svfiprintf_r>:
 80087ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b0:	4698      	mov	r8, r3
 80087b2:	898b      	ldrh	r3, [r1, #12]
 80087b4:	061b      	lsls	r3, r3, #24
 80087b6:	b09d      	sub	sp, #116	; 0x74
 80087b8:	4607      	mov	r7, r0
 80087ba:	460d      	mov	r5, r1
 80087bc:	4614      	mov	r4, r2
 80087be:	d50e      	bpl.n	80087de <_svfiprintf_r+0x32>
 80087c0:	690b      	ldr	r3, [r1, #16]
 80087c2:	b963      	cbnz	r3, 80087de <_svfiprintf_r+0x32>
 80087c4:	2140      	movs	r1, #64	; 0x40
 80087c6:	f7ff ff21 	bl	800860c <_malloc_r>
 80087ca:	6028      	str	r0, [r5, #0]
 80087cc:	6128      	str	r0, [r5, #16]
 80087ce:	b920      	cbnz	r0, 80087da <_svfiprintf_r+0x2e>
 80087d0:	230c      	movs	r3, #12
 80087d2:	603b      	str	r3, [r7, #0]
 80087d4:	f04f 30ff 	mov.w	r0, #4294967295
 80087d8:	e0d1      	b.n	800897e <_svfiprintf_r+0x1d2>
 80087da:	2340      	movs	r3, #64	; 0x40
 80087dc:	616b      	str	r3, [r5, #20]
 80087de:	2300      	movs	r3, #0
 80087e0:	9309      	str	r3, [sp, #36]	; 0x24
 80087e2:	2320      	movs	r3, #32
 80087e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80087ec:	2330      	movs	r3, #48	; 0x30
 80087ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008998 <_svfiprintf_r+0x1ec>
 80087f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087f6:	f04f 0901 	mov.w	r9, #1
 80087fa:	4623      	mov	r3, r4
 80087fc:	469a      	mov	sl, r3
 80087fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008802:	b10a      	cbz	r2, 8008808 <_svfiprintf_r+0x5c>
 8008804:	2a25      	cmp	r2, #37	; 0x25
 8008806:	d1f9      	bne.n	80087fc <_svfiprintf_r+0x50>
 8008808:	ebba 0b04 	subs.w	fp, sl, r4
 800880c:	d00b      	beq.n	8008826 <_svfiprintf_r+0x7a>
 800880e:	465b      	mov	r3, fp
 8008810:	4622      	mov	r2, r4
 8008812:	4629      	mov	r1, r5
 8008814:	4638      	mov	r0, r7
 8008816:	f7ff ff6d 	bl	80086f4 <__ssputs_r>
 800881a:	3001      	adds	r0, #1
 800881c:	f000 80aa 	beq.w	8008974 <_svfiprintf_r+0x1c8>
 8008820:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008822:	445a      	add	r2, fp
 8008824:	9209      	str	r2, [sp, #36]	; 0x24
 8008826:	f89a 3000 	ldrb.w	r3, [sl]
 800882a:	2b00      	cmp	r3, #0
 800882c:	f000 80a2 	beq.w	8008974 <_svfiprintf_r+0x1c8>
 8008830:	2300      	movs	r3, #0
 8008832:	f04f 32ff 	mov.w	r2, #4294967295
 8008836:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800883a:	f10a 0a01 	add.w	sl, sl, #1
 800883e:	9304      	str	r3, [sp, #16]
 8008840:	9307      	str	r3, [sp, #28]
 8008842:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008846:	931a      	str	r3, [sp, #104]	; 0x68
 8008848:	4654      	mov	r4, sl
 800884a:	2205      	movs	r2, #5
 800884c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008850:	4851      	ldr	r0, [pc, #324]	; (8008998 <_svfiprintf_r+0x1ec>)
 8008852:	f7f7 fcfd 	bl	8000250 <memchr>
 8008856:	9a04      	ldr	r2, [sp, #16]
 8008858:	b9d8      	cbnz	r0, 8008892 <_svfiprintf_r+0xe6>
 800885a:	06d0      	lsls	r0, r2, #27
 800885c:	bf44      	itt	mi
 800885e:	2320      	movmi	r3, #32
 8008860:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008864:	0711      	lsls	r1, r2, #28
 8008866:	bf44      	itt	mi
 8008868:	232b      	movmi	r3, #43	; 0x2b
 800886a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800886e:	f89a 3000 	ldrb.w	r3, [sl]
 8008872:	2b2a      	cmp	r3, #42	; 0x2a
 8008874:	d015      	beq.n	80088a2 <_svfiprintf_r+0xf6>
 8008876:	9a07      	ldr	r2, [sp, #28]
 8008878:	4654      	mov	r4, sl
 800887a:	2000      	movs	r0, #0
 800887c:	f04f 0c0a 	mov.w	ip, #10
 8008880:	4621      	mov	r1, r4
 8008882:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008886:	3b30      	subs	r3, #48	; 0x30
 8008888:	2b09      	cmp	r3, #9
 800888a:	d94e      	bls.n	800892a <_svfiprintf_r+0x17e>
 800888c:	b1b0      	cbz	r0, 80088bc <_svfiprintf_r+0x110>
 800888e:	9207      	str	r2, [sp, #28]
 8008890:	e014      	b.n	80088bc <_svfiprintf_r+0x110>
 8008892:	eba0 0308 	sub.w	r3, r0, r8
 8008896:	fa09 f303 	lsl.w	r3, r9, r3
 800889a:	4313      	orrs	r3, r2
 800889c:	9304      	str	r3, [sp, #16]
 800889e:	46a2      	mov	sl, r4
 80088a0:	e7d2      	b.n	8008848 <_svfiprintf_r+0x9c>
 80088a2:	9b03      	ldr	r3, [sp, #12]
 80088a4:	1d19      	adds	r1, r3, #4
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	9103      	str	r1, [sp, #12]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	bfbb      	ittet	lt
 80088ae:	425b      	neglt	r3, r3
 80088b0:	f042 0202 	orrlt.w	r2, r2, #2
 80088b4:	9307      	strge	r3, [sp, #28]
 80088b6:	9307      	strlt	r3, [sp, #28]
 80088b8:	bfb8      	it	lt
 80088ba:	9204      	strlt	r2, [sp, #16]
 80088bc:	7823      	ldrb	r3, [r4, #0]
 80088be:	2b2e      	cmp	r3, #46	; 0x2e
 80088c0:	d10c      	bne.n	80088dc <_svfiprintf_r+0x130>
 80088c2:	7863      	ldrb	r3, [r4, #1]
 80088c4:	2b2a      	cmp	r3, #42	; 0x2a
 80088c6:	d135      	bne.n	8008934 <_svfiprintf_r+0x188>
 80088c8:	9b03      	ldr	r3, [sp, #12]
 80088ca:	1d1a      	adds	r2, r3, #4
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	9203      	str	r2, [sp, #12]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	bfb8      	it	lt
 80088d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80088d8:	3402      	adds	r4, #2
 80088da:	9305      	str	r3, [sp, #20]
 80088dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80089a8 <_svfiprintf_r+0x1fc>
 80088e0:	7821      	ldrb	r1, [r4, #0]
 80088e2:	2203      	movs	r2, #3
 80088e4:	4650      	mov	r0, sl
 80088e6:	f7f7 fcb3 	bl	8000250 <memchr>
 80088ea:	b140      	cbz	r0, 80088fe <_svfiprintf_r+0x152>
 80088ec:	2340      	movs	r3, #64	; 0x40
 80088ee:	eba0 000a 	sub.w	r0, r0, sl
 80088f2:	fa03 f000 	lsl.w	r0, r3, r0
 80088f6:	9b04      	ldr	r3, [sp, #16]
 80088f8:	4303      	orrs	r3, r0
 80088fa:	3401      	adds	r4, #1
 80088fc:	9304      	str	r3, [sp, #16]
 80088fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008902:	4826      	ldr	r0, [pc, #152]	; (800899c <_svfiprintf_r+0x1f0>)
 8008904:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008908:	2206      	movs	r2, #6
 800890a:	f7f7 fca1 	bl	8000250 <memchr>
 800890e:	2800      	cmp	r0, #0
 8008910:	d038      	beq.n	8008984 <_svfiprintf_r+0x1d8>
 8008912:	4b23      	ldr	r3, [pc, #140]	; (80089a0 <_svfiprintf_r+0x1f4>)
 8008914:	bb1b      	cbnz	r3, 800895e <_svfiprintf_r+0x1b2>
 8008916:	9b03      	ldr	r3, [sp, #12]
 8008918:	3307      	adds	r3, #7
 800891a:	f023 0307 	bic.w	r3, r3, #7
 800891e:	3308      	adds	r3, #8
 8008920:	9303      	str	r3, [sp, #12]
 8008922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008924:	4433      	add	r3, r6
 8008926:	9309      	str	r3, [sp, #36]	; 0x24
 8008928:	e767      	b.n	80087fa <_svfiprintf_r+0x4e>
 800892a:	fb0c 3202 	mla	r2, ip, r2, r3
 800892e:	460c      	mov	r4, r1
 8008930:	2001      	movs	r0, #1
 8008932:	e7a5      	b.n	8008880 <_svfiprintf_r+0xd4>
 8008934:	2300      	movs	r3, #0
 8008936:	3401      	adds	r4, #1
 8008938:	9305      	str	r3, [sp, #20]
 800893a:	4619      	mov	r1, r3
 800893c:	f04f 0c0a 	mov.w	ip, #10
 8008940:	4620      	mov	r0, r4
 8008942:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008946:	3a30      	subs	r2, #48	; 0x30
 8008948:	2a09      	cmp	r2, #9
 800894a:	d903      	bls.n	8008954 <_svfiprintf_r+0x1a8>
 800894c:	2b00      	cmp	r3, #0
 800894e:	d0c5      	beq.n	80088dc <_svfiprintf_r+0x130>
 8008950:	9105      	str	r1, [sp, #20]
 8008952:	e7c3      	b.n	80088dc <_svfiprintf_r+0x130>
 8008954:	fb0c 2101 	mla	r1, ip, r1, r2
 8008958:	4604      	mov	r4, r0
 800895a:	2301      	movs	r3, #1
 800895c:	e7f0      	b.n	8008940 <_svfiprintf_r+0x194>
 800895e:	ab03      	add	r3, sp, #12
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	462a      	mov	r2, r5
 8008964:	4b0f      	ldr	r3, [pc, #60]	; (80089a4 <_svfiprintf_r+0x1f8>)
 8008966:	a904      	add	r1, sp, #16
 8008968:	4638      	mov	r0, r7
 800896a:	f7fe f861 	bl	8006a30 <_printf_float>
 800896e:	1c42      	adds	r2, r0, #1
 8008970:	4606      	mov	r6, r0
 8008972:	d1d6      	bne.n	8008922 <_svfiprintf_r+0x176>
 8008974:	89ab      	ldrh	r3, [r5, #12]
 8008976:	065b      	lsls	r3, r3, #25
 8008978:	f53f af2c 	bmi.w	80087d4 <_svfiprintf_r+0x28>
 800897c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800897e:	b01d      	add	sp, #116	; 0x74
 8008980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008984:	ab03      	add	r3, sp, #12
 8008986:	9300      	str	r3, [sp, #0]
 8008988:	462a      	mov	r2, r5
 800898a:	4b06      	ldr	r3, [pc, #24]	; (80089a4 <_svfiprintf_r+0x1f8>)
 800898c:	a904      	add	r1, sp, #16
 800898e:	4638      	mov	r0, r7
 8008990:	f7fe fada 	bl	8006f48 <_printf_i>
 8008994:	e7eb      	b.n	800896e <_svfiprintf_r+0x1c2>
 8008996:	bf00      	nop
 8008998:	080097e4 	.word	0x080097e4
 800899c:	080097ee 	.word	0x080097ee
 80089a0:	08006a31 	.word	0x08006a31
 80089a4:	080086f5 	.word	0x080086f5
 80089a8:	080097ea 	.word	0x080097ea

080089ac <_sbrk_r>:
 80089ac:	b538      	push	{r3, r4, r5, lr}
 80089ae:	4d06      	ldr	r5, [pc, #24]	; (80089c8 <_sbrk_r+0x1c>)
 80089b0:	2300      	movs	r3, #0
 80089b2:	4604      	mov	r4, r0
 80089b4:	4608      	mov	r0, r1
 80089b6:	602b      	str	r3, [r5, #0]
 80089b8:	f7f9 f934 	bl	8001c24 <_sbrk>
 80089bc:	1c43      	adds	r3, r0, #1
 80089be:	d102      	bne.n	80089c6 <_sbrk_r+0x1a>
 80089c0:	682b      	ldr	r3, [r5, #0]
 80089c2:	b103      	cbz	r3, 80089c6 <_sbrk_r+0x1a>
 80089c4:	6023      	str	r3, [r4, #0]
 80089c6:	bd38      	pop	{r3, r4, r5, pc}
 80089c8:	200008c4 	.word	0x200008c4

080089cc <__assert_func>:
 80089cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089ce:	4614      	mov	r4, r2
 80089d0:	461a      	mov	r2, r3
 80089d2:	4b09      	ldr	r3, [pc, #36]	; (80089f8 <__assert_func+0x2c>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4605      	mov	r5, r0
 80089d8:	68d8      	ldr	r0, [r3, #12]
 80089da:	b14c      	cbz	r4, 80089f0 <__assert_func+0x24>
 80089dc:	4b07      	ldr	r3, [pc, #28]	; (80089fc <__assert_func+0x30>)
 80089de:	9100      	str	r1, [sp, #0]
 80089e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80089e4:	4906      	ldr	r1, [pc, #24]	; (8008a00 <__assert_func+0x34>)
 80089e6:	462b      	mov	r3, r5
 80089e8:	f000 f80e 	bl	8008a08 <fiprintf>
 80089ec:	f000 faac 	bl	8008f48 <abort>
 80089f0:	4b04      	ldr	r3, [pc, #16]	; (8008a04 <__assert_func+0x38>)
 80089f2:	461c      	mov	r4, r3
 80089f4:	e7f3      	b.n	80089de <__assert_func+0x12>
 80089f6:	bf00      	nop
 80089f8:	2000000c 	.word	0x2000000c
 80089fc:	080097f5 	.word	0x080097f5
 8008a00:	08009802 	.word	0x08009802
 8008a04:	08009830 	.word	0x08009830

08008a08 <fiprintf>:
 8008a08:	b40e      	push	{r1, r2, r3}
 8008a0a:	b503      	push	{r0, r1, lr}
 8008a0c:	4601      	mov	r1, r0
 8008a0e:	ab03      	add	r3, sp, #12
 8008a10:	4805      	ldr	r0, [pc, #20]	; (8008a28 <fiprintf+0x20>)
 8008a12:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a16:	6800      	ldr	r0, [r0, #0]
 8008a18:	9301      	str	r3, [sp, #4]
 8008a1a:	f000 f897 	bl	8008b4c <_vfiprintf_r>
 8008a1e:	b002      	add	sp, #8
 8008a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a24:	b003      	add	sp, #12
 8008a26:	4770      	bx	lr
 8008a28:	2000000c 	.word	0x2000000c

08008a2c <__ascii_mbtowc>:
 8008a2c:	b082      	sub	sp, #8
 8008a2e:	b901      	cbnz	r1, 8008a32 <__ascii_mbtowc+0x6>
 8008a30:	a901      	add	r1, sp, #4
 8008a32:	b142      	cbz	r2, 8008a46 <__ascii_mbtowc+0x1a>
 8008a34:	b14b      	cbz	r3, 8008a4a <__ascii_mbtowc+0x1e>
 8008a36:	7813      	ldrb	r3, [r2, #0]
 8008a38:	600b      	str	r3, [r1, #0]
 8008a3a:	7812      	ldrb	r2, [r2, #0]
 8008a3c:	1e10      	subs	r0, r2, #0
 8008a3e:	bf18      	it	ne
 8008a40:	2001      	movne	r0, #1
 8008a42:	b002      	add	sp, #8
 8008a44:	4770      	bx	lr
 8008a46:	4610      	mov	r0, r2
 8008a48:	e7fb      	b.n	8008a42 <__ascii_mbtowc+0x16>
 8008a4a:	f06f 0001 	mvn.w	r0, #1
 8008a4e:	e7f8      	b.n	8008a42 <__ascii_mbtowc+0x16>

08008a50 <memmove>:
 8008a50:	4288      	cmp	r0, r1
 8008a52:	b510      	push	{r4, lr}
 8008a54:	eb01 0402 	add.w	r4, r1, r2
 8008a58:	d902      	bls.n	8008a60 <memmove+0x10>
 8008a5a:	4284      	cmp	r4, r0
 8008a5c:	4623      	mov	r3, r4
 8008a5e:	d807      	bhi.n	8008a70 <memmove+0x20>
 8008a60:	1e43      	subs	r3, r0, #1
 8008a62:	42a1      	cmp	r1, r4
 8008a64:	d008      	beq.n	8008a78 <memmove+0x28>
 8008a66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a6e:	e7f8      	b.n	8008a62 <memmove+0x12>
 8008a70:	4402      	add	r2, r0
 8008a72:	4601      	mov	r1, r0
 8008a74:	428a      	cmp	r2, r1
 8008a76:	d100      	bne.n	8008a7a <memmove+0x2a>
 8008a78:	bd10      	pop	{r4, pc}
 8008a7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a82:	e7f7      	b.n	8008a74 <memmove+0x24>

08008a84 <__malloc_lock>:
 8008a84:	4801      	ldr	r0, [pc, #4]	; (8008a8c <__malloc_lock+0x8>)
 8008a86:	f000 bc1f 	b.w	80092c8 <__retarget_lock_acquire_recursive>
 8008a8a:	bf00      	nop
 8008a8c:	200008c8 	.word	0x200008c8

08008a90 <__malloc_unlock>:
 8008a90:	4801      	ldr	r0, [pc, #4]	; (8008a98 <__malloc_unlock+0x8>)
 8008a92:	f000 bc1a 	b.w	80092ca <__retarget_lock_release_recursive>
 8008a96:	bf00      	nop
 8008a98:	200008c8 	.word	0x200008c8

08008a9c <_realloc_r>:
 8008a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa0:	4680      	mov	r8, r0
 8008aa2:	4614      	mov	r4, r2
 8008aa4:	460e      	mov	r6, r1
 8008aa6:	b921      	cbnz	r1, 8008ab2 <_realloc_r+0x16>
 8008aa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008aac:	4611      	mov	r1, r2
 8008aae:	f7ff bdad 	b.w	800860c <_malloc_r>
 8008ab2:	b92a      	cbnz	r2, 8008ac0 <_realloc_r+0x24>
 8008ab4:	f7ff fd3e 	bl	8008534 <_free_r>
 8008ab8:	4625      	mov	r5, r4
 8008aba:	4628      	mov	r0, r5
 8008abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ac0:	f000 fc6a 	bl	8009398 <_malloc_usable_size_r>
 8008ac4:	4284      	cmp	r4, r0
 8008ac6:	4607      	mov	r7, r0
 8008ac8:	d802      	bhi.n	8008ad0 <_realloc_r+0x34>
 8008aca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ace:	d812      	bhi.n	8008af6 <_realloc_r+0x5a>
 8008ad0:	4621      	mov	r1, r4
 8008ad2:	4640      	mov	r0, r8
 8008ad4:	f7ff fd9a 	bl	800860c <_malloc_r>
 8008ad8:	4605      	mov	r5, r0
 8008ada:	2800      	cmp	r0, #0
 8008adc:	d0ed      	beq.n	8008aba <_realloc_r+0x1e>
 8008ade:	42bc      	cmp	r4, r7
 8008ae0:	4622      	mov	r2, r4
 8008ae2:	4631      	mov	r1, r6
 8008ae4:	bf28      	it	cs
 8008ae6:	463a      	movcs	r2, r7
 8008ae8:	f7ff f97c 	bl	8007de4 <memcpy>
 8008aec:	4631      	mov	r1, r6
 8008aee:	4640      	mov	r0, r8
 8008af0:	f7ff fd20 	bl	8008534 <_free_r>
 8008af4:	e7e1      	b.n	8008aba <_realloc_r+0x1e>
 8008af6:	4635      	mov	r5, r6
 8008af8:	e7df      	b.n	8008aba <_realloc_r+0x1e>

08008afa <__sfputc_r>:
 8008afa:	6893      	ldr	r3, [r2, #8]
 8008afc:	3b01      	subs	r3, #1
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	b410      	push	{r4}
 8008b02:	6093      	str	r3, [r2, #8]
 8008b04:	da08      	bge.n	8008b18 <__sfputc_r+0x1e>
 8008b06:	6994      	ldr	r4, [r2, #24]
 8008b08:	42a3      	cmp	r3, r4
 8008b0a:	db01      	blt.n	8008b10 <__sfputc_r+0x16>
 8008b0c:	290a      	cmp	r1, #10
 8008b0e:	d103      	bne.n	8008b18 <__sfputc_r+0x1e>
 8008b10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b14:	f000 b94a 	b.w	8008dac <__swbuf_r>
 8008b18:	6813      	ldr	r3, [r2, #0]
 8008b1a:	1c58      	adds	r0, r3, #1
 8008b1c:	6010      	str	r0, [r2, #0]
 8008b1e:	7019      	strb	r1, [r3, #0]
 8008b20:	4608      	mov	r0, r1
 8008b22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <__sfputs_r>:
 8008b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2a:	4606      	mov	r6, r0
 8008b2c:	460f      	mov	r7, r1
 8008b2e:	4614      	mov	r4, r2
 8008b30:	18d5      	adds	r5, r2, r3
 8008b32:	42ac      	cmp	r4, r5
 8008b34:	d101      	bne.n	8008b3a <__sfputs_r+0x12>
 8008b36:	2000      	movs	r0, #0
 8008b38:	e007      	b.n	8008b4a <__sfputs_r+0x22>
 8008b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b3e:	463a      	mov	r2, r7
 8008b40:	4630      	mov	r0, r6
 8008b42:	f7ff ffda 	bl	8008afa <__sfputc_r>
 8008b46:	1c43      	adds	r3, r0, #1
 8008b48:	d1f3      	bne.n	8008b32 <__sfputs_r+0xa>
 8008b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b4c <_vfiprintf_r>:
 8008b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b50:	460d      	mov	r5, r1
 8008b52:	b09d      	sub	sp, #116	; 0x74
 8008b54:	4614      	mov	r4, r2
 8008b56:	4698      	mov	r8, r3
 8008b58:	4606      	mov	r6, r0
 8008b5a:	b118      	cbz	r0, 8008b64 <_vfiprintf_r+0x18>
 8008b5c:	6983      	ldr	r3, [r0, #24]
 8008b5e:	b90b      	cbnz	r3, 8008b64 <_vfiprintf_r+0x18>
 8008b60:	f000 fb14 	bl	800918c <__sinit>
 8008b64:	4b89      	ldr	r3, [pc, #548]	; (8008d8c <_vfiprintf_r+0x240>)
 8008b66:	429d      	cmp	r5, r3
 8008b68:	d11b      	bne.n	8008ba2 <_vfiprintf_r+0x56>
 8008b6a:	6875      	ldr	r5, [r6, #4]
 8008b6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b6e:	07d9      	lsls	r1, r3, #31
 8008b70:	d405      	bmi.n	8008b7e <_vfiprintf_r+0x32>
 8008b72:	89ab      	ldrh	r3, [r5, #12]
 8008b74:	059a      	lsls	r2, r3, #22
 8008b76:	d402      	bmi.n	8008b7e <_vfiprintf_r+0x32>
 8008b78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b7a:	f000 fba5 	bl	80092c8 <__retarget_lock_acquire_recursive>
 8008b7e:	89ab      	ldrh	r3, [r5, #12]
 8008b80:	071b      	lsls	r3, r3, #28
 8008b82:	d501      	bpl.n	8008b88 <_vfiprintf_r+0x3c>
 8008b84:	692b      	ldr	r3, [r5, #16]
 8008b86:	b9eb      	cbnz	r3, 8008bc4 <_vfiprintf_r+0x78>
 8008b88:	4629      	mov	r1, r5
 8008b8a:	4630      	mov	r0, r6
 8008b8c:	f000 f96e 	bl	8008e6c <__swsetup_r>
 8008b90:	b1c0      	cbz	r0, 8008bc4 <_vfiprintf_r+0x78>
 8008b92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b94:	07dc      	lsls	r4, r3, #31
 8008b96:	d50e      	bpl.n	8008bb6 <_vfiprintf_r+0x6a>
 8008b98:	f04f 30ff 	mov.w	r0, #4294967295
 8008b9c:	b01d      	add	sp, #116	; 0x74
 8008b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba2:	4b7b      	ldr	r3, [pc, #492]	; (8008d90 <_vfiprintf_r+0x244>)
 8008ba4:	429d      	cmp	r5, r3
 8008ba6:	d101      	bne.n	8008bac <_vfiprintf_r+0x60>
 8008ba8:	68b5      	ldr	r5, [r6, #8]
 8008baa:	e7df      	b.n	8008b6c <_vfiprintf_r+0x20>
 8008bac:	4b79      	ldr	r3, [pc, #484]	; (8008d94 <_vfiprintf_r+0x248>)
 8008bae:	429d      	cmp	r5, r3
 8008bb0:	bf08      	it	eq
 8008bb2:	68f5      	ldreq	r5, [r6, #12]
 8008bb4:	e7da      	b.n	8008b6c <_vfiprintf_r+0x20>
 8008bb6:	89ab      	ldrh	r3, [r5, #12]
 8008bb8:	0598      	lsls	r0, r3, #22
 8008bba:	d4ed      	bmi.n	8008b98 <_vfiprintf_r+0x4c>
 8008bbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bbe:	f000 fb84 	bl	80092ca <__retarget_lock_release_recursive>
 8008bc2:	e7e9      	b.n	8008b98 <_vfiprintf_r+0x4c>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8008bc8:	2320      	movs	r3, #32
 8008bca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bce:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bd2:	2330      	movs	r3, #48	; 0x30
 8008bd4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008d98 <_vfiprintf_r+0x24c>
 8008bd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bdc:	f04f 0901 	mov.w	r9, #1
 8008be0:	4623      	mov	r3, r4
 8008be2:	469a      	mov	sl, r3
 8008be4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008be8:	b10a      	cbz	r2, 8008bee <_vfiprintf_r+0xa2>
 8008bea:	2a25      	cmp	r2, #37	; 0x25
 8008bec:	d1f9      	bne.n	8008be2 <_vfiprintf_r+0x96>
 8008bee:	ebba 0b04 	subs.w	fp, sl, r4
 8008bf2:	d00b      	beq.n	8008c0c <_vfiprintf_r+0xc0>
 8008bf4:	465b      	mov	r3, fp
 8008bf6:	4622      	mov	r2, r4
 8008bf8:	4629      	mov	r1, r5
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	f7ff ff94 	bl	8008b28 <__sfputs_r>
 8008c00:	3001      	adds	r0, #1
 8008c02:	f000 80aa 	beq.w	8008d5a <_vfiprintf_r+0x20e>
 8008c06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c08:	445a      	add	r2, fp
 8008c0a:	9209      	str	r2, [sp, #36]	; 0x24
 8008c0c:	f89a 3000 	ldrb.w	r3, [sl]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f000 80a2 	beq.w	8008d5a <_vfiprintf_r+0x20e>
 8008c16:	2300      	movs	r3, #0
 8008c18:	f04f 32ff 	mov.w	r2, #4294967295
 8008c1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c20:	f10a 0a01 	add.w	sl, sl, #1
 8008c24:	9304      	str	r3, [sp, #16]
 8008c26:	9307      	str	r3, [sp, #28]
 8008c28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c2c:	931a      	str	r3, [sp, #104]	; 0x68
 8008c2e:	4654      	mov	r4, sl
 8008c30:	2205      	movs	r2, #5
 8008c32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c36:	4858      	ldr	r0, [pc, #352]	; (8008d98 <_vfiprintf_r+0x24c>)
 8008c38:	f7f7 fb0a 	bl	8000250 <memchr>
 8008c3c:	9a04      	ldr	r2, [sp, #16]
 8008c3e:	b9d8      	cbnz	r0, 8008c78 <_vfiprintf_r+0x12c>
 8008c40:	06d1      	lsls	r1, r2, #27
 8008c42:	bf44      	itt	mi
 8008c44:	2320      	movmi	r3, #32
 8008c46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c4a:	0713      	lsls	r3, r2, #28
 8008c4c:	bf44      	itt	mi
 8008c4e:	232b      	movmi	r3, #43	; 0x2b
 8008c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c54:	f89a 3000 	ldrb.w	r3, [sl]
 8008c58:	2b2a      	cmp	r3, #42	; 0x2a
 8008c5a:	d015      	beq.n	8008c88 <_vfiprintf_r+0x13c>
 8008c5c:	9a07      	ldr	r2, [sp, #28]
 8008c5e:	4654      	mov	r4, sl
 8008c60:	2000      	movs	r0, #0
 8008c62:	f04f 0c0a 	mov.w	ip, #10
 8008c66:	4621      	mov	r1, r4
 8008c68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c6c:	3b30      	subs	r3, #48	; 0x30
 8008c6e:	2b09      	cmp	r3, #9
 8008c70:	d94e      	bls.n	8008d10 <_vfiprintf_r+0x1c4>
 8008c72:	b1b0      	cbz	r0, 8008ca2 <_vfiprintf_r+0x156>
 8008c74:	9207      	str	r2, [sp, #28]
 8008c76:	e014      	b.n	8008ca2 <_vfiprintf_r+0x156>
 8008c78:	eba0 0308 	sub.w	r3, r0, r8
 8008c7c:	fa09 f303 	lsl.w	r3, r9, r3
 8008c80:	4313      	orrs	r3, r2
 8008c82:	9304      	str	r3, [sp, #16]
 8008c84:	46a2      	mov	sl, r4
 8008c86:	e7d2      	b.n	8008c2e <_vfiprintf_r+0xe2>
 8008c88:	9b03      	ldr	r3, [sp, #12]
 8008c8a:	1d19      	adds	r1, r3, #4
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	9103      	str	r1, [sp, #12]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	bfbb      	ittet	lt
 8008c94:	425b      	neglt	r3, r3
 8008c96:	f042 0202 	orrlt.w	r2, r2, #2
 8008c9a:	9307      	strge	r3, [sp, #28]
 8008c9c:	9307      	strlt	r3, [sp, #28]
 8008c9e:	bfb8      	it	lt
 8008ca0:	9204      	strlt	r2, [sp, #16]
 8008ca2:	7823      	ldrb	r3, [r4, #0]
 8008ca4:	2b2e      	cmp	r3, #46	; 0x2e
 8008ca6:	d10c      	bne.n	8008cc2 <_vfiprintf_r+0x176>
 8008ca8:	7863      	ldrb	r3, [r4, #1]
 8008caa:	2b2a      	cmp	r3, #42	; 0x2a
 8008cac:	d135      	bne.n	8008d1a <_vfiprintf_r+0x1ce>
 8008cae:	9b03      	ldr	r3, [sp, #12]
 8008cb0:	1d1a      	adds	r2, r3, #4
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	9203      	str	r2, [sp, #12]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	bfb8      	it	lt
 8008cba:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cbe:	3402      	adds	r4, #2
 8008cc0:	9305      	str	r3, [sp, #20]
 8008cc2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008da8 <_vfiprintf_r+0x25c>
 8008cc6:	7821      	ldrb	r1, [r4, #0]
 8008cc8:	2203      	movs	r2, #3
 8008cca:	4650      	mov	r0, sl
 8008ccc:	f7f7 fac0 	bl	8000250 <memchr>
 8008cd0:	b140      	cbz	r0, 8008ce4 <_vfiprintf_r+0x198>
 8008cd2:	2340      	movs	r3, #64	; 0x40
 8008cd4:	eba0 000a 	sub.w	r0, r0, sl
 8008cd8:	fa03 f000 	lsl.w	r0, r3, r0
 8008cdc:	9b04      	ldr	r3, [sp, #16]
 8008cde:	4303      	orrs	r3, r0
 8008ce0:	3401      	adds	r4, #1
 8008ce2:	9304      	str	r3, [sp, #16]
 8008ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ce8:	482c      	ldr	r0, [pc, #176]	; (8008d9c <_vfiprintf_r+0x250>)
 8008cea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cee:	2206      	movs	r2, #6
 8008cf0:	f7f7 faae 	bl	8000250 <memchr>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	d03f      	beq.n	8008d78 <_vfiprintf_r+0x22c>
 8008cf8:	4b29      	ldr	r3, [pc, #164]	; (8008da0 <_vfiprintf_r+0x254>)
 8008cfa:	bb1b      	cbnz	r3, 8008d44 <_vfiprintf_r+0x1f8>
 8008cfc:	9b03      	ldr	r3, [sp, #12]
 8008cfe:	3307      	adds	r3, #7
 8008d00:	f023 0307 	bic.w	r3, r3, #7
 8008d04:	3308      	adds	r3, #8
 8008d06:	9303      	str	r3, [sp, #12]
 8008d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d0a:	443b      	add	r3, r7
 8008d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d0e:	e767      	b.n	8008be0 <_vfiprintf_r+0x94>
 8008d10:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d14:	460c      	mov	r4, r1
 8008d16:	2001      	movs	r0, #1
 8008d18:	e7a5      	b.n	8008c66 <_vfiprintf_r+0x11a>
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	3401      	adds	r4, #1
 8008d1e:	9305      	str	r3, [sp, #20]
 8008d20:	4619      	mov	r1, r3
 8008d22:	f04f 0c0a 	mov.w	ip, #10
 8008d26:	4620      	mov	r0, r4
 8008d28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d2c:	3a30      	subs	r2, #48	; 0x30
 8008d2e:	2a09      	cmp	r2, #9
 8008d30:	d903      	bls.n	8008d3a <_vfiprintf_r+0x1ee>
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d0c5      	beq.n	8008cc2 <_vfiprintf_r+0x176>
 8008d36:	9105      	str	r1, [sp, #20]
 8008d38:	e7c3      	b.n	8008cc2 <_vfiprintf_r+0x176>
 8008d3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d3e:	4604      	mov	r4, r0
 8008d40:	2301      	movs	r3, #1
 8008d42:	e7f0      	b.n	8008d26 <_vfiprintf_r+0x1da>
 8008d44:	ab03      	add	r3, sp, #12
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	462a      	mov	r2, r5
 8008d4a:	4b16      	ldr	r3, [pc, #88]	; (8008da4 <_vfiprintf_r+0x258>)
 8008d4c:	a904      	add	r1, sp, #16
 8008d4e:	4630      	mov	r0, r6
 8008d50:	f7fd fe6e 	bl	8006a30 <_printf_float>
 8008d54:	4607      	mov	r7, r0
 8008d56:	1c78      	adds	r0, r7, #1
 8008d58:	d1d6      	bne.n	8008d08 <_vfiprintf_r+0x1bc>
 8008d5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d5c:	07d9      	lsls	r1, r3, #31
 8008d5e:	d405      	bmi.n	8008d6c <_vfiprintf_r+0x220>
 8008d60:	89ab      	ldrh	r3, [r5, #12]
 8008d62:	059a      	lsls	r2, r3, #22
 8008d64:	d402      	bmi.n	8008d6c <_vfiprintf_r+0x220>
 8008d66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d68:	f000 faaf 	bl	80092ca <__retarget_lock_release_recursive>
 8008d6c:	89ab      	ldrh	r3, [r5, #12]
 8008d6e:	065b      	lsls	r3, r3, #25
 8008d70:	f53f af12 	bmi.w	8008b98 <_vfiprintf_r+0x4c>
 8008d74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d76:	e711      	b.n	8008b9c <_vfiprintf_r+0x50>
 8008d78:	ab03      	add	r3, sp, #12
 8008d7a:	9300      	str	r3, [sp, #0]
 8008d7c:	462a      	mov	r2, r5
 8008d7e:	4b09      	ldr	r3, [pc, #36]	; (8008da4 <_vfiprintf_r+0x258>)
 8008d80:	a904      	add	r1, sp, #16
 8008d82:	4630      	mov	r0, r6
 8008d84:	f7fe f8e0 	bl	8006f48 <_printf_i>
 8008d88:	e7e4      	b.n	8008d54 <_vfiprintf_r+0x208>
 8008d8a:	bf00      	nop
 8008d8c:	0800995c 	.word	0x0800995c
 8008d90:	0800997c 	.word	0x0800997c
 8008d94:	0800993c 	.word	0x0800993c
 8008d98:	080097e4 	.word	0x080097e4
 8008d9c:	080097ee 	.word	0x080097ee
 8008da0:	08006a31 	.word	0x08006a31
 8008da4:	08008b29 	.word	0x08008b29
 8008da8:	080097ea 	.word	0x080097ea

08008dac <__swbuf_r>:
 8008dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dae:	460e      	mov	r6, r1
 8008db0:	4614      	mov	r4, r2
 8008db2:	4605      	mov	r5, r0
 8008db4:	b118      	cbz	r0, 8008dbe <__swbuf_r+0x12>
 8008db6:	6983      	ldr	r3, [r0, #24]
 8008db8:	b90b      	cbnz	r3, 8008dbe <__swbuf_r+0x12>
 8008dba:	f000 f9e7 	bl	800918c <__sinit>
 8008dbe:	4b21      	ldr	r3, [pc, #132]	; (8008e44 <__swbuf_r+0x98>)
 8008dc0:	429c      	cmp	r4, r3
 8008dc2:	d12b      	bne.n	8008e1c <__swbuf_r+0x70>
 8008dc4:	686c      	ldr	r4, [r5, #4]
 8008dc6:	69a3      	ldr	r3, [r4, #24]
 8008dc8:	60a3      	str	r3, [r4, #8]
 8008dca:	89a3      	ldrh	r3, [r4, #12]
 8008dcc:	071a      	lsls	r2, r3, #28
 8008dce:	d52f      	bpl.n	8008e30 <__swbuf_r+0x84>
 8008dd0:	6923      	ldr	r3, [r4, #16]
 8008dd2:	b36b      	cbz	r3, 8008e30 <__swbuf_r+0x84>
 8008dd4:	6923      	ldr	r3, [r4, #16]
 8008dd6:	6820      	ldr	r0, [r4, #0]
 8008dd8:	1ac0      	subs	r0, r0, r3
 8008dda:	6963      	ldr	r3, [r4, #20]
 8008ddc:	b2f6      	uxtb	r6, r6
 8008dde:	4283      	cmp	r3, r0
 8008de0:	4637      	mov	r7, r6
 8008de2:	dc04      	bgt.n	8008dee <__swbuf_r+0x42>
 8008de4:	4621      	mov	r1, r4
 8008de6:	4628      	mov	r0, r5
 8008de8:	f000 f93c 	bl	8009064 <_fflush_r>
 8008dec:	bb30      	cbnz	r0, 8008e3c <__swbuf_r+0x90>
 8008dee:	68a3      	ldr	r3, [r4, #8]
 8008df0:	3b01      	subs	r3, #1
 8008df2:	60a3      	str	r3, [r4, #8]
 8008df4:	6823      	ldr	r3, [r4, #0]
 8008df6:	1c5a      	adds	r2, r3, #1
 8008df8:	6022      	str	r2, [r4, #0]
 8008dfa:	701e      	strb	r6, [r3, #0]
 8008dfc:	6963      	ldr	r3, [r4, #20]
 8008dfe:	3001      	adds	r0, #1
 8008e00:	4283      	cmp	r3, r0
 8008e02:	d004      	beq.n	8008e0e <__swbuf_r+0x62>
 8008e04:	89a3      	ldrh	r3, [r4, #12]
 8008e06:	07db      	lsls	r3, r3, #31
 8008e08:	d506      	bpl.n	8008e18 <__swbuf_r+0x6c>
 8008e0a:	2e0a      	cmp	r6, #10
 8008e0c:	d104      	bne.n	8008e18 <__swbuf_r+0x6c>
 8008e0e:	4621      	mov	r1, r4
 8008e10:	4628      	mov	r0, r5
 8008e12:	f000 f927 	bl	8009064 <_fflush_r>
 8008e16:	b988      	cbnz	r0, 8008e3c <__swbuf_r+0x90>
 8008e18:	4638      	mov	r0, r7
 8008e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e1c:	4b0a      	ldr	r3, [pc, #40]	; (8008e48 <__swbuf_r+0x9c>)
 8008e1e:	429c      	cmp	r4, r3
 8008e20:	d101      	bne.n	8008e26 <__swbuf_r+0x7a>
 8008e22:	68ac      	ldr	r4, [r5, #8]
 8008e24:	e7cf      	b.n	8008dc6 <__swbuf_r+0x1a>
 8008e26:	4b09      	ldr	r3, [pc, #36]	; (8008e4c <__swbuf_r+0xa0>)
 8008e28:	429c      	cmp	r4, r3
 8008e2a:	bf08      	it	eq
 8008e2c:	68ec      	ldreq	r4, [r5, #12]
 8008e2e:	e7ca      	b.n	8008dc6 <__swbuf_r+0x1a>
 8008e30:	4621      	mov	r1, r4
 8008e32:	4628      	mov	r0, r5
 8008e34:	f000 f81a 	bl	8008e6c <__swsetup_r>
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	d0cb      	beq.n	8008dd4 <__swbuf_r+0x28>
 8008e3c:	f04f 37ff 	mov.w	r7, #4294967295
 8008e40:	e7ea      	b.n	8008e18 <__swbuf_r+0x6c>
 8008e42:	bf00      	nop
 8008e44:	0800995c 	.word	0x0800995c
 8008e48:	0800997c 	.word	0x0800997c
 8008e4c:	0800993c 	.word	0x0800993c

08008e50 <__ascii_wctomb>:
 8008e50:	b149      	cbz	r1, 8008e66 <__ascii_wctomb+0x16>
 8008e52:	2aff      	cmp	r2, #255	; 0xff
 8008e54:	bf85      	ittet	hi
 8008e56:	238a      	movhi	r3, #138	; 0x8a
 8008e58:	6003      	strhi	r3, [r0, #0]
 8008e5a:	700a      	strbls	r2, [r1, #0]
 8008e5c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008e60:	bf98      	it	ls
 8008e62:	2001      	movls	r0, #1
 8008e64:	4770      	bx	lr
 8008e66:	4608      	mov	r0, r1
 8008e68:	4770      	bx	lr
	...

08008e6c <__swsetup_r>:
 8008e6c:	4b32      	ldr	r3, [pc, #200]	; (8008f38 <__swsetup_r+0xcc>)
 8008e6e:	b570      	push	{r4, r5, r6, lr}
 8008e70:	681d      	ldr	r5, [r3, #0]
 8008e72:	4606      	mov	r6, r0
 8008e74:	460c      	mov	r4, r1
 8008e76:	b125      	cbz	r5, 8008e82 <__swsetup_r+0x16>
 8008e78:	69ab      	ldr	r3, [r5, #24]
 8008e7a:	b913      	cbnz	r3, 8008e82 <__swsetup_r+0x16>
 8008e7c:	4628      	mov	r0, r5
 8008e7e:	f000 f985 	bl	800918c <__sinit>
 8008e82:	4b2e      	ldr	r3, [pc, #184]	; (8008f3c <__swsetup_r+0xd0>)
 8008e84:	429c      	cmp	r4, r3
 8008e86:	d10f      	bne.n	8008ea8 <__swsetup_r+0x3c>
 8008e88:	686c      	ldr	r4, [r5, #4]
 8008e8a:	89a3      	ldrh	r3, [r4, #12]
 8008e8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e90:	0719      	lsls	r1, r3, #28
 8008e92:	d42c      	bmi.n	8008eee <__swsetup_r+0x82>
 8008e94:	06dd      	lsls	r5, r3, #27
 8008e96:	d411      	bmi.n	8008ebc <__swsetup_r+0x50>
 8008e98:	2309      	movs	r3, #9
 8008e9a:	6033      	str	r3, [r6, #0]
 8008e9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ea0:	81a3      	strh	r3, [r4, #12]
 8008ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea6:	e03e      	b.n	8008f26 <__swsetup_r+0xba>
 8008ea8:	4b25      	ldr	r3, [pc, #148]	; (8008f40 <__swsetup_r+0xd4>)
 8008eaa:	429c      	cmp	r4, r3
 8008eac:	d101      	bne.n	8008eb2 <__swsetup_r+0x46>
 8008eae:	68ac      	ldr	r4, [r5, #8]
 8008eb0:	e7eb      	b.n	8008e8a <__swsetup_r+0x1e>
 8008eb2:	4b24      	ldr	r3, [pc, #144]	; (8008f44 <__swsetup_r+0xd8>)
 8008eb4:	429c      	cmp	r4, r3
 8008eb6:	bf08      	it	eq
 8008eb8:	68ec      	ldreq	r4, [r5, #12]
 8008eba:	e7e6      	b.n	8008e8a <__swsetup_r+0x1e>
 8008ebc:	0758      	lsls	r0, r3, #29
 8008ebe:	d512      	bpl.n	8008ee6 <__swsetup_r+0x7a>
 8008ec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ec2:	b141      	cbz	r1, 8008ed6 <__swsetup_r+0x6a>
 8008ec4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ec8:	4299      	cmp	r1, r3
 8008eca:	d002      	beq.n	8008ed2 <__swsetup_r+0x66>
 8008ecc:	4630      	mov	r0, r6
 8008ece:	f7ff fb31 	bl	8008534 <_free_r>
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	6363      	str	r3, [r4, #52]	; 0x34
 8008ed6:	89a3      	ldrh	r3, [r4, #12]
 8008ed8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008edc:	81a3      	strh	r3, [r4, #12]
 8008ede:	2300      	movs	r3, #0
 8008ee0:	6063      	str	r3, [r4, #4]
 8008ee2:	6923      	ldr	r3, [r4, #16]
 8008ee4:	6023      	str	r3, [r4, #0]
 8008ee6:	89a3      	ldrh	r3, [r4, #12]
 8008ee8:	f043 0308 	orr.w	r3, r3, #8
 8008eec:	81a3      	strh	r3, [r4, #12]
 8008eee:	6923      	ldr	r3, [r4, #16]
 8008ef0:	b94b      	cbnz	r3, 8008f06 <__swsetup_r+0x9a>
 8008ef2:	89a3      	ldrh	r3, [r4, #12]
 8008ef4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008efc:	d003      	beq.n	8008f06 <__swsetup_r+0x9a>
 8008efe:	4621      	mov	r1, r4
 8008f00:	4630      	mov	r0, r6
 8008f02:	f000 fa09 	bl	8009318 <__smakebuf_r>
 8008f06:	89a0      	ldrh	r0, [r4, #12]
 8008f08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f0c:	f010 0301 	ands.w	r3, r0, #1
 8008f10:	d00a      	beq.n	8008f28 <__swsetup_r+0xbc>
 8008f12:	2300      	movs	r3, #0
 8008f14:	60a3      	str	r3, [r4, #8]
 8008f16:	6963      	ldr	r3, [r4, #20]
 8008f18:	425b      	negs	r3, r3
 8008f1a:	61a3      	str	r3, [r4, #24]
 8008f1c:	6923      	ldr	r3, [r4, #16]
 8008f1e:	b943      	cbnz	r3, 8008f32 <__swsetup_r+0xc6>
 8008f20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f24:	d1ba      	bne.n	8008e9c <__swsetup_r+0x30>
 8008f26:	bd70      	pop	{r4, r5, r6, pc}
 8008f28:	0781      	lsls	r1, r0, #30
 8008f2a:	bf58      	it	pl
 8008f2c:	6963      	ldrpl	r3, [r4, #20]
 8008f2e:	60a3      	str	r3, [r4, #8]
 8008f30:	e7f4      	b.n	8008f1c <__swsetup_r+0xb0>
 8008f32:	2000      	movs	r0, #0
 8008f34:	e7f7      	b.n	8008f26 <__swsetup_r+0xba>
 8008f36:	bf00      	nop
 8008f38:	2000000c 	.word	0x2000000c
 8008f3c:	0800995c 	.word	0x0800995c
 8008f40:	0800997c 	.word	0x0800997c
 8008f44:	0800993c 	.word	0x0800993c

08008f48 <abort>:
 8008f48:	b508      	push	{r3, lr}
 8008f4a:	2006      	movs	r0, #6
 8008f4c:	f000 fa54 	bl	80093f8 <raise>
 8008f50:	2001      	movs	r0, #1
 8008f52:	f7f8 fdef 	bl	8001b34 <_exit>
	...

08008f58 <__sflush_r>:
 8008f58:	898a      	ldrh	r2, [r1, #12]
 8008f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f5e:	4605      	mov	r5, r0
 8008f60:	0710      	lsls	r0, r2, #28
 8008f62:	460c      	mov	r4, r1
 8008f64:	d458      	bmi.n	8009018 <__sflush_r+0xc0>
 8008f66:	684b      	ldr	r3, [r1, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	dc05      	bgt.n	8008f78 <__sflush_r+0x20>
 8008f6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	dc02      	bgt.n	8008f78 <__sflush_r+0x20>
 8008f72:	2000      	movs	r0, #0
 8008f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f7a:	2e00      	cmp	r6, #0
 8008f7c:	d0f9      	beq.n	8008f72 <__sflush_r+0x1a>
 8008f7e:	2300      	movs	r3, #0
 8008f80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f84:	682f      	ldr	r7, [r5, #0]
 8008f86:	602b      	str	r3, [r5, #0]
 8008f88:	d032      	beq.n	8008ff0 <__sflush_r+0x98>
 8008f8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f8c:	89a3      	ldrh	r3, [r4, #12]
 8008f8e:	075a      	lsls	r2, r3, #29
 8008f90:	d505      	bpl.n	8008f9e <__sflush_r+0x46>
 8008f92:	6863      	ldr	r3, [r4, #4]
 8008f94:	1ac0      	subs	r0, r0, r3
 8008f96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f98:	b10b      	cbz	r3, 8008f9e <__sflush_r+0x46>
 8008f9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f9c:	1ac0      	subs	r0, r0, r3
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fa4:	6a21      	ldr	r1, [r4, #32]
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	47b0      	blx	r6
 8008faa:	1c43      	adds	r3, r0, #1
 8008fac:	89a3      	ldrh	r3, [r4, #12]
 8008fae:	d106      	bne.n	8008fbe <__sflush_r+0x66>
 8008fb0:	6829      	ldr	r1, [r5, #0]
 8008fb2:	291d      	cmp	r1, #29
 8008fb4:	d82c      	bhi.n	8009010 <__sflush_r+0xb8>
 8008fb6:	4a2a      	ldr	r2, [pc, #168]	; (8009060 <__sflush_r+0x108>)
 8008fb8:	40ca      	lsrs	r2, r1
 8008fba:	07d6      	lsls	r6, r2, #31
 8008fbc:	d528      	bpl.n	8009010 <__sflush_r+0xb8>
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	6062      	str	r2, [r4, #4]
 8008fc2:	04d9      	lsls	r1, r3, #19
 8008fc4:	6922      	ldr	r2, [r4, #16]
 8008fc6:	6022      	str	r2, [r4, #0]
 8008fc8:	d504      	bpl.n	8008fd4 <__sflush_r+0x7c>
 8008fca:	1c42      	adds	r2, r0, #1
 8008fcc:	d101      	bne.n	8008fd2 <__sflush_r+0x7a>
 8008fce:	682b      	ldr	r3, [r5, #0]
 8008fd0:	b903      	cbnz	r3, 8008fd4 <__sflush_r+0x7c>
 8008fd2:	6560      	str	r0, [r4, #84]	; 0x54
 8008fd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fd6:	602f      	str	r7, [r5, #0]
 8008fd8:	2900      	cmp	r1, #0
 8008fda:	d0ca      	beq.n	8008f72 <__sflush_r+0x1a>
 8008fdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fe0:	4299      	cmp	r1, r3
 8008fe2:	d002      	beq.n	8008fea <__sflush_r+0x92>
 8008fe4:	4628      	mov	r0, r5
 8008fe6:	f7ff faa5 	bl	8008534 <_free_r>
 8008fea:	2000      	movs	r0, #0
 8008fec:	6360      	str	r0, [r4, #52]	; 0x34
 8008fee:	e7c1      	b.n	8008f74 <__sflush_r+0x1c>
 8008ff0:	6a21      	ldr	r1, [r4, #32]
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	47b0      	blx	r6
 8008ff8:	1c41      	adds	r1, r0, #1
 8008ffa:	d1c7      	bne.n	8008f8c <__sflush_r+0x34>
 8008ffc:	682b      	ldr	r3, [r5, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d0c4      	beq.n	8008f8c <__sflush_r+0x34>
 8009002:	2b1d      	cmp	r3, #29
 8009004:	d001      	beq.n	800900a <__sflush_r+0xb2>
 8009006:	2b16      	cmp	r3, #22
 8009008:	d101      	bne.n	800900e <__sflush_r+0xb6>
 800900a:	602f      	str	r7, [r5, #0]
 800900c:	e7b1      	b.n	8008f72 <__sflush_r+0x1a>
 800900e:	89a3      	ldrh	r3, [r4, #12]
 8009010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009014:	81a3      	strh	r3, [r4, #12]
 8009016:	e7ad      	b.n	8008f74 <__sflush_r+0x1c>
 8009018:	690f      	ldr	r7, [r1, #16]
 800901a:	2f00      	cmp	r7, #0
 800901c:	d0a9      	beq.n	8008f72 <__sflush_r+0x1a>
 800901e:	0793      	lsls	r3, r2, #30
 8009020:	680e      	ldr	r6, [r1, #0]
 8009022:	bf08      	it	eq
 8009024:	694b      	ldreq	r3, [r1, #20]
 8009026:	600f      	str	r7, [r1, #0]
 8009028:	bf18      	it	ne
 800902a:	2300      	movne	r3, #0
 800902c:	eba6 0807 	sub.w	r8, r6, r7
 8009030:	608b      	str	r3, [r1, #8]
 8009032:	f1b8 0f00 	cmp.w	r8, #0
 8009036:	dd9c      	ble.n	8008f72 <__sflush_r+0x1a>
 8009038:	6a21      	ldr	r1, [r4, #32]
 800903a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800903c:	4643      	mov	r3, r8
 800903e:	463a      	mov	r2, r7
 8009040:	4628      	mov	r0, r5
 8009042:	47b0      	blx	r6
 8009044:	2800      	cmp	r0, #0
 8009046:	dc06      	bgt.n	8009056 <__sflush_r+0xfe>
 8009048:	89a3      	ldrh	r3, [r4, #12]
 800904a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800904e:	81a3      	strh	r3, [r4, #12]
 8009050:	f04f 30ff 	mov.w	r0, #4294967295
 8009054:	e78e      	b.n	8008f74 <__sflush_r+0x1c>
 8009056:	4407      	add	r7, r0
 8009058:	eba8 0800 	sub.w	r8, r8, r0
 800905c:	e7e9      	b.n	8009032 <__sflush_r+0xda>
 800905e:	bf00      	nop
 8009060:	20400001 	.word	0x20400001

08009064 <_fflush_r>:
 8009064:	b538      	push	{r3, r4, r5, lr}
 8009066:	690b      	ldr	r3, [r1, #16]
 8009068:	4605      	mov	r5, r0
 800906a:	460c      	mov	r4, r1
 800906c:	b913      	cbnz	r3, 8009074 <_fflush_r+0x10>
 800906e:	2500      	movs	r5, #0
 8009070:	4628      	mov	r0, r5
 8009072:	bd38      	pop	{r3, r4, r5, pc}
 8009074:	b118      	cbz	r0, 800907e <_fflush_r+0x1a>
 8009076:	6983      	ldr	r3, [r0, #24]
 8009078:	b90b      	cbnz	r3, 800907e <_fflush_r+0x1a>
 800907a:	f000 f887 	bl	800918c <__sinit>
 800907e:	4b14      	ldr	r3, [pc, #80]	; (80090d0 <_fflush_r+0x6c>)
 8009080:	429c      	cmp	r4, r3
 8009082:	d11b      	bne.n	80090bc <_fflush_r+0x58>
 8009084:	686c      	ldr	r4, [r5, #4]
 8009086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d0ef      	beq.n	800906e <_fflush_r+0xa>
 800908e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009090:	07d0      	lsls	r0, r2, #31
 8009092:	d404      	bmi.n	800909e <_fflush_r+0x3a>
 8009094:	0599      	lsls	r1, r3, #22
 8009096:	d402      	bmi.n	800909e <_fflush_r+0x3a>
 8009098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800909a:	f000 f915 	bl	80092c8 <__retarget_lock_acquire_recursive>
 800909e:	4628      	mov	r0, r5
 80090a0:	4621      	mov	r1, r4
 80090a2:	f7ff ff59 	bl	8008f58 <__sflush_r>
 80090a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090a8:	07da      	lsls	r2, r3, #31
 80090aa:	4605      	mov	r5, r0
 80090ac:	d4e0      	bmi.n	8009070 <_fflush_r+0xc>
 80090ae:	89a3      	ldrh	r3, [r4, #12]
 80090b0:	059b      	lsls	r3, r3, #22
 80090b2:	d4dd      	bmi.n	8009070 <_fflush_r+0xc>
 80090b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090b6:	f000 f908 	bl	80092ca <__retarget_lock_release_recursive>
 80090ba:	e7d9      	b.n	8009070 <_fflush_r+0xc>
 80090bc:	4b05      	ldr	r3, [pc, #20]	; (80090d4 <_fflush_r+0x70>)
 80090be:	429c      	cmp	r4, r3
 80090c0:	d101      	bne.n	80090c6 <_fflush_r+0x62>
 80090c2:	68ac      	ldr	r4, [r5, #8]
 80090c4:	e7df      	b.n	8009086 <_fflush_r+0x22>
 80090c6:	4b04      	ldr	r3, [pc, #16]	; (80090d8 <_fflush_r+0x74>)
 80090c8:	429c      	cmp	r4, r3
 80090ca:	bf08      	it	eq
 80090cc:	68ec      	ldreq	r4, [r5, #12]
 80090ce:	e7da      	b.n	8009086 <_fflush_r+0x22>
 80090d0:	0800995c 	.word	0x0800995c
 80090d4:	0800997c 	.word	0x0800997c
 80090d8:	0800993c 	.word	0x0800993c

080090dc <std>:
 80090dc:	2300      	movs	r3, #0
 80090de:	b510      	push	{r4, lr}
 80090e0:	4604      	mov	r4, r0
 80090e2:	e9c0 3300 	strd	r3, r3, [r0]
 80090e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090ea:	6083      	str	r3, [r0, #8]
 80090ec:	8181      	strh	r1, [r0, #12]
 80090ee:	6643      	str	r3, [r0, #100]	; 0x64
 80090f0:	81c2      	strh	r2, [r0, #14]
 80090f2:	6183      	str	r3, [r0, #24]
 80090f4:	4619      	mov	r1, r3
 80090f6:	2208      	movs	r2, #8
 80090f8:	305c      	adds	r0, #92	; 0x5c
 80090fa:	f7fd fbff 	bl	80068fc <memset>
 80090fe:	4b05      	ldr	r3, [pc, #20]	; (8009114 <std+0x38>)
 8009100:	6263      	str	r3, [r4, #36]	; 0x24
 8009102:	4b05      	ldr	r3, [pc, #20]	; (8009118 <std+0x3c>)
 8009104:	62a3      	str	r3, [r4, #40]	; 0x28
 8009106:	4b05      	ldr	r3, [pc, #20]	; (800911c <std+0x40>)
 8009108:	62e3      	str	r3, [r4, #44]	; 0x2c
 800910a:	4b05      	ldr	r3, [pc, #20]	; (8009120 <std+0x44>)
 800910c:	6224      	str	r4, [r4, #32]
 800910e:	6323      	str	r3, [r4, #48]	; 0x30
 8009110:	bd10      	pop	{r4, pc}
 8009112:	bf00      	nop
 8009114:	08009431 	.word	0x08009431
 8009118:	08009453 	.word	0x08009453
 800911c:	0800948b 	.word	0x0800948b
 8009120:	080094af 	.word	0x080094af

08009124 <_cleanup_r>:
 8009124:	4901      	ldr	r1, [pc, #4]	; (800912c <_cleanup_r+0x8>)
 8009126:	f000 b8af 	b.w	8009288 <_fwalk_reent>
 800912a:	bf00      	nop
 800912c:	08009065 	.word	0x08009065

08009130 <__sfmoreglue>:
 8009130:	b570      	push	{r4, r5, r6, lr}
 8009132:	2268      	movs	r2, #104	; 0x68
 8009134:	1e4d      	subs	r5, r1, #1
 8009136:	4355      	muls	r5, r2
 8009138:	460e      	mov	r6, r1
 800913a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800913e:	f7ff fa65 	bl	800860c <_malloc_r>
 8009142:	4604      	mov	r4, r0
 8009144:	b140      	cbz	r0, 8009158 <__sfmoreglue+0x28>
 8009146:	2100      	movs	r1, #0
 8009148:	e9c0 1600 	strd	r1, r6, [r0]
 800914c:	300c      	adds	r0, #12
 800914e:	60a0      	str	r0, [r4, #8]
 8009150:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009154:	f7fd fbd2 	bl	80068fc <memset>
 8009158:	4620      	mov	r0, r4
 800915a:	bd70      	pop	{r4, r5, r6, pc}

0800915c <__sfp_lock_acquire>:
 800915c:	4801      	ldr	r0, [pc, #4]	; (8009164 <__sfp_lock_acquire+0x8>)
 800915e:	f000 b8b3 	b.w	80092c8 <__retarget_lock_acquire_recursive>
 8009162:	bf00      	nop
 8009164:	200008c9 	.word	0x200008c9

08009168 <__sfp_lock_release>:
 8009168:	4801      	ldr	r0, [pc, #4]	; (8009170 <__sfp_lock_release+0x8>)
 800916a:	f000 b8ae 	b.w	80092ca <__retarget_lock_release_recursive>
 800916e:	bf00      	nop
 8009170:	200008c9 	.word	0x200008c9

08009174 <__sinit_lock_acquire>:
 8009174:	4801      	ldr	r0, [pc, #4]	; (800917c <__sinit_lock_acquire+0x8>)
 8009176:	f000 b8a7 	b.w	80092c8 <__retarget_lock_acquire_recursive>
 800917a:	bf00      	nop
 800917c:	200008ca 	.word	0x200008ca

08009180 <__sinit_lock_release>:
 8009180:	4801      	ldr	r0, [pc, #4]	; (8009188 <__sinit_lock_release+0x8>)
 8009182:	f000 b8a2 	b.w	80092ca <__retarget_lock_release_recursive>
 8009186:	bf00      	nop
 8009188:	200008ca 	.word	0x200008ca

0800918c <__sinit>:
 800918c:	b510      	push	{r4, lr}
 800918e:	4604      	mov	r4, r0
 8009190:	f7ff fff0 	bl	8009174 <__sinit_lock_acquire>
 8009194:	69a3      	ldr	r3, [r4, #24]
 8009196:	b11b      	cbz	r3, 80091a0 <__sinit+0x14>
 8009198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800919c:	f7ff bff0 	b.w	8009180 <__sinit_lock_release>
 80091a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80091a4:	6523      	str	r3, [r4, #80]	; 0x50
 80091a6:	4b13      	ldr	r3, [pc, #76]	; (80091f4 <__sinit+0x68>)
 80091a8:	4a13      	ldr	r2, [pc, #76]	; (80091f8 <__sinit+0x6c>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80091ae:	42a3      	cmp	r3, r4
 80091b0:	bf04      	itt	eq
 80091b2:	2301      	moveq	r3, #1
 80091b4:	61a3      	streq	r3, [r4, #24]
 80091b6:	4620      	mov	r0, r4
 80091b8:	f000 f820 	bl	80091fc <__sfp>
 80091bc:	6060      	str	r0, [r4, #4]
 80091be:	4620      	mov	r0, r4
 80091c0:	f000 f81c 	bl	80091fc <__sfp>
 80091c4:	60a0      	str	r0, [r4, #8]
 80091c6:	4620      	mov	r0, r4
 80091c8:	f000 f818 	bl	80091fc <__sfp>
 80091cc:	2200      	movs	r2, #0
 80091ce:	60e0      	str	r0, [r4, #12]
 80091d0:	2104      	movs	r1, #4
 80091d2:	6860      	ldr	r0, [r4, #4]
 80091d4:	f7ff ff82 	bl	80090dc <std>
 80091d8:	68a0      	ldr	r0, [r4, #8]
 80091da:	2201      	movs	r2, #1
 80091dc:	2109      	movs	r1, #9
 80091de:	f7ff ff7d 	bl	80090dc <std>
 80091e2:	68e0      	ldr	r0, [r4, #12]
 80091e4:	2202      	movs	r2, #2
 80091e6:	2112      	movs	r1, #18
 80091e8:	f7ff ff78 	bl	80090dc <std>
 80091ec:	2301      	movs	r3, #1
 80091ee:	61a3      	str	r3, [r4, #24]
 80091f0:	e7d2      	b.n	8009198 <__sinit+0xc>
 80091f2:	bf00      	nop
 80091f4:	080095c0 	.word	0x080095c0
 80091f8:	08009125 	.word	0x08009125

080091fc <__sfp>:
 80091fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fe:	4607      	mov	r7, r0
 8009200:	f7ff ffac 	bl	800915c <__sfp_lock_acquire>
 8009204:	4b1e      	ldr	r3, [pc, #120]	; (8009280 <__sfp+0x84>)
 8009206:	681e      	ldr	r6, [r3, #0]
 8009208:	69b3      	ldr	r3, [r6, #24]
 800920a:	b913      	cbnz	r3, 8009212 <__sfp+0x16>
 800920c:	4630      	mov	r0, r6
 800920e:	f7ff ffbd 	bl	800918c <__sinit>
 8009212:	3648      	adds	r6, #72	; 0x48
 8009214:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009218:	3b01      	subs	r3, #1
 800921a:	d503      	bpl.n	8009224 <__sfp+0x28>
 800921c:	6833      	ldr	r3, [r6, #0]
 800921e:	b30b      	cbz	r3, 8009264 <__sfp+0x68>
 8009220:	6836      	ldr	r6, [r6, #0]
 8009222:	e7f7      	b.n	8009214 <__sfp+0x18>
 8009224:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009228:	b9d5      	cbnz	r5, 8009260 <__sfp+0x64>
 800922a:	4b16      	ldr	r3, [pc, #88]	; (8009284 <__sfp+0x88>)
 800922c:	60e3      	str	r3, [r4, #12]
 800922e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009232:	6665      	str	r5, [r4, #100]	; 0x64
 8009234:	f000 f847 	bl	80092c6 <__retarget_lock_init_recursive>
 8009238:	f7ff ff96 	bl	8009168 <__sfp_lock_release>
 800923c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009240:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009244:	6025      	str	r5, [r4, #0]
 8009246:	61a5      	str	r5, [r4, #24]
 8009248:	2208      	movs	r2, #8
 800924a:	4629      	mov	r1, r5
 800924c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009250:	f7fd fb54 	bl	80068fc <memset>
 8009254:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009258:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800925c:	4620      	mov	r0, r4
 800925e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009260:	3468      	adds	r4, #104	; 0x68
 8009262:	e7d9      	b.n	8009218 <__sfp+0x1c>
 8009264:	2104      	movs	r1, #4
 8009266:	4638      	mov	r0, r7
 8009268:	f7ff ff62 	bl	8009130 <__sfmoreglue>
 800926c:	4604      	mov	r4, r0
 800926e:	6030      	str	r0, [r6, #0]
 8009270:	2800      	cmp	r0, #0
 8009272:	d1d5      	bne.n	8009220 <__sfp+0x24>
 8009274:	f7ff ff78 	bl	8009168 <__sfp_lock_release>
 8009278:	230c      	movs	r3, #12
 800927a:	603b      	str	r3, [r7, #0]
 800927c:	e7ee      	b.n	800925c <__sfp+0x60>
 800927e:	bf00      	nop
 8009280:	080095c0 	.word	0x080095c0
 8009284:	ffff0001 	.word	0xffff0001

08009288 <_fwalk_reent>:
 8009288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800928c:	4606      	mov	r6, r0
 800928e:	4688      	mov	r8, r1
 8009290:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009294:	2700      	movs	r7, #0
 8009296:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800929a:	f1b9 0901 	subs.w	r9, r9, #1
 800929e:	d505      	bpl.n	80092ac <_fwalk_reent+0x24>
 80092a0:	6824      	ldr	r4, [r4, #0]
 80092a2:	2c00      	cmp	r4, #0
 80092a4:	d1f7      	bne.n	8009296 <_fwalk_reent+0xe>
 80092a6:	4638      	mov	r0, r7
 80092a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092ac:	89ab      	ldrh	r3, [r5, #12]
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d907      	bls.n	80092c2 <_fwalk_reent+0x3a>
 80092b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092b6:	3301      	adds	r3, #1
 80092b8:	d003      	beq.n	80092c2 <_fwalk_reent+0x3a>
 80092ba:	4629      	mov	r1, r5
 80092bc:	4630      	mov	r0, r6
 80092be:	47c0      	blx	r8
 80092c0:	4307      	orrs	r7, r0
 80092c2:	3568      	adds	r5, #104	; 0x68
 80092c4:	e7e9      	b.n	800929a <_fwalk_reent+0x12>

080092c6 <__retarget_lock_init_recursive>:
 80092c6:	4770      	bx	lr

080092c8 <__retarget_lock_acquire_recursive>:
 80092c8:	4770      	bx	lr

080092ca <__retarget_lock_release_recursive>:
 80092ca:	4770      	bx	lr

080092cc <__swhatbuf_r>:
 80092cc:	b570      	push	{r4, r5, r6, lr}
 80092ce:	460e      	mov	r6, r1
 80092d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092d4:	2900      	cmp	r1, #0
 80092d6:	b096      	sub	sp, #88	; 0x58
 80092d8:	4614      	mov	r4, r2
 80092da:	461d      	mov	r5, r3
 80092dc:	da08      	bge.n	80092f0 <__swhatbuf_r+0x24>
 80092de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80092e2:	2200      	movs	r2, #0
 80092e4:	602a      	str	r2, [r5, #0]
 80092e6:	061a      	lsls	r2, r3, #24
 80092e8:	d410      	bmi.n	800930c <__swhatbuf_r+0x40>
 80092ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092ee:	e00e      	b.n	800930e <__swhatbuf_r+0x42>
 80092f0:	466a      	mov	r2, sp
 80092f2:	f000 f903 	bl	80094fc <_fstat_r>
 80092f6:	2800      	cmp	r0, #0
 80092f8:	dbf1      	blt.n	80092de <__swhatbuf_r+0x12>
 80092fa:	9a01      	ldr	r2, [sp, #4]
 80092fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009300:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009304:	425a      	negs	r2, r3
 8009306:	415a      	adcs	r2, r3
 8009308:	602a      	str	r2, [r5, #0]
 800930a:	e7ee      	b.n	80092ea <__swhatbuf_r+0x1e>
 800930c:	2340      	movs	r3, #64	; 0x40
 800930e:	2000      	movs	r0, #0
 8009310:	6023      	str	r3, [r4, #0]
 8009312:	b016      	add	sp, #88	; 0x58
 8009314:	bd70      	pop	{r4, r5, r6, pc}
	...

08009318 <__smakebuf_r>:
 8009318:	898b      	ldrh	r3, [r1, #12]
 800931a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800931c:	079d      	lsls	r5, r3, #30
 800931e:	4606      	mov	r6, r0
 8009320:	460c      	mov	r4, r1
 8009322:	d507      	bpl.n	8009334 <__smakebuf_r+0x1c>
 8009324:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009328:	6023      	str	r3, [r4, #0]
 800932a:	6123      	str	r3, [r4, #16]
 800932c:	2301      	movs	r3, #1
 800932e:	6163      	str	r3, [r4, #20]
 8009330:	b002      	add	sp, #8
 8009332:	bd70      	pop	{r4, r5, r6, pc}
 8009334:	ab01      	add	r3, sp, #4
 8009336:	466a      	mov	r2, sp
 8009338:	f7ff ffc8 	bl	80092cc <__swhatbuf_r>
 800933c:	9900      	ldr	r1, [sp, #0]
 800933e:	4605      	mov	r5, r0
 8009340:	4630      	mov	r0, r6
 8009342:	f7ff f963 	bl	800860c <_malloc_r>
 8009346:	b948      	cbnz	r0, 800935c <__smakebuf_r+0x44>
 8009348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800934c:	059a      	lsls	r2, r3, #22
 800934e:	d4ef      	bmi.n	8009330 <__smakebuf_r+0x18>
 8009350:	f023 0303 	bic.w	r3, r3, #3
 8009354:	f043 0302 	orr.w	r3, r3, #2
 8009358:	81a3      	strh	r3, [r4, #12]
 800935a:	e7e3      	b.n	8009324 <__smakebuf_r+0xc>
 800935c:	4b0d      	ldr	r3, [pc, #52]	; (8009394 <__smakebuf_r+0x7c>)
 800935e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009360:	89a3      	ldrh	r3, [r4, #12]
 8009362:	6020      	str	r0, [r4, #0]
 8009364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009368:	81a3      	strh	r3, [r4, #12]
 800936a:	9b00      	ldr	r3, [sp, #0]
 800936c:	6163      	str	r3, [r4, #20]
 800936e:	9b01      	ldr	r3, [sp, #4]
 8009370:	6120      	str	r0, [r4, #16]
 8009372:	b15b      	cbz	r3, 800938c <__smakebuf_r+0x74>
 8009374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009378:	4630      	mov	r0, r6
 800937a:	f000 f8d1 	bl	8009520 <_isatty_r>
 800937e:	b128      	cbz	r0, 800938c <__smakebuf_r+0x74>
 8009380:	89a3      	ldrh	r3, [r4, #12]
 8009382:	f023 0303 	bic.w	r3, r3, #3
 8009386:	f043 0301 	orr.w	r3, r3, #1
 800938a:	81a3      	strh	r3, [r4, #12]
 800938c:	89a0      	ldrh	r0, [r4, #12]
 800938e:	4305      	orrs	r5, r0
 8009390:	81a5      	strh	r5, [r4, #12]
 8009392:	e7cd      	b.n	8009330 <__smakebuf_r+0x18>
 8009394:	08009125 	.word	0x08009125

08009398 <_malloc_usable_size_r>:
 8009398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800939c:	1f18      	subs	r0, r3, #4
 800939e:	2b00      	cmp	r3, #0
 80093a0:	bfbc      	itt	lt
 80093a2:	580b      	ldrlt	r3, [r1, r0]
 80093a4:	18c0      	addlt	r0, r0, r3
 80093a6:	4770      	bx	lr

080093a8 <_raise_r>:
 80093a8:	291f      	cmp	r1, #31
 80093aa:	b538      	push	{r3, r4, r5, lr}
 80093ac:	4604      	mov	r4, r0
 80093ae:	460d      	mov	r5, r1
 80093b0:	d904      	bls.n	80093bc <_raise_r+0x14>
 80093b2:	2316      	movs	r3, #22
 80093b4:	6003      	str	r3, [r0, #0]
 80093b6:	f04f 30ff 	mov.w	r0, #4294967295
 80093ba:	bd38      	pop	{r3, r4, r5, pc}
 80093bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80093be:	b112      	cbz	r2, 80093c6 <_raise_r+0x1e>
 80093c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093c4:	b94b      	cbnz	r3, 80093da <_raise_r+0x32>
 80093c6:	4620      	mov	r0, r4
 80093c8:	f000 f830 	bl	800942c <_getpid_r>
 80093cc:	462a      	mov	r2, r5
 80093ce:	4601      	mov	r1, r0
 80093d0:	4620      	mov	r0, r4
 80093d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093d6:	f000 b817 	b.w	8009408 <_kill_r>
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d00a      	beq.n	80093f4 <_raise_r+0x4c>
 80093de:	1c59      	adds	r1, r3, #1
 80093e0:	d103      	bne.n	80093ea <_raise_r+0x42>
 80093e2:	2316      	movs	r3, #22
 80093e4:	6003      	str	r3, [r0, #0]
 80093e6:	2001      	movs	r0, #1
 80093e8:	e7e7      	b.n	80093ba <_raise_r+0x12>
 80093ea:	2400      	movs	r4, #0
 80093ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80093f0:	4628      	mov	r0, r5
 80093f2:	4798      	blx	r3
 80093f4:	2000      	movs	r0, #0
 80093f6:	e7e0      	b.n	80093ba <_raise_r+0x12>

080093f8 <raise>:
 80093f8:	4b02      	ldr	r3, [pc, #8]	; (8009404 <raise+0xc>)
 80093fa:	4601      	mov	r1, r0
 80093fc:	6818      	ldr	r0, [r3, #0]
 80093fe:	f7ff bfd3 	b.w	80093a8 <_raise_r>
 8009402:	bf00      	nop
 8009404:	2000000c 	.word	0x2000000c

08009408 <_kill_r>:
 8009408:	b538      	push	{r3, r4, r5, lr}
 800940a:	4d07      	ldr	r5, [pc, #28]	; (8009428 <_kill_r+0x20>)
 800940c:	2300      	movs	r3, #0
 800940e:	4604      	mov	r4, r0
 8009410:	4608      	mov	r0, r1
 8009412:	4611      	mov	r1, r2
 8009414:	602b      	str	r3, [r5, #0]
 8009416:	f7f8 fb7d 	bl	8001b14 <_kill>
 800941a:	1c43      	adds	r3, r0, #1
 800941c:	d102      	bne.n	8009424 <_kill_r+0x1c>
 800941e:	682b      	ldr	r3, [r5, #0]
 8009420:	b103      	cbz	r3, 8009424 <_kill_r+0x1c>
 8009422:	6023      	str	r3, [r4, #0]
 8009424:	bd38      	pop	{r3, r4, r5, pc}
 8009426:	bf00      	nop
 8009428:	200008c4 	.word	0x200008c4

0800942c <_getpid_r>:
 800942c:	f7f8 bb6a 	b.w	8001b04 <_getpid>

08009430 <__sread>:
 8009430:	b510      	push	{r4, lr}
 8009432:	460c      	mov	r4, r1
 8009434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009438:	f000 f894 	bl	8009564 <_read_r>
 800943c:	2800      	cmp	r0, #0
 800943e:	bfab      	itete	ge
 8009440:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009442:	89a3      	ldrhlt	r3, [r4, #12]
 8009444:	181b      	addge	r3, r3, r0
 8009446:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800944a:	bfac      	ite	ge
 800944c:	6563      	strge	r3, [r4, #84]	; 0x54
 800944e:	81a3      	strhlt	r3, [r4, #12]
 8009450:	bd10      	pop	{r4, pc}

08009452 <__swrite>:
 8009452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009456:	461f      	mov	r7, r3
 8009458:	898b      	ldrh	r3, [r1, #12]
 800945a:	05db      	lsls	r3, r3, #23
 800945c:	4605      	mov	r5, r0
 800945e:	460c      	mov	r4, r1
 8009460:	4616      	mov	r6, r2
 8009462:	d505      	bpl.n	8009470 <__swrite+0x1e>
 8009464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009468:	2302      	movs	r3, #2
 800946a:	2200      	movs	r2, #0
 800946c:	f000 f868 	bl	8009540 <_lseek_r>
 8009470:	89a3      	ldrh	r3, [r4, #12]
 8009472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009476:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800947a:	81a3      	strh	r3, [r4, #12]
 800947c:	4632      	mov	r2, r6
 800947e:	463b      	mov	r3, r7
 8009480:	4628      	mov	r0, r5
 8009482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009486:	f000 b817 	b.w	80094b8 <_write_r>

0800948a <__sseek>:
 800948a:	b510      	push	{r4, lr}
 800948c:	460c      	mov	r4, r1
 800948e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009492:	f000 f855 	bl	8009540 <_lseek_r>
 8009496:	1c43      	adds	r3, r0, #1
 8009498:	89a3      	ldrh	r3, [r4, #12]
 800949a:	bf15      	itete	ne
 800949c:	6560      	strne	r0, [r4, #84]	; 0x54
 800949e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094a6:	81a3      	strheq	r3, [r4, #12]
 80094a8:	bf18      	it	ne
 80094aa:	81a3      	strhne	r3, [r4, #12]
 80094ac:	bd10      	pop	{r4, pc}

080094ae <__sclose>:
 80094ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094b2:	f000 b813 	b.w	80094dc <_close_r>
	...

080094b8 <_write_r>:
 80094b8:	b538      	push	{r3, r4, r5, lr}
 80094ba:	4d07      	ldr	r5, [pc, #28]	; (80094d8 <_write_r+0x20>)
 80094bc:	4604      	mov	r4, r0
 80094be:	4608      	mov	r0, r1
 80094c0:	4611      	mov	r1, r2
 80094c2:	2200      	movs	r2, #0
 80094c4:	602a      	str	r2, [r5, #0]
 80094c6:	461a      	mov	r2, r3
 80094c8:	f7f8 fb5b 	bl	8001b82 <_write>
 80094cc:	1c43      	adds	r3, r0, #1
 80094ce:	d102      	bne.n	80094d6 <_write_r+0x1e>
 80094d0:	682b      	ldr	r3, [r5, #0]
 80094d2:	b103      	cbz	r3, 80094d6 <_write_r+0x1e>
 80094d4:	6023      	str	r3, [r4, #0]
 80094d6:	bd38      	pop	{r3, r4, r5, pc}
 80094d8:	200008c4 	.word	0x200008c4

080094dc <_close_r>:
 80094dc:	b538      	push	{r3, r4, r5, lr}
 80094de:	4d06      	ldr	r5, [pc, #24]	; (80094f8 <_close_r+0x1c>)
 80094e0:	2300      	movs	r3, #0
 80094e2:	4604      	mov	r4, r0
 80094e4:	4608      	mov	r0, r1
 80094e6:	602b      	str	r3, [r5, #0]
 80094e8:	f7f8 fb67 	bl	8001bba <_close>
 80094ec:	1c43      	adds	r3, r0, #1
 80094ee:	d102      	bne.n	80094f6 <_close_r+0x1a>
 80094f0:	682b      	ldr	r3, [r5, #0]
 80094f2:	b103      	cbz	r3, 80094f6 <_close_r+0x1a>
 80094f4:	6023      	str	r3, [r4, #0]
 80094f6:	bd38      	pop	{r3, r4, r5, pc}
 80094f8:	200008c4 	.word	0x200008c4

080094fc <_fstat_r>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	4d07      	ldr	r5, [pc, #28]	; (800951c <_fstat_r+0x20>)
 8009500:	2300      	movs	r3, #0
 8009502:	4604      	mov	r4, r0
 8009504:	4608      	mov	r0, r1
 8009506:	4611      	mov	r1, r2
 8009508:	602b      	str	r3, [r5, #0]
 800950a:	f7f8 fb62 	bl	8001bd2 <_fstat>
 800950e:	1c43      	adds	r3, r0, #1
 8009510:	d102      	bne.n	8009518 <_fstat_r+0x1c>
 8009512:	682b      	ldr	r3, [r5, #0]
 8009514:	b103      	cbz	r3, 8009518 <_fstat_r+0x1c>
 8009516:	6023      	str	r3, [r4, #0]
 8009518:	bd38      	pop	{r3, r4, r5, pc}
 800951a:	bf00      	nop
 800951c:	200008c4 	.word	0x200008c4

08009520 <_isatty_r>:
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	4d06      	ldr	r5, [pc, #24]	; (800953c <_isatty_r+0x1c>)
 8009524:	2300      	movs	r3, #0
 8009526:	4604      	mov	r4, r0
 8009528:	4608      	mov	r0, r1
 800952a:	602b      	str	r3, [r5, #0]
 800952c:	f7f8 fb61 	bl	8001bf2 <_isatty>
 8009530:	1c43      	adds	r3, r0, #1
 8009532:	d102      	bne.n	800953a <_isatty_r+0x1a>
 8009534:	682b      	ldr	r3, [r5, #0]
 8009536:	b103      	cbz	r3, 800953a <_isatty_r+0x1a>
 8009538:	6023      	str	r3, [r4, #0]
 800953a:	bd38      	pop	{r3, r4, r5, pc}
 800953c:	200008c4 	.word	0x200008c4

08009540 <_lseek_r>:
 8009540:	b538      	push	{r3, r4, r5, lr}
 8009542:	4d07      	ldr	r5, [pc, #28]	; (8009560 <_lseek_r+0x20>)
 8009544:	4604      	mov	r4, r0
 8009546:	4608      	mov	r0, r1
 8009548:	4611      	mov	r1, r2
 800954a:	2200      	movs	r2, #0
 800954c:	602a      	str	r2, [r5, #0]
 800954e:	461a      	mov	r2, r3
 8009550:	f7f8 fb5a 	bl	8001c08 <_lseek>
 8009554:	1c43      	adds	r3, r0, #1
 8009556:	d102      	bne.n	800955e <_lseek_r+0x1e>
 8009558:	682b      	ldr	r3, [r5, #0]
 800955a:	b103      	cbz	r3, 800955e <_lseek_r+0x1e>
 800955c:	6023      	str	r3, [r4, #0]
 800955e:	bd38      	pop	{r3, r4, r5, pc}
 8009560:	200008c4 	.word	0x200008c4

08009564 <_read_r>:
 8009564:	b538      	push	{r3, r4, r5, lr}
 8009566:	4d07      	ldr	r5, [pc, #28]	; (8009584 <_read_r+0x20>)
 8009568:	4604      	mov	r4, r0
 800956a:	4608      	mov	r0, r1
 800956c:	4611      	mov	r1, r2
 800956e:	2200      	movs	r2, #0
 8009570:	602a      	str	r2, [r5, #0]
 8009572:	461a      	mov	r2, r3
 8009574:	f7f8 fae8 	bl	8001b48 <_read>
 8009578:	1c43      	adds	r3, r0, #1
 800957a:	d102      	bne.n	8009582 <_read_r+0x1e>
 800957c:	682b      	ldr	r3, [r5, #0]
 800957e:	b103      	cbz	r3, 8009582 <_read_r+0x1e>
 8009580:	6023      	str	r3, [r4, #0]
 8009582:	bd38      	pop	{r3, r4, r5, pc}
 8009584:	200008c4 	.word	0x200008c4

08009588 <_init>:
 8009588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958a:	bf00      	nop
 800958c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800958e:	bc08      	pop	{r3}
 8009590:	469e      	mov	lr, r3
 8009592:	4770      	bx	lr

08009594 <_fini>:
 8009594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009596:	bf00      	nop
 8009598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800959a:	bc08      	pop	{r3}
 800959c:	469e      	mov	lr, r3
 800959e:	4770      	bx	lr
