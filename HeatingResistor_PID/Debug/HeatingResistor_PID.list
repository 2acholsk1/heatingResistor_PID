
HeatingResistor_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d9c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005f94  08005f94  00015f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fac  08005fac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005fac  08005fac  00015fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fb4  08005fb4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fb4  08005fb4  00015fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fb8  08005fb8  00015fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005fbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000067c  2000000c  08005fc8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000688  08005fc8  00020688  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c03  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b0d  00000000  00000000  00037c3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  0003a750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e0  00000000  00000000  0003bb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028daf  00000000  00000000  0003ce28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000186ff  00000000  00000000  00065bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fecd3  00000000  00000000  0007e2d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017cfa9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005608  00000000  00000000  0017cffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005f7c 	.word	0x08005f7c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08005f7c 	.word	0x08005f7c

08000238 <__aeabi_ldivmod>:
 8000238:	b97b      	cbnz	r3, 800025a <__aeabi_ldivmod+0x22>
 800023a:	b972      	cbnz	r2, 800025a <__aeabi_ldivmod+0x22>
 800023c:	2900      	cmp	r1, #0
 800023e:	bfbe      	ittt	lt
 8000240:	2000      	movlt	r0, #0
 8000242:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000246:	e006      	blt.n	8000256 <__aeabi_ldivmod+0x1e>
 8000248:	bf08      	it	eq
 800024a:	2800      	cmpeq	r0, #0
 800024c:	bf1c      	itt	ne
 800024e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000252:	f04f 30ff 	movne.w	r0, #4294967295
 8000256:	f000 b9bf 	b.w	80005d8 <__aeabi_idiv0>
 800025a:	f1ad 0c08 	sub.w	ip, sp, #8
 800025e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000262:	2900      	cmp	r1, #0
 8000264:	db09      	blt.n	800027a <__aeabi_ldivmod+0x42>
 8000266:	2b00      	cmp	r3, #0
 8000268:	db1a      	blt.n	80002a0 <__aeabi_ldivmod+0x68>
 800026a:	f000 f84d 	bl	8000308 <__udivmoddi4>
 800026e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000272:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000276:	b004      	add	sp, #16
 8000278:	4770      	bx	lr
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	2b00      	cmp	r3, #0
 8000282:	db1b      	blt.n	80002bc <__aeabi_ldivmod+0x84>
 8000284:	f000 f840 	bl	8000308 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4240      	negs	r0, r0
 8000294:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000298:	4252      	negs	r2, r2
 800029a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800029e:	4770      	bx	lr
 80002a0:	4252      	negs	r2, r2
 80002a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a6:	f000 f82f 	bl	8000308 <__udivmoddi4>
 80002aa:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b2:	b004      	add	sp, #16
 80002b4:	4240      	negs	r0, r0
 80002b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ba:	4770      	bx	lr
 80002bc:	4252      	negs	r2, r2
 80002be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c2:	f000 f821 	bl	8000308 <__udivmoddi4>
 80002c6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ce:	b004      	add	sp, #16
 80002d0:	4252      	negs	r2, r2
 80002d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d6:	4770      	bx	lr

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af04      	add	r7, sp, #16
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <BMP280_Read8+0x38>)
 80005ec:	6818      	ldr	r0, [r3, #0]
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	230a      	movs	r3, #10
 80005f4:	9302      	str	r3, [sp, #8]
 80005f6:	2301      	movs	r3, #1
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	f107 030f 	add.w	r3, r7, #15
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2301      	movs	r3, #1
 8000602:	21ec      	movs	r1, #236	; 0xec
 8000604:	f001 fe66 	bl	80022d4 <HAL_I2C_Mem_Read>
  return tmp;
 8000608:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 800060a:	4618      	mov	r0, r3
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000028 	.word	0x20000028

08000618 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af04      	add	r7, sp, #16
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <BMP280_Read16+0x40>)
 8000624:	6818      	ldr	r0, [r3, #0]
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	b29a      	uxth	r2, r3
 800062a:	230a      	movs	r3, #10
 800062c:	9302      	str	r3, [sp, #8]
 800062e:	2302      	movs	r3, #2
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2301      	movs	r3, #1
 800063a:	21ec      	movs	r1, #236	; 0xec
 800063c:	f001 fe4a 	bl	80022d4 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8000640:	7b3b      	ldrb	r3, [r7, #12]
 8000642:	021b      	lsls	r3, r3, #8
 8000644:	b21a      	sxth	r2, r3
 8000646:	7b7b      	ldrb	r3, [r7, #13]
 8000648:	b21b      	sxth	r3, r3
 800064a:	4313      	orrs	r3, r2
 800064c:	b21b      	sxth	r3, r3
 800064e:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 8000650:	4618      	mov	r0, r3
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000028 	.word	0x20000028

0800065c <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ffd5 	bl	8000618 <BMP280_Read16>
 800066e:	4603      	mov	r3, r0
 8000670:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8000672:	89fb      	ldrh	r3, [r7, #14]
 8000674:	0a1b      	lsrs	r3, r3, #8
 8000676:	b29b      	uxth	r3, r3
 8000678:	b21a      	sxth	r2, r3
 800067a:	89fb      	ldrh	r3, [r7, #14]
 800067c:	021b      	lsls	r3, r3, #8
 800067e:	b21b      	sxth	r3, r3
 8000680:	4313      	orrs	r3, r2
 8000682:	b21b      	sxth	r3, r3
 8000684:	b29b      	uxth	r3, r3
}
 8000686:	4618      	mov	r0, r3
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af04      	add	r7, sp, #16
 8000696:	4603      	mov	r3, r0
 8000698:	460a      	mov	r2, r1
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	4613      	mov	r3, r2
 800069e:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <BMP280_Write8+0x34>)
 80006a2:	6818      	ldr	r0, [r3, #0]
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	230a      	movs	r3, #10
 80006aa:	9302      	str	r3, [sp, #8]
 80006ac:	2301      	movs	r3, #1
 80006ae:	9301      	str	r3, [sp, #4]
 80006b0:	1dbb      	adds	r3, r7, #6
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	2301      	movs	r3, #1
 80006b6:	21ec      	movs	r1, #236	; 0xec
 80006b8:	f001 fcf8 	bl	80020ac <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000028 	.word	0x20000028

080006c8 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af04      	add	r7, sp, #16
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 80006d2:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <BMP280_Read24+0x40>)
 80006d4:	6818      	ldr	r0, [r3, #0]
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	b29a      	uxth	r2, r3
 80006da:	230a      	movs	r3, #10
 80006dc:	9302      	str	r3, [sp, #8]
 80006de:	2303      	movs	r3, #3
 80006e0:	9301      	str	r3, [sp, #4]
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	2301      	movs	r3, #1
 80006ea:	21ec      	movs	r1, #236	; 0xec
 80006ec:	f001 fdf2 	bl	80022d4 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 80006f0:	7b3b      	ldrb	r3, [r7, #12]
 80006f2:	041a      	lsls	r2, r3, #16
 80006f4:	7b7b      	ldrb	r3, [r7, #13]
 80006f6:	021b      	lsls	r3, r3, #8
 80006f8:	4313      	orrs	r3, r2
 80006fa:	7bba      	ldrb	r2, [r7, #14]
 80006fc:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000028 	.word	0x20000028

0800070c <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	4608      	mov	r0, r1
 8000716:	4611      	mov	r1, r2
 8000718:	461a      	mov	r2, r3
 800071a:	4603      	mov	r3, r0
 800071c:	70fb      	strb	r3, [r7, #3]
 800071e:	460b      	mov	r3, r1
 8000720:	70bb      	strb	r3, [r7, #2]
 8000722:	4613      	mov	r3, r2
 8000724:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 8000726:	4a48      	ldr	r2, [pc, #288]	; (8000848 <BMP280_Init+0x13c>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 800072c:	787b      	ldrb	r3, [r7, #1]
 800072e:	2b03      	cmp	r3, #3
 8000730:	d901      	bls.n	8000736 <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 8000732:	2303      	movs	r3, #3
 8000734:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 8000736:	4a45      	ldr	r2, [pc, #276]	; (800084c <BMP280_Init+0x140>)
 8000738:	787b      	ldrb	r3, [r7, #1]
 800073a:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 800073c:	787b      	ldrb	r3, [r7, #1]
 800073e:	2b01      	cmp	r3, #1
 8000740:	d101      	bne.n	8000746 <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 8000742:	2300      	movs	r3, #0
 8000744:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 8000746:	78fb      	ldrb	r3, [r7, #3]
 8000748:	2b05      	cmp	r3, #5
 800074a:	d901      	bls.n	8000750 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 800074c:	2305      	movs	r3, #5
 800074e:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 8000750:	4a3f      	ldr	r2, [pc, #252]	; (8000850 <BMP280_Init+0x144>)
 8000752:	78fb      	ldrb	r3, [r7, #3]
 8000754:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 8000756:	78bb      	ldrb	r3, [r7, #2]
 8000758:	2b05      	cmp	r3, #5
 800075a:	d901      	bls.n	8000760 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 800075c:	2305      	movs	r3, #5
 800075e:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 8000760:	4a3c      	ldr	r2, [pc, #240]	; (8000854 <BMP280_Init+0x148>)
 8000762:	78bb      	ldrb	r3, [r7, #2]
 8000764:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 8000766:	bf00      	nop
 8000768:	20d0      	movs	r0, #208	; 0xd0
 800076a:	f7ff ff37 	bl	80005dc <BMP280_Read8>
 800076e:	4603      	mov	r3, r0
 8000770:	2b58      	cmp	r3, #88	; 0x58
 8000772:	d1f9      	bne.n	8000768 <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 8000774:	2088      	movs	r0, #136	; 0x88
 8000776:	f7ff ff71 	bl	800065c <BMP280_Read16LE>
 800077a:	4603      	mov	r3, r0
 800077c:	461a      	mov	r2, r3
 800077e:	4b36      	ldr	r3, [pc, #216]	; (8000858 <BMP280_Init+0x14c>)
 8000780:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8000782:	208a      	movs	r0, #138	; 0x8a
 8000784:	f7ff ff6a 	bl	800065c <BMP280_Read16LE>
 8000788:	4603      	mov	r3, r0
 800078a:	b21a      	sxth	r2, r3
 800078c:	4b33      	ldr	r3, [pc, #204]	; (800085c <BMP280_Init+0x150>)
 800078e:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8000790:	208c      	movs	r0, #140	; 0x8c
 8000792:	f7ff ff63 	bl	800065c <BMP280_Read16LE>
 8000796:	4603      	mov	r3, r0
 8000798:	b21a      	sxth	r2, r3
 800079a:	4b31      	ldr	r3, [pc, #196]	; (8000860 <BMP280_Init+0x154>)
 800079c:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 800079e:	208e      	movs	r0, #142	; 0x8e
 80007a0:	f7ff ff5c 	bl	800065c <BMP280_Read16LE>
 80007a4:	4603      	mov	r3, r0
 80007a6:	461a      	mov	r2, r3
 80007a8:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <BMP280_Init+0x158>)
 80007aa:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 80007ac:	2090      	movs	r0, #144	; 0x90
 80007ae:	f7ff ff55 	bl	800065c <BMP280_Read16LE>
 80007b2:	4603      	mov	r3, r0
 80007b4:	b21a      	sxth	r2, r3
 80007b6:	4b2c      	ldr	r3, [pc, #176]	; (8000868 <BMP280_Init+0x15c>)
 80007b8:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 80007ba:	2092      	movs	r0, #146	; 0x92
 80007bc:	f7ff ff4e 	bl	800065c <BMP280_Read16LE>
 80007c0:	4603      	mov	r3, r0
 80007c2:	b21a      	sxth	r2, r3
 80007c4:	4b29      	ldr	r3, [pc, #164]	; (800086c <BMP280_Init+0x160>)
 80007c6:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 80007c8:	2094      	movs	r0, #148	; 0x94
 80007ca:	f7ff ff47 	bl	800065c <BMP280_Read16LE>
 80007ce:	4603      	mov	r3, r0
 80007d0:	b21a      	sxth	r2, r3
 80007d2:	4b27      	ldr	r3, [pc, #156]	; (8000870 <BMP280_Init+0x164>)
 80007d4:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 80007d6:	2096      	movs	r0, #150	; 0x96
 80007d8:	f7ff ff40 	bl	800065c <BMP280_Read16LE>
 80007dc:	4603      	mov	r3, r0
 80007de:	b21a      	sxth	r2, r3
 80007e0:	4b24      	ldr	r3, [pc, #144]	; (8000874 <BMP280_Init+0x168>)
 80007e2:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 80007e4:	2098      	movs	r0, #152	; 0x98
 80007e6:	f7ff ff39 	bl	800065c <BMP280_Read16LE>
 80007ea:	4603      	mov	r3, r0
 80007ec:	b21a      	sxth	r2, r3
 80007ee:	4b22      	ldr	r3, [pc, #136]	; (8000878 <BMP280_Init+0x16c>)
 80007f0:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 80007f2:	209a      	movs	r0, #154	; 0x9a
 80007f4:	f7ff ff32 	bl	800065c <BMP280_Read16LE>
 80007f8:	4603      	mov	r3, r0
 80007fa:	b21a      	sxth	r2, r3
 80007fc:	4b1f      	ldr	r3, [pc, #124]	; (800087c <BMP280_Init+0x170>)
 80007fe:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 8000800:	209c      	movs	r0, #156	; 0x9c
 8000802:	f7ff ff2b 	bl	800065c <BMP280_Read16LE>
 8000806:	4603      	mov	r3, r0
 8000808:	b21a      	sxth	r2, r3
 800080a:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <BMP280_Init+0x174>)
 800080c:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 800080e:	209e      	movs	r0, #158	; 0x9e
 8000810:	f7ff ff24 	bl	800065c <BMP280_Read16LE>
 8000814:	4603      	mov	r3, r0
 8000816:	b21a      	sxth	r2, r3
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <BMP280_Init+0x178>)
 800081a:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	015b      	lsls	r3, r3, #5
 8000820:	b25a      	sxtb	r2, r3
 8000822:	78bb      	ldrb	r3, [r7, #2]
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	b25b      	sxtb	r3, r3
 8000828:	4313      	orrs	r3, r2
 800082a:	b25a      	sxtb	r2, r3
 800082c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000830:	4313      	orrs	r3, r2
 8000832:	b25b      	sxtb	r3, r3
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4619      	mov	r1, r3
 8000838:	20f4      	movs	r0, #244	; 0xf4
 800083a:	f7ff ff29 	bl	8000690 <BMP280_Write8>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000028 	.word	0x20000028
 800084c:	2000002e 	.word	0x2000002e
 8000850:	2000002c 	.word	0x2000002c
 8000854:	2000002d 	.word	0x2000002d
 8000858:	20000044 	.word	0x20000044
 800085c:	20000030 	.word	0x20000030
 8000860:	20000032 	.word	0x20000032
 8000864:	20000046 	.word	0x20000046
 8000868:	20000034 	.word	0x20000034
 800086c:	20000036 	.word	0x20000036
 8000870:	20000038 	.word	0x20000038
 8000874:	2000003a 	.word	0x2000003a
 8000878:	2000003c 	.word	0x2000003c
 800087c:	2000003e 	.word	0x2000003e
 8000880:	20000040 	.word	0x20000040
 8000884:	20000042 	.word	0x20000042

08000888 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 800088e:	4b3d      	ldr	r3, [pc, #244]	; (8000984 <BMP280_ReadTemperature+0xfc>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d16d      	bne.n	8000972 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 8000896:	20f4      	movs	r0, #244	; 0xf4
 8000898:	f7ff fea0 	bl	80005dc <BMP280_Read8>
 800089c:	4603      	mov	r3, r0
 800089e:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 80008a0:	7dfb      	ldrb	r3, [r7, #23]
 80008a2:	f023 0303 	bic.w	r3, r3, #3
 80008a6:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 80008a8:	7dfb      	ldrb	r3, [r7, #23]
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 80008b0:	7dfb      	ldrb	r3, [r7, #23]
 80008b2:	4619      	mov	r1, r3
 80008b4:	20f4      	movs	r0, #244	; 0xf4
 80008b6:	f7ff feeb 	bl	8000690 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 80008ba:	20f4      	movs	r0, #244	; 0xf4
 80008bc:	f7ff fe8e 	bl	80005dc <BMP280_Read8>
 80008c0:	4603      	mov	r3, r0
 80008c2:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 80008c4:	7dbb      	ldrb	r3, [r7, #22]
 80008c6:	f003 0303 	and.w	r3, r3, #3
 80008ca:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 80008cc:	7dbb      	ldrb	r3, [r7, #22]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d14f      	bne.n	8000972 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 80008d2:	20f4      	movs	r0, #244	; 0xf4
 80008d4:	f7ff fe82 	bl	80005dc <BMP280_Read8>
 80008d8:	4603      	mov	r3, r0
 80008da:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 80008dc:	7dbb      	ldrb	r3, [r7, #22]
 80008de:	f003 0303 	and.w	r3, r3, #3
 80008e2:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 80008e4:	7dbb      	ldrb	r3, [r7, #22]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d000      	beq.n	80008ec <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 80008ea:	e7f2      	b.n	80008d2 <BMP280_ReadTemperature+0x4a>
				  break;
 80008ec:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 80008ee:	20fa      	movs	r0, #250	; 0xfa
 80008f0:	f7ff feea 	bl	80006c8 <BMP280_Read24>
 80008f4:	4603      	mov	r3, r0
 80008f6:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	111b      	asrs	r3, r3, #4
 80008fc:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	10da      	asrs	r2, r3, #3
 8000902:	4b21      	ldr	r3, [pc, #132]	; (8000988 <BMP280_ReadTemperature+0x100>)
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 800090a:	4a20      	ldr	r2, [pc, #128]	; (800098c <BMP280_ReadTemperature+0x104>)
 800090c:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8000910:	fb02 f303 	mul.w	r3, r2, r3
 8000914:	12db      	asrs	r3, r3, #11
 8000916:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	111b      	asrs	r3, r3, #4
 800091c:	4a1a      	ldr	r2, [pc, #104]	; (8000988 <BMP280_ReadTemperature+0x100>)
 800091e:	8812      	ldrh	r2, [r2, #0]
 8000920:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	1112      	asrs	r2, r2, #4
 8000926:	4918      	ldr	r1, [pc, #96]	; (8000988 <BMP280_ReadTemperature+0x100>)
 8000928:	8809      	ldrh	r1, [r1, #0]
 800092a:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800092c:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8000930:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 8000932:	4a17      	ldr	r2, [pc, #92]	; (8000990 <BMP280_ReadTemperature+0x108>)
 8000934:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8000938:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800093c:	139b      	asrs	r3, r3, #14
 800093e:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 8000940:	68fa      	ldr	r2, [r7, #12]
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	4413      	add	r3, r2
 8000946:	4a13      	ldr	r2, [pc, #76]	; (8000994 <BMP280_ReadTemperature+0x10c>)
 8000948:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 800094a:	4b12      	ldr	r3, [pc, #72]	; (8000994 <BMP280_ReadTemperature+0x10c>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	4613      	mov	r3, r2
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	4413      	add	r3, r2
 8000954:	3380      	adds	r3, #128	; 0x80
 8000956:	121b      	asrs	r3, r3, #8
 8000958:	ee07 3a90 	vmov	s15, r3
 800095c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000960:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 8000964:	edd7 7a01 	vldr	s15, [r7, #4]
 8000968:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000998 <BMP280_ReadTemperature+0x110>
 800096c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000970:	e001      	b.n	8000976 <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 8000972:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800099c <BMP280_ReadTemperature+0x114>
}
 8000976:	eef0 7a47 	vmov.f32	s15, s14
 800097a:	eeb0 0a67 	vmov.f32	s0, s15
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	2000002e 	.word	0x2000002e
 8000988:	20000044 	.word	0x20000044
 800098c:	20000030 	.word	0x20000030
 8000990:	20000032 	.word	0x20000032
 8000994:	20000048 	.word	0x20000048
 8000998:	42c80000 	.word	0x42c80000
 800099c:	c2c60000 	.word	0xc2c60000

080009a0 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 80009a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80009a4:	b0cc      	sub	sp, #304	; 0x130
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80009ac:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 80009b0:	f7ff ff6a 	bl	8000888 <BMP280_ReadTemperature>
 80009b4:	eef0 7a40 	vmov.f32	s15, s0
 80009b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80009bc:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 80009c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80009c4:	edd3 7a00 	vldr	s15, [r3]
 80009c8:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8000c98 <BMP280_ReadTemperatureAndPressure+0x2f8>
 80009cc:	eef4 7a47 	vcmp.f32	s15, s14
 80009d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009d4:	d101      	bne.n	80009da <BMP280_ReadTemperatureAndPressure+0x3a>
		  return -1;
 80009d6:	23ff      	movs	r3, #255	; 0xff
 80009d8:	e2bf      	b.n	8000f5a <BMP280_ReadTemperatureAndPressure+0x5ba>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 80009da:	20f7      	movs	r0, #247	; 0xf7
 80009dc:	f7ff fe74 	bl	80006c8 <BMP280_Read24>
 80009e0:	4603      	mov	r3, r0
 80009e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  adc_P >>= 4;
 80009e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80009ea:	111b      	asrs	r3, r3, #4
 80009ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 80009f0:	4baa      	ldr	r3, [pc, #680]	; (8000c9c <BMP280_ReadTemperatureAndPressure+0x2fc>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	17da      	asrs	r2, r3, #31
 80009f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80009fa:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80009fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8000a02:	460b      	mov	r3, r1
 8000a04:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8000a08:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8000a10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a12:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000a16:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 8000a1a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000a1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a22:	fb03 f102 	mul.w	r1, r3, r2
 8000a26:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000a2a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a2e:	fb02 f303 	mul.w	r3, r2, r3
 8000a32:	18ca      	adds	r2, r1, r3
 8000a34:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a38:	fba3 4503 	umull	r4, r5, r3, r3
 8000a3c:	1953      	adds	r3, r2, r5
 8000a3e:	461d      	mov	r5, r3
 8000a40:	4b97      	ldr	r3, [pc, #604]	; (8000ca0 <BMP280_ReadTemperatureAndPressure+0x300>)
 8000a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a46:	b21b      	sxth	r3, r3
 8000a48:	17da      	asrs	r2, r3, #31
 8000a4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000a4e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8000a52:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8000a56:	4603      	mov	r3, r0
 8000a58:	fb03 f205 	mul.w	r2, r3, r5
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	fb04 f303 	mul.w	r3, r4, r3
 8000a62:	4413      	add	r3, r2
 8000a64:	4602      	mov	r2, r0
 8000a66:	fba4 8902 	umull	r8, r9, r4, r2
 8000a6a:	444b      	add	r3, r9
 8000a6c:	4699      	mov	r9, r3
 8000a6e:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
 8000a72:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 8000a76:	4b8b      	ldr	r3, [pc, #556]	; (8000ca4 <BMP280_ReadTemperatureAndPressure+0x304>)
 8000a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a7c:	b21b      	sxth	r3, r3
 8000a7e:	17da      	asrs	r2, r3, #31
 8000a80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000a84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000a88:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a8c:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8000a90:	462a      	mov	r2, r5
 8000a92:	fb02 f203 	mul.w	r2, r2, r3
 8000a96:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000a9a:	4621      	mov	r1, r4
 8000a9c:	fb01 f303 	mul.w	r3, r1, r3
 8000aa0:	441a      	add	r2, r3
 8000aa2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000aa6:	4621      	mov	r1, r4
 8000aa8:	fba3 ab01 	umull	sl, fp, r3, r1
 8000aac:	eb02 030b 	add.w	r3, r2, fp
 8000ab0:	469b      	mov	fp, r3
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	f04f 0100 	mov.w	r1, #0
 8000aba:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8000abe:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8000ac2:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8000ac6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000aca:	1814      	adds	r4, r2, r0
 8000acc:	643c      	str	r4, [r7, #64]	; 0x40
 8000ace:	414b      	adcs	r3, r1
 8000ad0:	647b      	str	r3, [r7, #68]	; 0x44
 8000ad2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8000ad6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 8000ada:	4b73      	ldr	r3, [pc, #460]	; (8000ca8 <BMP280_ReadTemperatureAndPressure+0x308>)
 8000adc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ae0:	b21b      	sxth	r3, r3
 8000ae2:	17da      	asrs	r2, r3, #31
 8000ae4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000ae8:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	f04f 0100 	mov.w	r1, #0
 8000af4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000af8:	00d9      	lsls	r1, r3, #3
 8000afa:	2000      	movs	r0, #0
 8000afc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000b00:	1814      	adds	r4, r2, r0
 8000b02:	63bc      	str	r4, [r7, #56]	; 0x38
 8000b04:	414b      	adcs	r3, r1
 8000b06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b08:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8000b0c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8000b10:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000b14:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b18:	fb03 f102 	mul.w	r1, r3, r2
 8000b1c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000b20:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b24:	fb02 f303 	mul.w	r3, r2, r3
 8000b28:	18ca      	adds	r2, r1, r3
 8000b2a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b2e:	fba3 1303 	umull	r1, r3, r3, r3
 8000b32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000b36:	460b      	mov	r3, r1
 8000b38:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000b40:	18d3      	adds	r3, r2, r3
 8000b42:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000b46:	4b59      	ldr	r3, [pc, #356]	; (8000cac <BMP280_ReadTemperatureAndPressure+0x30c>)
 8000b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4c:	b21b      	sxth	r3, r3
 8000b4e:	17da      	asrs	r2, r3, #31
 8000b50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000b54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8000b58:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8000b5c:	462b      	mov	r3, r5
 8000b5e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8000b62:	4642      	mov	r2, r8
 8000b64:	fb02 f203 	mul.w	r2, r2, r3
 8000b68:	464b      	mov	r3, r9
 8000b6a:	4621      	mov	r1, r4
 8000b6c:	fb01 f303 	mul.w	r3, r1, r3
 8000b70:	4413      	add	r3, r2
 8000b72:	4622      	mov	r2, r4
 8000b74:	4641      	mov	r1, r8
 8000b76:	fba2 1201 	umull	r1, r2, r2, r1
 8000b7a:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8000b7e:	460a      	mov	r2, r1
 8000b80:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8000b84:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8000b88:	4413      	add	r3, r2
 8000b8a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000b8e:	f04f 0000 	mov.w	r0, #0
 8000b92:	f04f 0100 	mov.w	r1, #0
 8000b96:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8000b9a:	4623      	mov	r3, r4
 8000b9c:	0a18      	lsrs	r0, r3, #8
 8000b9e:	462b      	mov	r3, r5
 8000ba0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000ba4:	462b      	mov	r3, r5
 8000ba6:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 8000ba8:	4b41      	ldr	r3, [pc, #260]	; (8000cb0 <BMP280_ReadTemperatureAndPressure+0x310>)
 8000baa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bae:	b21b      	sxth	r3, r3
 8000bb0:	17da      	asrs	r2, r3, #31
 8000bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000bb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8000bba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000bbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8000bc2:	464a      	mov	r2, r9
 8000bc4:	fb02 f203 	mul.w	r2, r2, r3
 8000bc8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000bcc:	4644      	mov	r4, r8
 8000bce:	fb04 f303 	mul.w	r3, r4, r3
 8000bd2:	441a      	add	r2, r3
 8000bd4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000bd8:	4644      	mov	r4, r8
 8000bda:	fba3 4304 	umull	r4, r3, r3, r4
 8000bde:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000be2:	4623      	mov	r3, r4
 8000be4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8000be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000bec:	18d3      	adds	r3, r2, r3
 8000bee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000bf2:	f04f 0200 	mov.w	r2, #0
 8000bf6:	f04f 0300 	mov.w	r3, #0
 8000bfa:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8000bfe:	464c      	mov	r4, r9
 8000c00:	0323      	lsls	r3, r4, #12
 8000c02:	4644      	mov	r4, r8
 8000c04:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000c08:	4644      	mov	r4, r8
 8000c0a:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8000c0c:	1884      	adds	r4, r0, r2
 8000c0e:	633c      	str	r4, [r7, #48]	; 0x30
 8000c10:	eb41 0303 	adc.w	r3, r1, r3
 8000c14:	637b      	str	r3, [r7, #52]	; 0x34
 8000c16:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8000c1a:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8000c1e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000c22:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8000c26:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8000c2a:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8000c2e:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <BMP280_ReadTemperatureAndPressure+0x314>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	2200      	movs	r2, #0
 8000c36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000c3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8000c3e:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8000c42:	462b      	mov	r3, r5
 8000c44:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8000c48:	4642      	mov	r2, r8
 8000c4a:	fb02 f203 	mul.w	r2, r2, r3
 8000c4e:	464b      	mov	r3, r9
 8000c50:	4621      	mov	r1, r4
 8000c52:	fb01 f303 	mul.w	r3, r1, r3
 8000c56:	4413      	add	r3, r2
 8000c58:	4622      	mov	r2, r4
 8000c5a:	4641      	mov	r1, r8
 8000c5c:	fba2 1201 	umull	r1, r2, r2, r1
 8000c60:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8000c64:	460a      	mov	r2, r1
 8000c66:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8000c6a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000c6e:	4413      	add	r3, r2
 8000c70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000c74:	f04f 0200 	mov.w	r2, #0
 8000c78:	f04f 0300 	mov.w	r3, #0
 8000c7c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8000c80:	4629      	mov	r1, r5
 8000c82:	104a      	asrs	r2, r1, #1
 8000c84:	4629      	mov	r1, r5
 8000c86:	17cb      	asrs	r3, r1, #31
 8000c88:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	  if (var1 == 0) {
 8000c8c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000c90:	4313      	orrs	r3, r2
 8000c92:	d111      	bne.n	8000cb8 <BMP280_ReadTemperatureAndPressure+0x318>
	    return 0;  // avoid exception caused by division by zero
 8000c94:	2300      	movs	r3, #0
 8000c96:	e160      	b.n	8000f5a <BMP280_ReadTemperatureAndPressure+0x5ba>
 8000c98:	c2c60000 	.word	0xc2c60000
 8000c9c:	20000048 	.word	0x20000048
 8000ca0:	2000003c 	.word	0x2000003c
 8000ca4:	2000003a 	.word	0x2000003a
 8000ca8:	20000038 	.word	0x20000038
 8000cac:	20000036 	.word	0x20000036
 8000cb0:	20000034 	.word	0x20000034
 8000cb4:	20000046 	.word	0x20000046
	  }
	  p = 1048576 - adc_P;
 8000cb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000cbc:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8000cc0:	17da      	asrs	r2, r3, #31
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000cc6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000cca:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 8000cce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000cd2:	105b      	asrs	r3, r3, #1
 8000cd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000cd8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000cdc:	07db      	lsls	r3, r3, #31
 8000cde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000ce2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000ce6:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8000cea:	4621      	mov	r1, r4
 8000cec:	1a89      	subs	r1, r1, r2
 8000cee:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8000cf2:	4629      	mov	r1, r5
 8000cf4:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000cfc:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8000d00:	4622      	mov	r2, r4
 8000d02:	462b      	mov	r3, r5
 8000d04:	1891      	adds	r1, r2, r2
 8000d06:	6239      	str	r1, [r7, #32]
 8000d08:	415b      	adcs	r3, r3
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d0c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000d10:	4621      	mov	r1, r4
 8000d12:	1851      	adds	r1, r2, r1
 8000d14:	61b9      	str	r1, [r7, #24]
 8000d16:	4629      	mov	r1, r5
 8000d18:	414b      	adcs	r3, r1
 8000d1a:	61fb      	str	r3, [r7, #28]
 8000d1c:	f04f 0200 	mov.w	r2, #0
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000d28:	4649      	mov	r1, r9
 8000d2a:	018b      	lsls	r3, r1, #6
 8000d2c:	4641      	mov	r1, r8
 8000d2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000d32:	4641      	mov	r1, r8
 8000d34:	018a      	lsls	r2, r1, #6
 8000d36:	4641      	mov	r1, r8
 8000d38:	1889      	adds	r1, r1, r2
 8000d3a:	6139      	str	r1, [r7, #16]
 8000d3c:	4649      	mov	r1, r9
 8000d3e:	eb43 0101 	adc.w	r1, r3, r1
 8000d42:	6179      	str	r1, [r7, #20]
 8000d44:	f04f 0200 	mov.w	r2, #0
 8000d48:	f04f 0300 	mov.w	r3, #0
 8000d4c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000d50:	4649      	mov	r1, r9
 8000d52:	008b      	lsls	r3, r1, #2
 8000d54:	4641      	mov	r1, r8
 8000d56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d5a:	4641      	mov	r1, r8
 8000d5c:	008a      	lsls	r2, r1, #2
 8000d5e:	4610      	mov	r0, r2
 8000d60:	4619      	mov	r1, r3
 8000d62:	4603      	mov	r3, r0
 8000d64:	4622      	mov	r2, r4
 8000d66:	189b      	adds	r3, r3, r2
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	462a      	mov	r2, r5
 8000d6e:	eb42 0303 	adc.w	r3, r2, r3
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	f04f 0200 	mov.w	r2, #0
 8000d78:	f04f 0300 	mov.w	r3, #0
 8000d7c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000d80:	4649      	mov	r1, r9
 8000d82:	008b      	lsls	r3, r1, #2
 8000d84:	4641      	mov	r1, r8
 8000d86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d8a:	4641      	mov	r1, r8
 8000d8c:	008a      	lsls	r2, r1, #2
 8000d8e:	4610      	mov	r0, r2
 8000d90:	4619      	mov	r1, r3
 8000d92:	4603      	mov	r3, r0
 8000d94:	4622      	mov	r2, r4
 8000d96:	189b      	adds	r3, r3, r2
 8000d98:	67bb      	str	r3, [r7, #120]	; 0x78
 8000d9a:	462b      	mov	r3, r5
 8000d9c:	460a      	mov	r2, r1
 8000d9e:	eb42 0303 	adc.w	r3, r2, r3
 8000da2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000da4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000da8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8000dac:	f7ff fa44 	bl	8000238 <__aeabi_ldivmod>
 8000db0:	4602      	mov	r2, r0
 8000db2:	460b      	mov	r3, r1
 8000db4:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8000db8:	4b6b      	ldr	r3, [pc, #428]	; (8000f68 <BMP280_ReadTemperatureAndPressure+0x5c8>)
 8000dba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dbe:	b21b      	sxth	r3, r3
 8000dc0:	17da      	asrs	r2, r3, #31
 8000dc2:	673b      	str	r3, [r7, #112]	; 0x70
 8000dc4:	677a      	str	r2, [r7, #116]	; 0x74
 8000dc6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	f04f 0100 	mov.w	r1, #0
 8000dd2:	0b50      	lsrs	r0, r2, #13
 8000dd4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000dd8:	1359      	asrs	r1, r3, #13
 8000dda:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8000dde:	462b      	mov	r3, r5
 8000de0:	fb00 f203 	mul.w	r2, r0, r3
 8000de4:	4623      	mov	r3, r4
 8000de6:	fb03 f301 	mul.w	r3, r3, r1
 8000dea:	4413      	add	r3, r2
 8000dec:	4622      	mov	r2, r4
 8000dee:	fba2 1200 	umull	r1, r2, r2, r0
 8000df2:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8000df6:	460a      	mov	r2, r1
 8000df8:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8000dfc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000e00:	4413      	add	r3, r2
 8000e02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000e06:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8000e0a:	f04f 0000 	mov.w	r0, #0
 8000e0e:	f04f 0100 	mov.w	r1, #0
 8000e12:	0b50      	lsrs	r0, r2, #13
 8000e14:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000e18:	1359      	asrs	r1, r3, #13
 8000e1a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8000e1e:	462b      	mov	r3, r5
 8000e20:	fb00 f203 	mul.w	r2, r0, r3
 8000e24:	4623      	mov	r3, r4
 8000e26:	fb03 f301 	mul.w	r3, r3, r1
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4622      	mov	r2, r4
 8000e2e:	fba2 1200 	umull	r1, r2, r2, r0
 8000e32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8000e36:	460a      	mov	r2, r1
 8000e38:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8000e3c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000e40:	4413      	add	r3, r2
 8000e42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000e46:	f04f 0200 	mov.w	r2, #0
 8000e4a:	f04f 0300 	mov.w	r3, #0
 8000e4e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8000e52:	4621      	mov	r1, r4
 8000e54:	0e4a      	lsrs	r2, r1, #25
 8000e56:	4629      	mov	r1, r5
 8000e58:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000e5c:	4629      	mov	r1, r5
 8000e5e:	164b      	asrs	r3, r1, #25
 8000e60:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 8000e64:	4b41      	ldr	r3, [pc, #260]	; (8000f6c <BMP280_ReadTemperatureAndPressure+0x5cc>)
 8000e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e6a:	b21b      	sxth	r3, r3
 8000e6c:	17da      	asrs	r2, r3, #31
 8000e6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8000e70:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000e72:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000e76:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8000e7a:	462a      	mov	r2, r5
 8000e7c:	fb02 f203 	mul.w	r2, r2, r3
 8000e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000e84:	4621      	mov	r1, r4
 8000e86:	fb01 f303 	mul.w	r3, r1, r3
 8000e8a:	4413      	add	r3, r2
 8000e8c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000e90:	4621      	mov	r1, r4
 8000e92:	fba2 1201 	umull	r1, r2, r2, r1
 8000e96:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000e9a:	460a      	mov	r2, r1
 8000e9c:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8000ea0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000ea4:	4413      	add	r3, r2
 8000ea6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000eaa:	f04f 0200 	mov.w	r2, #0
 8000eae:	f04f 0300 	mov.w	r3, #0
 8000eb2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8000eb6:	4621      	mov	r1, r4
 8000eb8:	0cca      	lsrs	r2, r1, #19
 8000eba:	4629      	mov	r1, r5
 8000ebc:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000ec0:	4629      	mov	r1, r5
 8000ec2:	14cb      	asrs	r3, r1, #19
 8000ec4:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8000ec8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8000ecc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000ed0:	1884      	adds	r4, r0, r2
 8000ed2:	663c      	str	r4, [r7, #96]	; 0x60
 8000ed4:	eb41 0303 	adc.w	r3, r1, r3
 8000ed8:	667b      	str	r3, [r7, #100]	; 0x64
 8000eda:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000ede:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8000ee2:	4621      	mov	r1, r4
 8000ee4:	1889      	adds	r1, r1, r2
 8000ee6:	65b9      	str	r1, [r7, #88]	; 0x58
 8000ee8:	4629      	mov	r1, r5
 8000eea:	eb43 0101 	adc.w	r1, r3, r1
 8000eee:	65f9      	str	r1, [r7, #92]	; 0x5c
 8000ef0:	f04f 0000 	mov.w	r0, #0
 8000ef4:	f04f 0100 	mov.w	r1, #0
 8000ef8:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8000efc:	4623      	mov	r3, r4
 8000efe:	0a18      	lsrs	r0, r3, #8
 8000f00:	462b      	mov	r3, r5
 8000f02:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000f06:	462b      	mov	r3, r5
 8000f08:	1219      	asrs	r1, r3, #8
 8000f0a:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <BMP280_ReadTemperatureAndPressure+0x5d0>)
 8000f0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f10:	b21b      	sxth	r3, r3
 8000f12:	17da      	asrs	r2, r3, #31
 8000f14:	653b      	str	r3, [r7, #80]	; 0x50
 8000f16:	657a      	str	r2, [r7, #84]	; 0x54
 8000f18:	f04f 0200 	mov.w	r2, #0
 8000f1c:	f04f 0300 	mov.w	r3, #0
 8000f20:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8000f24:	464c      	mov	r4, r9
 8000f26:	0123      	lsls	r3, r4, #4
 8000f28:	4644      	mov	r4, r8
 8000f2a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000f2e:	4644      	mov	r4, r8
 8000f30:	0122      	lsls	r2, r4, #4
 8000f32:	1884      	adds	r4, r0, r2
 8000f34:	603c      	str	r4, [r7, #0]
 8000f36:	eb41 0303 	adc.w	r3, r1, r3
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f40:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  *pressure = (int32_t)p/256;
 8000f44:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	da00      	bge.n	8000f4e <BMP280_ReadTemperatureAndPressure+0x5ae>
 8000f4c:	33ff      	adds	r3, #255	; 0xff
 8000f4e:	121b      	asrs	r3, r3, #8
 8000f50:	461a      	mov	r2, r3
 8000f52:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000f56:	601a      	str	r2, [r3, #0]

	  return 0;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000f60:	46bd      	mov	sp, r7
 8000f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f66:	bf00      	nop
 8000f68:	20000042 	.word	0x20000042
 8000f6c:	20000040 	.word	0x20000040
 8000f70:	2000003e 	.word	0x2000003e

08000f74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f78:	f000 fcc1 	bl	80018fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7c:	f000 f830 	bl	8000fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f80:	f000 f9b6 	bl	80012f0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f84:	f000 f956 	bl	8001234 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f88:	f000 f984 	bl	8001294 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000f8c:	f000 f89a 	bl	80010c4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000f90:	f000 f8d8 	bl	8001144 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8000f94:	2301      	movs	r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	2101      	movs	r1, #1
 8000f9a:	480c      	ldr	r0, [pc, #48]	; (8000fcc <main+0x58>)
 8000f9c:	f7ff fbb6 	bl	800070c <BMP280_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000fa0:	2108      	movs	r1, #8
 8000fa2:	480b      	ldr	r0, [pc, #44]	; (8000fd0 <main+0x5c>)
 8000fa4:	f003 f93e 	bl	8004224 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, max_pulse);
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <main+0x5c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fb0:	63da      	str	r2, [r3, #60]	; 0x3c
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 8000fb2:	4908      	ldr	r1, [pc, #32]	; (8000fd4 <main+0x60>)
 8000fb4:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <main+0x64>)
 8000fb6:	f7ff fcf3 	bl	80009a0 <BMP280_ReadTemperatureAndPressure>
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000fba:	2101      	movs	r1, #1
 8000fbc:	4807      	ldr	r0, [pc, #28]	; (8000fdc <main+0x68>)
 8000fbe:	f000 ffca 	bl	8001f56 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000fc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fc6:	f000 fcf7 	bl	80019b8 <HAL_Delay>
	  BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 8000fca:	e7f2      	b.n	8000fb2 <main+0x3e>
 8000fcc:	2000004c 	.word	0x2000004c
 8000fd0:	200000a0 	.word	0x200000a0
 8000fd4:	20000680 	.word	0x20000680
 8000fd8:	2000067c 	.word	0x2000067c
 8000fdc:	40020400 	.word	0x40020400

08000fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b094      	sub	sp, #80	; 0x50
 8000fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	2234      	movs	r2, #52	; 0x34
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f004 ffbc 	bl	8005f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff4:	f107 0308 	add.w	r3, r7, #8
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001004:	f001 fefa 	bl	8002dfc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001008:	4b2c      	ldr	r3, [pc, #176]	; (80010bc <SystemClock_Config+0xdc>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	4a2b      	ldr	r2, [pc, #172]	; (80010bc <SystemClock_Config+0xdc>)
 800100e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001012:	6413      	str	r3, [r2, #64]	; 0x40
 8001014:	4b29      	ldr	r3, [pc, #164]	; (80010bc <SystemClock_Config+0xdc>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001020:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <SystemClock_Config+0xe0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001028:	4a25      	ldr	r2, [pc, #148]	; (80010c0 <SystemClock_Config+0xe0>)
 800102a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <SystemClock_Config+0xe0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800103c:	2301      	movs	r3, #1
 800103e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001040:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001044:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001046:	2302      	movs	r3, #2
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800104a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800104e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001050:	2304      	movs	r3, #4
 8001052:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001054:	2360      	movs	r3, #96	; 0x60
 8001056:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001058:	2302      	movs	r3, #2
 800105a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800105c:	2304      	movs	r3, #4
 800105e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001060:	2302      	movs	r3, #2
 8001062:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	4618      	mov	r0, r3
 800106a:	f001 ff27 	bl	8002ebc <HAL_RCC_OscConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001074:	f000 fa22 	bl	80014bc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001078:	f001 fed0 	bl	8002e1c <HAL_PWREx_EnableOverDrive>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001082:	f000 fa1b 	bl	80014bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001086:	230f      	movs	r3, #15
 8001088:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108a:	2302      	movs	r3, #2
 800108c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001096:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001098:	2300      	movs	r3, #0
 800109a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800109c:	f107 0308 	add.w	r3, r7, #8
 80010a0:	2103      	movs	r1, #3
 80010a2:	4618      	mov	r0, r3
 80010a4:	f002 f9b8 	bl	8003418 <HAL_RCC_ClockConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80010ae:	f000 fa05 	bl	80014bc <Error_Handler>
  }
}
 80010b2:	bf00      	nop
 80010b4:	3750      	adds	r7, #80	; 0x50
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40007000 	.word	0x40007000

080010c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <MX_I2C1_Init+0x74>)
 80010ca:	4a1c      	ldr	r2, [pc, #112]	; (800113c <MX_I2C1_Init+0x78>)
 80010cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80010ce:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <MX_I2C1_Init+0x74>)
 80010d0:	4a1b      	ldr	r2, [pc, #108]	; (8001140 <MX_I2C1_Init+0x7c>)
 80010d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010d4:	4b18      	ldr	r3, [pc, #96]	; (8001138 <MX_I2C1_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <MX_I2C1_Init+0x74>)
 80010dc:	2201      	movs	r2, #1
 80010de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <MX_I2C1_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <MX_I2C1_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <MX_I2C1_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_I2C1_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_I2C1_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010fe:	480e      	ldr	r0, [pc, #56]	; (8001138 <MX_I2C1_Init+0x74>)
 8001100:	f000 ff44 	bl	8001f8c <HAL_I2C_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800110a:	f000 f9d7 	bl	80014bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800110e:	2100      	movs	r1, #0
 8001110:	4809      	ldr	r0, [pc, #36]	; (8001138 <MX_I2C1_Init+0x74>)
 8001112:	f001 fc93 	bl	8002a3c <HAL_I2CEx_ConfigAnalogFilter>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800111c:	f000 f9ce 	bl	80014bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001120:	2100      	movs	r1, #0
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_I2C1_Init+0x74>)
 8001124:	f001 fcd5 	bl	8002ad2 <HAL_I2CEx_ConfigDigitalFilter>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800112e:	f000 f9c5 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2000004c 	.word	0x2000004c
 800113c:	40005400 	.word	0x40005400
 8001140:	20303e5d 	.word	0x20303e5d

08001144 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08e      	sub	sp, #56	; 0x38
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001164:	463b      	mov	r3, r7
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	611a      	str	r2, [r3, #16]
 8001172:	615a      	str	r2, [r3, #20]
 8001174:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001176:	4b2d      	ldr	r3, [pc, #180]	; (800122c <MX_TIM3_Init+0xe8>)
 8001178:	4a2d      	ldr	r2, [pc, #180]	; (8001230 <MX_TIM3_Init+0xec>)
 800117a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800117c:	4b2b      	ldr	r3, [pc, #172]	; (800122c <MX_TIM3_Init+0xe8>)
 800117e:	2247      	movs	r2, #71	; 0x47
 8001180:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001182:	4b2a      	ldr	r3, [pc, #168]	; (800122c <MX_TIM3_Init+0xe8>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001188:	4b28      	ldr	r3, [pc, #160]	; (800122c <MX_TIM3_Init+0xe8>)
 800118a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800118e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001190:	4b26      	ldr	r3, [pc, #152]	; (800122c <MX_TIM3_Init+0xe8>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001196:	4b25      	ldr	r3, [pc, #148]	; (800122c <MX_TIM3_Init+0xe8>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800119c:	4823      	ldr	r0, [pc, #140]	; (800122c <MX_TIM3_Init+0xe8>)
 800119e:	f002 ff89 	bl	80040b4 <HAL_TIM_Base_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80011a8:	f000 f988 	bl	80014bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b6:	4619      	mov	r1, r3
 80011b8:	481c      	ldr	r0, [pc, #112]	; (800122c <MX_TIM3_Init+0xe8>)
 80011ba:	f003 fa41 	bl	8004640 <HAL_TIM_ConfigClockSource>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80011c4:	f000 f97a 	bl	80014bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011c8:	4818      	ldr	r0, [pc, #96]	; (800122c <MX_TIM3_Init+0xe8>)
 80011ca:	f002 ffca 	bl	8004162 <HAL_TIM_PWM_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80011d4:	f000 f972 	bl	80014bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011d8:	2320      	movs	r3, #32
 80011da:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	4619      	mov	r1, r3
 80011e6:	4811      	ldr	r0, [pc, #68]	; (800122c <MX_TIM3_Init+0xe8>)
 80011e8:	f003 feb2 	bl	8004f50 <HAL_TIMEx_MasterConfigSynchronization>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80011f2:	f000 f963 	bl	80014bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f6:	2360      	movs	r3, #96	; 0x60
 80011f8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 80011fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001200:	2300      	movs	r3, #0
 8001202:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001208:	463b      	mov	r3, r7
 800120a:	2208      	movs	r2, #8
 800120c:	4619      	mov	r1, r3
 800120e:	4807      	ldr	r0, [pc, #28]	; (800122c <MX_TIM3_Init+0xe8>)
 8001210:	f003 f902 	bl	8004418 <HAL_TIM_PWM_ConfigChannel>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800121a:	f000 f94f 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800121e:	4803      	ldr	r0, [pc, #12]	; (800122c <MX_TIM3_Init+0xe8>)
 8001220:	f000 f9f6 	bl	8001610 <HAL_TIM_MspPostInit>

}
 8001224:	bf00      	nop
 8001226:	3738      	adds	r7, #56	; 0x38
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200000a0 	.word	0x200000a0
 8001230:	40000400 	.word	0x40000400

08001234 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <MX_USART3_UART_Init+0x58>)
 800123a:	4a15      	ldr	r2, [pc, #84]	; (8001290 <MX_USART3_UART_Init+0x5c>)
 800123c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800123e:	4b13      	ldr	r3, [pc, #76]	; (800128c <MX_USART3_UART_Init+0x58>)
 8001240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001244:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <MX_USART3_UART_Init+0x58>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MX_USART3_UART_Init+0x58>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <MX_USART3_UART_Init+0x58>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <MX_USART3_UART_Init+0x58>)
 800125a:	220c      	movs	r2, #12
 800125c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <MX_USART3_UART_Init+0x58>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <MX_USART3_UART_Init+0x58>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <MX_USART3_UART_Init+0x58>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <MX_USART3_UART_Init+0x58>)
 8001272:	2200      	movs	r2, #0
 8001274:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <MX_USART3_UART_Init+0x58>)
 8001278:	f003 fef8 	bl	800506c <HAL_UART_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001282:	f000 f91b 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200000ec 	.word	0x200000ec
 8001290:	40004800 	.word	0x40004800

08001294 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 800129a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800129e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012a2:	2206      	movs	r2, #6
 80012a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012a8:	2202      	movs	r2, #2
 80012aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012b4:	2202      	movs	r2, #2
 80012b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012d8:	f001 fc47 	bl	8002b6a <HAL_PCD_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80012e2:	f000 f8eb 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000174 	.word	0x20000174

080012f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08c      	sub	sp, #48	; 0x30
 80012f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001306:	4b68      	ldr	r3, [pc, #416]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a67      	ldr	r2, [pc, #412]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 800130c:	f043 0304 	orr.w	r3, r3, #4
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b65      	ldr	r3, [pc, #404]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	61bb      	str	r3, [r7, #24]
 800131c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800131e:	4b62      	ldr	r3, [pc, #392]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a61      	ldr	r2, [pc, #388]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 8001324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b5f      	ldr	r3, [pc, #380]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	4b5c      	ldr	r3, [pc, #368]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a5b      	ldr	r2, [pc, #364]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b59      	ldr	r3, [pc, #356]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134e:	4b56      	ldr	r3, [pc, #344]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a55      	ldr	r2, [pc, #340]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b53      	ldr	r3, [pc, #332]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001366:	4b50      	ldr	r3, [pc, #320]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a4f      	ldr	r2, [pc, #316]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 800136c:	f043 0308 	orr.w	r3, r3, #8
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b4d      	ldr	r3, [pc, #308]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800137e:	4b4a      	ldr	r3, [pc, #296]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a49      	ldr	r2, [pc, #292]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 8001384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b47      	ldr	r3, [pc, #284]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	f244 0181 	movw	r1, #16513	; 0x4081
 800139c:	4843      	ldr	r0, [pc, #268]	; (80014ac <MX_GPIO_Init+0x1bc>)
 800139e:	f000 fdc1 	bl	8001f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2140      	movs	r1, #64	; 0x40
 80013a6:	4842      	ldr	r0, [pc, #264]	; (80014b0 <MX_GPIO_Init+0x1c0>)
 80013a8:	f000 fdbc 	bl	8001f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80013ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4619      	mov	r1, r3
 80013c2:	483c      	ldr	r0, [pc, #240]	; (80014b4 <MX_GPIO_Init+0x1c4>)
 80013c4:	f000 fc02 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80013c8:	2332      	movs	r3, #50	; 0x32
 80013ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013d8:	230b      	movs	r3, #11
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013dc:	f107 031c 	add.w	r3, r7, #28
 80013e0:	4619      	mov	r1, r3
 80013e2:	4834      	ldr	r0, [pc, #208]	; (80014b4 <MX_GPIO_Init+0x1c4>)
 80013e4:	f000 fbf2 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013e8:	2386      	movs	r3, #134	; 0x86
 80013ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	2302      	movs	r3, #2
 80013ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f4:	2303      	movs	r3, #3
 80013f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013f8:	230b      	movs	r3, #11
 80013fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	4619      	mov	r1, r3
 8001402:	482d      	ldr	r0, [pc, #180]	; (80014b8 <MX_GPIO_Init+0x1c8>)
 8001404:	f000 fbe2 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LD3_Pin|LD2_Pin;
 8001408:	f244 0381 	movw	r3, #16513	; 0x4081
 800140c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	2301      	movs	r3, #1
 8001410:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2300      	movs	r3, #0
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	4619      	mov	r1, r3
 8001420:	4822      	ldr	r0, [pc, #136]	; (80014ac <MX_GPIO_Init+0x1bc>)
 8001422:	f000 fbd3 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001426:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800142a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001434:	2303      	movs	r3, #3
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001438:	230b      	movs	r3, #11
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	4619      	mov	r1, r3
 8001442:	481a      	ldr	r0, [pc, #104]	; (80014ac <MX_GPIO_Init+0x1bc>)
 8001444:	f000 fbc2 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001448:	2340      	movs	r3, #64	; 0x40
 800144a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144c:	2301      	movs	r3, #1
 800144e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	4619      	mov	r1, r3
 800145e:	4814      	ldr	r0, [pc, #80]	; (80014b0 <MX_GPIO_Init+0x1c0>)
 8001460:	f000 fbb4 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001468:	2300      	movs	r3, #0
 800146a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001470:	f107 031c 	add.w	r3, r7, #28
 8001474:	4619      	mov	r1, r3
 8001476:	480e      	ldr	r0, [pc, #56]	; (80014b0 <MX_GPIO_Init+0x1c0>)
 8001478:	f000 fba8 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800147c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148a:	2303      	movs	r3, #3
 800148c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800148e:	230b      	movs	r3, #11
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001492:	f107 031c 	add.w	r3, r7, #28
 8001496:	4619      	mov	r1, r3
 8001498:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_GPIO_Init+0x1c0>)
 800149a:	f000 fb97 	bl	8001bcc <HAL_GPIO_Init>

}
 800149e:	bf00      	nop
 80014a0:	3730      	adds	r7, #48	; 0x30
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40020400 	.word	0x40020400
 80014b0:	40021800 	.word	0x40021800
 80014b4:	40020800 	.word	0x40020800
 80014b8:	40020000 	.word	0x40020000

080014bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c0:	b672      	cpsid	i
}
 80014c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <Error_Handler+0x8>
	...

080014c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014ce:	4b0f      	ldr	r3, [pc, #60]	; (800150c <HAL_MspInit+0x44>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a0e      	ldr	r2, [pc, #56]	; (800150c <HAL_MspInit+0x44>)
 80014d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <HAL_MspInit+0x44>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <HAL_MspInit+0x44>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	4a08      	ldr	r2, [pc, #32]	; (800150c <HAL_MspInit+0x44>)
 80014ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f0:	6453      	str	r3, [r2, #68]	; 0x44
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_MspInit+0x44>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800

08001510 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b0ae      	sub	sp, #184	; 0xb8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2290      	movs	r2, #144	; 0x90
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f004 fd1b 	bl	8005f6c <memset>
  if(hi2c->Instance==I2C1)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a22      	ldr	r2, [pc, #136]	; (80015c4 <HAL_I2C_MspInit+0xb4>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d13c      	bne.n	80015ba <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001540:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001544:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001546:	2300      	movs	r3, #0
 8001548:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4618      	mov	r0, r3
 8001550:	f002 f988 	bl	8003864 <HAL_RCCEx_PeriphCLKConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800155a:	f7ff ffaf 	bl	80014bc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <HAL_I2C_MspInit+0xb8>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a19      	ldr	r2, [pc, #100]	; (80015c8 <HAL_I2C_MspInit+0xb8>)
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <HAL_I2C_MspInit+0xb8>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001576:	f44f 7310 	mov.w	r3, #576	; 0x240
 800157a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800157e:	2312      	movs	r3, #18
 8001580:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001590:	2304      	movs	r3, #4
 8001592:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001596:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800159a:	4619      	mov	r1, r3
 800159c:	480b      	ldr	r0, [pc, #44]	; (80015cc <HAL_I2C_MspInit+0xbc>)
 800159e:	f000 fb15 	bl	8001bcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <HAL_I2C_MspInit+0xb8>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	4a08      	ldr	r2, [pc, #32]	; (80015c8 <HAL_I2C_MspInit+0xb8>)
 80015a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ac:	6413      	str	r3, [r2, #64]	; 0x40
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_I2C_MspInit+0xb8>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015ba:	bf00      	nop
 80015bc:	37b8      	adds	r7, #184	; 0xb8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40005400 	.word	0x40005400
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020400 	.word	0x40020400

080015d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <HAL_TIM_Base_MspInit+0x38>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d10b      	bne.n	80015fa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_TIM_Base_MspInit+0x3c>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	4a09      	ldr	r2, [pc, #36]	; (800160c <HAL_TIM_Base_MspInit+0x3c>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	6413      	str	r3, [r2, #64]	; 0x40
 80015ee:	4b07      	ldr	r3, [pc, #28]	; (800160c <HAL_TIM_Base_MspInit+0x3c>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015fa:	bf00      	nop
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40000400 	.word	0x40000400
 800160c:	40023800 	.word	0x40023800

08001610 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a11      	ldr	r2, [pc, #68]	; (8001674 <HAL_TIM_MspPostInit+0x64>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d11c      	bne.n	800166c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <HAL_TIM_MspPostInit+0x68>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a10      	ldr	r2, [pc, #64]	; (8001678 <HAL_TIM_MspPostInit+0x68>)
 8001638:	f043 0304 	orr.w	r3, r3, #4
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <HAL_TIM_MspPostInit+0x68>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800164a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800164e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800165c:	2302      	movs	r3, #2
 800165e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	4619      	mov	r1, r3
 8001666:	4805      	ldr	r0, [pc, #20]	; (800167c <HAL_TIM_MspPostInit+0x6c>)
 8001668:	f000 fab0 	bl	8001bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800166c:	bf00      	nop
 800166e:	3720      	adds	r7, #32
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40000400 	.word	0x40000400
 8001678:	40023800 	.word	0x40023800
 800167c:	40020800 	.word	0x40020800

08001680 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b0ae      	sub	sp, #184	; 0xb8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	2290      	movs	r2, #144	; 0x90
 800169e:	2100      	movs	r1, #0
 80016a0:	4618      	mov	r0, r3
 80016a2:	f004 fc63 	bl	8005f6c <memset>
  if(huart->Instance==USART3)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a22      	ldr	r2, [pc, #136]	; (8001734 <HAL_UART_MspInit+0xb4>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d13c      	bne.n	800172a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80016b6:	2300      	movs	r3, #0
 80016b8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4618      	mov	r0, r3
 80016c0:	f002 f8d0 	bl	8003864 <HAL_RCCEx_PeriphCLKConfig>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016ca:	f7ff fef7 	bl	80014bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016ce:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <HAL_UART_MspInit+0xb8>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	4a19      	ldr	r2, [pc, #100]	; (8001738 <HAL_UART_MspInit+0xb8>)
 80016d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d8:	6413      	str	r3, [r2, #64]	; 0x40
 80016da:	4b17      	ldr	r3, [pc, #92]	; (8001738 <HAL_UART_MspInit+0xb8>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e6:	4b14      	ldr	r3, [pc, #80]	; (8001738 <HAL_UART_MspInit+0xb8>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a13      	ldr	r2, [pc, #76]	; (8001738 <HAL_UART_MspInit+0xb8>)
 80016ec:	f043 0308 	orr.w	r3, r3, #8
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_UART_MspInit+0xb8>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001702:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001712:	2303      	movs	r3, #3
 8001714:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001718:	2307      	movs	r3, #7
 800171a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800171e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001722:	4619      	mov	r1, r3
 8001724:	4805      	ldr	r0, [pc, #20]	; (800173c <HAL_UART_MspInit+0xbc>)
 8001726:	f000 fa51 	bl	8001bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800172a:	bf00      	nop
 800172c:	37b8      	adds	r7, #184	; 0xb8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40004800 	.word	0x40004800
 8001738:	40023800 	.word	0x40023800
 800173c:	40020c00 	.word	0x40020c00

08001740 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b0ae      	sub	sp, #184	; 0xb8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	2290      	movs	r2, #144	; 0x90
 800175e:	2100      	movs	r1, #0
 8001760:	4618      	mov	r0, r3
 8001762:	f004 fc03 	bl	8005f6c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800176e:	d159      	bne.n	8001824 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001770:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001774:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001776:	2300      	movs	r3, #0
 8001778:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4618      	mov	r0, r3
 8001782:	f002 f86f 	bl	8003864 <HAL_RCCEx_PeriphCLKConfig>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800178c:	f7ff fe96 	bl	80014bc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001790:	4b26      	ldr	r3, [pc, #152]	; (800182c <HAL_PCD_MspInit+0xec>)
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	4a25      	ldr	r2, [pc, #148]	; (800182c <HAL_PCD_MspInit+0xec>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6313      	str	r3, [r2, #48]	; 0x30
 800179c:	4b23      	ldr	r3, [pc, #140]	; (800182c <HAL_PCD_MspInit+0xec>)
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017a8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80017ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017bc:	2303      	movs	r3, #3
 80017be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017c2:	230a      	movs	r3, #10
 80017c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017cc:	4619      	mov	r1, r3
 80017ce:	4818      	ldr	r0, [pc, #96]	; (8001830 <HAL_PCD_MspInit+0xf0>)
 80017d0:	f000 f9fc 	bl	8001bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80017d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017dc:	2300      	movs	r3, #0
 80017de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017ec:	4619      	mov	r1, r3
 80017ee:	4810      	ldr	r0, [pc, #64]	; (8001830 <HAL_PCD_MspInit+0xf0>)
 80017f0:	f000 f9ec 	bl	8001bcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017f4:	4b0d      	ldr	r3, [pc, #52]	; (800182c <HAL_PCD_MspInit+0xec>)
 80017f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f8:	4a0c      	ldr	r2, [pc, #48]	; (800182c <HAL_PCD_MspInit+0xec>)
 80017fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017fe:	6353      	str	r3, [r2, #52]	; 0x34
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <HAL_PCD_MspInit+0xec>)
 8001802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <HAL_PCD_MspInit+0xec>)
 800180e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001810:	4a06      	ldr	r2, [pc, #24]	; (800182c <HAL_PCD_MspInit+0xec>)
 8001812:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001816:	6453      	str	r3, [r2, #68]	; 0x44
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <HAL_PCD_MspInit+0xec>)
 800181a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001824:	bf00      	nop
 8001826:	37b8      	adds	r7, #184	; 0xb8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40023800 	.word	0x40023800
 8001830:	40020000 	.word	0x40020000

08001834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <NMI_Handler+0x4>

0800183a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800183e:	e7fe      	b.n	800183e <HardFault_Handler+0x4>

08001840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <MemManage_Handler+0x4>

08001846 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <BusFault_Handler+0x4>

0800184c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <UsageFault_Handler+0x4>

08001852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001880:	f000 f87a 	bl	8001978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}

08001888 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <SystemInit+0x20>)
 800188e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <SystemInit+0x20>)
 8001894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018b0:	480d      	ldr	r0, [pc, #52]	; (80018e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018b2:	490e      	ldr	r1, [pc, #56]	; (80018ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018b4:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b8:	e002      	b.n	80018c0 <LoopCopyDataInit>

080018ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018be:	3304      	adds	r3, #4

080018c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c4:	d3f9      	bcc.n	80018ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018c6:	4a0b      	ldr	r2, [pc, #44]	; (80018f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018c8:	4c0b      	ldr	r4, [pc, #44]	; (80018f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018cc:	e001      	b.n	80018d2 <LoopFillZerobss>

080018ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d0:	3204      	adds	r2, #4

080018d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d4:	d3fb      	bcc.n	80018ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018d6:	f7ff ffd7 	bl	8001888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018da:	f004 fb23 	bl	8005f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018de:	f7ff fb49 	bl	8000f74 <main>
  bx  lr    
 80018e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018e4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80018e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80018f0:	08005fbc 	.word	0x08005fbc
  ldr r2, =_sbss
 80018f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80018f8:	20000688 	.word	0x20000688

080018fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018fc:	e7fe      	b.n	80018fc <ADC_IRQHandler>

080018fe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001902:	2003      	movs	r0, #3
 8001904:	f000 f92e 	bl	8001b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001908:	2000      	movs	r0, #0
 800190a:	f000 f805 	bl	8001918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800190e:	f7ff fddb 	bl	80014c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_InitTick+0x54>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_InitTick+0x58>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	4619      	mov	r1, r3
 800192a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001932:	fbb2 f3f3 	udiv	r3, r2, r3
 8001936:	4618      	mov	r0, r3
 8001938:	f000 f93b 	bl	8001bb2 <HAL_SYSTICK_Config>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e00e      	b.n	8001964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b0f      	cmp	r3, #15
 800194a:	d80a      	bhi.n	8001962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800194c:	2200      	movs	r2, #0
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f000 f911 	bl	8001b7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001958:	4a06      	ldr	r2, [pc, #24]	; (8001974 <HAL_InitTick+0x5c>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	e000      	b.n	8001964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
}
 8001964:	4618      	mov	r0, r3
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000000 	.word	0x20000000
 8001970:	20000008 	.word	0x20000008
 8001974:	20000004 	.word	0x20000004

08001978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_IncTick+0x20>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	461a      	mov	r2, r3
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_IncTick+0x24>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4413      	add	r3, r2
 8001988:	4a04      	ldr	r2, [pc, #16]	; (800199c <HAL_IncTick+0x24>)
 800198a:	6013      	str	r3, [r2, #0]
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	20000008 	.word	0x20000008
 800199c:	20000684 	.word	0x20000684

080019a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return uwTick;
 80019a4:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <HAL_GetTick+0x14>)
 80019a6:	681b      	ldr	r3, [r3, #0]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000684 	.word	0x20000684

080019b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c0:	f7ff ffee 	bl	80019a0 <HAL_GetTick>
 80019c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d0:	d005      	beq.n	80019de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_Delay+0x44>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4413      	add	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019de:	bf00      	nop
 80019e0:	f7ff ffde 	bl	80019a0 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d8f7      	bhi.n	80019e0 <HAL_Delay+0x28>
  {
  }
}
 80019f0:	bf00      	nop
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000008 	.word	0x20000008

08001a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <__NVIC_SetPriorityGrouping+0x40>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a2e:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <__NVIC_SetPriorityGrouping+0x40>)
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	60d3      	str	r3, [r2, #12]
}
 8001a34:	bf00      	nop
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000ed00 	.word	0xe000ed00
 8001a44:	05fa0000 	.word	0x05fa0000

08001a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <__NVIC_GetPriorityGrouping+0x18>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	0a1b      	lsrs	r3, r3, #8
 8001a52:	f003 0307 	and.w	r3, r3, #7
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	6039      	str	r1, [r7, #0]
 8001a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	db0a      	blt.n	8001a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	490c      	ldr	r1, [pc, #48]	; (8001ab0 <__NVIC_SetPriority+0x4c>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	0112      	lsls	r2, r2, #4
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	440b      	add	r3, r1
 8001a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a8c:	e00a      	b.n	8001aa4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4908      	ldr	r1, [pc, #32]	; (8001ab4 <__NVIC_SetPriority+0x50>)
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	3b04      	subs	r3, #4
 8001a9c:	0112      	lsls	r2, r2, #4
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	761a      	strb	r2, [r3, #24]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000e100 	.word	0xe000e100
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b089      	sub	sp, #36	; 0x24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f1c3 0307 	rsb	r3, r3, #7
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	bf28      	it	cs
 8001ad6:	2304      	movcs	r3, #4
 8001ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3304      	adds	r3, #4
 8001ade:	2b06      	cmp	r3, #6
 8001ae0:	d902      	bls.n	8001ae8 <NVIC_EncodePriority+0x30>
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3b03      	subs	r3, #3
 8001ae6:	e000      	b.n	8001aea <NVIC_EncodePriority+0x32>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	f04f 32ff 	mov.w	r2, #4294967295
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43da      	mvns	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	401a      	ands	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b00:	f04f 31ff 	mov.w	r1, #4294967295
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	43d9      	mvns	r1, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	4313      	orrs	r3, r2
         );
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3724      	adds	r7, #36	; 0x24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b30:	d301      	bcc.n	8001b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00f      	b.n	8001b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b36:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <SysTick_Config+0x40>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3e:	210f      	movs	r1, #15
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f7ff ff8e 	bl	8001a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <SysTick_Config+0x40>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4e:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <SysTick_Config+0x40>)
 8001b50:	2207      	movs	r2, #7
 8001b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	e000e010 	.word	0xe000e010

08001b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ff47 	bl	8001a00 <__NVIC_SetPriorityGrouping>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b086      	sub	sp, #24
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b8c:	f7ff ff5c 	bl	8001a48 <__NVIC_GetPriorityGrouping>
 8001b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	6978      	ldr	r0, [r7, #20]
 8001b98:	f7ff ff8e 	bl	8001ab8 <NVIC_EncodePriority>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff5d 	bl	8001a64 <__NVIC_SetPriority>
}
 8001baa:	bf00      	nop
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff ffb0 	bl	8001b20 <SysTick_Config>
 8001bc0:	4603      	mov	r3, r0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b089      	sub	sp, #36	; 0x24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
 8001bea:	e175      	b.n	8001ed8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001bec:	2201      	movs	r2, #1
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	f040 8164 	bne.w	8001ed2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d005      	beq.n	8001c22 <HAL_GPIO_Init+0x56>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d130      	bne.n	8001c84 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	68da      	ldr	r2, [r3, #12]
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c58:	2201      	movs	r2, #1
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	091b      	lsrs	r3, r3, #4
 8001c6e:	f003 0201 	and.w	r2, r3, #1
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	d017      	beq.n	8001cc0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d123      	bne.n	8001d14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	08da      	lsrs	r2, r3, #3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3208      	adds	r2, #8
 8001cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	220f      	movs	r2, #15
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	691a      	ldr	r2, [r3, #16]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	08da      	lsrs	r2, r3, #3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	3208      	adds	r2, #8
 8001d0e:	69b9      	ldr	r1, [r7, #24]
 8001d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	2203      	movs	r2, #3
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0203 	and.w	r2, r3, #3
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 80be 	beq.w	8001ed2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d56:	4b66      	ldr	r3, [pc, #408]	; (8001ef0 <HAL_GPIO_Init+0x324>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	4a65      	ldr	r2, [pc, #404]	; (8001ef0 <HAL_GPIO_Init+0x324>)
 8001d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d60:	6453      	str	r3, [r2, #68]	; 0x44
 8001d62:	4b63      	ldr	r3, [pc, #396]	; (8001ef0 <HAL_GPIO_Init+0x324>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d6e:	4a61      	ldr	r2, [pc, #388]	; (8001ef4 <HAL_GPIO_Init+0x328>)
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	089b      	lsrs	r3, r3, #2
 8001d74:	3302      	adds	r3, #2
 8001d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	220f      	movs	r2, #15
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a58      	ldr	r2, [pc, #352]	; (8001ef8 <HAL_GPIO_Init+0x32c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d037      	beq.n	8001e0a <HAL_GPIO_Init+0x23e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a57      	ldr	r2, [pc, #348]	; (8001efc <HAL_GPIO_Init+0x330>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d031      	beq.n	8001e06 <HAL_GPIO_Init+0x23a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a56      	ldr	r2, [pc, #344]	; (8001f00 <HAL_GPIO_Init+0x334>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d02b      	beq.n	8001e02 <HAL_GPIO_Init+0x236>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a55      	ldr	r2, [pc, #340]	; (8001f04 <HAL_GPIO_Init+0x338>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d025      	beq.n	8001dfe <HAL_GPIO_Init+0x232>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a54      	ldr	r2, [pc, #336]	; (8001f08 <HAL_GPIO_Init+0x33c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d01f      	beq.n	8001dfa <HAL_GPIO_Init+0x22e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a53      	ldr	r2, [pc, #332]	; (8001f0c <HAL_GPIO_Init+0x340>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d019      	beq.n	8001df6 <HAL_GPIO_Init+0x22a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a52      	ldr	r2, [pc, #328]	; (8001f10 <HAL_GPIO_Init+0x344>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d013      	beq.n	8001df2 <HAL_GPIO_Init+0x226>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a51      	ldr	r2, [pc, #324]	; (8001f14 <HAL_GPIO_Init+0x348>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d00d      	beq.n	8001dee <HAL_GPIO_Init+0x222>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a50      	ldr	r2, [pc, #320]	; (8001f18 <HAL_GPIO_Init+0x34c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d007      	beq.n	8001dea <HAL_GPIO_Init+0x21e>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a4f      	ldr	r2, [pc, #316]	; (8001f1c <HAL_GPIO_Init+0x350>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d101      	bne.n	8001de6 <HAL_GPIO_Init+0x21a>
 8001de2:	2309      	movs	r3, #9
 8001de4:	e012      	b.n	8001e0c <HAL_GPIO_Init+0x240>
 8001de6:	230a      	movs	r3, #10
 8001de8:	e010      	b.n	8001e0c <HAL_GPIO_Init+0x240>
 8001dea:	2308      	movs	r3, #8
 8001dec:	e00e      	b.n	8001e0c <HAL_GPIO_Init+0x240>
 8001dee:	2307      	movs	r3, #7
 8001df0:	e00c      	b.n	8001e0c <HAL_GPIO_Init+0x240>
 8001df2:	2306      	movs	r3, #6
 8001df4:	e00a      	b.n	8001e0c <HAL_GPIO_Init+0x240>
 8001df6:	2305      	movs	r3, #5
 8001df8:	e008      	b.n	8001e0c <HAL_GPIO_Init+0x240>
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	e006      	b.n	8001e0c <HAL_GPIO_Init+0x240>
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e004      	b.n	8001e0c <HAL_GPIO_Init+0x240>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e002      	b.n	8001e0c <HAL_GPIO_Init+0x240>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <HAL_GPIO_Init+0x240>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	69fa      	ldr	r2, [r7, #28]
 8001e0e:	f002 0203 	and.w	r2, r2, #3
 8001e12:	0092      	lsls	r2, r2, #2
 8001e14:	4093      	lsls	r3, r2
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e1c:	4935      	ldr	r1, [pc, #212]	; (8001ef4 <HAL_GPIO_Init+0x328>)
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	089b      	lsrs	r3, r3, #2
 8001e22:	3302      	adds	r3, #2
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e2a:	4b3d      	ldr	r3, [pc, #244]	; (8001f20 <HAL_GPIO_Init+0x354>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e4e:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <HAL_GPIO_Init+0x354>)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e54:	4b32      	ldr	r3, [pc, #200]	; (8001f20 <HAL_GPIO_Init+0x354>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e78:	4a29      	ldr	r2, [pc, #164]	; (8001f20 <HAL_GPIO_Init+0x354>)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <HAL_GPIO_Init+0x354>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ea2:	4a1f      	ldr	r2, [pc, #124]	; (8001f20 <HAL_GPIO_Init+0x354>)
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ea8:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <HAL_GPIO_Init+0x354>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ecc:	4a14      	ldr	r2, [pc, #80]	; (8001f20 <HAL_GPIO_Init+0x354>)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	61fb      	str	r3, [r7, #28]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	2b0f      	cmp	r3, #15
 8001edc:	f67f ae86 	bls.w	8001bec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	3724      	adds	r7, #36	; 0x24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40013800 	.word	0x40013800
 8001ef8:	40020000 	.word	0x40020000
 8001efc:	40020400 	.word	0x40020400
 8001f00:	40020800 	.word	0x40020800
 8001f04:	40020c00 	.word	0x40020c00
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40021400 	.word	0x40021400
 8001f10:	40021800 	.word	0x40021800
 8001f14:	40021c00 	.word	0x40021c00
 8001f18:	40022000 	.word	0x40022000
 8001f1c:	40022400 	.word	0x40022400
 8001f20:	40013c00 	.word	0x40013c00

08001f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	807b      	strh	r3, [r7, #2]
 8001f30:	4613      	mov	r3, r2
 8001f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f34:	787b      	ldrb	r3, [r7, #1]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f3a:	887a      	ldrh	r2, [r7, #2]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f40:	e003      	b.n	8001f4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f42:	887b      	ldrh	r3, [r7, #2]
 8001f44:	041a      	lsls	r2, r3, #16
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	619a      	str	r2, [r3, #24]
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b085      	sub	sp, #20
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f68:	887a      	ldrh	r2, [r7, #2]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	041a      	lsls	r2, r3, #16
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	43d9      	mvns	r1, r3
 8001f74:	887b      	ldrh	r3, [r7, #2]
 8001f76:	400b      	ands	r3, r1
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	619a      	str	r2, [r3, #24]
}
 8001f7e:	bf00      	nop
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e07f      	b.n	800209e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d106      	bne.n	8001fb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff faac 	bl	8001510 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2224      	movs	r2, #36	; 0x24
 8001fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0201 	bic.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fdc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d107      	bne.n	8002006 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	e006      	b.n	8002014 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002012:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d104      	bne.n	8002026 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002024:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6859      	ldr	r1, [r3, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <HAL_I2C_Init+0x11c>)
 8002032:	430b      	orrs	r3, r1
 8002034:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68da      	ldr	r2, [r3, #12]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002044:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691a      	ldr	r2, [r3, #16]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69d9      	ldr	r1, [r3, #28]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a1a      	ldr	r2, [r3, #32]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0201 	orr.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2220      	movs	r2, #32
 800208a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	02008000 	.word	0x02008000

080020ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b088      	sub	sp, #32
 80020b0:	af02      	add	r7, sp, #8
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	4608      	mov	r0, r1
 80020b6:	4611      	mov	r1, r2
 80020b8:	461a      	mov	r2, r3
 80020ba:	4603      	mov	r3, r0
 80020bc:	817b      	strh	r3, [r7, #10]
 80020be:	460b      	mov	r3, r1
 80020c0:	813b      	strh	r3, [r7, #8]
 80020c2:	4613      	mov	r3, r2
 80020c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b20      	cmp	r3, #32
 80020d0:	f040 80f9 	bne.w	80022c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d002      	beq.n	80020e0 <HAL_I2C_Mem_Write+0x34>
 80020da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d105      	bne.n	80020ec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0ed      	b.n	80022c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d101      	bne.n	80020fa <HAL_I2C_Mem_Write+0x4e>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e0e6      	b.n	80022c8 <HAL_I2C_Mem_Write+0x21c>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002102:	f7ff fc4d 	bl	80019a0 <HAL_GetTick>
 8002106:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	2319      	movs	r3, #25
 800210e:	2201      	movs	r2, #1
 8002110:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 fac3 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0d1      	b.n	80022c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2221      	movs	r2, #33	; 0x21
 8002128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2240      	movs	r2, #64	; 0x40
 8002130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6a3a      	ldr	r2, [r7, #32]
 800213e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002144:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800214c:	88f8      	ldrh	r0, [r7, #6]
 800214e:	893a      	ldrh	r2, [r7, #8]
 8002150:	8979      	ldrh	r1, [r7, #10]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	9301      	str	r3, [sp, #4]
 8002156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	4603      	mov	r3, r0
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 f9d3 	bl	8002508 <I2C_RequestMemoryWrite>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0a9      	b.n	80022c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002178:	b29b      	uxth	r3, r3
 800217a:	2bff      	cmp	r3, #255	; 0xff
 800217c:	d90e      	bls.n	800219c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	22ff      	movs	r2, #255	; 0xff
 8002182:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002188:	b2da      	uxtb	r2, r3
 800218a:	8979      	ldrh	r1, [r7, #10]
 800218c:	2300      	movs	r3, #0
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 fc1f 	bl	80029d8 <I2C_TransferConfig>
 800219a:	e00f      	b.n	80021bc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	8979      	ldrh	r1, [r7, #10]
 80021ae:	2300      	movs	r3, #0
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 fc0e 	bl	80029d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 faad 	bl	8002720 <I2C_WaitOnTXISFlagUntilTimeout>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e07b      	b.n	80022c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	781a      	ldrb	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	1c5a      	adds	r2, r3, #1
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f8:	3b01      	subs	r3, #1
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002204:	b29b      	uxth	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d034      	beq.n	8002274 <HAL_I2C_Mem_Write+0x1c8>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220e:	2b00      	cmp	r3, #0
 8002210:	d130      	bne.n	8002274 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002218:	2200      	movs	r2, #0
 800221a:	2180      	movs	r1, #128	; 0x80
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 fa3f 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e04d      	b.n	80022c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002230:	b29b      	uxth	r3, r3
 8002232:	2bff      	cmp	r3, #255	; 0xff
 8002234:	d90e      	bls.n	8002254 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	22ff      	movs	r2, #255	; 0xff
 800223a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002240:	b2da      	uxtb	r2, r3
 8002242:	8979      	ldrh	r1, [r7, #10]
 8002244:	2300      	movs	r3, #0
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 fbc3 	bl	80029d8 <I2C_TransferConfig>
 8002252:	e00f      	b.n	8002274 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002258:	b29a      	uxth	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002262:	b2da      	uxtb	r2, r3
 8002264:	8979      	ldrh	r1, [r7, #10]
 8002266:	2300      	movs	r3, #0
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 fbb2 	bl	80029d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002278:	b29b      	uxth	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d19e      	bne.n	80021bc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 fa8c 	bl	80027a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e01a      	b.n	80022c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2220      	movs	r2, #32
 8002298:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6859      	ldr	r1, [r3, #4]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <HAL_I2C_Mem_Write+0x224>)
 80022a6:	400b      	ands	r3, r1
 80022a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2220      	movs	r2, #32
 80022ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	e000      	b.n	80022c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80022c6:	2302      	movs	r3, #2
  }
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	fe00e800 	.word	0xfe00e800

080022d4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af02      	add	r7, sp, #8
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	4608      	mov	r0, r1
 80022de:	4611      	mov	r1, r2
 80022e0:	461a      	mov	r2, r3
 80022e2:	4603      	mov	r3, r0
 80022e4:	817b      	strh	r3, [r7, #10]
 80022e6:	460b      	mov	r3, r1
 80022e8:	813b      	strh	r3, [r7, #8]
 80022ea:	4613      	mov	r3, r2
 80022ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b20      	cmp	r3, #32
 80022f8:	f040 80fd 	bne.w	80024f6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <HAL_I2C_Mem_Read+0x34>
 8002302:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002304:	2b00      	cmp	r3, #0
 8002306:	d105      	bne.n	8002314 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800230e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0f1      	b.n	80024f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_I2C_Mem_Read+0x4e>
 800231e:	2302      	movs	r3, #2
 8002320:	e0ea      	b.n	80024f8 <HAL_I2C_Mem_Read+0x224>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800232a:	f7ff fb39 	bl	80019a0 <HAL_GetTick>
 800232e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	2319      	movs	r3, #25
 8002336:	2201      	movs	r2, #1
 8002338:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f000 f9af 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e0d5      	b.n	80024f8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2222      	movs	r2, #34	; 0x22
 8002350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2240      	movs	r2, #64	; 0x40
 8002358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a3a      	ldr	r2, [r7, #32]
 8002366:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800236c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002374:	88f8      	ldrh	r0, [r7, #6]
 8002376:	893a      	ldrh	r2, [r7, #8]
 8002378:	8979      	ldrh	r1, [r7, #10]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	9301      	str	r3, [sp, #4]
 800237e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	4603      	mov	r3, r0
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 f913 	bl	80025b0 <I2C_RequestMemoryRead>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0ad      	b.n	80024f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	2bff      	cmp	r3, #255	; 0xff
 80023a4:	d90e      	bls.n	80023c4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	22ff      	movs	r2, #255	; 0xff
 80023aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	8979      	ldrh	r1, [r7, #10]
 80023b4:	4b52      	ldr	r3, [pc, #328]	; (8002500 <HAL_I2C_Mem_Read+0x22c>)
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 fb0b 	bl	80029d8 <I2C_TransferConfig>
 80023c2:	e00f      	b.n	80023e4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	8979      	ldrh	r1, [r7, #10]
 80023d6:	4b4a      	ldr	r3, [pc, #296]	; (8002500 <HAL_I2C_Mem_Read+0x22c>)
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 fafa 	bl	80029d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ea:	2200      	movs	r2, #0
 80023ec:	2104      	movs	r1, #4
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 f956 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e07c      	b.n	80024f8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	1c5a      	adds	r2, r3, #1
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241a:	3b01      	subs	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002426:	b29b      	uxth	r3, r3
 8002428:	3b01      	subs	r3, #1
 800242a:	b29a      	uxth	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002434:	b29b      	uxth	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d034      	beq.n	80024a4 <HAL_I2C_Mem_Read+0x1d0>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243e:	2b00      	cmp	r3, #0
 8002440:	d130      	bne.n	80024a4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002448:	2200      	movs	r2, #0
 800244a:	2180      	movs	r1, #128	; 0x80
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 f927 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e04d      	b.n	80024f8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002460:	b29b      	uxth	r3, r3
 8002462:	2bff      	cmp	r3, #255	; 0xff
 8002464:	d90e      	bls.n	8002484 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	22ff      	movs	r2, #255	; 0xff
 800246a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002470:	b2da      	uxtb	r2, r3
 8002472:	8979      	ldrh	r1, [r7, #10]
 8002474:	2300      	movs	r3, #0
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 faab 	bl	80029d8 <I2C_TransferConfig>
 8002482:	e00f      	b.n	80024a4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002492:	b2da      	uxtb	r2, r3
 8002494:	8979      	ldrh	r1, [r7, #10]
 8002496:	2300      	movs	r3, #0
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 fa9a 	bl	80029d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d19a      	bne.n	80023e4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 f974 	bl	80027a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e01a      	b.n	80024f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2220      	movs	r2, #32
 80024c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6859      	ldr	r1, [r3, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <HAL_I2C_Mem_Read+0x230>)
 80024d6:	400b      	ands	r3, r1
 80024d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2220      	movs	r2, #32
 80024de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	e000      	b.n	80024f8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80024f6:	2302      	movs	r3, #2
  }
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	80002400 	.word	0x80002400
 8002504:	fe00e800 	.word	0xfe00e800

08002508 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af02      	add	r7, sp, #8
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	4608      	mov	r0, r1
 8002512:	4611      	mov	r1, r2
 8002514:	461a      	mov	r2, r3
 8002516:	4603      	mov	r3, r0
 8002518:	817b      	strh	r3, [r7, #10]
 800251a:	460b      	mov	r3, r1
 800251c:	813b      	strh	r3, [r7, #8]
 800251e:	4613      	mov	r3, r2
 8002520:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002522:	88fb      	ldrh	r3, [r7, #6]
 8002524:	b2da      	uxtb	r2, r3
 8002526:	8979      	ldrh	r1, [r7, #10]
 8002528:	4b20      	ldr	r3, [pc, #128]	; (80025ac <I2C_RequestMemoryWrite+0xa4>)
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 fa51 	bl	80029d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002536:	69fa      	ldr	r2, [r7, #28]
 8002538:	69b9      	ldr	r1, [r7, #24]
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 f8f0 	bl	8002720 <I2C_WaitOnTXISFlagUntilTimeout>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e02c      	b.n	80025a4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800254a:	88fb      	ldrh	r3, [r7, #6]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d105      	bne.n	800255c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002550:	893b      	ldrh	r3, [r7, #8]
 8002552:	b2da      	uxtb	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	629a      	str	r2, [r3, #40]	; 0x28
 800255a:	e015      	b.n	8002588 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800255c:	893b      	ldrh	r3, [r7, #8]
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	b29b      	uxth	r3, r3
 8002562:	b2da      	uxtb	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	69b9      	ldr	r1, [r7, #24]
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 f8d6 	bl	8002720 <I2C_WaitOnTXISFlagUntilTimeout>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e012      	b.n	80025a4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800257e:	893b      	ldrh	r3, [r7, #8]
 8002580:	b2da      	uxtb	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	2200      	movs	r2, #0
 8002590:	2180      	movs	r1, #128	; 0x80
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f884 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	80002000 	.word	0x80002000

080025b0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	4608      	mov	r0, r1
 80025ba:	4611      	mov	r1, r2
 80025bc:	461a      	mov	r2, r3
 80025be:	4603      	mov	r3, r0
 80025c0:	817b      	strh	r3, [r7, #10]
 80025c2:	460b      	mov	r3, r1
 80025c4:	813b      	strh	r3, [r7, #8]
 80025c6:	4613      	mov	r3, r2
 80025c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	8979      	ldrh	r1, [r7, #10]
 80025d0:	4b20      	ldr	r3, [pc, #128]	; (8002654 <I2C_RequestMemoryRead+0xa4>)
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	2300      	movs	r3, #0
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 f9fe 	bl	80029d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	69b9      	ldr	r1, [r7, #24]
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 f89d 	bl	8002720 <I2C_WaitOnTXISFlagUntilTimeout>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e02c      	b.n	800264a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025f0:	88fb      	ldrh	r3, [r7, #6]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d105      	bne.n	8002602 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025f6:	893b      	ldrh	r3, [r7, #8]
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002600:	e015      	b.n	800262e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002602:	893b      	ldrh	r3, [r7, #8]
 8002604:	0a1b      	lsrs	r3, r3, #8
 8002606:	b29b      	uxth	r3, r3
 8002608:	b2da      	uxtb	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002610:	69fa      	ldr	r2, [r7, #28]
 8002612:	69b9      	ldr	r1, [r7, #24]
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 f883 	bl	8002720 <I2C_WaitOnTXISFlagUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e012      	b.n	800264a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002624:	893b      	ldrh	r3, [r7, #8]
 8002626:	b2da      	uxtb	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	2200      	movs	r2, #0
 8002636:	2140      	movs	r1, #64	; 0x40
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 f831 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e000      	b.n	800264a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	80002000 	.word	0x80002000

08002658 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b02      	cmp	r3, #2
 800266c:	d103      	bne.n	8002676 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2200      	movs	r2, #0
 8002674:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d007      	beq.n	8002694 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699a      	ldr	r2, [r3, #24]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0201 	orr.w	r2, r2, #1
 8002692:	619a      	str	r2, [r3, #24]
  }
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	4613      	mov	r3, r2
 80026ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026b0:	e022      	b.n	80026f8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b8:	d01e      	beq.n	80026f8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ba:	f7ff f971 	bl	80019a0 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d302      	bcc.n	80026d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d113      	bne.n	80026f8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d4:	f043 0220 	orr.w	r2, r3, #32
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e00f      	b.n	8002718 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699a      	ldr	r2, [r3, #24]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	4013      	ands	r3, r2
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	429a      	cmp	r2, r3
 8002706:	bf0c      	ite	eq
 8002708:	2301      	moveq	r3, #1
 800270a:	2300      	movne	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	429a      	cmp	r2, r3
 8002714:	d0cd      	beq.n	80026b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800272c:	e02c      	b.n	8002788 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 f870 	bl	8002818 <I2C_IsErrorOccurred>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e02a      	b.n	8002798 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002748:	d01e      	beq.n	8002788 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800274a:	f7ff f929 	bl	80019a0 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	429a      	cmp	r2, r3
 8002758:	d302      	bcc.n	8002760 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d113      	bne.n	8002788 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002764:	f043 0220 	orr.w	r2, r3, #32
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e007      	b.n	8002798 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b02      	cmp	r3, #2
 8002794:	d1cb      	bne.n	800272e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027ac:	e028      	b.n	8002800 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f830 	bl	8002818 <I2C_IsErrorOccurred>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e026      	b.n	8002810 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027c2:	f7ff f8ed 	bl	80019a0 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d302      	bcc.n	80027d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d113      	bne.n	8002800 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027dc:	f043 0220 	orr.w	r2, r3, #32
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2220      	movs	r2, #32
 80027e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e007      	b.n	8002810 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	f003 0320 	and.w	r3, r3, #32
 800280a:	2b20      	cmp	r3, #32
 800280c:	d1cf      	bne.n	80027ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08a      	sub	sp, #40	; 0x28
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002824:	2300      	movs	r3, #0
 8002826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002832:	2300      	movs	r3, #0
 8002834:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	f003 0310 	and.w	r3, r3, #16
 8002840:	2b00      	cmp	r3, #0
 8002842:	d068      	beq.n	8002916 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2210      	movs	r2, #16
 800284a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800284c:	e049      	b.n	80028e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002854:	d045      	beq.n	80028e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002856:	f7ff f8a3 	bl	80019a0 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	429a      	cmp	r2, r3
 8002864:	d302      	bcc.n	800286c <I2C_IsErrorOccurred+0x54>
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d13a      	bne.n	80028e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002876:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800287e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800288a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800288e:	d121      	bne.n	80028d4 <I2C_IsErrorOccurred+0xbc>
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002896:	d01d      	beq.n	80028d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002898:	7cfb      	ldrb	r3, [r7, #19]
 800289a:	2b20      	cmp	r3, #32
 800289c:	d01a      	beq.n	80028d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80028ae:	f7ff f877 	bl	80019a0 <HAL_GetTick>
 80028b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028b4:	e00e      	b.n	80028d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80028b6:	f7ff f873 	bl	80019a0 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b19      	cmp	r3, #25
 80028c2:	d907      	bls.n	80028d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	f043 0320 	orr.w	r3, r3, #32
 80028ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80028d2:	e006      	b.n	80028e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	f003 0320 	and.w	r3, r3, #32
 80028de:	2b20      	cmp	r3, #32
 80028e0:	d1e9      	bne.n	80028b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	f003 0320 	and.w	r3, r3, #32
 80028ec:	2b20      	cmp	r3, #32
 80028ee:	d003      	beq.n	80028f8 <I2C_IsErrorOccurred+0xe0>
 80028f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0aa      	beq.n	800284e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80028f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d103      	bne.n	8002908 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2220      	movs	r2, #32
 8002906:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	f043 0304 	orr.w	r3, r3, #4
 800290e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00b      	beq.n	8002940 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002938:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00b      	beq.n	8002962 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	f043 0308 	orr.w	r3, r3, #8
 8002950:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800295a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00b      	beq.n	8002984 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	f043 0302 	orr.w	r3, r3, #2
 8002972:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800297c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002988:	2b00      	cmp	r3, #0
 800298a:	d01c      	beq.n	80029c6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f7ff fe63 	bl	8002658 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <I2C_IsErrorOccurred+0x1bc>)
 800299e:	400b      	ands	r3, r1
 80029a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	431a      	orrs	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80029c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3728      	adds	r7, #40	; 0x28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	fe00e800 	.word	0xfe00e800

080029d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	607b      	str	r3, [r7, #4]
 80029e2:	460b      	mov	r3, r1
 80029e4:	817b      	strh	r3, [r7, #10]
 80029e6:	4613      	mov	r3, r2
 80029e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029ea:	897b      	ldrh	r3, [r7, #10]
 80029ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029f0:	7a7b      	ldrb	r3, [r7, #9]
 80029f2:	041b      	lsls	r3, r3, #16
 80029f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a06:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	0d5b      	lsrs	r3, r3, #21
 8002a12:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a16:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <I2C_TransferConfig+0x60>)
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	ea02 0103 	and.w	r1, r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a2a:	bf00      	nop
 8002a2c:	371c      	adds	r7, #28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	03ff63ff 	.word	0x03ff63ff

08002a3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b20      	cmp	r3, #32
 8002a50:	d138      	bne.n	8002ac4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e032      	b.n	8002ac6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2224      	movs	r2, #36	; 0x24
 8002a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0201 	bic.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6819      	ldr	r1, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	e000      	b.n	8002ac6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ac4:	2302      	movs	r3, #2
  }
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b20      	cmp	r3, #32
 8002ae6:	d139      	bne.n	8002b5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002af2:	2302      	movs	r3, #2
 8002af4:	e033      	b.n	8002b5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2224      	movs	r2, #36	; 0x24
 8002b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0201 	bic.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	021b      	lsls	r3, r3, #8
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0201 	orr.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	e000      	b.n	8002b5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b5c:	2302      	movs	r3, #2
  }
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b6c:	b08f      	sub	sp, #60	; 0x3c
 8002b6e:	af0a      	add	r7, sp, #40	; 0x28
 8002b70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e116      	b.n	8002daa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d106      	bne.n	8002b9c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7fe fdd2 	bl	8001740 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d102      	bne.n	8002bb6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f002 ff16 	bl	80059ec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	603b      	str	r3, [r7, #0]
 8002bc6:	687e      	ldr	r6, [r7, #4]
 8002bc8:	466d      	mov	r5, sp
 8002bca:	f106 0410 	add.w	r4, r6, #16
 8002bce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bd6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bda:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bde:	1d33      	adds	r3, r6, #4
 8002be0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002be2:	6838      	ldr	r0, [r7, #0]
 8002be4:	f002 feaa 	bl	800593c <USB_CoreInit>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d005      	beq.n	8002bfa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e0d7      	b.n	8002daa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2100      	movs	r1, #0
 8002c00:	4618      	mov	r0, r3
 8002c02:	f002 ff04 	bl	8005a0e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c06:	2300      	movs	r3, #0
 8002c08:	73fb      	strb	r3, [r7, #15]
 8002c0a:	e04a      	b.n	8002ca2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c0c:	7bfa      	ldrb	r2, [r7, #15]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	333d      	adds	r3, #61	; 0x3d
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c20:	7bfa      	ldrb	r2, [r7, #15]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	333c      	adds	r3, #60	; 0x3c
 8002c30:	7bfa      	ldrb	r2, [r7, #15]
 8002c32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c34:	7bfa      	ldrb	r2, [r7, #15]
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
 8002c38:	b298      	uxth	r0, r3
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	3344      	adds	r3, #68	; 0x44
 8002c48:	4602      	mov	r2, r0
 8002c4a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c4c:	7bfa      	ldrb	r2, [r7, #15]
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4413      	add	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	3340      	adds	r3, #64	; 0x40
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c60:	7bfa      	ldrb	r2, [r7, #15]
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	4413      	add	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	3348      	adds	r3, #72	; 0x48
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c74:	7bfa      	ldrb	r2, [r7, #15]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	334c      	adds	r3, #76	; 0x4c
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c88:	7bfa      	ldrb	r2, [r7, #15]
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4413      	add	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	3354      	adds	r3, #84	; 0x54
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	73fb      	strb	r3, [r7, #15]
 8002ca2:	7bfa      	ldrb	r2, [r7, #15]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d3af      	bcc.n	8002c0c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cac:	2300      	movs	r3, #0
 8002cae:	73fb      	strb	r3, [r7, #15]
 8002cb0:	e044      	b.n	8002d3c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cb2:	7bfa      	ldrb	r2, [r7, #15]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	4413      	add	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cc8:	7bfa      	ldrb	r2, [r7, #15]
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002cda:	7bfa      	ldrb	r2, [r7, #15]
 8002cdc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cde:	7bfa      	ldrb	r2, [r7, #15]
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	440b      	add	r3, r1
 8002cec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cf4:	7bfa      	ldrb	r2, [r7, #15]
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d0a:	7bfa      	ldrb	r2, [r7, #15]
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d20:	7bfa      	ldrb	r2, [r7, #15]
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
 8002d3c:	7bfa      	ldrb	r2, [r7, #15]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d3b5      	bcc.n	8002cb2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	687e      	ldr	r6, [r7, #4]
 8002d4e:	466d      	mov	r5, sp
 8002d50:	f106 0410 	add.w	r4, r6, #16
 8002d54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d60:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d64:	1d33      	adds	r3, r6, #4
 8002d66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d68:	6838      	ldr	r0, [r7, #0]
 8002d6a:	f002 fe9d 	bl	8005aa8 <USB_DevInit>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2202      	movs	r2, #2
 8002d78:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e014      	b.n	8002daa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d102      	bne.n	8002d9e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f80b 	bl	8002db4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f003 f85b 	bl	8005e5e <USB_DevDisconnect>

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002db4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002de2:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <HAL_PCDEx_ActivateLPM+0x44>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	10000003 	.word	0x10000003

08002dfc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a04      	ldr	r2, [pc, #16]	; (8002e18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0a:	6013      	str	r3, [r2, #0]
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40007000 	.word	0x40007000

08002e1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002e22:	2300      	movs	r3, #0
 8002e24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e26:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	4a22      	ldr	r2, [pc, #136]	; (8002eb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e30:	6413      	str	r3, [r2, #64]	; 0x40
 8002e32:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	603b      	str	r3, [r7, #0]
 8002e3c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e3e:	4b1e      	ldr	r3, [pc, #120]	; (8002eb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a1d      	ldr	r2, [pc, #116]	; (8002eb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e48:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e4a:	f7fe fda9 	bl	80019a0 <HAL_GetTick>
 8002e4e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e50:	e009      	b.n	8002e66 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e52:	f7fe fda5 	bl	80019a0 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e60:	d901      	bls.n	8002e66 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e022      	b.n	8002eac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e66:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e72:	d1ee      	bne.n	8002e52 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e74:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a0f      	ldr	r2, [pc, #60]	; (8002eb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e7e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e80:	f7fe fd8e 	bl	80019a0 <HAL_GetTick>
 8002e84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e86:	e009      	b.n	8002e9c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e88:	f7fe fd8a 	bl	80019a0 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e96:	d901      	bls.n	8002e9c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e007      	b.n	8002eac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e9c:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ea8:	d1ee      	bne.n	8002e88 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40007000 	.word	0x40007000

08002ebc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e29b      	b.n	800340a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 8087 	beq.w	8002fee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ee0:	4b96      	ldr	r3, [pc, #600]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 030c 	and.w	r3, r3, #12
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d00c      	beq.n	8002f06 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eec:	4b93      	ldr	r3, [pc, #588]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 030c 	and.w	r3, r3, #12
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d112      	bne.n	8002f1e <HAL_RCC_OscConfig+0x62>
 8002ef8:	4b90      	ldr	r3, [pc, #576]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f04:	d10b      	bne.n	8002f1e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f06:	4b8d      	ldr	r3, [pc, #564]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d06c      	beq.n	8002fec <HAL_RCC_OscConfig+0x130>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d168      	bne.n	8002fec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e275      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f26:	d106      	bne.n	8002f36 <HAL_RCC_OscConfig+0x7a>
 8002f28:	4b84      	ldr	r3, [pc, #528]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a83      	ldr	r2, [pc, #524]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	e02e      	b.n	8002f94 <HAL_RCC_OscConfig+0xd8>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10c      	bne.n	8002f58 <HAL_RCC_OscConfig+0x9c>
 8002f3e:	4b7f      	ldr	r3, [pc, #508]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a7e      	ldr	r2, [pc, #504]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	4b7c      	ldr	r3, [pc, #496]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a7b      	ldr	r2, [pc, #492]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	e01d      	b.n	8002f94 <HAL_RCC_OscConfig+0xd8>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCC_OscConfig+0xc0>
 8002f62:	4b76      	ldr	r3, [pc, #472]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a75      	ldr	r2, [pc, #468]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	4b73      	ldr	r3, [pc, #460]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a72      	ldr	r2, [pc, #456]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e00b      	b.n	8002f94 <HAL_RCC_OscConfig+0xd8>
 8002f7c:	4b6f      	ldr	r3, [pc, #444]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a6e      	ldr	r2, [pc, #440]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	4b6c      	ldr	r3, [pc, #432]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a6b      	ldr	r2, [pc, #428]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d013      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9c:	f7fe fd00 	bl	80019a0 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa4:	f7fe fcfc 	bl	80019a0 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b64      	cmp	r3, #100	; 0x64
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e229      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	4b61      	ldr	r3, [pc, #388]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f0      	beq.n	8002fa4 <HAL_RCC_OscConfig+0xe8>
 8002fc2:	e014      	b.n	8002fee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc4:	f7fe fcec 	bl	80019a0 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fcc:	f7fe fce8 	bl	80019a0 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b64      	cmp	r3, #100	; 0x64
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e215      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fde:	4b57      	ldr	r3, [pc, #348]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x110>
 8002fea:	e000      	b.n	8002fee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d069      	beq.n	80030ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ffa:	4b50      	ldr	r3, [pc, #320]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00b      	beq.n	800301e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003006:	4b4d      	ldr	r3, [pc, #308]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
 800300e:	2b08      	cmp	r3, #8
 8003010:	d11c      	bne.n	800304c <HAL_RCC_OscConfig+0x190>
 8003012:	4b4a      	ldr	r3, [pc, #296]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d116      	bne.n	800304c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301e:	4b47      	ldr	r3, [pc, #284]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d005      	beq.n	8003036 <HAL_RCC_OscConfig+0x17a>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d001      	beq.n	8003036 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e1e9      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003036:	4b41      	ldr	r3, [pc, #260]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	493d      	ldr	r1, [pc, #244]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304a:	e040      	b.n	80030ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d023      	beq.n	800309c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003054:	4b39      	ldr	r3, [pc, #228]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a38      	ldr	r2, [pc, #224]	; (800313c <HAL_RCC_OscConfig+0x280>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7fe fc9e 	bl	80019a0 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003068:	f7fe fc9a 	bl	80019a0 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e1c7      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307a:	4b30      	ldr	r3, [pc, #192]	; (800313c <HAL_RCC_OscConfig+0x280>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003086:	4b2d      	ldr	r3, [pc, #180]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	4929      	ldr	r1, [pc, #164]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8003096:	4313      	orrs	r3, r2
 8003098:	600b      	str	r3, [r1, #0]
 800309a:	e018      	b.n	80030ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800309c:	4b27      	ldr	r3, [pc, #156]	; (800313c <HAL_RCC_OscConfig+0x280>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a26      	ldr	r2, [pc, #152]	; (800313c <HAL_RCC_OscConfig+0x280>)
 80030a2:	f023 0301 	bic.w	r3, r3, #1
 80030a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a8:	f7fe fc7a 	bl	80019a0 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b0:	f7fe fc76 	bl	80019a0 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e1a3      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c2:	4b1e      	ldr	r3, [pc, #120]	; (800313c <HAL_RCC_OscConfig+0x280>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d038      	beq.n	800314c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d019      	beq.n	8003116 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030e2:	4b16      	ldr	r3, [pc, #88]	; (800313c <HAL_RCC_OscConfig+0x280>)
 80030e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e6:	4a15      	ldr	r2, [pc, #84]	; (800313c <HAL_RCC_OscConfig+0x280>)
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ee:	f7fe fc57 	bl	80019a0 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f6:	f7fe fc53 	bl	80019a0 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e180      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003108:	4b0c      	ldr	r3, [pc, #48]	; (800313c <HAL_RCC_OscConfig+0x280>)
 800310a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0f0      	beq.n	80030f6 <HAL_RCC_OscConfig+0x23a>
 8003114:	e01a      	b.n	800314c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003116:	4b09      	ldr	r3, [pc, #36]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8003118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800311a:	4a08      	ldr	r2, [pc, #32]	; (800313c <HAL_RCC_OscConfig+0x280>)
 800311c:	f023 0301 	bic.w	r3, r3, #1
 8003120:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003122:	f7fe fc3d 	bl	80019a0 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003128:	e00a      	b.n	8003140 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800312a:	f7fe fc39 	bl	80019a0 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d903      	bls.n	8003140 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e166      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
 800313c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003140:	4b92      	ldr	r3, [pc, #584]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 8003142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1ee      	bne.n	800312a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 80a4 	beq.w	80032a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800315a:	4b8c      	ldr	r3, [pc, #560]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10d      	bne.n	8003182 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003166:	4b89      	ldr	r3, [pc, #548]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	4a88      	ldr	r2, [pc, #544]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 800316c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003170:	6413      	str	r3, [r2, #64]	; 0x40
 8003172:	4b86      	ldr	r3, [pc, #536]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317a:	60bb      	str	r3, [r7, #8]
 800317c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800317e:	2301      	movs	r3, #1
 8003180:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003182:	4b83      	ldr	r3, [pc, #524]	; (8003390 <HAL_RCC_OscConfig+0x4d4>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318a:	2b00      	cmp	r3, #0
 800318c:	d118      	bne.n	80031c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800318e:	4b80      	ldr	r3, [pc, #512]	; (8003390 <HAL_RCC_OscConfig+0x4d4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a7f      	ldr	r2, [pc, #508]	; (8003390 <HAL_RCC_OscConfig+0x4d4>)
 8003194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003198:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800319a:	f7fe fc01 	bl	80019a0 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a2:	f7fe fbfd 	bl	80019a0 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b64      	cmp	r3, #100	; 0x64
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e12a      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b4:	4b76      	ldr	r3, [pc, #472]	; (8003390 <HAL_RCC_OscConfig+0x4d4>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0f0      	beq.n	80031a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d106      	bne.n	80031d6 <HAL_RCC_OscConfig+0x31a>
 80031c8:	4b70      	ldr	r3, [pc, #448]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 80031ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031cc:	4a6f      	ldr	r2, [pc, #444]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	6713      	str	r3, [r2, #112]	; 0x70
 80031d4:	e02d      	b.n	8003232 <HAL_RCC_OscConfig+0x376>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10c      	bne.n	80031f8 <HAL_RCC_OscConfig+0x33c>
 80031de:	4b6b      	ldr	r3, [pc, #428]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 80031e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e2:	4a6a      	ldr	r2, [pc, #424]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 80031e4:	f023 0301 	bic.w	r3, r3, #1
 80031e8:	6713      	str	r3, [r2, #112]	; 0x70
 80031ea:	4b68      	ldr	r3, [pc, #416]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 80031ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ee:	4a67      	ldr	r2, [pc, #412]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 80031f0:	f023 0304 	bic.w	r3, r3, #4
 80031f4:	6713      	str	r3, [r2, #112]	; 0x70
 80031f6:	e01c      	b.n	8003232 <HAL_RCC_OscConfig+0x376>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	2b05      	cmp	r3, #5
 80031fe:	d10c      	bne.n	800321a <HAL_RCC_OscConfig+0x35e>
 8003200:	4b62      	ldr	r3, [pc, #392]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 8003202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003204:	4a61      	ldr	r2, [pc, #388]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 8003206:	f043 0304 	orr.w	r3, r3, #4
 800320a:	6713      	str	r3, [r2, #112]	; 0x70
 800320c:	4b5f      	ldr	r3, [pc, #380]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 800320e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003210:	4a5e      	ldr	r2, [pc, #376]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 8003212:	f043 0301 	orr.w	r3, r3, #1
 8003216:	6713      	str	r3, [r2, #112]	; 0x70
 8003218:	e00b      	b.n	8003232 <HAL_RCC_OscConfig+0x376>
 800321a:	4b5c      	ldr	r3, [pc, #368]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 800321c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321e:	4a5b      	ldr	r2, [pc, #364]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 8003220:	f023 0301 	bic.w	r3, r3, #1
 8003224:	6713      	str	r3, [r2, #112]	; 0x70
 8003226:	4b59      	ldr	r3, [pc, #356]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	4a58      	ldr	r2, [pc, #352]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 800322c:	f023 0304 	bic.w	r3, r3, #4
 8003230:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d015      	beq.n	8003266 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323a:	f7fe fbb1 	bl	80019a0 <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003240:	e00a      	b.n	8003258 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003242:	f7fe fbad 	bl	80019a0 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003250:	4293      	cmp	r3, r2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e0d8      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003258:	4b4c      	ldr	r3, [pc, #304]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 800325a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0ee      	beq.n	8003242 <HAL_RCC_OscConfig+0x386>
 8003264:	e014      	b.n	8003290 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003266:	f7fe fb9b 	bl	80019a0 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800326c:	e00a      	b.n	8003284 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326e:	f7fe fb97 	bl	80019a0 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	f241 3288 	movw	r2, #5000	; 0x1388
 800327c:	4293      	cmp	r3, r2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e0c2      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003284:	4b41      	ldr	r3, [pc, #260]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 8003286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1ee      	bne.n	800326e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003290:	7dfb      	ldrb	r3, [r7, #23]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d105      	bne.n	80032a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003296:	4b3d      	ldr	r3, [pc, #244]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	4a3c      	ldr	r2, [pc, #240]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 800329c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 80ae 	beq.w	8003408 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ac:	4b37      	ldr	r3, [pc, #220]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 030c 	and.w	r3, r3, #12
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d06d      	beq.n	8003394 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d14b      	bne.n	8003358 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c0:	4b32      	ldr	r3, [pc, #200]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a31      	ldr	r2, [pc, #196]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 80032c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fe fb68 	bl	80019a0 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d4:	f7fe fb64 	bl	80019a0 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e091      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e6:	4b29      	ldr	r3, [pc, #164]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69da      	ldr	r2, [r3, #28]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	019b      	lsls	r3, r3, #6
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003308:	085b      	lsrs	r3, r3, #1
 800330a:	3b01      	subs	r3, #1
 800330c:	041b      	lsls	r3, r3, #16
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	061b      	lsls	r3, r3, #24
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	071b      	lsls	r3, r3, #28
 800331e:	491b      	ldr	r1, [pc, #108]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 8003320:	4313      	orrs	r3, r2
 8003322:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003324:	4b19      	ldr	r3, [pc, #100]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a18      	ldr	r2, [pc, #96]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 800332a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800332e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003330:	f7fe fb36 	bl	80019a0 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003338:	f7fe fb32 	bl	80019a0 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e05f      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334a:	4b10      	ldr	r3, [pc, #64]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f0      	beq.n	8003338 <HAL_RCC_OscConfig+0x47c>
 8003356:	e057      	b.n	8003408 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003358:	4b0c      	ldr	r3, [pc, #48]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a0b      	ldr	r2, [pc, #44]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 800335e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fe fb1c 	bl	80019a0 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336c:	f7fe fb18 	bl	80019a0 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e045      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337e:	4b03      	ldr	r3, [pc, #12]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x4b0>
 800338a:	e03d      	b.n	8003408 <HAL_RCC_OscConfig+0x54c>
 800338c:	40023800 	.word	0x40023800
 8003390:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003394:	4b1f      	ldr	r3, [pc, #124]	; (8003414 <HAL_RCC_OscConfig+0x558>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d030      	beq.n	8003404 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d129      	bne.n	8003404 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d122      	bne.n	8003404 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033c4:	4013      	ands	r3, r2
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d119      	bne.n	8003404 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033da:	085b      	lsrs	r3, r3, #1
 80033dc:	3b01      	subs	r3, #1
 80033de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d10f      	bne.n	8003404 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d107      	bne.n	8003404 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e000      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800

08003418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e0d0      	b.n	80035d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003430:	4b6a      	ldr	r3, [pc, #424]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 030f 	and.w	r3, r3, #15
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d910      	bls.n	8003460 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343e:	4b67      	ldr	r3, [pc, #412]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f023 020f 	bic.w	r2, r3, #15
 8003446:	4965      	ldr	r1, [pc, #404]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	4313      	orrs	r3, r2
 800344c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800344e:	4b63      	ldr	r3, [pc, #396]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d001      	beq.n	8003460 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e0b8      	b.n	80035d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d020      	beq.n	80034ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003478:	4b59      	ldr	r3, [pc, #356]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	4a58      	ldr	r2, [pc, #352]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 800347e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003482:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b00      	cmp	r3, #0
 800348e:	d005      	beq.n	800349c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003490:	4b53      	ldr	r3, [pc, #332]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	4a52      	ldr	r2, [pc, #328]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003496:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800349a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800349c:	4b50      	ldr	r3, [pc, #320]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	494d      	ldr	r1, [pc, #308]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d040      	beq.n	800353c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d107      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c2:	4b47      	ldr	r3, [pc, #284]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d115      	bne.n	80034fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e07f      	b.n	80035d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d107      	bne.n	80034ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034da:	4b41      	ldr	r3, [pc, #260]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d109      	bne.n	80034fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e073      	b.n	80035d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ea:	4b3d      	ldr	r3, [pc, #244]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e06b      	b.n	80035d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034fa:	4b39      	ldr	r3, [pc, #228]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f023 0203 	bic.w	r2, r3, #3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	4936      	ldr	r1, [pc, #216]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003508:	4313      	orrs	r3, r2
 800350a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800350c:	f7fe fa48 	bl	80019a0 <HAL_GetTick>
 8003510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003512:	e00a      	b.n	800352a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003514:	f7fe fa44 	bl	80019a0 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003522:	4293      	cmp	r3, r2
 8003524:	d901      	bls.n	800352a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e053      	b.n	80035d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352a:	4b2d      	ldr	r3, [pc, #180]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 020c 	and.w	r2, r3, #12
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	429a      	cmp	r2, r3
 800353a:	d1eb      	bne.n	8003514 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800353c:	4b27      	ldr	r3, [pc, #156]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 030f 	and.w	r3, r3, #15
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d210      	bcs.n	800356c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354a:	4b24      	ldr	r3, [pc, #144]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f023 020f 	bic.w	r2, r3, #15
 8003552:	4922      	ldr	r1, [pc, #136]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	4313      	orrs	r3, r2
 8003558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800355a:	4b20      	ldr	r3, [pc, #128]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	429a      	cmp	r2, r3
 8003566:	d001      	beq.n	800356c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e032      	b.n	80035d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003578:	4b19      	ldr	r3, [pc, #100]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	4916      	ldr	r1, [pc, #88]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003586:	4313      	orrs	r3, r2
 8003588:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d009      	beq.n	80035aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003596:	4b12      	ldr	r3, [pc, #72]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	490e      	ldr	r1, [pc, #56]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035aa:	f000 f821 	bl	80035f0 <HAL_RCC_GetSysClockFreq>
 80035ae:	4602      	mov	r2, r0
 80035b0:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	091b      	lsrs	r3, r3, #4
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	490a      	ldr	r1, [pc, #40]	; (80035e4 <HAL_RCC_ClockConfig+0x1cc>)
 80035bc:	5ccb      	ldrb	r3, [r1, r3]
 80035be:	fa22 f303 	lsr.w	r3, r2, r3
 80035c2:	4a09      	ldr	r2, [pc, #36]	; (80035e8 <HAL_RCC_ClockConfig+0x1d0>)
 80035c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035c6:	4b09      	ldr	r3, [pc, #36]	; (80035ec <HAL_RCC_ClockConfig+0x1d4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fe f9a4 	bl	8001918 <HAL_InitTick>

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40023c00 	.word	0x40023c00
 80035e0:	40023800 	.word	0x40023800
 80035e4:	08005f94 	.word	0x08005f94
 80035e8:	20000000 	.word	0x20000000
 80035ec:	20000004 	.word	0x20000004

080035f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035f4:	b094      	sub	sp, #80	; 0x50
 80035f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80035f8:	2300      	movs	r3, #0
 80035fa:	647b      	str	r3, [r7, #68]	; 0x44
 80035fc:	2300      	movs	r3, #0
 80035fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003600:	2300      	movs	r3, #0
 8003602:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003604:	2300      	movs	r3, #0
 8003606:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003608:	4b79      	ldr	r3, [pc, #484]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f003 030c 	and.w	r3, r3, #12
 8003610:	2b08      	cmp	r3, #8
 8003612:	d00d      	beq.n	8003630 <HAL_RCC_GetSysClockFreq+0x40>
 8003614:	2b08      	cmp	r3, #8
 8003616:	f200 80e1 	bhi.w	80037dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <HAL_RCC_GetSysClockFreq+0x34>
 800361e:	2b04      	cmp	r3, #4
 8003620:	d003      	beq.n	800362a <HAL_RCC_GetSysClockFreq+0x3a>
 8003622:	e0db      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003624:	4b73      	ldr	r3, [pc, #460]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003626:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003628:	e0db      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800362a:	4b73      	ldr	r3, [pc, #460]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800362c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800362e:	e0d8      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003630:	4b6f      	ldr	r3, [pc, #444]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003638:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800363a:	4b6d      	ldr	r3, [pc, #436]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d063      	beq.n	800370e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003646:	4b6a      	ldr	r3, [pc, #424]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	099b      	lsrs	r3, r3, #6
 800364c:	2200      	movs	r2, #0
 800364e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003650:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003658:	633b      	str	r3, [r7, #48]	; 0x30
 800365a:	2300      	movs	r3, #0
 800365c:	637b      	str	r3, [r7, #52]	; 0x34
 800365e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003662:	4622      	mov	r2, r4
 8003664:	462b      	mov	r3, r5
 8003666:	f04f 0000 	mov.w	r0, #0
 800366a:	f04f 0100 	mov.w	r1, #0
 800366e:	0159      	lsls	r1, r3, #5
 8003670:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003674:	0150      	lsls	r0, r2, #5
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4621      	mov	r1, r4
 800367c:	1a51      	subs	r1, r2, r1
 800367e:	6139      	str	r1, [r7, #16]
 8003680:	4629      	mov	r1, r5
 8003682:	eb63 0301 	sbc.w	r3, r3, r1
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003694:	4659      	mov	r1, fp
 8003696:	018b      	lsls	r3, r1, #6
 8003698:	4651      	mov	r1, sl
 800369a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800369e:	4651      	mov	r1, sl
 80036a0:	018a      	lsls	r2, r1, #6
 80036a2:	4651      	mov	r1, sl
 80036a4:	ebb2 0801 	subs.w	r8, r2, r1
 80036a8:	4659      	mov	r1, fp
 80036aa:	eb63 0901 	sbc.w	r9, r3, r1
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	f04f 0300 	mov.w	r3, #0
 80036b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036c2:	4690      	mov	r8, r2
 80036c4:	4699      	mov	r9, r3
 80036c6:	4623      	mov	r3, r4
 80036c8:	eb18 0303 	adds.w	r3, r8, r3
 80036cc:	60bb      	str	r3, [r7, #8]
 80036ce:	462b      	mov	r3, r5
 80036d0:	eb49 0303 	adc.w	r3, r9, r3
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036e2:	4629      	mov	r1, r5
 80036e4:	024b      	lsls	r3, r1, #9
 80036e6:	4621      	mov	r1, r4
 80036e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036ec:	4621      	mov	r1, r4
 80036ee:	024a      	lsls	r2, r1, #9
 80036f0:	4610      	mov	r0, r2
 80036f2:	4619      	mov	r1, r3
 80036f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036f6:	2200      	movs	r2, #0
 80036f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003700:	f7fc fdea 	bl	80002d8 <__aeabi_uldivmod>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4613      	mov	r3, r2
 800370a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800370c:	e058      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800370e:	4b38      	ldr	r3, [pc, #224]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	099b      	lsrs	r3, r3, #6
 8003714:	2200      	movs	r2, #0
 8003716:	4618      	mov	r0, r3
 8003718:	4611      	mov	r1, r2
 800371a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800371e:	623b      	str	r3, [r7, #32]
 8003720:	2300      	movs	r3, #0
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
 8003724:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003728:	4642      	mov	r2, r8
 800372a:	464b      	mov	r3, r9
 800372c:	f04f 0000 	mov.w	r0, #0
 8003730:	f04f 0100 	mov.w	r1, #0
 8003734:	0159      	lsls	r1, r3, #5
 8003736:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800373a:	0150      	lsls	r0, r2, #5
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4641      	mov	r1, r8
 8003742:	ebb2 0a01 	subs.w	sl, r2, r1
 8003746:	4649      	mov	r1, r9
 8003748:	eb63 0b01 	sbc.w	fp, r3, r1
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003758:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800375c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003760:	ebb2 040a 	subs.w	r4, r2, sl
 8003764:	eb63 050b 	sbc.w	r5, r3, fp
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	f04f 0300 	mov.w	r3, #0
 8003770:	00eb      	lsls	r3, r5, #3
 8003772:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003776:	00e2      	lsls	r2, r4, #3
 8003778:	4614      	mov	r4, r2
 800377a:	461d      	mov	r5, r3
 800377c:	4643      	mov	r3, r8
 800377e:	18e3      	adds	r3, r4, r3
 8003780:	603b      	str	r3, [r7, #0]
 8003782:	464b      	mov	r3, r9
 8003784:	eb45 0303 	adc.w	r3, r5, r3
 8003788:	607b      	str	r3, [r7, #4]
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003796:	4629      	mov	r1, r5
 8003798:	028b      	lsls	r3, r1, #10
 800379a:	4621      	mov	r1, r4
 800379c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037a0:	4621      	mov	r1, r4
 80037a2:	028a      	lsls	r2, r1, #10
 80037a4:	4610      	mov	r0, r2
 80037a6:	4619      	mov	r1, r3
 80037a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037aa:	2200      	movs	r2, #0
 80037ac:	61bb      	str	r3, [r7, #24]
 80037ae:	61fa      	str	r2, [r7, #28]
 80037b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037b4:	f7fc fd90 	bl	80002d8 <__aeabi_uldivmod>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4613      	mov	r3, r2
 80037be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	0c1b      	lsrs	r3, r3, #16
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	3301      	adds	r3, #1
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80037d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037da:	e002      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80037de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3750      	adds	r7, #80	; 0x50
 80037e8:	46bd      	mov	sp, r7
 80037ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ee:	bf00      	nop
 80037f0:	40023800 	.word	0x40023800
 80037f4:	00f42400 	.word	0x00f42400
 80037f8:	007a1200 	.word	0x007a1200

080037fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003800:	4b03      	ldr	r3, [pc, #12]	; (8003810 <HAL_RCC_GetHCLKFreq+0x14>)
 8003802:	681b      	ldr	r3, [r3, #0]
}
 8003804:	4618      	mov	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	20000000 	.word	0x20000000

08003814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003818:	f7ff fff0 	bl	80037fc <HAL_RCC_GetHCLKFreq>
 800381c:	4602      	mov	r2, r0
 800381e:	4b05      	ldr	r3, [pc, #20]	; (8003834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	0a9b      	lsrs	r3, r3, #10
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	4903      	ldr	r1, [pc, #12]	; (8003838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800382a:	5ccb      	ldrb	r3, [r1, r3]
 800382c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003830:	4618      	mov	r0, r3
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40023800 	.word	0x40023800
 8003838:	08005fa4 	.word	0x08005fa4

0800383c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003840:	f7ff ffdc 	bl	80037fc <HAL_RCC_GetHCLKFreq>
 8003844:	4602      	mov	r2, r0
 8003846:	4b05      	ldr	r3, [pc, #20]	; (800385c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	0b5b      	lsrs	r3, r3, #13
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	4903      	ldr	r1, [pc, #12]	; (8003860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003852:	5ccb      	ldrb	r3, [r1, r3]
 8003854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003858:	4618      	mov	r0, r3
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40023800 	.word	0x40023800
 8003860:	08005fa4 	.word	0x08005fa4

08003864 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003870:	2300      	movs	r3, #0
 8003872:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003874:	2300      	movs	r3, #0
 8003876:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003878:	2300      	movs	r3, #0
 800387a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d012      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800388c:	4b69      	ldr	r3, [pc, #420]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	4a68      	ldr	r2, [pc, #416]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003892:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003896:	6093      	str	r3, [r2, #8]
 8003898:	4b66      	ldr	r3, [pc, #408]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a0:	4964      	ldr	r1, [pc, #400]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80038ae:	2301      	movs	r3, #1
 80038b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d017      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038be:	4b5d      	ldr	r3, [pc, #372]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038cc:	4959      	ldr	r1, [pc, #356]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038dc:	d101      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80038de:	2301      	movs	r3, #1
 80038e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80038ea:	2301      	movs	r3, #1
 80038ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d017      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038fa:	4b4e      	ldr	r3, [pc, #312]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003900:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	494a      	ldr	r1, [pc, #296]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003918:	d101      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800391a:	2301      	movs	r3, #1
 800391c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003926:	2301      	movs	r3, #1
 8003928:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003936:	2301      	movs	r3, #1
 8003938:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 808b 	beq.w	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003948:	4b3a      	ldr	r3, [pc, #232]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394c:	4a39      	ldr	r2, [pc, #228]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800394e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003952:	6413      	str	r3, [r2, #64]	; 0x40
 8003954:	4b37      	ldr	r3, [pc, #220]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003960:	4b35      	ldr	r3, [pc, #212]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a34      	ldr	r2, [pc, #208]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800396a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800396c:	f7fe f818 	bl	80019a0 <HAL_GetTick>
 8003970:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003974:	f7fe f814 	bl	80019a0 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b64      	cmp	r3, #100	; 0x64
 8003980:	d901      	bls.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e38f      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003986:	4b2c      	ldr	r3, [pc, #176]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003992:	4b28      	ldr	r3, [pc, #160]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800399a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d035      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d02e      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039b0:	4b20      	ldr	r3, [pc, #128]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039ba:	4b1e      	ldr	r3, [pc, #120]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039be:	4a1d      	ldr	r2, [pc, #116]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039c6:	4b1b      	ldr	r3, [pc, #108]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ca:	4a1a      	ldr	r2, [pc, #104]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80039d2:	4a18      	ldr	r2, [pc, #96]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039d8:	4b16      	ldr	r3, [pc, #88]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d114      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e4:	f7fd ffdc 	bl	80019a0 <HAL_GetTick>
 80039e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ea:	e00a      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ec:	f7fd ffd8 	bl	80019a0 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e351      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a02:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0ee      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a1a:	d111      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a1c:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a28:	4b04      	ldr	r3, [pc, #16]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a2a:	400b      	ands	r3, r1
 8003a2c:	4901      	ldr	r1, [pc, #4]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	608b      	str	r3, [r1, #8]
 8003a32:	e00b      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a34:	40023800 	.word	0x40023800
 8003a38:	40007000 	.word	0x40007000
 8003a3c:	0ffffcff 	.word	0x0ffffcff
 8003a40:	4bac      	ldr	r3, [pc, #688]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	4aab      	ldr	r2, [pc, #684]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a46:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a4a:	6093      	str	r3, [r2, #8]
 8003a4c:	4ba9      	ldr	r3, [pc, #676]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a58:	49a6      	ldr	r1, [pc, #664]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0310 	and.w	r3, r3, #16
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d010      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a6a:	4ba2      	ldr	r3, [pc, #648]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a70:	4aa0      	ldr	r2, [pc, #640]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a7a:	4b9e      	ldr	r3, [pc, #632]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a7c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a84:	499b      	ldr	r1, [pc, #620]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a98:	4b96      	ldr	r3, [pc, #600]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aa6:	4993      	ldr	r1, [pc, #588]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aba:	4b8e      	ldr	r3, [pc, #568]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ac8:	498a      	ldr	r1, [pc, #552]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00a      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003adc:	4b85      	ldr	r3, [pc, #532]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aea:	4982      	ldr	r1, [pc, #520]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00a      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003afe:	4b7d      	ldr	r3, [pc, #500]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0c:	4979      	ldr	r1, [pc, #484]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00a      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b20:	4b74      	ldr	r3, [pc, #464]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b26:	f023 0203 	bic.w	r2, r3, #3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2e:	4971      	ldr	r1, [pc, #452]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00a      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b42:	4b6c      	ldr	r3, [pc, #432]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b48:	f023 020c 	bic.w	r2, r3, #12
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b50:	4968      	ldr	r1, [pc, #416]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00a      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b64:	4b63      	ldr	r3, [pc, #396]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b72:	4960      	ldr	r1, [pc, #384]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00a      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b86:	4b5b      	ldr	r3, [pc, #364]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b94:	4957      	ldr	r1, [pc, #348]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00a      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ba8:	4b52      	ldr	r3, [pc, #328]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb6:	494f      	ldr	r1, [pc, #316]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003bca:	4b4a      	ldr	r3, [pc, #296]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd8:	4946      	ldr	r1, [pc, #280]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00a      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003bec:	4b41      	ldr	r3, [pc, #260]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfa:	493e      	ldr	r1, [pc, #248]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00a      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c0e:	4b39      	ldr	r3, [pc, #228]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c1c:	4935      	ldr	r1, [pc, #212]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00a      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c30:	4b30      	ldr	r3, [pc, #192]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c36:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c3e:	492d      	ldr	r1, [pc, #180]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d011      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c52:	4b28      	ldr	r3, [pc, #160]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c58:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c60:	4924      	ldr	r1, [pc, #144]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c70:	d101      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c72:	2301      	movs	r3, #1
 8003c74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c82:	2301      	movs	r3, #1
 8003c84:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c92:	4b18      	ldr	r3, [pc, #96]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c98:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca0:	4914      	ldr	r1, [pc, #80]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00b      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cb4:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cc4:	490b      	ldr	r1, [pc, #44]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00f      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003cd8:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cde:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ce8:	4902      	ldr	r1, [pc, #8]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cf0:	e002      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003cf2:	bf00      	nop
 8003cf4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00b      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d04:	4b8a      	ldr	r3, [pc, #552]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d0a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d14:	4986      	ldr	r1, [pc, #536]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00b      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003d28:	4b81      	ldr	r3, [pc, #516]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d2e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d38:	497d      	ldr	r1, [pc, #500]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d006      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 80d6 	beq.w	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d54:	4b76      	ldr	r3, [pc, #472]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a75      	ldr	r2, [pc, #468]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d60:	f7fd fe1e 	bl	80019a0 <HAL_GetTick>
 8003d64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d66:	e008      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d68:	f7fd fe1a 	bl	80019a0 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b64      	cmp	r3, #100	; 0x64
 8003d74:	d901      	bls.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e195      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d7a:	4b6d      	ldr	r3, [pc, #436]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f0      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d021      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d11d      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d9a:	4b65      	ldr	r3, [pc, #404]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003da0:	0c1b      	lsrs	r3, r3, #16
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003da8:	4b61      	ldr	r3, [pc, #388]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dae:	0e1b      	lsrs	r3, r3, #24
 8003db0:	f003 030f 	and.w	r3, r3, #15
 8003db4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	019a      	lsls	r2, r3, #6
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	041b      	lsls	r3, r3, #16
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	061b      	lsls	r3, r3, #24
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	071b      	lsls	r3, r3, #28
 8003dce:	4958      	ldr	r1, [pc, #352]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d004      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dea:	d00a      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d02e      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e00:	d129      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e02:	4b4b      	ldr	r3, [pc, #300]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e08:	0c1b      	lsrs	r3, r3, #16
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e10:	4b47      	ldr	r3, [pc, #284]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e16:	0f1b      	lsrs	r3, r3, #28
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	019a      	lsls	r2, r3, #6
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	041b      	lsls	r3, r3, #16
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	061b      	lsls	r3, r3, #24
 8003e30:	431a      	orrs	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	071b      	lsls	r3, r3, #28
 8003e36:	493e      	ldr	r1, [pc, #248]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e3e:	4b3c      	ldr	r3, [pc, #240]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e44:	f023 021f 	bic.w	r2, r3, #31
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	4938      	ldr	r1, [pc, #224]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d01d      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e62:	4b33      	ldr	r3, [pc, #204]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e68:	0e1b      	lsrs	r3, r3, #24
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e70:	4b2f      	ldr	r3, [pc, #188]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e76:	0f1b      	lsrs	r3, r3, #28
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	019a      	lsls	r2, r3, #6
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	041b      	lsls	r3, r3, #16
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	061b      	lsls	r3, r3, #24
 8003e90:	431a      	orrs	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	071b      	lsls	r3, r3, #28
 8003e96:	4926      	ldr	r1, [pc, #152]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d011      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	019a      	lsls	r2, r3, #6
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	041b      	lsls	r3, r3, #16
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	061b      	lsls	r3, r3, #24
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	071b      	lsls	r3, r3, #28
 8003ec6:	491a      	ldr	r1, [pc, #104]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ece:	4b18      	ldr	r3, [pc, #96]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a17      	ldr	r2, [pc, #92]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ed4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ed8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eda:	f7fd fd61 	bl	80019a0 <HAL_GetTick>
 8003ede:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ee2:	f7fd fd5d 	bl	80019a0 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b64      	cmp	r3, #100	; 0x64
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e0d8      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ef4:	4b0e      	ldr	r3, [pc, #56]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0f0      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	f040 80ce 	bne.w	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f08:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a08      	ldr	r2, [pc, #32]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f14:	f7fd fd44 	bl	80019a0 <HAL_GetTick>
 8003f18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f1a:	e00b      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f1c:	f7fd fd40 	bl	80019a0 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b64      	cmp	r3, #100	; 0x64
 8003f28:	d904      	bls.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e0bb      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003f2e:	bf00      	nop
 8003f30:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f34:	4b5e      	ldr	r3, [pc, #376]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f40:	d0ec      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d009      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d02e      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d12a      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f6a:	4b51      	ldr	r3, [pc, #324]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f70:	0c1b      	lsrs	r3, r3, #16
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f78:	4b4d      	ldr	r3, [pc, #308]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7e:	0f1b      	lsrs	r3, r3, #28
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	019a      	lsls	r2, r3, #6
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	041b      	lsls	r3, r3, #16
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	061b      	lsls	r3, r3, #24
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	071b      	lsls	r3, r3, #28
 8003f9e:	4944      	ldr	r1, [pc, #272]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fa6:	4b42      	ldr	r3, [pc, #264]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	021b      	lsls	r3, r3, #8
 8003fb8:	493d      	ldr	r1, [pc, #244]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d022      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fd4:	d11d      	bne.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fd6:	4b36      	ldr	r3, [pc, #216]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fdc:	0e1b      	lsrs	r3, r3, #24
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fe4:	4b32      	ldr	r3, [pc, #200]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fea:	0f1b      	lsrs	r3, r3, #28
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	019a      	lsls	r2, r3, #6
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	041b      	lsls	r3, r3, #16
 8003ffe:	431a      	orrs	r2, r3
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	061b      	lsls	r3, r3, #24
 8004004:	431a      	orrs	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	071b      	lsls	r3, r3, #28
 800400a:	4929      	ldr	r1, [pc, #164]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800400c:	4313      	orrs	r3, r2
 800400e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0308 	and.w	r3, r3, #8
 800401a:	2b00      	cmp	r3, #0
 800401c:	d028      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800401e:	4b24      	ldr	r3, [pc, #144]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004024:	0e1b      	lsrs	r3, r3, #24
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800402c:	4b20      	ldr	r3, [pc, #128]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800402e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004032:	0c1b      	lsrs	r3, r3, #16
 8004034:	f003 0303 	and.w	r3, r3, #3
 8004038:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	019a      	lsls	r2, r3, #6
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	041b      	lsls	r3, r3, #16
 8004044:	431a      	orrs	r2, r3
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	061b      	lsls	r3, r3, #24
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	071b      	lsls	r3, r3, #28
 8004052:	4917      	ldr	r1, [pc, #92]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800405a:	4b15      	ldr	r3, [pc, #84]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800405c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004060:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	4911      	ldr	r1, [pc, #68]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004070:	4b0f      	ldr	r3, [pc, #60]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a0e      	ldr	r2, [pc, #56]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800407a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800407c:	f7fd fc90 	bl	80019a0 <HAL_GetTick>
 8004080:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004084:	f7fd fc8c 	bl	80019a0 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b64      	cmp	r3, #100	; 0x64
 8004090:	d901      	bls.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e007      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004096:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800409e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040a2:	d1ef      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3720      	adds	r7, #32
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	40023800 	.word	0x40023800

080040b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e049      	b.n	800415a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d106      	bne.n	80040e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7fd fa78 	bl	80015d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2202      	movs	r2, #2
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3304      	adds	r3, #4
 80040f0:	4619      	mov	r1, r3
 80040f2:	4610      	mov	r0, r2
 80040f4:	f000 fb6e 	bl	80047d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b082      	sub	sp, #8
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e049      	b.n	8004208 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	d106      	bne.n	800418e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f841 	bl	8004210 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2202      	movs	r2, #2
 8004192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	3304      	adds	r3, #4
 800419e:	4619      	mov	r1, r3
 80041a0:	4610      	mov	r0, r2
 80041a2:	f000 fb17 	bl	80047d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d109      	bne.n	8004248 <HAL_TIM_PWM_Start+0x24>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b01      	cmp	r3, #1
 800423e:	bf14      	ite	ne
 8004240:	2301      	movne	r3, #1
 8004242:	2300      	moveq	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	e03c      	b.n	80042c2 <HAL_TIM_PWM_Start+0x9e>
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	2b04      	cmp	r3, #4
 800424c:	d109      	bne.n	8004262 <HAL_TIM_PWM_Start+0x3e>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b01      	cmp	r3, #1
 8004258:	bf14      	ite	ne
 800425a:	2301      	movne	r3, #1
 800425c:	2300      	moveq	r3, #0
 800425e:	b2db      	uxtb	r3, r3
 8004260:	e02f      	b.n	80042c2 <HAL_TIM_PWM_Start+0x9e>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b08      	cmp	r3, #8
 8004266:	d109      	bne.n	800427c <HAL_TIM_PWM_Start+0x58>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b01      	cmp	r3, #1
 8004272:	bf14      	ite	ne
 8004274:	2301      	movne	r3, #1
 8004276:	2300      	moveq	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	e022      	b.n	80042c2 <HAL_TIM_PWM_Start+0x9e>
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2b0c      	cmp	r3, #12
 8004280:	d109      	bne.n	8004296 <HAL_TIM_PWM_Start+0x72>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b01      	cmp	r3, #1
 800428c:	bf14      	ite	ne
 800428e:	2301      	movne	r3, #1
 8004290:	2300      	moveq	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	e015      	b.n	80042c2 <HAL_TIM_PWM_Start+0x9e>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b10      	cmp	r3, #16
 800429a:	d109      	bne.n	80042b0 <HAL_TIM_PWM_Start+0x8c>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	bf14      	ite	ne
 80042a8:	2301      	movne	r3, #1
 80042aa:	2300      	moveq	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	e008      	b.n	80042c2 <HAL_TIM_PWM_Start+0x9e>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	bf14      	ite	ne
 80042bc:	2301      	movne	r3, #1
 80042be:	2300      	moveq	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e092      	b.n	80043f0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d104      	bne.n	80042da <HAL_TIM_PWM_Start+0xb6>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042d8:	e023      	b.n	8004322 <HAL_TIM_PWM_Start+0xfe>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d104      	bne.n	80042ea <HAL_TIM_PWM_Start+0xc6>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042e8:	e01b      	b.n	8004322 <HAL_TIM_PWM_Start+0xfe>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d104      	bne.n	80042fa <HAL_TIM_PWM_Start+0xd6>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042f8:	e013      	b.n	8004322 <HAL_TIM_PWM_Start+0xfe>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2b0c      	cmp	r3, #12
 80042fe:	d104      	bne.n	800430a <HAL_TIM_PWM_Start+0xe6>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004308:	e00b      	b.n	8004322 <HAL_TIM_PWM_Start+0xfe>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b10      	cmp	r3, #16
 800430e:	d104      	bne.n	800431a <HAL_TIM_PWM_Start+0xf6>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004318:	e003      	b.n	8004322 <HAL_TIM_PWM_Start+0xfe>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2202      	movs	r2, #2
 800431e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2201      	movs	r2, #1
 8004328:	6839      	ldr	r1, [r7, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f000 fdea 	bl	8004f04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a30      	ldr	r2, [pc, #192]	; (80043f8 <HAL_TIM_PWM_Start+0x1d4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d004      	beq.n	8004344 <HAL_TIM_PWM_Start+0x120>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a2f      	ldr	r2, [pc, #188]	; (80043fc <HAL_TIM_PWM_Start+0x1d8>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d101      	bne.n	8004348 <HAL_TIM_PWM_Start+0x124>
 8004344:	2301      	movs	r3, #1
 8004346:	e000      	b.n	800434a <HAL_TIM_PWM_Start+0x126>
 8004348:	2300      	movs	r3, #0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d007      	beq.n	800435e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800435c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a25      	ldr	r2, [pc, #148]	; (80043f8 <HAL_TIM_PWM_Start+0x1d4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d022      	beq.n	80043ae <HAL_TIM_PWM_Start+0x18a>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004370:	d01d      	beq.n	80043ae <HAL_TIM_PWM_Start+0x18a>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a22      	ldr	r2, [pc, #136]	; (8004400 <HAL_TIM_PWM_Start+0x1dc>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d018      	beq.n	80043ae <HAL_TIM_PWM_Start+0x18a>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a20      	ldr	r2, [pc, #128]	; (8004404 <HAL_TIM_PWM_Start+0x1e0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d013      	beq.n	80043ae <HAL_TIM_PWM_Start+0x18a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a1f      	ldr	r2, [pc, #124]	; (8004408 <HAL_TIM_PWM_Start+0x1e4>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d00e      	beq.n	80043ae <HAL_TIM_PWM_Start+0x18a>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a19      	ldr	r2, [pc, #100]	; (80043fc <HAL_TIM_PWM_Start+0x1d8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d009      	beq.n	80043ae <HAL_TIM_PWM_Start+0x18a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a1b      	ldr	r2, [pc, #108]	; (800440c <HAL_TIM_PWM_Start+0x1e8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d004      	beq.n	80043ae <HAL_TIM_PWM_Start+0x18a>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a19      	ldr	r2, [pc, #100]	; (8004410 <HAL_TIM_PWM_Start+0x1ec>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d115      	bne.n	80043da <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	4b17      	ldr	r3, [pc, #92]	; (8004414 <HAL_TIM_PWM_Start+0x1f0>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2b06      	cmp	r3, #6
 80043be:	d015      	beq.n	80043ec <HAL_TIM_PWM_Start+0x1c8>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c6:	d011      	beq.n	80043ec <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0201 	orr.w	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d8:	e008      	b.n	80043ec <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f042 0201 	orr.w	r2, r2, #1
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	e000      	b.n	80043ee <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40010000 	.word	0x40010000
 80043fc:	40010400 	.word	0x40010400
 8004400:	40000400 	.word	0x40000400
 8004404:	40000800 	.word	0x40000800
 8004408:	40000c00 	.word	0x40000c00
 800440c:	40014000 	.word	0x40014000
 8004410:	40001800 	.word	0x40001800
 8004414:	00010007 	.word	0x00010007

08004418 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004424:	2300      	movs	r3, #0
 8004426:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800442e:	2b01      	cmp	r3, #1
 8004430:	d101      	bne.n	8004436 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004432:	2302      	movs	r3, #2
 8004434:	e0ff      	b.n	8004636 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b14      	cmp	r3, #20
 8004442:	f200 80f0 	bhi.w	8004626 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004446:	a201      	add	r2, pc, #4	; (adr r2, 800444c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444c:	080044a1 	.word	0x080044a1
 8004450:	08004627 	.word	0x08004627
 8004454:	08004627 	.word	0x08004627
 8004458:	08004627 	.word	0x08004627
 800445c:	080044e1 	.word	0x080044e1
 8004460:	08004627 	.word	0x08004627
 8004464:	08004627 	.word	0x08004627
 8004468:	08004627 	.word	0x08004627
 800446c:	08004523 	.word	0x08004523
 8004470:	08004627 	.word	0x08004627
 8004474:	08004627 	.word	0x08004627
 8004478:	08004627 	.word	0x08004627
 800447c:	08004563 	.word	0x08004563
 8004480:	08004627 	.word	0x08004627
 8004484:	08004627 	.word	0x08004627
 8004488:	08004627 	.word	0x08004627
 800448c:	080045a5 	.word	0x080045a5
 8004490:	08004627 	.word	0x08004627
 8004494:	08004627 	.word	0x08004627
 8004498:	08004627 	.word	0x08004627
 800449c:	080045e5 	.word	0x080045e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68b9      	ldr	r1, [r7, #8]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fa34 	bl	8004914 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699a      	ldr	r2, [r3, #24]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0208 	orr.w	r2, r2, #8
 80044ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699a      	ldr	r2, [r3, #24]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0204 	bic.w	r2, r2, #4
 80044ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6999      	ldr	r1, [r3, #24]
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	619a      	str	r2, [r3, #24]
      break;
 80044de:	e0a5      	b.n	800462c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68b9      	ldr	r1, [r7, #8]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fa86 	bl	80049f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699a      	ldr	r2, [r3, #24]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699a      	ldr	r2, [r3, #24]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800450a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6999      	ldr	r1, [r3, #24]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	021a      	lsls	r2, r3, #8
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	619a      	str	r2, [r3, #24]
      break;
 8004520:	e084      	b.n	800462c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68b9      	ldr	r1, [r7, #8]
 8004528:	4618      	mov	r0, r3
 800452a:	f000 fadd 	bl	8004ae8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	69da      	ldr	r2, [r3, #28]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 0208 	orr.w	r2, r2, #8
 800453c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69da      	ldr	r2, [r3, #28]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0204 	bic.w	r2, r2, #4
 800454c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69d9      	ldr	r1, [r3, #28]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	61da      	str	r2, [r3, #28]
      break;
 8004560:	e064      	b.n	800462c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68b9      	ldr	r1, [r7, #8]
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fb33 	bl	8004bd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69da      	ldr	r2, [r3, #28]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800457c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	69da      	ldr	r2, [r3, #28]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800458c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69d9      	ldr	r1, [r3, #28]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	021a      	lsls	r2, r3, #8
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	61da      	str	r2, [r3, #28]
      break;
 80045a2:	e043      	b.n	800462c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68b9      	ldr	r1, [r7, #8]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fb6a 	bl	8004c84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0208 	orr.w	r2, r2, #8
 80045be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0204 	bic.w	r2, r2, #4
 80045ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80045e2:	e023      	b.n	800462c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68b9      	ldr	r1, [r7, #8]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fb9c 	bl	8004d28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800460e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	021a      	lsls	r2, r3, #8
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004624:	e002      	b.n	800462c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	75fb      	strb	r3, [r7, #23]
      break;
 800462a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004634:	7dfb      	ldrb	r3, [r7, #23]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop

08004640 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004654:	2b01      	cmp	r3, #1
 8004656:	d101      	bne.n	800465c <HAL_TIM_ConfigClockSource+0x1c>
 8004658:	2302      	movs	r3, #2
 800465a:	e0b4      	b.n	80047c6 <HAL_TIM_ConfigClockSource+0x186>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	4b56      	ldr	r3, [pc, #344]	; (80047d0 <HAL_TIM_ConfigClockSource+0x190>)
 8004678:	4013      	ands	r3, r2
 800467a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004682:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004694:	d03e      	beq.n	8004714 <HAL_TIM_ConfigClockSource+0xd4>
 8004696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800469a:	f200 8087 	bhi.w	80047ac <HAL_TIM_ConfigClockSource+0x16c>
 800469e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a2:	f000 8086 	beq.w	80047b2 <HAL_TIM_ConfigClockSource+0x172>
 80046a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046aa:	d87f      	bhi.n	80047ac <HAL_TIM_ConfigClockSource+0x16c>
 80046ac:	2b70      	cmp	r3, #112	; 0x70
 80046ae:	d01a      	beq.n	80046e6 <HAL_TIM_ConfigClockSource+0xa6>
 80046b0:	2b70      	cmp	r3, #112	; 0x70
 80046b2:	d87b      	bhi.n	80047ac <HAL_TIM_ConfigClockSource+0x16c>
 80046b4:	2b60      	cmp	r3, #96	; 0x60
 80046b6:	d050      	beq.n	800475a <HAL_TIM_ConfigClockSource+0x11a>
 80046b8:	2b60      	cmp	r3, #96	; 0x60
 80046ba:	d877      	bhi.n	80047ac <HAL_TIM_ConfigClockSource+0x16c>
 80046bc:	2b50      	cmp	r3, #80	; 0x50
 80046be:	d03c      	beq.n	800473a <HAL_TIM_ConfigClockSource+0xfa>
 80046c0:	2b50      	cmp	r3, #80	; 0x50
 80046c2:	d873      	bhi.n	80047ac <HAL_TIM_ConfigClockSource+0x16c>
 80046c4:	2b40      	cmp	r3, #64	; 0x40
 80046c6:	d058      	beq.n	800477a <HAL_TIM_ConfigClockSource+0x13a>
 80046c8:	2b40      	cmp	r3, #64	; 0x40
 80046ca:	d86f      	bhi.n	80047ac <HAL_TIM_ConfigClockSource+0x16c>
 80046cc:	2b30      	cmp	r3, #48	; 0x30
 80046ce:	d064      	beq.n	800479a <HAL_TIM_ConfigClockSource+0x15a>
 80046d0:	2b30      	cmp	r3, #48	; 0x30
 80046d2:	d86b      	bhi.n	80047ac <HAL_TIM_ConfigClockSource+0x16c>
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d060      	beq.n	800479a <HAL_TIM_ConfigClockSource+0x15a>
 80046d8:	2b20      	cmp	r3, #32
 80046da:	d867      	bhi.n	80047ac <HAL_TIM_ConfigClockSource+0x16c>
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d05c      	beq.n	800479a <HAL_TIM_ConfigClockSource+0x15a>
 80046e0:	2b10      	cmp	r3, #16
 80046e2:	d05a      	beq.n	800479a <HAL_TIM_ConfigClockSource+0x15a>
 80046e4:	e062      	b.n	80047ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	6899      	ldr	r1, [r3, #8]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f000 fbe5 	bl	8004ec4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004708:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	609a      	str	r2, [r3, #8]
      break;
 8004712:	e04f      	b.n	80047b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6818      	ldr	r0, [r3, #0]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	6899      	ldr	r1, [r3, #8]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f000 fbce 	bl	8004ec4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004736:	609a      	str	r2, [r3, #8]
      break;
 8004738:	e03c      	b.n	80047b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6818      	ldr	r0, [r3, #0]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	6859      	ldr	r1, [r3, #4]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	461a      	mov	r2, r3
 8004748:	f000 fb42 	bl	8004dd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2150      	movs	r1, #80	; 0x50
 8004752:	4618      	mov	r0, r3
 8004754:	f000 fb9b 	bl	8004e8e <TIM_ITRx_SetConfig>
      break;
 8004758:	e02c      	b.n	80047b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	6859      	ldr	r1, [r3, #4]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	461a      	mov	r2, r3
 8004768:	f000 fb61 	bl	8004e2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2160      	movs	r1, #96	; 0x60
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fb8b 	bl	8004e8e <TIM_ITRx_SetConfig>
      break;
 8004778:	e01c      	b.n	80047b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	6859      	ldr	r1, [r3, #4]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	461a      	mov	r2, r3
 8004788:	f000 fb22 	bl	8004dd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2140      	movs	r1, #64	; 0x40
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fb7b 	bl	8004e8e <TIM_ITRx_SetConfig>
      break;
 8004798:	e00c      	b.n	80047b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4619      	mov	r1, r3
 80047a4:	4610      	mov	r0, r2
 80047a6:	f000 fb72 	bl	8004e8e <TIM_ITRx_SetConfig>
      break;
 80047aa:	e003      	b.n	80047b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	73fb      	strb	r3, [r7, #15]
      break;
 80047b0:	e000      	b.n	80047b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	fffeff88 	.word	0xfffeff88

080047d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a40      	ldr	r2, [pc, #256]	; (80048e8 <TIM_Base_SetConfig+0x114>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d013      	beq.n	8004814 <TIM_Base_SetConfig+0x40>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f2:	d00f      	beq.n	8004814 <TIM_Base_SetConfig+0x40>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a3d      	ldr	r2, [pc, #244]	; (80048ec <TIM_Base_SetConfig+0x118>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d00b      	beq.n	8004814 <TIM_Base_SetConfig+0x40>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a3c      	ldr	r2, [pc, #240]	; (80048f0 <TIM_Base_SetConfig+0x11c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d007      	beq.n	8004814 <TIM_Base_SetConfig+0x40>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a3b      	ldr	r2, [pc, #236]	; (80048f4 <TIM_Base_SetConfig+0x120>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d003      	beq.n	8004814 <TIM_Base_SetConfig+0x40>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a3a      	ldr	r2, [pc, #232]	; (80048f8 <TIM_Base_SetConfig+0x124>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d108      	bne.n	8004826 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800481a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	4313      	orrs	r3, r2
 8004824:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a2f      	ldr	r2, [pc, #188]	; (80048e8 <TIM_Base_SetConfig+0x114>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d02b      	beq.n	8004886 <TIM_Base_SetConfig+0xb2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004834:	d027      	beq.n	8004886 <TIM_Base_SetConfig+0xb2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a2c      	ldr	r2, [pc, #176]	; (80048ec <TIM_Base_SetConfig+0x118>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d023      	beq.n	8004886 <TIM_Base_SetConfig+0xb2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a2b      	ldr	r2, [pc, #172]	; (80048f0 <TIM_Base_SetConfig+0x11c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d01f      	beq.n	8004886 <TIM_Base_SetConfig+0xb2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a2a      	ldr	r2, [pc, #168]	; (80048f4 <TIM_Base_SetConfig+0x120>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d01b      	beq.n	8004886 <TIM_Base_SetConfig+0xb2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a29      	ldr	r2, [pc, #164]	; (80048f8 <TIM_Base_SetConfig+0x124>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d017      	beq.n	8004886 <TIM_Base_SetConfig+0xb2>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a28      	ldr	r2, [pc, #160]	; (80048fc <TIM_Base_SetConfig+0x128>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d013      	beq.n	8004886 <TIM_Base_SetConfig+0xb2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a27      	ldr	r2, [pc, #156]	; (8004900 <TIM_Base_SetConfig+0x12c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d00f      	beq.n	8004886 <TIM_Base_SetConfig+0xb2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a26      	ldr	r2, [pc, #152]	; (8004904 <TIM_Base_SetConfig+0x130>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d00b      	beq.n	8004886 <TIM_Base_SetConfig+0xb2>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a25      	ldr	r2, [pc, #148]	; (8004908 <TIM_Base_SetConfig+0x134>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d007      	beq.n	8004886 <TIM_Base_SetConfig+0xb2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a24      	ldr	r2, [pc, #144]	; (800490c <TIM_Base_SetConfig+0x138>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d003      	beq.n	8004886 <TIM_Base_SetConfig+0xb2>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a23      	ldr	r2, [pc, #140]	; (8004910 <TIM_Base_SetConfig+0x13c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d108      	bne.n	8004898 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800488c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	4313      	orrs	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a0a      	ldr	r2, [pc, #40]	; (80048e8 <TIM_Base_SetConfig+0x114>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d003      	beq.n	80048cc <TIM_Base_SetConfig+0xf8>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a0c      	ldr	r2, [pc, #48]	; (80048f8 <TIM_Base_SetConfig+0x124>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d103      	bne.n	80048d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	691a      	ldr	r2, [r3, #16]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	615a      	str	r2, [r3, #20]
}
 80048da:	bf00      	nop
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40010000 	.word	0x40010000
 80048ec:	40000400 	.word	0x40000400
 80048f0:	40000800 	.word	0x40000800
 80048f4:	40000c00 	.word	0x40000c00
 80048f8:	40010400 	.word	0x40010400
 80048fc:	40014000 	.word	0x40014000
 8004900:	40014400 	.word	0x40014400
 8004904:	40014800 	.word	0x40014800
 8004908:	40001800 	.word	0x40001800
 800490c:	40001c00 	.word	0x40001c00
 8004910:	40002000 	.word	0x40002000

08004914 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004914:	b480      	push	{r7}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	f023 0201 	bic.w	r2, r3, #1
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	4b2b      	ldr	r3, [pc, #172]	; (80049ec <TIM_OC1_SetConfig+0xd8>)
 8004940:	4013      	ands	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 0303 	bic.w	r3, r3, #3
 800494a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f023 0302 	bic.w	r3, r3, #2
 800495c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	4313      	orrs	r3, r2
 8004966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a21      	ldr	r2, [pc, #132]	; (80049f0 <TIM_OC1_SetConfig+0xdc>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d003      	beq.n	8004978 <TIM_OC1_SetConfig+0x64>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a20      	ldr	r2, [pc, #128]	; (80049f4 <TIM_OC1_SetConfig+0xe0>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d10c      	bne.n	8004992 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f023 0308 	bic.w	r3, r3, #8
 800497e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	4313      	orrs	r3, r2
 8004988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f023 0304 	bic.w	r3, r3, #4
 8004990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a16      	ldr	r2, [pc, #88]	; (80049f0 <TIM_OC1_SetConfig+0xdc>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d003      	beq.n	80049a2 <TIM_OC1_SetConfig+0x8e>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a15      	ldr	r2, [pc, #84]	; (80049f4 <TIM_OC1_SetConfig+0xe0>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d111      	bne.n	80049c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	621a      	str	r2, [r3, #32]
}
 80049e0:	bf00      	nop
 80049e2:	371c      	adds	r7, #28
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	fffeff8f 	.word	0xfffeff8f
 80049f0:	40010000 	.word	0x40010000
 80049f4:	40010400 	.word	0x40010400

080049f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	f023 0210 	bic.w	r2, r3, #16
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	4b2e      	ldr	r3, [pc, #184]	; (8004adc <TIM_OC2_SetConfig+0xe4>)
 8004a24:	4013      	ands	r3, r2
 8004a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	021b      	lsls	r3, r3, #8
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f023 0320 	bic.w	r3, r3, #32
 8004a42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a23      	ldr	r2, [pc, #140]	; (8004ae0 <TIM_OC2_SetConfig+0xe8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d003      	beq.n	8004a60 <TIM_OC2_SetConfig+0x68>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a22      	ldr	r2, [pc, #136]	; (8004ae4 <TIM_OC2_SetConfig+0xec>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d10d      	bne.n	8004a7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	011b      	lsls	r3, r3, #4
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a18      	ldr	r2, [pc, #96]	; (8004ae0 <TIM_OC2_SetConfig+0xe8>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d003      	beq.n	8004a8c <TIM_OC2_SetConfig+0x94>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a17      	ldr	r2, [pc, #92]	; (8004ae4 <TIM_OC2_SetConfig+0xec>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d113      	bne.n	8004ab4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	621a      	str	r2, [r3, #32]
}
 8004ace:	bf00      	nop
 8004ad0:	371c      	adds	r7, #28
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	feff8fff 	.word	0xfeff8fff
 8004ae0:	40010000 	.word	0x40010000
 8004ae4:	40010400 	.word	0x40010400

08004ae8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	4b2d      	ldr	r3, [pc, #180]	; (8004bc8 <TIM_OC3_SetConfig+0xe0>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f023 0303 	bic.w	r3, r3, #3
 8004b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	021b      	lsls	r3, r3, #8
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a22      	ldr	r2, [pc, #136]	; (8004bcc <TIM_OC3_SetConfig+0xe4>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d003      	beq.n	8004b4e <TIM_OC3_SetConfig+0x66>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a21      	ldr	r2, [pc, #132]	; (8004bd0 <TIM_OC3_SetConfig+0xe8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d10d      	bne.n	8004b6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	021b      	lsls	r3, r3, #8
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a17      	ldr	r2, [pc, #92]	; (8004bcc <TIM_OC3_SetConfig+0xe4>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d003      	beq.n	8004b7a <TIM_OC3_SetConfig+0x92>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a16      	ldr	r2, [pc, #88]	; (8004bd0 <TIM_OC3_SetConfig+0xe8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d113      	bne.n	8004ba2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	621a      	str	r2, [r3, #32]
}
 8004bbc:	bf00      	nop
 8004bbe:	371c      	adds	r7, #28
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	fffeff8f 	.word	0xfffeff8f
 8004bcc:	40010000 	.word	0x40010000
 8004bd0:	40010400 	.word	0x40010400

08004bd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	4b1e      	ldr	r3, [pc, #120]	; (8004c78 <TIM_OC4_SetConfig+0xa4>)
 8004c00:	4013      	ands	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	021b      	lsls	r3, r3, #8
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	031b      	lsls	r3, r3, #12
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a13      	ldr	r2, [pc, #76]	; (8004c7c <TIM_OC4_SetConfig+0xa8>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d003      	beq.n	8004c3c <TIM_OC4_SetConfig+0x68>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a12      	ldr	r2, [pc, #72]	; (8004c80 <TIM_OC4_SetConfig+0xac>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d109      	bne.n	8004c50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	019b      	lsls	r3, r3, #6
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	621a      	str	r2, [r3, #32]
}
 8004c6a:	bf00      	nop
 8004c6c:	371c      	adds	r7, #28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	feff8fff 	.word	0xfeff8fff
 8004c7c:	40010000 	.word	0x40010000
 8004c80:	40010400 	.word	0x40010400

08004c84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4b1b      	ldr	r3, [pc, #108]	; (8004d1c <TIM_OC5_SetConfig+0x98>)
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004cc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	041b      	lsls	r3, r3, #16
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a12      	ldr	r2, [pc, #72]	; (8004d20 <TIM_OC5_SetConfig+0x9c>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d003      	beq.n	8004ce2 <TIM_OC5_SetConfig+0x5e>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a11      	ldr	r2, [pc, #68]	; (8004d24 <TIM_OC5_SetConfig+0xa0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d109      	bne.n	8004cf6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	021b      	lsls	r3, r3, #8
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	621a      	str	r2, [r3, #32]
}
 8004d10:	bf00      	nop
 8004d12:	371c      	adds	r7, #28
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	fffeff8f 	.word	0xfffeff8f
 8004d20:	40010000 	.word	0x40010000
 8004d24:	40010400 	.word	0x40010400

08004d28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	4b1c      	ldr	r3, [pc, #112]	; (8004dc4 <TIM_OC6_SetConfig+0x9c>)
 8004d54:	4013      	ands	r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	021b      	lsls	r3, r3, #8
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	051b      	lsls	r3, r3, #20
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a13      	ldr	r2, [pc, #76]	; (8004dc8 <TIM_OC6_SetConfig+0xa0>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d003      	beq.n	8004d88 <TIM_OC6_SetConfig+0x60>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a12      	ldr	r2, [pc, #72]	; (8004dcc <TIM_OC6_SetConfig+0xa4>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d109      	bne.n	8004d9c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	029b      	lsls	r3, r3, #10
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	621a      	str	r2, [r3, #32]
}
 8004db6:	bf00      	nop
 8004db8:	371c      	adds	r7, #28
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	feff8fff 	.word	0xfeff8fff
 8004dc8:	40010000 	.word	0x40010000
 8004dcc:	40010400 	.word	0x40010400

08004dd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	f023 0201 	bic.w	r2, r3, #1
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f023 030a 	bic.w	r3, r3, #10
 8004e0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	621a      	str	r2, [r3, #32]
}
 8004e22:	bf00      	nop
 8004e24:	371c      	adds	r7, #28
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b087      	sub	sp, #28
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	60f8      	str	r0, [r7, #12]
 8004e36:	60b9      	str	r1, [r7, #8]
 8004e38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	f023 0210 	bic.w	r2, r3, #16
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	031b      	lsls	r3, r3, #12
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	011b      	lsls	r3, r3, #4
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	621a      	str	r2, [r3, #32]
}
 8004e82:	bf00      	nop
 8004e84:	371c      	adds	r7, #28
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b085      	sub	sp, #20
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f043 0307 	orr.w	r3, r3, #7
 8004eb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	609a      	str	r2, [r3, #8]
}
 8004eb8:	bf00      	nop
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ede:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	021a      	lsls	r2, r3, #8
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	609a      	str	r2, [r3, #8]
}
 8004ef8:	bf00      	nop
 8004efa:	371c      	adds	r7, #28
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b087      	sub	sp, #28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f003 031f 	and.w	r3, r3, #31
 8004f16:	2201      	movs	r2, #1
 8004f18:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6a1a      	ldr	r2, [r3, #32]
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	43db      	mvns	r3, r3
 8004f26:	401a      	ands	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a1a      	ldr	r2, [r3, #32]
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f003 031f 	and.w	r3, r3, #31
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	621a      	str	r2, [r3, #32]
}
 8004f42:	bf00      	nop
 8004f44:	371c      	adds	r7, #28
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
	...

08004f50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d101      	bne.n	8004f68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f64:	2302      	movs	r3, #2
 8004f66:	e06d      	b.n	8005044 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a30      	ldr	r2, [pc, #192]	; (8005050 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d004      	beq.n	8004f9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a2f      	ldr	r2, [pc, #188]	; (8005054 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d108      	bne.n	8004fae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004fa2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a20      	ldr	r2, [pc, #128]	; (8005050 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d022      	beq.n	8005018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fda:	d01d      	beq.n	8005018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a1d      	ldr	r2, [pc, #116]	; (8005058 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d018      	beq.n	8005018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a1c      	ldr	r2, [pc, #112]	; (800505c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d013      	beq.n	8005018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a1a      	ldr	r2, [pc, #104]	; (8005060 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d00e      	beq.n	8005018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a15      	ldr	r2, [pc, #84]	; (8005054 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d009      	beq.n	8005018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a16      	ldr	r2, [pc, #88]	; (8005064 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d004      	beq.n	8005018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a15      	ldr	r2, [pc, #84]	; (8005068 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d10c      	bne.n	8005032 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800501e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	4313      	orrs	r3, r2
 8005028:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	40010000 	.word	0x40010000
 8005054:	40010400 	.word	0x40010400
 8005058:	40000400 	.word	0x40000400
 800505c:	40000800 	.word	0x40000800
 8005060:	40000c00 	.word	0x40000c00
 8005064:	40014000 	.word	0x40014000
 8005068:	40001800 	.word	0x40001800

0800506c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e040      	b.n	8005100 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005082:	2b00      	cmp	r3, #0
 8005084:	d106      	bne.n	8005094 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7fc faf6 	bl	8001680 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2224      	movs	r2, #36	; 0x24
 8005098:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0201 	bic.w	r2, r2, #1
 80050a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f82c 	bl	8005108 <UART_SetConfig>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d101      	bne.n	80050ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e022      	b.n	8005100 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d002      	beq.n	80050c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 fa84 	bl	80055d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685a      	ldr	r2, [r3, #4]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689a      	ldr	r2, [r3, #8]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0201 	orr.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 fb0b 	bl	8005714 <UART_CheckIdleState>
 80050fe:	4603      	mov	r3, r0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005110:	2300      	movs	r3, #0
 8005112:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	431a      	orrs	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	431a      	orrs	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	69db      	ldr	r3, [r3, #28]
 8005128:	4313      	orrs	r3, r2
 800512a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	4ba6      	ldr	r3, [pc, #664]	; (80053cc <UART_SetConfig+0x2c4>)
 8005134:	4013      	ands	r3, r2
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6812      	ldr	r2, [r2, #0]
 800513a:	6979      	ldr	r1, [r7, #20]
 800513c:	430b      	orrs	r3, r1
 800513e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	430a      	orrs	r2, r1
 8005154:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	4313      	orrs	r3, r2
 8005164:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	430a      	orrs	r2, r1
 8005178:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a94      	ldr	r2, [pc, #592]	; (80053d0 <UART_SetConfig+0x2c8>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d120      	bne.n	80051c6 <UART_SetConfig+0xbe>
 8005184:	4b93      	ldr	r3, [pc, #588]	; (80053d4 <UART_SetConfig+0x2cc>)
 8005186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	2b03      	cmp	r3, #3
 8005190:	d816      	bhi.n	80051c0 <UART_SetConfig+0xb8>
 8005192:	a201      	add	r2, pc, #4	; (adr r2, 8005198 <UART_SetConfig+0x90>)
 8005194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005198:	080051a9 	.word	0x080051a9
 800519c:	080051b5 	.word	0x080051b5
 80051a0:	080051af 	.word	0x080051af
 80051a4:	080051bb 	.word	0x080051bb
 80051a8:	2301      	movs	r3, #1
 80051aa:	77fb      	strb	r3, [r7, #31]
 80051ac:	e150      	b.n	8005450 <UART_SetConfig+0x348>
 80051ae:	2302      	movs	r3, #2
 80051b0:	77fb      	strb	r3, [r7, #31]
 80051b2:	e14d      	b.n	8005450 <UART_SetConfig+0x348>
 80051b4:	2304      	movs	r3, #4
 80051b6:	77fb      	strb	r3, [r7, #31]
 80051b8:	e14a      	b.n	8005450 <UART_SetConfig+0x348>
 80051ba:	2308      	movs	r3, #8
 80051bc:	77fb      	strb	r3, [r7, #31]
 80051be:	e147      	b.n	8005450 <UART_SetConfig+0x348>
 80051c0:	2310      	movs	r3, #16
 80051c2:	77fb      	strb	r3, [r7, #31]
 80051c4:	e144      	b.n	8005450 <UART_SetConfig+0x348>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a83      	ldr	r2, [pc, #524]	; (80053d8 <UART_SetConfig+0x2d0>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d132      	bne.n	8005236 <UART_SetConfig+0x12e>
 80051d0:	4b80      	ldr	r3, [pc, #512]	; (80053d4 <UART_SetConfig+0x2cc>)
 80051d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d6:	f003 030c 	and.w	r3, r3, #12
 80051da:	2b0c      	cmp	r3, #12
 80051dc:	d828      	bhi.n	8005230 <UART_SetConfig+0x128>
 80051de:	a201      	add	r2, pc, #4	; (adr r2, 80051e4 <UART_SetConfig+0xdc>)
 80051e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e4:	08005219 	.word	0x08005219
 80051e8:	08005231 	.word	0x08005231
 80051ec:	08005231 	.word	0x08005231
 80051f0:	08005231 	.word	0x08005231
 80051f4:	08005225 	.word	0x08005225
 80051f8:	08005231 	.word	0x08005231
 80051fc:	08005231 	.word	0x08005231
 8005200:	08005231 	.word	0x08005231
 8005204:	0800521f 	.word	0x0800521f
 8005208:	08005231 	.word	0x08005231
 800520c:	08005231 	.word	0x08005231
 8005210:	08005231 	.word	0x08005231
 8005214:	0800522b 	.word	0x0800522b
 8005218:	2300      	movs	r3, #0
 800521a:	77fb      	strb	r3, [r7, #31]
 800521c:	e118      	b.n	8005450 <UART_SetConfig+0x348>
 800521e:	2302      	movs	r3, #2
 8005220:	77fb      	strb	r3, [r7, #31]
 8005222:	e115      	b.n	8005450 <UART_SetConfig+0x348>
 8005224:	2304      	movs	r3, #4
 8005226:	77fb      	strb	r3, [r7, #31]
 8005228:	e112      	b.n	8005450 <UART_SetConfig+0x348>
 800522a:	2308      	movs	r3, #8
 800522c:	77fb      	strb	r3, [r7, #31]
 800522e:	e10f      	b.n	8005450 <UART_SetConfig+0x348>
 8005230:	2310      	movs	r3, #16
 8005232:	77fb      	strb	r3, [r7, #31]
 8005234:	e10c      	b.n	8005450 <UART_SetConfig+0x348>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a68      	ldr	r2, [pc, #416]	; (80053dc <UART_SetConfig+0x2d4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d120      	bne.n	8005282 <UART_SetConfig+0x17a>
 8005240:	4b64      	ldr	r3, [pc, #400]	; (80053d4 <UART_SetConfig+0x2cc>)
 8005242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005246:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800524a:	2b30      	cmp	r3, #48	; 0x30
 800524c:	d013      	beq.n	8005276 <UART_SetConfig+0x16e>
 800524e:	2b30      	cmp	r3, #48	; 0x30
 8005250:	d814      	bhi.n	800527c <UART_SetConfig+0x174>
 8005252:	2b20      	cmp	r3, #32
 8005254:	d009      	beq.n	800526a <UART_SetConfig+0x162>
 8005256:	2b20      	cmp	r3, #32
 8005258:	d810      	bhi.n	800527c <UART_SetConfig+0x174>
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <UART_SetConfig+0x15c>
 800525e:	2b10      	cmp	r3, #16
 8005260:	d006      	beq.n	8005270 <UART_SetConfig+0x168>
 8005262:	e00b      	b.n	800527c <UART_SetConfig+0x174>
 8005264:	2300      	movs	r3, #0
 8005266:	77fb      	strb	r3, [r7, #31]
 8005268:	e0f2      	b.n	8005450 <UART_SetConfig+0x348>
 800526a:	2302      	movs	r3, #2
 800526c:	77fb      	strb	r3, [r7, #31]
 800526e:	e0ef      	b.n	8005450 <UART_SetConfig+0x348>
 8005270:	2304      	movs	r3, #4
 8005272:	77fb      	strb	r3, [r7, #31]
 8005274:	e0ec      	b.n	8005450 <UART_SetConfig+0x348>
 8005276:	2308      	movs	r3, #8
 8005278:	77fb      	strb	r3, [r7, #31]
 800527a:	e0e9      	b.n	8005450 <UART_SetConfig+0x348>
 800527c:	2310      	movs	r3, #16
 800527e:	77fb      	strb	r3, [r7, #31]
 8005280:	e0e6      	b.n	8005450 <UART_SetConfig+0x348>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a56      	ldr	r2, [pc, #344]	; (80053e0 <UART_SetConfig+0x2d8>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d120      	bne.n	80052ce <UART_SetConfig+0x1c6>
 800528c:	4b51      	ldr	r3, [pc, #324]	; (80053d4 <UART_SetConfig+0x2cc>)
 800528e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005292:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005296:	2bc0      	cmp	r3, #192	; 0xc0
 8005298:	d013      	beq.n	80052c2 <UART_SetConfig+0x1ba>
 800529a:	2bc0      	cmp	r3, #192	; 0xc0
 800529c:	d814      	bhi.n	80052c8 <UART_SetConfig+0x1c0>
 800529e:	2b80      	cmp	r3, #128	; 0x80
 80052a0:	d009      	beq.n	80052b6 <UART_SetConfig+0x1ae>
 80052a2:	2b80      	cmp	r3, #128	; 0x80
 80052a4:	d810      	bhi.n	80052c8 <UART_SetConfig+0x1c0>
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <UART_SetConfig+0x1a8>
 80052aa:	2b40      	cmp	r3, #64	; 0x40
 80052ac:	d006      	beq.n	80052bc <UART_SetConfig+0x1b4>
 80052ae:	e00b      	b.n	80052c8 <UART_SetConfig+0x1c0>
 80052b0:	2300      	movs	r3, #0
 80052b2:	77fb      	strb	r3, [r7, #31]
 80052b4:	e0cc      	b.n	8005450 <UART_SetConfig+0x348>
 80052b6:	2302      	movs	r3, #2
 80052b8:	77fb      	strb	r3, [r7, #31]
 80052ba:	e0c9      	b.n	8005450 <UART_SetConfig+0x348>
 80052bc:	2304      	movs	r3, #4
 80052be:	77fb      	strb	r3, [r7, #31]
 80052c0:	e0c6      	b.n	8005450 <UART_SetConfig+0x348>
 80052c2:	2308      	movs	r3, #8
 80052c4:	77fb      	strb	r3, [r7, #31]
 80052c6:	e0c3      	b.n	8005450 <UART_SetConfig+0x348>
 80052c8:	2310      	movs	r3, #16
 80052ca:	77fb      	strb	r3, [r7, #31]
 80052cc:	e0c0      	b.n	8005450 <UART_SetConfig+0x348>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a44      	ldr	r2, [pc, #272]	; (80053e4 <UART_SetConfig+0x2dc>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d125      	bne.n	8005324 <UART_SetConfig+0x21c>
 80052d8:	4b3e      	ldr	r3, [pc, #248]	; (80053d4 <UART_SetConfig+0x2cc>)
 80052da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052e6:	d017      	beq.n	8005318 <UART_SetConfig+0x210>
 80052e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052ec:	d817      	bhi.n	800531e <UART_SetConfig+0x216>
 80052ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052f2:	d00b      	beq.n	800530c <UART_SetConfig+0x204>
 80052f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052f8:	d811      	bhi.n	800531e <UART_SetConfig+0x216>
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <UART_SetConfig+0x1fe>
 80052fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005302:	d006      	beq.n	8005312 <UART_SetConfig+0x20a>
 8005304:	e00b      	b.n	800531e <UART_SetConfig+0x216>
 8005306:	2300      	movs	r3, #0
 8005308:	77fb      	strb	r3, [r7, #31]
 800530a:	e0a1      	b.n	8005450 <UART_SetConfig+0x348>
 800530c:	2302      	movs	r3, #2
 800530e:	77fb      	strb	r3, [r7, #31]
 8005310:	e09e      	b.n	8005450 <UART_SetConfig+0x348>
 8005312:	2304      	movs	r3, #4
 8005314:	77fb      	strb	r3, [r7, #31]
 8005316:	e09b      	b.n	8005450 <UART_SetConfig+0x348>
 8005318:	2308      	movs	r3, #8
 800531a:	77fb      	strb	r3, [r7, #31]
 800531c:	e098      	b.n	8005450 <UART_SetConfig+0x348>
 800531e:	2310      	movs	r3, #16
 8005320:	77fb      	strb	r3, [r7, #31]
 8005322:	e095      	b.n	8005450 <UART_SetConfig+0x348>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a2f      	ldr	r2, [pc, #188]	; (80053e8 <UART_SetConfig+0x2e0>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d125      	bne.n	800537a <UART_SetConfig+0x272>
 800532e:	4b29      	ldr	r3, [pc, #164]	; (80053d4 <UART_SetConfig+0x2cc>)
 8005330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005334:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005338:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800533c:	d017      	beq.n	800536e <UART_SetConfig+0x266>
 800533e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005342:	d817      	bhi.n	8005374 <UART_SetConfig+0x26c>
 8005344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005348:	d00b      	beq.n	8005362 <UART_SetConfig+0x25a>
 800534a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800534e:	d811      	bhi.n	8005374 <UART_SetConfig+0x26c>
 8005350:	2b00      	cmp	r3, #0
 8005352:	d003      	beq.n	800535c <UART_SetConfig+0x254>
 8005354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005358:	d006      	beq.n	8005368 <UART_SetConfig+0x260>
 800535a:	e00b      	b.n	8005374 <UART_SetConfig+0x26c>
 800535c:	2301      	movs	r3, #1
 800535e:	77fb      	strb	r3, [r7, #31]
 8005360:	e076      	b.n	8005450 <UART_SetConfig+0x348>
 8005362:	2302      	movs	r3, #2
 8005364:	77fb      	strb	r3, [r7, #31]
 8005366:	e073      	b.n	8005450 <UART_SetConfig+0x348>
 8005368:	2304      	movs	r3, #4
 800536a:	77fb      	strb	r3, [r7, #31]
 800536c:	e070      	b.n	8005450 <UART_SetConfig+0x348>
 800536e:	2308      	movs	r3, #8
 8005370:	77fb      	strb	r3, [r7, #31]
 8005372:	e06d      	b.n	8005450 <UART_SetConfig+0x348>
 8005374:	2310      	movs	r3, #16
 8005376:	77fb      	strb	r3, [r7, #31]
 8005378:	e06a      	b.n	8005450 <UART_SetConfig+0x348>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a1b      	ldr	r2, [pc, #108]	; (80053ec <UART_SetConfig+0x2e4>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d138      	bne.n	80053f6 <UART_SetConfig+0x2ee>
 8005384:	4b13      	ldr	r3, [pc, #76]	; (80053d4 <UART_SetConfig+0x2cc>)
 8005386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800538e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005392:	d017      	beq.n	80053c4 <UART_SetConfig+0x2bc>
 8005394:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005398:	d82a      	bhi.n	80053f0 <UART_SetConfig+0x2e8>
 800539a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800539e:	d00b      	beq.n	80053b8 <UART_SetConfig+0x2b0>
 80053a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a4:	d824      	bhi.n	80053f0 <UART_SetConfig+0x2e8>
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <UART_SetConfig+0x2aa>
 80053aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ae:	d006      	beq.n	80053be <UART_SetConfig+0x2b6>
 80053b0:	e01e      	b.n	80053f0 <UART_SetConfig+0x2e8>
 80053b2:	2300      	movs	r3, #0
 80053b4:	77fb      	strb	r3, [r7, #31]
 80053b6:	e04b      	b.n	8005450 <UART_SetConfig+0x348>
 80053b8:	2302      	movs	r3, #2
 80053ba:	77fb      	strb	r3, [r7, #31]
 80053bc:	e048      	b.n	8005450 <UART_SetConfig+0x348>
 80053be:	2304      	movs	r3, #4
 80053c0:	77fb      	strb	r3, [r7, #31]
 80053c2:	e045      	b.n	8005450 <UART_SetConfig+0x348>
 80053c4:	2308      	movs	r3, #8
 80053c6:	77fb      	strb	r3, [r7, #31]
 80053c8:	e042      	b.n	8005450 <UART_SetConfig+0x348>
 80053ca:	bf00      	nop
 80053cc:	efff69f3 	.word	0xefff69f3
 80053d0:	40011000 	.word	0x40011000
 80053d4:	40023800 	.word	0x40023800
 80053d8:	40004400 	.word	0x40004400
 80053dc:	40004800 	.word	0x40004800
 80053e0:	40004c00 	.word	0x40004c00
 80053e4:	40005000 	.word	0x40005000
 80053e8:	40011400 	.word	0x40011400
 80053ec:	40007800 	.word	0x40007800
 80053f0:	2310      	movs	r3, #16
 80053f2:	77fb      	strb	r3, [r7, #31]
 80053f4:	e02c      	b.n	8005450 <UART_SetConfig+0x348>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a72      	ldr	r2, [pc, #456]	; (80055c4 <UART_SetConfig+0x4bc>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d125      	bne.n	800544c <UART_SetConfig+0x344>
 8005400:	4b71      	ldr	r3, [pc, #452]	; (80055c8 <UART_SetConfig+0x4c0>)
 8005402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005406:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800540a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800540e:	d017      	beq.n	8005440 <UART_SetConfig+0x338>
 8005410:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005414:	d817      	bhi.n	8005446 <UART_SetConfig+0x33e>
 8005416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800541a:	d00b      	beq.n	8005434 <UART_SetConfig+0x32c>
 800541c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005420:	d811      	bhi.n	8005446 <UART_SetConfig+0x33e>
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <UART_SetConfig+0x326>
 8005426:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800542a:	d006      	beq.n	800543a <UART_SetConfig+0x332>
 800542c:	e00b      	b.n	8005446 <UART_SetConfig+0x33e>
 800542e:	2300      	movs	r3, #0
 8005430:	77fb      	strb	r3, [r7, #31]
 8005432:	e00d      	b.n	8005450 <UART_SetConfig+0x348>
 8005434:	2302      	movs	r3, #2
 8005436:	77fb      	strb	r3, [r7, #31]
 8005438:	e00a      	b.n	8005450 <UART_SetConfig+0x348>
 800543a:	2304      	movs	r3, #4
 800543c:	77fb      	strb	r3, [r7, #31]
 800543e:	e007      	b.n	8005450 <UART_SetConfig+0x348>
 8005440:	2308      	movs	r3, #8
 8005442:	77fb      	strb	r3, [r7, #31]
 8005444:	e004      	b.n	8005450 <UART_SetConfig+0x348>
 8005446:	2310      	movs	r3, #16
 8005448:	77fb      	strb	r3, [r7, #31]
 800544a:	e001      	b.n	8005450 <UART_SetConfig+0x348>
 800544c:	2310      	movs	r3, #16
 800544e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	69db      	ldr	r3, [r3, #28]
 8005454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005458:	d15b      	bne.n	8005512 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800545a:	7ffb      	ldrb	r3, [r7, #31]
 800545c:	2b08      	cmp	r3, #8
 800545e:	d828      	bhi.n	80054b2 <UART_SetConfig+0x3aa>
 8005460:	a201      	add	r2, pc, #4	; (adr r2, 8005468 <UART_SetConfig+0x360>)
 8005462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005466:	bf00      	nop
 8005468:	0800548d 	.word	0x0800548d
 800546c:	08005495 	.word	0x08005495
 8005470:	0800549d 	.word	0x0800549d
 8005474:	080054b3 	.word	0x080054b3
 8005478:	080054a3 	.word	0x080054a3
 800547c:	080054b3 	.word	0x080054b3
 8005480:	080054b3 	.word	0x080054b3
 8005484:	080054b3 	.word	0x080054b3
 8005488:	080054ab 	.word	0x080054ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800548c:	f7fe f9c2 	bl	8003814 <HAL_RCC_GetPCLK1Freq>
 8005490:	61b8      	str	r0, [r7, #24]
        break;
 8005492:	e013      	b.n	80054bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005494:	f7fe f9d2 	bl	800383c <HAL_RCC_GetPCLK2Freq>
 8005498:	61b8      	str	r0, [r7, #24]
        break;
 800549a:	e00f      	b.n	80054bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800549c:	4b4b      	ldr	r3, [pc, #300]	; (80055cc <UART_SetConfig+0x4c4>)
 800549e:	61bb      	str	r3, [r7, #24]
        break;
 80054a0:	e00c      	b.n	80054bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054a2:	f7fe f8a5 	bl	80035f0 <HAL_RCC_GetSysClockFreq>
 80054a6:	61b8      	str	r0, [r7, #24]
        break;
 80054a8:	e008      	b.n	80054bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ae:	61bb      	str	r3, [r7, #24]
        break;
 80054b0:	e004      	b.n	80054bc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80054b2:	2300      	movs	r3, #0
 80054b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	77bb      	strb	r3, [r7, #30]
        break;
 80054ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d074      	beq.n	80055ac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	005a      	lsls	r2, r3, #1
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	085b      	lsrs	r3, r3, #1
 80054cc:	441a      	add	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	2b0f      	cmp	r3, #15
 80054dc:	d916      	bls.n	800550c <UART_SetConfig+0x404>
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054e4:	d212      	bcs.n	800550c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	f023 030f 	bic.w	r3, r3, #15
 80054ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	085b      	lsrs	r3, r3, #1
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	89fb      	ldrh	r3, [r7, #14]
 80054fe:	4313      	orrs	r3, r2
 8005500:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	89fa      	ldrh	r2, [r7, #14]
 8005508:	60da      	str	r2, [r3, #12]
 800550a:	e04f      	b.n	80055ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	77bb      	strb	r3, [r7, #30]
 8005510:	e04c      	b.n	80055ac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005512:	7ffb      	ldrb	r3, [r7, #31]
 8005514:	2b08      	cmp	r3, #8
 8005516:	d828      	bhi.n	800556a <UART_SetConfig+0x462>
 8005518:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <UART_SetConfig+0x418>)
 800551a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551e:	bf00      	nop
 8005520:	08005545 	.word	0x08005545
 8005524:	0800554d 	.word	0x0800554d
 8005528:	08005555 	.word	0x08005555
 800552c:	0800556b 	.word	0x0800556b
 8005530:	0800555b 	.word	0x0800555b
 8005534:	0800556b 	.word	0x0800556b
 8005538:	0800556b 	.word	0x0800556b
 800553c:	0800556b 	.word	0x0800556b
 8005540:	08005563 	.word	0x08005563
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005544:	f7fe f966 	bl	8003814 <HAL_RCC_GetPCLK1Freq>
 8005548:	61b8      	str	r0, [r7, #24]
        break;
 800554a:	e013      	b.n	8005574 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800554c:	f7fe f976 	bl	800383c <HAL_RCC_GetPCLK2Freq>
 8005550:	61b8      	str	r0, [r7, #24]
        break;
 8005552:	e00f      	b.n	8005574 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005554:	4b1d      	ldr	r3, [pc, #116]	; (80055cc <UART_SetConfig+0x4c4>)
 8005556:	61bb      	str	r3, [r7, #24]
        break;
 8005558:	e00c      	b.n	8005574 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800555a:	f7fe f849 	bl	80035f0 <HAL_RCC_GetSysClockFreq>
 800555e:	61b8      	str	r0, [r7, #24]
        break;
 8005560:	e008      	b.n	8005574 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005566:	61bb      	str	r3, [r7, #24]
        break;
 8005568:	e004      	b.n	8005574 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800556a:	2300      	movs	r3, #0
 800556c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	77bb      	strb	r3, [r7, #30]
        break;
 8005572:	bf00      	nop
    }

    if (pclk != 0U)
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d018      	beq.n	80055ac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	085a      	lsrs	r2, r3, #1
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	441a      	add	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	fbb2 f3f3 	udiv	r3, r2, r3
 800558c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	2b0f      	cmp	r3, #15
 8005592:	d909      	bls.n	80055a8 <UART_SetConfig+0x4a0>
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800559a:	d205      	bcs.n	80055a8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	b29a      	uxth	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	60da      	str	r2, [r3, #12]
 80055a6:	e001      	b.n	80055ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80055b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3720      	adds	r7, #32
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	40007c00 	.word	0x40007c00
 80055c8:	40023800 	.word	0x40023800
 80055cc:	00f42400 	.word	0x00f42400

080055d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00a      	beq.n	80055fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00a      	beq.n	800563e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	f003 0308 	and.w	r3, r3, #8
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	f003 0310 	and.w	r3, r3, #16
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00a      	beq.n	8005682 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d01a      	beq.n	80056e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056ce:	d10a      	bne.n	80056e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00a      	beq.n	8005708 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	605a      	str	r2, [r3, #4]
  }
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af02      	add	r7, sp, #8
 800571a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005724:	f7fc f93c 	bl	80019a0 <HAL_GetTick>
 8005728:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0308 	and.w	r3, r3, #8
 8005734:	2b08      	cmp	r3, #8
 8005736:	d10e      	bne.n	8005756 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005738:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f831 	bl	80057ae <UART_WaitOnFlagUntilTimeout>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e027      	b.n	80057a6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0304 	and.w	r3, r3, #4
 8005760:	2b04      	cmp	r3, #4
 8005762:	d10e      	bne.n	8005782 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005764:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f81b 	bl	80057ae <UART_WaitOnFlagUntilTimeout>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e011      	b.n	80057a6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2220      	movs	r2, #32
 8005786:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2220      	movs	r2, #32
 800578c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b09c      	sub	sp, #112	; 0x70
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	60f8      	str	r0, [r7, #12]
 80057b6:	60b9      	str	r1, [r7, #8]
 80057b8:	603b      	str	r3, [r7, #0]
 80057ba:	4613      	mov	r3, r2
 80057bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057be:	e0a7      	b.n	8005910 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c6:	f000 80a3 	beq.w	8005910 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ca:	f7fc f8e9 	bl	80019a0 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d302      	bcc.n	80057e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80057da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d13f      	bne.n	8005860 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057e8:	e853 3f00 	ldrex	r3, [r3]
 80057ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80057ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057f4:	667b      	str	r3, [r7, #100]	; 0x64
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	461a      	mov	r2, r3
 80057fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005800:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005802:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005804:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005806:	e841 2300 	strex	r3, r2, [r1]
 800580a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800580c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1e6      	bne.n	80057e0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3308      	adds	r3, #8
 8005818:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005824:	f023 0301 	bic.w	r3, r3, #1
 8005828:	663b      	str	r3, [r7, #96]	; 0x60
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3308      	adds	r3, #8
 8005830:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005832:	64ba      	str	r2, [r7, #72]	; 0x48
 8005834:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005836:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005838:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e5      	bne.n	8005812 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2220      	movs	r2, #32
 800584a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2220      	movs	r2, #32
 8005850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e068      	b.n	8005932 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0304 	and.w	r3, r3, #4
 800586a:	2b00      	cmp	r3, #0
 800586c:	d050      	beq.n	8005910 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	69db      	ldr	r3, [r3, #28]
 8005874:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005878:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800587c:	d148      	bne.n	8005910 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005886:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005890:	e853 3f00 	ldrex	r3, [r3]
 8005894:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800589c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	461a      	mov	r2, r3
 80058a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a6:	637b      	str	r3, [r7, #52]	; 0x34
 80058a8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058ae:	e841 2300 	strex	r3, r2, [r1]
 80058b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1e6      	bne.n	8005888 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	3308      	adds	r3, #8
 80058c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	e853 3f00 	ldrex	r3, [r3]
 80058c8:	613b      	str	r3, [r7, #16]
   return(result);
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	f023 0301 	bic.w	r3, r3, #1
 80058d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3308      	adds	r3, #8
 80058d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80058da:	623a      	str	r2, [r7, #32]
 80058dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058de:	69f9      	ldr	r1, [r7, #28]
 80058e0:	6a3a      	ldr	r2, [r7, #32]
 80058e2:	e841 2300 	strex	r3, r2, [r1]
 80058e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1e5      	bne.n	80058ba <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2220      	movs	r2, #32
 80058f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2220      	movs	r2, #32
 80058f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2220      	movs	r2, #32
 8005900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e010      	b.n	8005932 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	69da      	ldr	r2, [r3, #28]
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	4013      	ands	r3, r2
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	429a      	cmp	r2, r3
 800591e:	bf0c      	ite	eq
 8005920:	2301      	moveq	r3, #1
 8005922:	2300      	movne	r3, #0
 8005924:	b2db      	uxtb	r3, r3
 8005926:	461a      	mov	r2, r3
 8005928:	79fb      	ldrb	r3, [r7, #7]
 800592a:	429a      	cmp	r2, r3
 800592c:	f43f af48 	beq.w	80057c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3770      	adds	r7, #112	; 0x70
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
	...

0800593c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800593c:	b084      	sub	sp, #16
 800593e:	b580      	push	{r7, lr}
 8005940:	b084      	sub	sp, #16
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	f107 001c 	add.w	r0, r7, #28
 800594a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005950:	2b01      	cmp	r3, #1
 8005952:	d120      	bne.n	8005996 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005958:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	4b20      	ldr	r3, [pc, #128]	; (80059e8 <USB_CoreInit+0xac>)
 8005966:	4013      	ands	r3, r2
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800597a:	2b01      	cmp	r3, #1
 800597c:	d105      	bne.n	800598a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fa96 	bl	8005ebc <USB_CoreReset>
 8005990:	4603      	mov	r3, r0
 8005992:	73fb      	strb	r3, [r7, #15]
 8005994:	e010      	b.n	80059b8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fa8a 	bl	8005ebc <USB_CoreReset>
 80059a8:	4603      	mov	r3, r0
 80059aa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80059b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d10b      	bne.n	80059d6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f043 0206 	orr.w	r2, r3, #6
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f043 0220 	orr.w	r2, r3, #32
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059e2:	b004      	add	sp, #16
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	ffbdffbf 	.word	0xffbdffbf

080059ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f023 0201 	bic.w	r2, r3, #1
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	460b      	mov	r3, r1
 8005a18:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a2a:	78fb      	ldrb	r3, [r7, #3]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d115      	bne.n	8005a5c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a3c:	2001      	movs	r0, #1
 8005a3e:	f7fb ffbb 	bl	80019b8 <HAL_Delay>
      ms++;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	3301      	adds	r3, #1
 8005a46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 fa29 	bl	8005ea0 <USB_GetMode>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d01e      	beq.n	8005a92 <USB_SetCurrentMode+0x84>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2b31      	cmp	r3, #49	; 0x31
 8005a58:	d9f0      	bls.n	8005a3c <USB_SetCurrentMode+0x2e>
 8005a5a:	e01a      	b.n	8005a92 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a5c:	78fb      	ldrb	r3, [r7, #3]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d115      	bne.n	8005a8e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a6e:	2001      	movs	r0, #1
 8005a70:	f7fb ffa2 	bl	80019b8 <HAL_Delay>
      ms++;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	3301      	adds	r3, #1
 8005a78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fa10 	bl	8005ea0 <USB_GetMode>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d005      	beq.n	8005a92 <USB_SetCurrentMode+0x84>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b31      	cmp	r3, #49	; 0x31
 8005a8a:	d9f0      	bls.n	8005a6e <USB_SetCurrentMode+0x60>
 8005a8c:	e001      	b.n	8005a92 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e005      	b.n	8005a9e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2b32      	cmp	r3, #50	; 0x32
 8005a96:	d101      	bne.n	8005a9c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e000      	b.n	8005a9e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
	...

08005aa8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005aa8:	b084      	sub	sp, #16
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b086      	sub	sp, #24
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005ab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	613b      	str	r3, [r7, #16]
 8005ac6:	e009      	b.n	8005adc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	3340      	adds	r3, #64	; 0x40
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	613b      	str	r3, [r7, #16]
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	2b0e      	cmp	r3, #14
 8005ae0:	d9f2      	bls.n	8005ac8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d11c      	bne.n	8005b22 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005af6:	f043 0302 	orr.w	r3, r3, #2
 8005afa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	e005      	b.n	8005b2e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b34:	461a      	mov	r2, r3
 8005b36:	2300      	movs	r3, #0
 8005b38:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b40:	4619      	mov	r1, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b48:	461a      	mov	r2, r3
 8005b4a:	680b      	ldr	r3, [r1, #0]
 8005b4c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d10c      	bne.n	8005b6e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d104      	bne.n	8005b64 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f965 	bl	8005e2c <USB_SetDevSpeed>
 8005b62:	e008      	b.n	8005b76 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b64:	2101      	movs	r1, #1
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f960 	bl	8005e2c <USB_SetDevSpeed>
 8005b6c:	e003      	b.n	8005b76 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b6e:	2103      	movs	r1, #3
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f95b 	bl	8005e2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b76:	2110      	movs	r1, #16
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 f8f3 	bl	8005d64 <USB_FlushTxFifo>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d001      	beq.n	8005b88 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f91f 	bl	8005dcc <USB_FlushRxFifo>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005baa:	461a      	mov	r2, r3
 8005bac:	2300      	movs	r3, #0
 8005bae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	2300      	movs	r3, #0
 8005bba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	613b      	str	r3, [r7, #16]
 8005bc0:	e043      	b.n	8005c4a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bd8:	d118      	bne.n	8005c0c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10a      	bne.n	8005bf6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bec:	461a      	mov	r2, r3
 8005bee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bf2:	6013      	str	r3, [r2, #0]
 8005bf4:	e013      	b.n	8005c1e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c02:	461a      	mov	r2, r3
 8005c04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c08:	6013      	str	r3, [r2, #0]
 8005c0a:	e008      	b.n	8005c1e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c18:	461a      	mov	r2, r3
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	015a      	lsls	r2, r3, #5
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	4413      	add	r3, r2
 8005c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	3301      	adds	r3, #1
 8005c48:	613b      	str	r3, [r7, #16]
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d3b7      	bcc.n	8005bc2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c52:	2300      	movs	r3, #0
 8005c54:	613b      	str	r3, [r7, #16]
 8005c56:	e043      	b.n	8005ce0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c6e:	d118      	bne.n	8005ca2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10a      	bne.n	8005c8c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c82:	461a      	mov	r2, r3
 8005c84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c88:	6013      	str	r3, [r2, #0]
 8005c8a:	e013      	b.n	8005cb4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c98:	461a      	mov	r2, r3
 8005c9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c9e:	6013      	str	r3, [r2, #0]
 8005ca0:	e008      	b.n	8005cb4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cae:	461a      	mov	r2, r3
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cd8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	613b      	str	r3, [r7, #16]
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d3b7      	bcc.n	8005c58 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cfa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005d08:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d105      	bne.n	8005d1c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	f043 0210 	orr.w	r2, r3, #16
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	699a      	ldr	r2, [r3, #24]
 8005d20:	4b0e      	ldr	r3, [pc, #56]	; (8005d5c <USB_DevInit+0x2b4>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d005      	beq.n	8005d3a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	f043 0208 	orr.w	r2, r3, #8
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d105      	bne.n	8005d4c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	699a      	ldr	r2, [r3, #24]
 8005d44:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <USB_DevInit+0x2b8>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3718      	adds	r7, #24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d58:	b004      	add	sp, #16
 8005d5a:	4770      	bx	lr
 8005d5c:	803c3800 	.word	0x803c3800
 8005d60:	40000004 	.word	0x40000004

08005d64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	3301      	adds	r3, #1
 8005d76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4a13      	ldr	r2, [pc, #76]	; (8005dc8 <USB_FlushTxFifo+0x64>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d901      	bls.n	8005d84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e01b      	b.n	8005dbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	daf2      	bge.n	8005d72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	019b      	lsls	r3, r3, #6
 8005d94:	f043 0220 	orr.w	r2, r3, #32
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	4a08      	ldr	r2, [pc, #32]	; (8005dc8 <USB_FlushTxFifo+0x64>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d901      	bls.n	8005dae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e006      	b.n	8005dbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	f003 0320 	and.w	r3, r3, #32
 8005db6:	2b20      	cmp	r3, #32
 8005db8:	d0f0      	beq.n	8005d9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	00030d40 	.word	0x00030d40

08005dcc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	4a11      	ldr	r2, [pc, #68]	; (8005e28 <USB_FlushRxFifo+0x5c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d901      	bls.n	8005dea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e018      	b.n	8005e1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	daf2      	bge.n	8005dd8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2210      	movs	r2, #16
 8005dfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	4a08      	ldr	r2, [pc, #32]	; (8005e28 <USB_FlushRxFifo+0x5c>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d901      	bls.n	8005e0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e006      	b.n	8005e1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	f003 0310 	and.w	r3, r3, #16
 8005e16:	2b10      	cmp	r3, #16
 8005e18:	d0f0      	beq.n	8005dfc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	00030d40 	.word	0x00030d40

08005e2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	460b      	mov	r3, r1
 8005e36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	78fb      	ldrb	r3, [r7, #3]
 8005e46:	68f9      	ldr	r1, [r7, #12]
 8005e48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b085      	sub	sp, #20
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e78:	f023 0303 	bic.w	r3, r3, #3
 8005e7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e8c:	f043 0302 	orr.w	r3, r3, #2
 8005e90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	f003 0301 	and.w	r3, r3, #1
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	4a13      	ldr	r2, [pc, #76]	; (8005f20 <USB_CoreReset+0x64>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d901      	bls.n	8005eda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e01b      	b.n	8005f12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	daf2      	bge.n	8005ec8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	f043 0201 	orr.w	r2, r3, #1
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4a09      	ldr	r2, [pc, #36]	; (8005f20 <USB_CoreReset+0x64>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d901      	bls.n	8005f04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e006      	b.n	8005f12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d0f0      	beq.n	8005ef2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	00030d40 	.word	0x00030d40

08005f24 <__libc_init_array>:
 8005f24:	b570      	push	{r4, r5, r6, lr}
 8005f26:	4d0d      	ldr	r5, [pc, #52]	; (8005f5c <__libc_init_array+0x38>)
 8005f28:	4c0d      	ldr	r4, [pc, #52]	; (8005f60 <__libc_init_array+0x3c>)
 8005f2a:	1b64      	subs	r4, r4, r5
 8005f2c:	10a4      	asrs	r4, r4, #2
 8005f2e:	2600      	movs	r6, #0
 8005f30:	42a6      	cmp	r6, r4
 8005f32:	d109      	bne.n	8005f48 <__libc_init_array+0x24>
 8005f34:	4d0b      	ldr	r5, [pc, #44]	; (8005f64 <__libc_init_array+0x40>)
 8005f36:	4c0c      	ldr	r4, [pc, #48]	; (8005f68 <__libc_init_array+0x44>)
 8005f38:	f000 f820 	bl	8005f7c <_init>
 8005f3c:	1b64      	subs	r4, r4, r5
 8005f3e:	10a4      	asrs	r4, r4, #2
 8005f40:	2600      	movs	r6, #0
 8005f42:	42a6      	cmp	r6, r4
 8005f44:	d105      	bne.n	8005f52 <__libc_init_array+0x2e>
 8005f46:	bd70      	pop	{r4, r5, r6, pc}
 8005f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f4c:	4798      	blx	r3
 8005f4e:	3601      	adds	r6, #1
 8005f50:	e7ee      	b.n	8005f30 <__libc_init_array+0xc>
 8005f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f56:	4798      	blx	r3
 8005f58:	3601      	adds	r6, #1
 8005f5a:	e7f2      	b.n	8005f42 <__libc_init_array+0x1e>
 8005f5c:	08005fb4 	.word	0x08005fb4
 8005f60:	08005fb4 	.word	0x08005fb4
 8005f64:	08005fb4 	.word	0x08005fb4
 8005f68:	08005fb8 	.word	0x08005fb8

08005f6c <memset>:
 8005f6c:	4402      	add	r2, r0
 8005f6e:	4603      	mov	r3, r0
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d100      	bne.n	8005f76 <memset+0xa>
 8005f74:	4770      	bx	lr
 8005f76:	f803 1b01 	strb.w	r1, [r3], #1
 8005f7a:	e7f9      	b.n	8005f70 <memset+0x4>

08005f7c <_init>:
 8005f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7e:	bf00      	nop
 8005f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f82:	bc08      	pop	{r3}
 8005f84:	469e      	mov	lr, r3
 8005f86:	4770      	bx	lr

08005f88 <_fini>:
 8005f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8a:	bf00      	nop
 8005f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f8e:	bc08      	pop	{r3}
 8005f90:	469e      	mov	lr, r3
 8005f92:	4770      	bx	lr
